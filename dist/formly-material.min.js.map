{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/formly-material.min.js","webpack:///webpack/bootstrap 161ee6383ff177c1dfc7","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/index.js","webpack:///external \"angular\"","webpack:///./~/angular-messages/index.js","webpack:///./~/angular-messages/angular-messages.js","webpack:///./~/angular-material/index.js","webpack:///./~/angular-animate/index.js","webpack:///./~/angular-animate/angular-animate.js","webpack:///./~/angular-aria/index.js","webpack:///./~/angular-aria/angular-aria.js","webpack:///./~/angular-material/angular-material.js","webpack:///./~/angular-formly/dist/formly.js","webpack:///./~/api-check/dist/api-check.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/runs/index.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/runs/md-theme-manipulator.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/index.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/input-container/input-container.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/label/label.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/messages/messages.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/index.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/checkbox/checkbox.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/chips/chips.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/datepicker/datepicker.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/input/input.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/radio/radio.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/select/select.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/slider/slider.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/switch/switch.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/textarea/textarea.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_angular","_angular2","_angularMessages","_angularMaterial","_angularFormly","_runs","_runs2","_wrappers","_wrappers2","_types","_types2","ngModuleName","config","formlyConfigProvider","configs","forEach","i","length","window","angular","undefined","ngMessageDirectiveFactory","restrict","contains","collection","key","isArray","indexOf","hasOwnProperty","$animate","transclude","terminal","link","scope","element","attrs","ngMessagesCtrl","$transclude","records","commentNode","staticExp","ngMessage","when","dynamicExp","ngMessageExp","whenExp","assignRecords","items","split","reRender","$eval","$watchCollection","currentElement","messageCtrl","register","test","name","attach","elm","enter","$$attachId","getAttachId","on","deregister","detach","leave","isString","jqLite","directive","isAttrTruthy","attr","truthy","val","ACTIVE_CLASS","INACTIVE_CLASS","controller","$element","$scope","$attrs","findPreviousMessage","parent","comment","prevNode","parentLookup","prevKey","$$ngMessageNode","messages","childNodes","push","previousSibling","parentNode","insertMessageNode","messageNode","ctrl","head","match","next","removeMessageNode","latestKey","nextAttachId","renderLater","cachedCollection","render","multiple","ngMessagesMultiple","unmatchedMessages","matchedKeys","messageItem","messageFound","totalMessages","message","messageUsed","setClass","ngMessages","$evalAsync","nextKey","toString","$templateRequest","$document","$compile","src","ngMessagesInclude","then","html","contents","after","anchor","createComment","remove","assertArg","arg","reason","ngMinErr","mergeClasses","a","b","join","packageStyles","options","styles","to","from","pendClasses","classes","fix","isPrefix","className","klass","removeFromArray","arr","index","splice","stripCommentsFromElement","nodeType","ELEMENT_NODE","extractElementNode","$$addClass","$$jqLite","addClass","$$removeClass","removeClass","applyAnimationClassesFactory","prepareAnimationOptions","$$prepared","domOperation","noop","$$domOperationFired","applyAnimationStyles","applyAnimationFromStyles","applyAnimationToStyles","css","mergeAnimationOptions","target","newOptions","toAdd","toRemove","resolveElementClasses","preparationClasses","concatWithSpace","realDomOperation","extend","existing","splitClassesToLookup","ADD_CLASS","REMOVE_CLASS","flags","prop","allow","getDomNode","applyGeneratedPreparationClasses","event","EVENT_CLASS_PREFIX","ADD_CLASS_SUFFIX","REMOVE_CLASS_SUFFIX","clearGeneratedClasses","activeClasses","blockTransitions","node","duration","applyInlineStyle","TRANSITION_DELAY_PROP","blockKeyframeAnimations","applyBlock","ANIMATION_PROP","ANIMATION_PLAYSTATE_KEY","styleTuple","style","getCssKeyframeDurationStyle","ANIMATION_DURATION_PROP","getCssDelayStyle","delay","isKeyframeAnimation","ANIMATION_DELAY_PROP","computeCssStyles","$window","properties","create","detectedStyles","getComputedStyle","formalStyleName","actualStyleName","charAt","parseMaxTime","str","maxValue","values","substring","parseFloat","Math","max","truthyTimingValue","getCssTransitionDurationStyle","applyOnlyDuration","TRANSITION_PROP","DURATION_KEY","createLocalCacheLookup","cache","flush","count","entry","total","get","put","registerRestorableStyles","backup","isDefined","getPropertyValue","TRANSITIONEND_EVENT","ANIMATIONEND_EVENT","isObject","isUndefined","isFunction","isElement","ACTIVE_CLASS_SUFFIX","NG_ANIMATE_CLASSNAME","NG_ANIMATE_CHILDREN_DATA","CSS_PREFIX","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","PROPERTY_KEY","DELAY_KEY","TIMING_KEY","ANIMATION_ITERATION_COUNT_KEY","SAFE_FAST_FORWARD_DURATION_VALUE","TRANSITION_DURATION_PROP","$$rAFSchedulerFactory","$$rAF","scheduler","tasks","queue","concat","nextTick","shift","cancelFn","waitUntilQuiet","fn","$$AnimateChildrenDirective","ngAnimateChildren","data","$observe","ANIMATE_TIMER_KEY","ONE_SECOND","ELAPSED_TIME_MAX_DECIMAL_PLACES","CLOSING_TIME_BUFFER","DETECT_CSS_PROPERTIES","transitionDuration","transitionDelay","transitionProperty","animationDuration","animationDelay","animationIterationCount","DETECT_STAGGER_CSS_PROPERTIES","$AnimateCssProvider","$animateProvider","gcsLookup","gcsStaggerLookup","$get","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","gcsHashFn","extraClasses","KEY","parentID","parentCounter","getAttribute","computeCachedCssStyles","cacheKey","timings","computeCachedCssStaggerStyles","stagger","staggerClassName","callback","rafWaitQueue","pageWidth","computeTimings","aD","tD","maxDelay","maxDuration","applyAnimationClasses","endFn","close","rejected","animationClosed","animationCompleted","animationPaused","$$skipPreparationClasses","temporaryStyles","keys","restoreStyles","setProperty","removeProperty","onDone","runner","complete","applyBlocking","blockTransition","blockKeyframeAnimation","closeAndReturnNoopAnimator","end","cancel","$$willAnimate","start","triggerAnimationStart","recalculateTimingStyles","fullClassName","relativeDelay","hasTransitions","hasAnimations","applyAnimationDelay","delayStyle","maxDelayTime","maxDurationTime","easing","easeProp","easeVal","events","startTime","Date","now","timerTime","endTime","animationsData","setupFallbackTimer","currentTimerData","expectedEndTime","timer","onAnimationExpired","onAnimationProgress","cleanupStyles","removeData","stopPropagation","ev","originalEvent","timeStamp","$manualTimeStamp","elapsedTime","toFixed","playPause","playAnimation","maxStagger","itemIndex","floor","runnerHost","resume","pause","enabled","animations","transitions","method","isStructural","structural","structuralClassName","addRemoveClassName","applyClassesEarly","trim","hasToStyles","containsKeyframeAnimation","keyframeStyle","staggerVal","transitionStyle","durationStyle","staggerIndex","isFirst","skipBlocking","hasTransitionAll","applyTransitionDuration","applyAnimationDuration","applyTransitionDelay","$$AnimateCssDriverProvider","$$animationProvider","isDocumentFragment","drivers","NG_ANIMATE_SHIM_CLASS_NAME","NG_ANIMATE_ANCHOR_CLASS_NAME","NG_OUT_ANCHOR_CLASS_NAME","NG_IN_ANCHOR_CLASS_NAME","$animateCss","$rootScope","$rootElement","filterCssClasses","replace","getUniqueValues","filter","prepareAnchoredAnimation","outAnchor","inAnchor","calculateAnchorStyles","coords","getBoundingClientRect","bodyNode","scrollTop","scrollLeft","prepareOutAnimation","animator","clone","getClassVal","prepareInAnimation","endingClasses","startingClasses","cloneNode","rootBodyElement","append","animatorIn","animatorOut","startingAnimator","currentAnimation","done","prepareFromToAnchorAnimation","anchors","fromAnimation","prepareRegularAnimation","toAnimation","anchorAnimations","outElement","inElement","animationRunners","animation","all","status","animationDetails","body","rootNode","$$AnimateJsProvider","$injector","lookupAnimations","matches","flagMap","animationFactory","$$registeredAnimations","applyOptions","executeAnimationFn","args","classesToAdd","classesToRemove","apply","groupEventedAnimations","fnName","operations","ani","endProgressCb","resolved","onAnimationComplete","result","cancelled","packageAnimations","runners","animateFn","reject","arguments","before","afterFn","beforeFn","toUpperCase","substr","onComplete","success","endAnimations","closeActiveAnimations","chain","$$AnimateJsDriverProvider","$$animateJs","prepareAnimation","endFnFactory","NG_ANIMATE_ATTR_NAME","NG_ANIMATE_PIN_DATA","$$AnimateQueueProvider","isAllowed","ruleType","previousAnimation","rules","some","hasAnimationClasses","and","PRE_DIGEST_STATE","RUNNING_STATE","skip","newAnimation","state","nO","cO","$$HashMap","$$animation","postDigestTaskFactory","postDigestCalled","$$postDigest","normalizeAnimationOptions","findCallbacks","targetNode","targetParentNode","entries","callbackRegistry","queueAnimation","notifyProgress","phase","runInNextPostDigestOrNow","callbacks","progress","isAnimatableClassName","skipAnimations","animationsEnabled","disabledElementsLookup","existingAnimation","activeAnimationsLookup","hasExistingAnimation","areAnimationsAllowed","closeChildAnimations","skipAnimationFlag","cancelAnimationFlag","joinAnimationFlag","isValidAnimation","clearElementAnimationState","counter","markElementAnimationState","animationCancelled","parentElement","realRunner","setHost","children","querySelectorAll","child","parseInt","removeAttribute","isMatchingElement","nodeOrElmA","nodeOrElmB","animateChildren","bodyElement","bodyElementDetected","nodeName","rootElementDetected","parentAnimationDetected","parentHost","details","allowAnimation","setAttribute","oldValue","newValue","deregisterWatch","$watch","totalPendingRequests","isEmpty","classNameFilter","container","off","filterFromRegistry","list","matchContainer","matchCallback","containerNode","isMatch","pin","bool","argCount","hasElement","recordExists","$$AnimateAsyncRunFactory","waitForTick","waitQueue","passed","$$AnimateRunnerFactory","$q","$$animateAsyncRun","AnimateRunner","host","_doneCallbacks","_runInAnimationFrame","_state","INITIAL_STATE","DONE_PENDING_STATE","DONE_COMPLETE_STATE","response","onProgress","prototype","getPromise","promise","self","resolve","resolveHandler","rejectHandler","catch","handler","finally","_resolve","$$AnimationProvider","setRunner","RUNNER_STORAGE_KEY","removeRunner","getRunner","NG_ANIMATE_REF_ATTR","sortAnimations","processNode","processed","elementNode","domNode","lookup","parentEntry","tree","flatten","remainingLevelEntries","nextLevelEntries","row","childEntry","animationQueue","getAnchorNodes","SELECTOR","hasAttribute","groupAnimations","preparedAnimations","refLookup","enterOrMove","anchorNodes","direction","animationID","usedIndicesLookup","anchorGroups","indexKey","lookupKey","group","beforeStart","cssClassesIntersection","out","in","aa","j","invokeFirstDriver","driverName","has","driver","tempClasses","updateAnimationRunners","newRunner","update","handleDestroyedElement","groupedAnimations","toBeSortedAnimations","animationEntry","startAnimationFn","closeFn","targetElement","operation","animationRunner","provider","$AriaProvider","watchExpr","attrName","ariaAttr","nodeBlackList","negate","elem","ariaCamelName","$normalize","isNodeOneOf","boolVal","ariaHidden","ariaChecked","ariaDisabled","ariaRequired","ariaInvalid","ariaMultiline","ariaValue","tabindex","bindKeypress","bindRoleForClick","newConfig","$$watchExpr","ngAriaModule","nodeTypeArray","$aria","shouldAttachAttr","normalizedAttr","shouldAttachRole","role","getShape","type","priority","compile","shape","pre","ngModel","$isEmpty","post","ngAriaWatchModelValue","$modelValue","getRadioReaction","needsTabIndex","newVal","$viewValue","ngAriaCheckboxReaction","needsAriaValuemin","needsAriaValuemax","needsAriaValuenow","$validators","required","$error","$invalid","$parse","ngClick","ngKeypress","$event","keyCode","which","$apply","MdCoreConfigure","$provide","$mdThemingProvider","decorator","rAFDecorator","theme","primaryPalette","accentPalette","warnPalette","backgroundPalette","MdTemplateDirective","template","assignSafeHTML","$delegate","throttle","cb","queuedArgs","alreadyQueued","queueCb","context","Array","slice","$inject","MdConstantFactory","vendorProperty","webkit","vendorPrefix","KEY_CODE","ENTER","ESCAPE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","TAB","BACKSPACE","DELETE","CSS","TRANSITIONEND","ANIMATIONEND","TRANSFORM","TRANSFORM_ORIGIN","TRANSITION","TRANSITION_DURATION","ANIMATION_PLAY_STATE","ANIMATION_DURATION","ANIMATION_NAME","ANIMATION_TIMING","ANIMATION_DIRECTION","MEDIA","sm","gt-sm","md","gt-md","lg","gt-lg","MEDIA_PRIORITY","MdIterator","reloop","getItems","_items","inRange","hasNext","item","hasPrevious","itemAt","findBy","add","isNumber","first","last","findSubsequentItem","backwards","validate","limit","trueFn","curIndex","nextIndex","foundItem","bind","previous","iterator","mdMediaFactory","$mdConstant","$mdMedia","query","validated","queries","results","mqls","matchMedia","addListener","onQueryChange","media","getQuery","getResponsiveAttribute","mediaName","normalizedName","getNormalizedName","watchResponsiveAttributes","attrNames","watchFn","unwatchFns","normalizeCache","UtilFactory","$$mdAnimate","$interpolate","$log","getNode","el","startSymbol","endSymbol","usesStandardSymbols","$mdUtil","dom","performance","getTime","clientRect","offsetParent","isOffsetRect","document","nodeRect","offsetRect","left","top","width","height","nodesToArray","nodes","abs","findFocusTarget","containerEl","attributeVal","scanForFocusable","selector","elFound","EXP_ATTR","exec","attribute","it","focusExpression","isFocusable","validateScope","elToFocus","AUTO_FOCUS","disableScrollAround","disableElementScroll","disableKeyNav","e","preventDefault","zIndex","scrollMask","appendChild","removeChild","_enableScrolling","disableBodyScroll","htmlNode","restoreHtmlStyle","restoreBodyStyle","scrollOffset","clientWidth","scrollHeight","clientHeight","applyStyles","position","overflowY","overflow","_count","restoreBody","restoreElement","enableScrolling","floatingScrollbars","cached","tempNode","offsetWidth","forceFocus","addEventListener","focusOnClick","$focus","focus","stopImmediatePropagation","removeEventListener","newEvent","createEvent","initMouseEvent","$material","dispatchEvent","createBackdrop","supplant","pattern","r","s","fakeNgModel","$fake","$setTouched","$setViewValue","$render","$viewChangeListeners","$parsers","$formatters","debounce","func","wait","invokeApply","recent","time","valueOnUse","getter","params","nextUid","nextUniqueId","hasScope","warn","disconnectScope","$root","$$destroyed","$parent","$$disconnected","$$childHead","$$nextSibling","$$childTail","$$prevSibling","reconnectScope","getClosest","tagName","onlyParent","elementContains","hasContains","Node","findFn","compareDocumentPosition","extractElementByName","scanDeep","warnNotFound","scanTree","scanLevel","scanChildren","len","toLowerCase","found","numChild","outerHTML","initOptionalProperties","defaults","$$isolateBindings","binding","optional","attrIsDefined","digest","processQueue","timeout","$digest","processTemplate","blur","AriaService","expect","defaultValue","childHasAttribute","expectAsync","defaultValueGetter","expectWithText","getText","text","isHidden","currentStyle","display","hasChildren","hasChildNodes","hasAttr","service","mdCompilerService","$http","$controller","$templateCache","templateUrl","controllerAs","locals","transformTemplate","identity","bindToController","invoke","$template","compiledData","linkFn","invokeCtrl","instance","MdGestureProvider","MdGesture","$$MdGestureHandler","handlerName","HANDLERS","Error","registerElement","addHandler","definition","userAgent","navigator","vendor","opera","isIos","isAndroid","hasJQuery","jQuery","isHijackingClicks","forceSkipClickHijack","maxDistance","onEnd","pointer","distance","onStart","onCancel","registeredParent","pos","x","y","onMove","dx","dy","sqrt","minDistance","horizontal","cancelMultiplier","shouldStartDrag","shouldCancel","dragPointer","dispatchDragMove","distanceX","distanceY","makeStartPointer","updatePointerState","isRunning","minVelocity","velocityX","eventType","directionX","GestureHandler","MdGestureHandler","jQueryDispatchEvent","srcEvent","eventPointer","eventObj","Event","clientX","clientY","screenX","screenY","pageX","pageY","ctrlKey","altKey","shiftKey","metaKey","trigger","nativeDispatchEvent","detail","button","relatedTarget","initCustomEvent","parentTarget","getNearestParent","parentTargetOptions","$mdGesture","move","current","onDestroy","attachToDocument","runHandlers","handlerEvent","gestureStart","lastPointer","typesMatch","gestureMove","gestureEnd","isInitialized","isKeyClick","isIonicTap","isInputEventFromLabelClick","lastLabelClickPos","START_EVENTS","MOVE_EVENTS","END_EVENTS","point","getEventPoint","startPointer","startX","startY","directionY","velocityY","touches","changedTouches","run","skipClickHijack","InterimElementProvider","createInterimElementProvider","interimFactoryName","setDefaults","providerConfig","optionsFactory","methods","EXPOSED_METHODS","addMethod","customMethods","addPreset","presets","argOption","$$interimElement","showInterimElement","opts","_options","interimElementService","show","defaultOptions","destroyInterimElement","destroy","invokeFactory","defaultVal","publicService","defaultMethods","hide","Preset","presetDefaults","presetMethods","$type","methodName","InterimElementFactory","$$q","$mdCompiler","$mdTheming","interimElement","InterimElement","hideExisting","skipHide","stack","deferred","closeElement","interim","closeAll","reverse","map","closeTo","pop","SHOW_CANCELLED","$destroy","createAndTransitionIn","rejectAll","fault","compileElement","linkElement","showAction","showElement","transitionOutAndRemove","isCancelled","resolveAll","cancelAutoHide","triggerHandler","hideElement","configureScopeAndTransitions","preserveScope","$new","isolateScope","onShow","onRemove","compiled","skipCompile","compileData","findParent","themable","querySelector","startAutoHide","autoHideTimer","hideDelay","notifyShowing","onShowing","notifyComplete","announceRemoving","onRemoving","action","defer","ComponentRegistry","isValidID","handle","instances","pendings","notFoundError","error","getInstances","$$mdHandle","resolveWhen","dfd","disableLayoutDirective","attributeWithObserve","translateWithValueToCssClass","updateFn","updateClassWithValue","unwatch","getNormalizedAttrValue","$on","removeAttributes","removeAttr","_$mdUtil_","_$interpolate_","validateAttributeValue","buildUpdateFn","attributeWithoutValue","translateToCssClass","lastClass","WHITESPACE","warnAttrNotSupported","parts","origValue","needsInterpolation","SUFFIXES","findIn","LAYOUT_OPTIONS","FLEX_OPTIONS","isNaN","ALIGNMENT_OPTIONS","fallback","replaceWith","breakpoints","MdButtonInkRipple","$mdInkRipple","optionsForElement","hasClass","isMenuItem","fitRipple","center","dimBackground","MdCheckboxInkRipple","MdListInkRipple","outline","rippleSize","InkRippleDirective","$mdButtonInkRipple","$mdCheckboxInkRipple","InkRippleService","instantiate","InkRippleCtrl","rippleOptions","mousedown","ripples","lastRipple","createContainer","getColor","color","createRipple","setColor","bindEvents","attrNoDirective","DURATION","getElementColor","colorElement","_parseColor","multiplier","hexToRGBA","hex","dig","red","green","blue","rgbToRGBA","handleMousedown","handleMouseup","layerX","layerY","clearRipples","fadeInComplete","clearTimeout","isRippleAllowed","rgbaToRGB","getSize","fit","pow","ripple","size","background","backgroundColor","borderColor","removeRipple","fadeOutComplete","MdTabInkRipple","constant","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","contrastDefaultColor","contrastDarkColors","contrastStrongLightColors","pink","purple","deep-purple","indigo","light-blue","contrastLightColors","cyan","teal","light-green","lime","yellow","amber","orange","deep-orange","brown","grey","1000","blue-grey","ThemingProvider","$mdColorPalette","definePalette","PALETTES","checkPaletteValid","themingProvider","extendPalette","missingColors","VALID_HUE_VALUES","field","registerTheme","inheritFrom","THEMES","parentTheme","Theme","colors","colorType","hues","setDark","isDark","foregroundPalette","LIGHT_FOREGROUND","DARK_FOREGROUND","foregroundShadow","DARK_SHADOW","LIGHT_SHADOW","newDefaultHues","DARK_DEFAULT_HUES","LIGHT_DEFAULT_HUES","oldDefaultHues","newDefaults","oldDefaults","hueName","dark","THEME_COLOR_TYPES","defaultHues","paletteName","hueValue","console","ThemingService","registered","themeName","applyTheme","inherit","changeTheme","oldTheme","attrThemeValue","alwaysWatchTheme","$mdTheme","defaultTheme","setDefaultTheme","alwaysWatch","_LIGHT_DEFAULT_HUES","_DARK_DEFAULT_HUES","_PALETTES","_THEMES","_parseRules","parseRules","_rgba","rgba","ThemingDirective","$setTheme","mdTheme","ThemableDirective","checkValidPalette","generatedRules","themeNameRegex","RegExp","hueRegex","simpleVariableRegex","palette","hue","opacity","contrast","newRule","_","hueType","generateThemes","sanitizePalette","defaultContrast","lightColors","strongLightColors","darkColors","getContrastColor","DARK_CONTRAST_COLOR","STRONG_LIGHT_CONTRAST_COLOR","LIGHT_CONTRAST_COLOR","rgbValue","colorToRgbaArray","getElementsByTagName","firstChild","firstElementChild","themeCss","rulesByType","rule","ruleMatchRegex","DEFAULT_COLOR_TYPE","GENERATED","styleStrings","createElement","createTextNode","insertBefore","primary","accent","clr","grn","blu","rgbArray","copy","1","2","3","4","hue-1","hue-2","hue-3","defaultDefaultHues","AnimateDomUtils","translate3d","reverseTranslate","newFrom","transitionOutClass","transitionInClass","waitTransitionEnd","TIMEOUT","finished","calculateZoomToOrigin","originator","origin","zoomTemplate","buildZoom","zoomStyle","centerX","centerY","scaleX","scaleY","originBnds","copyRect","bounds","dialogRect","dialogCenterPt","centerPointFor","originCenterPt","round","min","toCss","raw","convertToVendor","lookups","toTransformCss","transform","addTransition","transition","source","destination","right","bottom","isPositiveSizeClientRect","rect","targetRect","version","minor","camelCase","WEBKIT","documentElement","WebkitAppearance","PREFIX","TRANSITION_EVENTS","ANIMATION_EVENTS","$$ForceReflowFactory","$$rAFMutexFactory","$$rAFMutex","init","hasCompleteStyles","hasCompleteClasses","hasCompleteAnimation","eventFn","applyClasses","moreStyles","cs","tdr","adr","tdy","ady","cancelLastRAFRequest","postLink","hViewport","ERROR_CSS_POSITION","MdBottomSheetDirective","$mdBottomSheet","MdBottomSheetProvider","$$interimElementProvider","bottomSheetDefaults","backdrop","clickOutsideToClose","bottomSheet","BottomSheet","disableParentScroll","restoreScroll","focusable","escapeToClose","rootElementKeyupCallback","cleanup","onDragStart","onDrag","PADDING","onDragEnd","CLOSING_VELOCITY","distanceRemaining","MdButtonDirective","$mdAria","isAnchor","href","ngHref","ngLink","uiSref","getTemplate","elementHasText","textContent","ngDisabled","isDisabled","disabled","mouseActive","mdCardDirective","$attr","MdCheckboxDirective","inputDirective","tElement","tAttrs","ngModelCtrl","expr","htmlAttr","valueOpts","keypressHandler","listener","viewValue","ngChecked","checked","CHECKED_CSS","true","false",0,"mdContentDirective","ContentController","$broadcast","iosScrollFix","$materialScrollFixed","offsetHeight","MdDialogDirective","$mdDialog","addOverflowClass","toggleClass","content","images","MdDialogProvider","advancedDialogOptions","abort","dialogDefaultOptions","focusOnOpen","findCloseButton","closeButton","actionButtons","wrapSimpleContent","HTML_END_TAG","hasHTML","mdContent","captureSourceAndParent","configureAria","find","showBackdrop","dialogPopIn","activateListeners","lockScreenReader","animateRemoval","dialogPopOut","detachAndClean","deactivateListeners","unlockScreenReader","hideBackdrop","targetEvent","simpleSelector","onWindowResize","stretchDialogContainerToViewport","removeListeners","smartClose","keyHandlerFn","sourceElem","mousedownHandler","mouseupHandler","removeFn","hasBackdrop","dialogContent","dialogId","tabIndex","ariaLabel","words","walkDOM","isFixed","ceil","dialogEl","buildTranslateToOrigin","translateOptions","animateReversal","reverseAnimate","validatedTemplate","MdDividerDirective","calendarDirective","TBODY_SINGLE_ROW_HEIGHT","TBODY_HEIGHT","minDate","maxDate","CalendarCtrl","controllers","mdCalendarCtrl","configureNgModel","$$mdDateUtil","$mdDateLocale","numMonths","getMonthDistance","dateUtil","dateLocale","calendarElement","calendarScroller","today","createDateAtMidnight","firstRenderableDate","incrementMonths","selectedDate","displayDate","focusDate","isMonthTransitionInProgress","cellClickHandler","cellElement","timestamp","Number","setNgModelValue","attachCalendarEventListeners","SELECTED_DATE_CLASS","FOCUSED_DATE_CLASS","changeSelectedDate","buildInitialCalendarDisplay","buildWeekHeader","hideVerticalScrollbar","scroller","headerWidth","scrollbarWidth","paddingRight","handleKeyEvent","$emit","date","getFocusDateFromKeyEvent","boundDateByMinAndMax","changeDisplayDate","incrementDays","getFirstDateOfMonth","getLastDateOfMonth","getSelectedMonthIndex","scrollToMonth","isValidDate","monthDistance","opt_date","previousFocus","classList","cellId","getDateId","cell","getElementById","boundDate","previousSelectedDate","prevDateCell","dateCell","animationPromise","animateDateChange","firstDayOfWeek","shortDays","th","getFullYear","getMonth","getDate","mdCalendarMonthDirective","offset","CalendarMonthCtrl","calendarCtrl","monthCtrl","generateContent","oldOffset","focusAfterAppend","TODAY_CLASS","empty","buildCalendarForMonth","buildDateCell","longDateFormatter","isSameDay","cellText","dates","isDateWithinRange","selectionIndicator","buildDateRow","rowNumber","weekNumberFormatter","opt_dateInMonth","firstDayOfMonth","firstDayOfTheWeek","getLocaleDay_","numberOfDaysInMonth","getNumberOfDaysInMonth","monthBody","createDocumentFragment","isFinalMonth","blankCellOffset","monthLabelCell","monthHeaderFormatter","monthLabelRow","dayOfWeek","iterationDate","d","setDate","whitespaceRow","getDay","DateLocaleProvider","months","shortMonths","days","formatDate","parseDate","msgCalendar","msgOpenCalendar","$locale","defaultFormatDate","localeTime","toLocaleTimeString","getHours","toLocaleDateString","defaultParseDate","dateString","defaultIsDateComplete","re","defaultMonthHeaderFormatter","defaultWeekNumberFormatter","number","defaultLongDateFormatter","defaultShortDays","DATETIME_FORMATS","DAY","day","defaultDates","defaultMsgCalendar","defaultMsgOpenCalendar","MONTH","SHORTMONTH","isDateComplete","datePickerDirective","placeholder","DatePickerCtrl","mdDatePickerCtrl","inputElement","ngInputElement","inputContainer","calendarPane","calendarButton","inputMask","isFocused","setDisabled","isCalendarOpen","calendarPaneOpenedFrom","bodyClickHandler","handleBodyClick","windowResizeHandler","closeCalendarPane","installPropertyInterceptors","attachChangeListeners","attachInteractionListeners","detachCalendarPane","EXTRA_INPUT_SIZE","INVALID_CLASS","DEFAULT_DEBOUNCE_INTERVAL","CALENDAR_PANE_HEIGHT","CALENDAR_PANE_WIDTH","resizeInputElement","setErrorFlags","handleInputEvent","keyCodes","openCalendarPane","set","inputString","parsedDate","setDateTimeToMidnight","toggle","attachCalendarPane","elementRect","bodyRect","paneTop","paneLeft","viewportTop","viewportBottom","innerHeight","viewportLeft","viewportRight","innerWidth","scale","focusCalendar","getCalendarCtrl","setFocused","isInCalendar","getDateInNextMonth","getDateInPreviousMonth","isSameMonthAndYear","d1","d2","isInNextMonth","startDate","endDate","nextMonth","isInPreviousMonth","previousMonth","getDateMidpoint","getWeekOfMonth","numberOfDays","numberOfMonths","dateInTargetMonth","setHours","opt_value","isDate","MdFabActionsDirective","attributes","hasNgRepeat","prefix","wrap","FabController","setupDefaults","vm","isOpen","resetActionIndex","setupListeners","eventTypes","parseEvents","disableKeyboard","resetEvents","equalsEvents","toCheck","isEqual","strippedCheck","moreToCheck","numTests","equals","removeOptionalEvent","foundOptional","latestEvent","handleItemClick","open","eventUnhandled","resetEventsTimeout","setTimeout","currentActionIndex","setupWatchers","newDir","oldDir","actions","getTriggerElement","getActionsElement","enableKeyboard","fireInitialAnimations","keyPressed","doKeyLeft","doKeyUp","doKeyRight","doKeyDown","doActionPrev","focusAction","doActionNext","focusElement","isTrigger","isAction","MdFabSpeedDialDirective","FabSpeedDialLink","prepend","MdFabSpeedDialFlingAnimation","runAnimation","triggerElement","variablesElement","startZIndex","webkitTransform","newPosition","axis","scrollWidth","newTranslate","MdFabSpeedDialScaleAnimation","offsetDelay","MdFabToolbarDirective","MdFabToolbarAnimation","backgroundElement","toolbarElement","iconElement","borderRadius","pointerEvents","MdFabTriggerDirective","GridListDirective","$mdGridLayout","watchMedia","invalidateLayout","layoutIfMediaMatch","unwatchMedia","layoutDelegate","unwatchAttrs","removeListener","tilesInvalidated","tiles","getTileElements","props","tileSpans","getTileSpans","colCount","getColumnCount","rowMode","getRowMode","rowHeight","getRowHeight","gutter","getGutter","lastLayoutProps","tilePositions","rowCount","grid","getGridStyle","ps","getTileStyle","spans","reflow","mdOnLayout","exprStr","hShare","hGutterShare","hUnit","UNIT","share","gutterShare","POSITION","unit","col","DIMENSION","span","paddingTop","marginTop","vShare","vUnit","vGutterShare","paddingBottom","ele","$$mdDestroyed","tileElements","applyDefaultUnit","whRatio","GridListController","layoutInvalidated","$timeout_","GridLayoutFactory","GridLayout","layoutInfo","gridStyles","layoutTime","mapTime","reflowTime","calculateGridFor","info","positioning","animatorFn","defaultAnimator","tileCount","totalTime","GridTileAnimator","t","reserveSpace","curCol","nextRow","spaceTracker","findEnd","adjustRow","curRow","cols","by","newSpaceTracker","tracker","animateWith","customAnimator","GridTileDirective","gridCtrl","invalidateTiles","$index","newIdx","oldIdx","GridTileCaptionDirective","layout","mdInputContainerDirective","ContainerCtrl","isErrorGetter","mdIsError","delegateClick","input","setHasValue","hasValue","setHasMessages","hasMessages","setHasPlaceholder","hasPlaceholder","setInvalid","isInvalid","label","hasLabelAndInput","labelDirective","containerCtrl","mdNoFloat","inputTextareaDirective","ctrls","ngModelPipelineCheckValue","inputCheckValue","validity","badInput","setupTextarea","pipelineListener","onChangeTextarea","growTextarea","min_rows","getHeight","lineHeight","minHeight","rows","line","onScroll","NaN","handleHiddenChange","wasHidden","hasNgModel","isReadonly","readonly","$touched","mdMaxlengthDirective","renderCharCount","charCountEl","String","maxlength","$set","ngMessagesSelectors","mdMaxlength","modelValue","placeholderDirective","hasNoFloat","placeholderText","ngMessagesDirective","mdListDirective","tEl","mdListItemDirective","proxiedTypes","setupToggleAria","toggleType","toggleTypes","wrapIn","copiedAttrs","eq","secondaryItem","buttonWrapper","isProxiedElement","computeProxies","proxies","computeClickable","hasClick","attachRipple","proxy","proxyOnBlur","click","parentButton","hasProxiedElement","proxyElement","MdListController","$mdListInkRipple","MdProgressCircularDirective","watchAttributes","percentValue","clamp","mode","MODE_DETERMINATE","animateIndicator","MODE_INDETERMINATE","spinnerWrapper","lastMode","updateScale","circle","toVendorCSS","getDiameterRatio","validateMode","mdMode","debug","leftC","rightC","gap","gapStyles","removeEmptyValues","borderBottomColor","leftStyles","rightStyles","mdDiameter","DEFAULT_SCALING","DEFAULT_PROGRESS_SIZE","mdRadioGroupDirective","linkRadioGroup","setFocus","keydownListener","rgCtrl","selectPrevious","selectNext","form","RadioGroupController","_radioButtonRenderFns","createRadioGroupControllerProto","_ngModelCtrl","rbRender","setViewValue","getViewValue","changeSelectedButton","setActiveDescendant","radioId","increment","buttons","selected","mdRadioButtonDirective","initialize","markParentAsChecked","lastChecked","buildAriaID","ariaId","aria-checked","MdProgressLinearDirective","MODE_QUERY","bar2","bar1","MODE_BUFFER","SelectDirective","$mdSelect","valueEl","mdOnOpen","autofillClone","ng-model","aria-hidden","newEl","innerHTML","selectTemplate","setAriaLabel","labelText","syncLabelText","selectContainer","selectMenuCtrl","mdSelectCtrl","setLabelText","selectedLabels","createSelect","selectEl","selectScope","handleKeypress","allowedCodes","openSelect","optNodeForKeyboardSearch","optionCtrl","isMultiple","deselect","select","hashKey","refreshViewValue","loadingAsync","formCtrl","$removeControl","$setPristine","originalRender","setIsPlaceholder","tmpPlaceholder","isPlaceholder","triggerClose","mdOnClose","deregisterWatcher","parser","prevVal","setMultiple","aria-disabled","ariaAttrs","aria-expanded","SelectMenuDirective","preLink","aria-multiselectable","selectCtrl","keyListener","clickListener","option","optionHashKey","hashGetter","isSelected","SelectMenuController","renderMultiple","newSelectedValues","oldSelected","newSelectedHashes","deselected","hash","renderSingular","deregisterCollectionWatch","validateArray","clearSearchTimeout","optNodes","optText","searchStr","CLEAR_SEARCH_AFTER","fromCharCode","search","$options","trackBy","trackByLocals","trackByParsed","valueScope","$value","$$mdSelectId","selectNextId","selectedOptionEls","hashedValue","setSelected","addOption","removeOption","OptionDirective","setOptionValue","oldHashKey","newHashKey","aria-selected","ngValue","OptionController","OptgroupDirective","labelElement","SelectProvider","selectDefaultOptions","detachElement","announceClosed","restoreFocus","cleanupInteraction","cleanupResizing","showDropDown","positionAndFocusMenu","isRemoved","calculateMenuPositions","dropDown","autoFocus","focusedNode","sanitizeAndConfigure","ERRROR_TARGET_EXPECTED","contentEl","optionNodes","activateResizing","debouncedOnResize","updates","watchAsyncLoad","$$loadingAsyncDone","progressMode","activateInteraction","onBackdropClick","onMenuKeyDown","focusPrevOption","focusNextOption","checkCloseMenu","optNode","focusOption","newOption","optionsArray","mouseOnScrollbar","clickOnScrollbar","currentTarget","hasScrollbar","relPosX","alreadyOpen","isExpanded","mdSelect","menuController","centeredNode","selectNode","contentNode","parentRect","shouldOpenAroundTarget","SELECT_EDGE_MARGIN","spaceAvailable","maxWidth","isScrollable","selectedNode","optgroupNodes","loading","isPromiseLike","selectMenuRect","centeredRect","getOffsetRect","centeredStyle","paddingLeft","scrollBuffer","transformOrigin","minWidth","containerRect","min-width","n","offsetLeft","offsetTop","SidenavService","$mdComponentRegistry","waitForInstance","errorMsg","isLockedOpen","callbackFn","SidenavFocusDirective","sidenavCtrl","SidenavDirective","updateIsLocked","isLocked","updateIsOpen","focusEl","onKeyDown","triggeringElement","activeElement","lastParentOverFlow","toggleOpen","isEscape","isLockedOpenParsed","mdIsLockedOpen","$media","$toggleOpen","SidenavController","mdComponentId","SliderDirective","updateAll","refreshSliderDimensions","ngModelRender","redrawTicks","updateMin","updateMax","updateStep","step","updateAriaDisabled","mdDiscrete","msg","numSteps","tickCanvas","tickContainer","trackTicksStyle","tickCtx","getContext","fillStyle","dimensions","getSliderDimensions","fillRect","sliderDimensions","trackContainer","throttledRefreshDimensions","changeAmount","setModelValue","minMaxValidator","stepValidator","percent","setSliderPercent","thumbText","formattedValue","percentStr","activeTrack","thumbContainer","onPressDown","isDisabledGetter","exactVal","percentToValue","positionToPercent","closestVal","valueToPercent","onPressUp","isDragging","setSliderFromEvent","isDiscrete","adjustThumbPosition","doSlide","thumb","stopDisabledWatch","debouncedUpdateAll","MdSticky","setupSticky","contentCtrl","stickyClone","debouncedRefreshElements","refreshElements","refreshPosition","sort","currentScrollTop","setCurrentItem","isScrollingDown","prevScrollTop","translate","prev","setStickyState","amount","translateY","setupAugmentedScrollEvents","checkStickySupport","$el","stickyProp","testEl","stickyProps","z-index","loopScrollEvent","lastScrollTime","SCROLL_END_DELAY","isScrolling","browserStickySupport","$$sticky","MdSubheaderDirective","$mdSticky","getContent","wrapperHtml","getDirective","DirectiveFactory","directiveName","eventName","MdSwitch","mdCheckboxDirective","mdSwitchCompile","checkboxLink","checkboxDirective","disabledGetter","drag","isChanged","applyModelValue","switchContainer","MdToastDirective","$mdToast","MdToastProvider","toastDefaultOptions","activeToastContent","onSwipe","gesture","openClass","toastOpenClass","SWIPE_EVENTS","ACTION_RESOLVE","newContent","mdToolbarDirective","setupScrollShrink","onChangeScrollShrink","shrinkWithScroll","closestContent","contentElement","onMdContentLoad","disableScrollShrink","enableScrollShrink","newContentEl","debouncedContentScroll","onContentScroll","debouncedUpdateHeight","toolbarHeight","shrinkSpeedFactor","hasWhiteFrame","updateToolbarHeight","margin","margin-top","margin-bottom","mdShrinkSpeedFactor","mdScrollShrink","MdTooltipDirective","mdDelay","TOOLTIP_SHOW_DELAY","configureWatchers","visible","isVisible","showTooltip","hideTooltip","addAriaLabel","manipulateElement","getParentWithPointerEvents","hasComputedStyleValue","getNearestContentElement","computedStyles","ngWindow","windowBlurHandler","elementFocusedOnWindowBlur","enterHandler","leaveHandler","setVisible","autohide","queued","tooltipParent","positionTooltip","promises","positionBackground","tipRect","fitInParent","TOOLTIP_WINDOW_EDGE_SPACE","getPosition","dir","getElementsByClassName","mdDirection","VirtualRepeatContainerDirective","VirtualRepeatContainerController","virtualRepeatContainerTemplate","scrollSize","repeater","autoShrink","autoShrinkMin","mdAutoShrinkMin","originalSize","offsetSize","mdOffsetSize","mdTopIndex","bindTopIndex","topIndex","assign","newIndex","scrollToIndex","sizer","offsetter","updateSize","ngHide","hidden","VirtualRepeatDirective","VirtualRepeatController","expression","mdVirtualRepeat","repeatName","repeatListExpression","extraName","mdExtraName","link_","$browser","onDemand","browserCheckUrlChange","$$checkUrlChange","newStartIndex","newEndIndex","newVisibleEnd","startIndex","endIndex","itemSize","mdItemSize","isFirstRender","itemsLength","unwatchItemSize_","blocks","pooledBlocks","VirtualRepeatModelArrayLike","model","getItemAtIndex","getLength","MAX_ELEMENT_SIZE","NUM_EXTRA","repeaterCtrl","handleScroll_","isHorizontal","setSize_","containerUpdated","getScrollSize","sizeScroller_","dimension","crossDimension","numChildren","sizerChild","autoShrink_","shrinkSize","getItemSize","setScrollSize","itemsSize","getScrollOffset","scrollTo","resetScroll","numItems","$$phase","Block","rawRepeatListExpression","sized","repeatListExpression_","readItemSize_","block","getBlock_","poolBlock_","repeatList","virtualList","$$includeIndexes","virtualRepeatUpdate_","updateIndexes_","oldItems","lengthChanged","mdStartIndex","blockIndex","newStartBlocks","newEndBlocks","updateBlock_","maxIndex","domFragmentFromBlocks_","nextSibling","new","updateScope_","fragment","containerLength","MdAutocompleteCtrl","searchText","selectedItem","gatherElements","moveDropdown","positionDropdown","correctHorizontalAlignment","dropdown","elements","scrollContainer","MENU_PADDING","hrect","$","vrect","snap","bot","MAX_HEIGHT","maxHeight","autofocus","isRequired","handleSearchText","selectedItemChange","main","ul","li","getSnapTarget","getAngularElements","oldHidden","onListEnter","noBlur","onListLeave","shouldHide","onMouseup","previousSelectedItem","getDisplayValue","handleSelectedItemChange","announceItemChange","itemChange","getItemAsNameVal","announceTextChange","textChange","selectedItemWatchers","watcher","registerSelectedItemWatcher","unregisterSelectedItemWatcher","previousSearchText","getDefaultIndex","isMinLengthMet","handleQuery","setLoading","updateMessages","hasFocus","doBlur","forceBlur","keydown","updateScroll","clearValue","getMinLength","minLength","getItemText","itemText","itemName","autoselect","hasMatches","hasSelection","shouldShow","notFoundVisible","loadingIsVisible","getCurrentDisplayValue","fetchResults","handleResults","term","selectOnMatch","selectItemOnMatch","itemExpr","getCountMessage","lastCount","hgt","textLength","hasNotFound","noCache","displayValue","itemParts","itemsExpr","clear","listEnter","listLeave","mouseUp","ITEM_HEIGHT","MdAutocomplete","hasNotFoundTemplate","inputName","inputMinlength","inputMaxlength","floatingLabel","menuClass","inputId","getItemTemplate","templateTag","getNoItemsTemplate","getInputElement","mdFloatingLabel","leftover","noItemsTemplate","itemTemplate","MdAutocompleteItemScopeDirective","watchVariable","variable","alias","newScope","$mdAutocompleteCtrl","MdHighlightCtrl","termExpr","unsafeTextExpr","regex","mdHighlightFlags","unsafeText","prevState","getRegExp","sanitize","MdHighlight","tAttr","mdHighlightText","MdChip","hintTemplate","selectedChip","DELETE_HINT_TEMPLATE","MdChipRemove","removeChip","$$replacedScope","MdChipTransclude","$mdChipsCtrl","$chip","newHtml","mdChipTransclude","MdChipsCtrl","userInputNgModelCtrl","userInputElement","hasAutocomplete","deleteHint","deleteButtonLabel","chipBuffer","useOnAppend","useOnSelect","inputKeydown","getChipBuffer","requireMatch","appendChip","resetChipBuffer","selectAndFocusChipSafe","chipKeydown","removeAndSelectAdjacentChip","onFocus","getPlaceholder","useSecondary","secondaryPlaceholder","selIndex","getAdjacentChipIndex","resetSelectedChip","newChip","onAppend","useOnAppendExpression","useOnRemoveExpression","useOnRemove","useOnSelectExpression","removed","removeChipAndFocusInput","selectChip","focusChip","onSelect","selectAndFocusChip","onInputFocus","inputHasFocus","onInputBlur","configureUserInput","scopeApplyFn","configureAutocomplete","MdChips","getTemplateByQuery","userTemplate","chipRemoveTemplate","templates","chipContentsTemplate","chipInputTemplate","staticChips","mdChipsCtrl","mdOnAppend","mdOnRemove","mdOnSelect","compiledStaticChips","getTemplates","chips","MD_CHIPS_TEMPLATE","CHIP_INPUT_TEMPLATE","CHIP_DEFAULT_TEMPLATE","CHIP_REMOVE_TEMPLATE","MdContactChipsCtrl","queryContact","contactQuery","$query","filterSelected","filterSelectedContacts","contactName","contact","contacts","MdContactChips","MD_CONTACT_CHIPS_TEMPLATE","contactImage","contactEmail","highlightFlags","mdIconDirective","$mdIcon","parentsHaveText","prepareForFontIcon","svgIcon","svgSrc","fontIcon","fontSet","alt","mdSvgIcon","mdSvgSrc","attrVal","svg","MdIconProvider","ConfigurationItem","url","viewBoxSize","defaultViewBoxSize","MdIconService","getIcon","iconCache","urlRegex","loadByURL","cacheIcon","load","loadByID","loadFromIconSet","findRegisteredFontSet","useDefault","defaultFontSet","fontSets","icon","isIcon","Icon","iconConfig","extractFromSet","iconName","lastIndexOf","iconSetConfig","announceIdNotFound","setName","announceNotFound","err","statusText","prepare","prepareAndStyle","preserveAspectRatio","viewBox","pointer-events","cloneSVG","iconSet","defaultIconSet","defaultIconSize","iconSize","preloadIcons","iconProvider","svgRegistry","asset","MenuController","$mdMenu","menuContainer","nestLevel","mdNestLevel","setMenuContainer","isInMenuBar","nestedMenus","enableHoverListener","currentlyOpenMenu","isAlreadyOpening","registerContainerProxy","triggerContainerProxy","openMenuTimeout","menuItems","nestedMenu","focusableTarget","mdMenuCtrl","preserveElement","$mdOpenMenu","$mdMenuIsOpen","focusMenuContainer","focusTarget","containerProxy","skipFocus","closeOpts","eventDetails","restoreFocusTo","positionMode","attachment","mdPositionMode","offsets","mdOffset","MenuDirective","templateElement","INVALID_PREFIX","nestingDepth","menuEl","menuContents","MenuProvider","menuDefaultOptions","showMenu","calculateMenuPosition","menuContentEl","startRepositioningOnResize","repositionMenu","handled","focusMenuItem","parentMenu","captureClickListener","hasAnyAttribute","rawAttr","altForms","closestMenu","didFocus","currentItem","currentIndex","attemptFocus","toNode","firstVisibleChild","openMenuNode","alignTarget","openMenuNodeRect","boundryNode","boundryNodeRect","menuStyle","originNode","originNodeRect","MENU_EDGE_MARGIN","alignTargetRect","existingOffsets","willFitRight","MenuBarController","BOUND_MENU_METHODS","handleKeyDown","parentToolbar","getMenus","enableOpenOnHover","rootMenus","disableOpenOnHover","setKeyboardMode","handleMenuHover","openOnHoverEnabled","dataset","mdRestoreStyle","scheduleOpenHoveredMenu","menuCtrl","scheduleOpenMenu","pendingMenuOpen","currentMenu","wasOpen","newMenu","newMenuCtrl","openFocusedMenu","focusMenu","menus","focusedIndex","getFocusedMenuIndex","getOpenMenuIndex","changed","menu","getFocusedMenu","focusedEl","MenuBarDirective","templateEl","templateAttrs","ariaRole","contentEls","MenuDividerDirective","MenuItemController","iconEl","buttonEl","initClickListeners","handleClick","MenuItemDirective","setDefault","moveAttrToButton","MdTab","getTabElementIndex","insertTab","active","getIndex","refreshIndex","updateTabOrder","removeTab","MdTabItem","MdTabLabel","MdTabScroll","mdTabScroll","MdTabsController","$mdTabInkRipple","selectedIndex","compileTemplate","updateHeightFromContent","adjustOffset","updateInkBarStyles","tabs","updatePagination","$mdTabsTemplate","handleWindowResize","handleSelectedIndexChange","defineOneWayBinding","defineBooleanAttribute","updateValue","destroyed","handleStretchTabs","stretchTabs","wrapper","shouldStretchTabs","handleCenterTabs","shouldCenterTabs","handleMaxTabWidth","newWidth","oldWidth","handleShouldPaginate","maxTabWidth","getMaxTabWidth","handleHasContent","hasContent","handleOffsetChange","paging","handleFocusIndexChange","oldIndex","redirectFocus","getNearestSafeIndex","lastSelectedIndex","tabEl","handleResizeWhenVisible","incrementIndex","locked","focusIndex","lastClick","scroll","shouldPaginate","fixOffset","wheelDelta","nextPage","tab","viewportWidth","canvas","totalWidth","previousPage","handleInkBar","inkBar","handleDynamicHeight","tabData","hasLoaded","proto","isActive","isLeft","isRight","shouldRender","noDisconnect","updateHasContent","getElements","dummies","contentsWrapper","canPageBack","canPageForward","lastTab","centerTabs","noPagination","canvasWidth","maxOffset","updatePagingWidth","focusItem","inc","dynamicHeight","tabContent","contentHeight","tabsHeight","newHeight","currentHeight","fromHeight","toHeight","tabWidth","reduce","updateInkBarClassName","ink","MdTabs","MdTabsTemplate","handleScope","disconnect","reconnect","enableDisconnect","compileScope","connected","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_5__","_indexCommon","_indexCommon2","_angularFix","_angularFix2","_providersFormlyApiCheck","_providersFormlyApiCheck2","_otherDocsBaseUrl","_otherDocsBaseUrl2","_providersFormlyUsability","_providersFormlyUsability2","_providersFormlyConfig","_providersFormlyConfig2","_providersFormlyValidationMessages","_providersFormlyValidationMessages2","_servicesFormlyUtil","_servicesFormlyUtil2","_servicesFormlyWarn","_servicesFormlyWarn2","_directivesFormlyCustomValidation","_directivesFormlyCustomValidation2","_directivesFormlyField","_directivesFormlyField2","_directivesFormlyFocus","_directivesFormlyFocus2","_directivesFormlyForm","_directivesFormlyForm2","_runFormlyNgModelAttrsManipulator","_runFormlyNgModelAttrsManipulator2","_runFormlyCustomTags","_runFormlyCustomTags2","ngModule","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","otherProp","apiCheck","utils","getError","checkerHelpers","setupChecker","_apiCheck","_apiCheck2","output","docsBaseUrl","formlyExpression","oneOfType","string","specifyWrapperType","typeOrArrayOf","nullable","apiCheckProperty","apiCheckInstanceProperty","onlyIf","withProperties","throw","apiCheckFunctionProperty","oneOf","formlyWrapperType","ifNot","types","overwriteOk","apiCheckInstance","apiCheckFunction","apiCheckOptions","object","strict","expressionProperties","objectOf","modelChecker","templateManipulators","preWrapper","arrayOf","postWrapper","validatorChecker","fieldOptionsApiShape","$$hashKey","any","originalModel","extras","validateOnModelChange","skipNgModelAttrsManipulator","templateOptions","modelOptions","updateOn","allowInvalid","getterSetter","timezone","validators","asyncValidators","parsers","formatters","noFormControl","hideExpression","ngModelElAttrs","ngModelAttrs","statement","bound","boolean","elementAttributes","optionsTypes","array","validation","errorExistsAndShouldBeVisible","formControl","runExpressions","resetModel","updateInitialValue","initialValue","formlyFieldOptions","formOptionsApi","formState","removeChromeAutoComplete","fieldTransform","fieldGroup","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsability","formlyApiCheck","formlyErrorAndWarningsUrlPrefix","getFieldError","errorInfoSlug","getErrorMessage","toJson","getFormlyError","checkWrapper","urlSuffix","checkWrapperTemplate","additionalInfo","formlyTransclude","JSON","stringify","_this","_toConsumableArray","arr2","formlyConfig","formlyUsabilityProvider","setType","checkType","extendTypeOptions","typeMap","_ret","allTypes","v","checkOverwrite","extendsType","getType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeDefaultOptions","_otherUtils2","reverseDeepMerge","extendTemplate","extendsCtrl","optionsCtrl","extendsFn","optionsFn","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","getTypeHeritage","heritage","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","objectName","getWrapper","getWrapperByType","wrappers","_name","removeWrapperByName","removeWrappersForType","disableWarnings","warnInfoSlug","unshift","_this2","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferUnbound","defaultHideDirective","getFieldId","_otherUtils","formlyEval","extraLocals","formId","dest","objAndSameType","obj1","obj2","getPrototypeOf","findByNodeName","arrayify","extendFunction","_len","fns","_key","extendArray","secondary","startsWith","formlyValidationMessages","addTemplateOptionValueMessage","suffix","alternate","validationMessages","templateOptionValue","addStringMessage","formlyUtil","formlyWarn","formlyCustomValidation","addValidatorToPipeline","isAsync","validator","setupMessage","useNewValidatorsApi","setupWithValidators","setupWithParsers","validatorCollection","inFlightValidator","isValid","$pending","$setValidity","formlyField","FormlyFieldController","currentValue","valueGetterSetter","setter","parseSet","parseGet","simplifyLife","formOptions","setFieldIdAndName","formName","$name","setDefaultValue","setInitialValue","mergeFieldOptionsWithTypeDefaults","mergeOptions","properOrder","typeName","extraOptions","extendOptionsWithDefaults","resetFormControl","isMultiNgModel","$setUntouched","addValidationMessages","invokeControllers","setupFieldGroup","fieldType","getFieldType","checkApi","fieldLink","formlyFormCtrl","setFieldGroupTemplate","checkFieldGroupApi","extraAttributes","transcludeInWrappers","setElementTemplate","addAttributes","addClasses","templateString","asHtml","watchFormControl","watchFieldNameOrExistence","nameExpressionRegex","nameExpression","watchFieldExistence","fieldCount","fc","stopWatchingShowError","addShowMessagesWatcher","addParsers","addFormatters","customExpression","errorExistsAndShouldBeVisibleExpression","formControls","noTouchedButDirty","$dirty","showError","setParsersOrFormatters","formWasPristine","$pristine","formatter","getThingsFromType","theType","typeThings","getDefaultOptionsProperty","getThingsFromOptionsTypes","getDefaultOptionsOptionsTypes","optionsTypesThings","optionsTypeName","getFormlyExpressionThing","thing","formlyExpressionParserOrFormatterFunction","originalThingProp","things","ngModelCtrls","ngModelNodes","ngModelNode","callLinkFunctions","thusly","runManipulators","manipulators","templateToManipulate","manipulator","newTemplate","fieldManipulators","getManipulators","getFieldTemplate","addManipulators","_ref","_ref$preWrapper","_ref$postWrapper","fromOptionsOrType","isUrl","templatePromise","_ret2","httpOptions","getWrapperOption","aWrapper","runApiCheck","w","wrappersTemplates","wrapperTemplate","totalWrapper","doTransclusion","superWrapper","transcludeEl","typeWrappers","formWrappers","defaultWrapper","_ref2","forType","runApiCheckForType","globalConfig","checkerObjects","checker","checkOptions","fields","formlyFocus","previousEl","doc","focusWait","formlyForm","formlyFormGetTemplate","getRootEl","rootEl","getFieldRootEl","fieldRootEl","getHideDirective","hideDirective","getTrackBy","getFormName","bindName","getTranscludeClass","transcludeClass","copyAttributes","excluded","arrayAttrs","toKebabCase","currentFormId","parentFormAttributes","FormlyFormController","onModelOrFormStateChange","evalCloseToFormlyExpression","$validate","setupFields","checkDeprecatedOptions","fieldTransforms","setupModels","attachKey","setupOptions","isFieldGroup","watchedModels","isNewModel","initModel","refrencesCurrentlyWatchedModel","watchers","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","_slice","displayName","originalListener","originalArgs","getFormlyFieldLikeLocals","formlyFormLink","setFormController","theFormlyForm","parentForm","fixChromeAutocomplete","global","offInstance","onInstance","$1","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addValidation","addIfNotPresent","modelNodes","alterNgModelAttr","isPropertyAccessor","addRegardlessOfPresence","addModelOptions","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltInAttributes","ref","toVal","epVal","getEpValue","inTo","inEp","addNgModelElAttrs","getNgModelNodes","selectorNot","skipNot","getNgModelNodesFallback","allNgModelNodes","matchingNgModelNodes","nodeMatches","div","boundOnly","bothBooleanAndBound","bothAttributeAndBound","statementOnly","attributeOnly","addCustomTags","documentMode","customElements","getApiCheckInstance","api","apiTypes","argTypes","failed","checkApiCheckApi","checkEnoughArgs","checkApiWithArgs","returnObject","getTypes","checkApiArgs","isArrayOrArgs","errors","apiCheckApis","handleErrorMessage","getApiCheck","getPrefix","onlyPrefix","gOut","getSuffix","onlySuffix","getUrl","u","passedAndShouldHavePassed","buildMessageFromApiAndArgs","replaceFunctionWithName","each","replacedItems","getObjectString","generateMessage","useS","newLine","passedArgs","_getTypes","specified","getCheckerDisplay","terse","verbose","addHelpers","getArgDisplay","extraCheckers","apiCheckApiCheck","getApiCheckInstanceCheckers","additionalProperties","apiCheckUtil","checkers","getCheckers","checkerIndex","argIndex","res","lastChecker","argName","argFailed","skipPreviousChecker","isOptional","isError","getCheckerErrorMessage","checkerTypeType","checkerType","apiCheckDataChecker","asFunc","__apiCheckData","asShape","wrongShape","checkerHelp","getCheckerHelp","help","requiredArgs","gottenArgs","hasKeys","getDisplayIfNotGotten","getDisplay","cName","constructor","typeOf","argDisplay","k","getApiCheckApis","os","checkerFnChecker","shortType","notOptional","notRequired","VERSION","internalChecker","getSerialize","decycle","seen","getPath","ret","path","spaces","_defineProperty","enumerable","configurable","writable","daCopy","short","getCheckerType","typeTypes","eachArry","eachObj","hasOwn","arry","finalJoin","stringType","nAtL","tName","tLocation","undef","getNoop","isNoop","getRequiredVersion","notNullable","addNullable","addOptional","requiredChecker","copyProps","originalChecker","optionalCheck","fixType","nullableCheck","isNullable","checkerCopy","typeOfCheckGetter","lType","funcCheckGetter","functionChecker","apiError","shapeChecker","notFunction","objectCheckGetter","nullType","objectNullOkChecker","objectChecker","nullOk","instanceCheckGetter","classToCheck","oneOfCheckGetter","enums","enum","enm","oneOfTypeCheckGetter","typeCheckers","checkersDisplay","arrayOfCheckGetter","shortCheckerDisplay","objectOfCheckGetter","checkerDisplay","notObject","allTypesSuccess","typeOrArrayOfCheckGetter","getShapeCheckGetter","shapeCheckGetter","nonObject","modifyTypeDisplayToHelpOut","theRet","addHelper","objectMessage","stringMessage","parentRequired","strictType","shapeTypes","shapePropError","shapeError","allowedProperties","extraProps","getRequiredIfNotChecker","ifProps","description","getTypeForShapeChild","iteration","othersPresent","requiredIfNot","argumentsCheckerGetter","anyCheckGetter","nullCheckGetter","rangeCheckGetter","lessThanCheckGetter","greaterThanCheckGetter","emptyObjectCheckGetter","emptyObject","instanceOf","range","lessThan","greaterThan","null","_require","_mdThemeManipulator","_mdThemeManipulator2","_inputContainerInputContainer","_inputContainerInputContainer2","_labelLabel","_labelLabel2","_messagesMessages","_messagesMessages2","check","_checkboxCheckbox","_checkboxCheckbox2","_chipsChips","_chipsChips2","_datepickerDatepicker","_datepickerDatepicker2","_inputInput","_inputInput2","_radioRadio","_radioRadio2","_selectSelect","_selectSelect2","_sliderSlider","_sliderSlider2","_switchSwitch","_switchSwitch2","_textareaTextarea","_textareaTextarea2","filterDate","dateConfig","datepickerNode","labelProp","valueProp","discrete"],"mappings":"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","file":"dist/formly-material.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormlyMaterial\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormlyMaterial\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormlyMaterial\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormlyMaterial\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _angularMessages = __webpack_require__(2);\n\t\n\tvar _angularMessages2 = _interopRequireDefault(_angularMessages);\n\t\n\tvar _angularMaterial = __webpack_require__(4);\n\t\n\tvar _angularMaterial2 = _interopRequireDefault(_angularMaterial);\n\t\n\tvar _angularFormly = __webpack_require__(10);\n\t\n\tvar _angularFormly2 = _interopRequireDefault(_angularFormly);\n\t\n\tvar _runs = __webpack_require__(12);\n\t\n\tvar _runs2 = _interopRequireDefault(_runs);\n\t\n\tvar _wrappers = __webpack_require__(14);\n\t\n\tvar _wrappers2 = _interopRequireDefault(_wrappers);\n\t\n\tvar _types = __webpack_require__(18);\n\t\n\tvar _types2 = _interopRequireDefault(_types);\n\t\n\tvar ngModuleName = 'formlyMaterial';\n\t\n\t_angular2['default'].module(ngModuleName, ['ngMessages', 'ngMaterial', 'formly']).config(['formlyConfigProvider', function (formlyConfigProvider) {\n\t    var configs = [_runs2['default'], _wrappers2['default'], _types2['default']];\n\t\n\t    configs.forEach(function (config) {\n\t        var i = 0;\n\t        for (; i < config.length; i++) {\n\t            config[i](formlyConfigProvider);\n\t        }\n\t    });\n\t}]);\n\t\n\texports['default'] = ngModuleName;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(3);\n\tmodule.exports = 'ngMessages';\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @license AngularJS v1.4.8\n\t * (c) 2010-2015 Google, Inc. http://angularjs.org\n\t * License: MIT\n\t */\n\t(function(window, angular, undefined) {'use strict';\n\t\n\t/* jshint ignore:start */\n\t// this code is in the core, but not in angular-messages.js\n\tvar isArray = angular.isArray;\n\tvar forEach = angular.forEach;\n\tvar isString = angular.isString;\n\tvar jqLite = angular.element;\n\t/* jshint ignore:end */\n\t\n\t/**\n\t * @ngdoc module\n\t * @name ngMessages\n\t * @description\n\t *\n\t * The `ngMessages` module provides enhanced support for displaying messages within templates\n\t * (typically within forms or when rendering message objects that return key/value data).\n\t * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to\n\t * show and hide error messages specific to the state of an input field, the `ngMessages` and\n\t * `ngMessage` directives are designed to handle the complexity, inheritance and priority\n\t * sequencing based on the order of how the messages are defined in the template.\n\t *\n\t * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`\n\t * `ngMessage` and `ngMessageExp` directives.\n\t *\n\t * # Usage\n\t * The `ngMessages` directive listens on a key/value collection which is set on the ngMessages attribute.\n\t * Since the {@link ngModel ngModel} directive exposes an `$error` object, this error object can be\n\t * used with `ngMessages` to display control error messages in an easier way than with just regular angular\n\t * template directives.\n\t *\n\t * ```html\n\t * <form name=\"myForm\">\n\t *   <label>\n\t *     Enter text:\n\t *     <input type=\"text\" ng-model=\"field\" name=\"myField\" required minlength=\"5\" />\n\t *   </label>\n\t *   <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n\t *     <div ng-message=\"required\">You did not enter a field</div>\n\t *     <div ng-message=\"minlength, maxlength\">\n\t *       Your email must be between 5 and 100 characters long\n\t *     </div>\n\t *   </div>\n\t * </form>\n\t * ```\n\t *\n\t * Now whatever key/value entries are present within the provided object (in this case `$error`) then\n\t * the ngMessages directive will render the inner first ngMessage directive (depending if the key values\n\t * match the attribute value present on each ngMessage directive). In other words, if your errors\n\t * object contains the following data:\n\t *\n\t * ```javascript\n\t * <!-- keep in mind that ngModel automatically sets these error flags -->\n\t * myField.$error = { minlength : true, required : true };\n\t * ```\n\t *\n\t * Then the `required` message will be displayed first. When required is false then the `minlength` message\n\t * will be displayed right after (since these messages are ordered this way in the template HTML code).\n\t * The prioritization of each message is determined by what order they're present in the DOM.\n\t * Therefore, instead of having custom JavaScript code determine the priority of what errors are\n\t * present before others, the presentation of the errors are handled within the template.\n\t *\n\t * By default, ngMessages will only display one error at a time. However, if you wish to display all\n\t * messages then the `ng-messages-multiple` attribute flag can be used on the element containing the\n\t * ngMessages directive to make this happen.\n\t *\n\t * ```html\n\t * <!-- attribute-style usage -->\n\t * <div ng-messages=\"myForm.myField.$error\" ng-messages-multiple>...</div>\n\t *\n\t * <!-- element-style usage -->\n\t * <ng-messages for=\"myForm.myField.$error\" multiple>...</ng-messages>\n\t * ```\n\t *\n\t * ## Reusing and Overriding Messages\n\t * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline\n\t * template. This allows for generic collection of messages to be reused across multiple parts of an\n\t * application.\n\t *\n\t * ```html\n\t * <script type=\"text/ng-template\" id=\"error-messages\">\n\t *   <div ng-message=\"required\">This field is required</div>\n\t *   <div ng-message=\"minlength\">This field is too short</div>\n\t * </script>\n\t *\n\t * <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n\t *   <div ng-messages-include=\"error-messages\"></div>\n\t * </div>\n\t * ```\n\t *\n\t * However, including generic messages may not be useful enough to match all input fields, therefore,\n\t * `ngMessages` provides the ability to override messages defined in the remote template by redefining\n\t * them within the directive container.\n\t *\n\t * ```html\n\t * <!-- a generic template of error messages known as \"my-custom-messages\" -->\n\t * <script type=\"text/ng-template\" id=\"my-custom-messages\">\n\t *   <div ng-message=\"required\">This field is required</div>\n\t *   <div ng-message=\"minlength\">This field is too short</div>\n\t * </script>\n\t *\n\t * <form name=\"myForm\">\n\t *   <label>\n\t *     Email address\n\t *     <input type=\"email\"\n\t *            id=\"email\"\n\t *            name=\"myEmail\"\n\t *            ng-model=\"email\"\n\t *            minlength=\"5\"\n\t *            required />\n\t *   </label>\n\t *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will\n\t *        override the messages present in the ng-messages-include template -->\n\t *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n\t *     <!-- this required message has overridden the template message -->\n\t *     <div ng-message=\"required\">You did not enter your email address</div>\n\t *\n\t *     <!-- this is a brand new message and will appear last in the prioritization -->\n\t *     <div ng-message=\"email\">Your email address is invalid</div>\n\t *\n\t *     <!-- and here are the generic error messages -->\n\t *     <div ng-messages-include=\"my-custom-messages\"></div>\n\t *   </div>\n\t * </form>\n\t * ```\n\t *\n\t * In the example HTML code above the message that is set on required will override the corresponding\n\t * required message defined within the remote template. Therefore, with particular input fields (such\n\t * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied\n\t * while more generic messages can be used to handle other, more general input errors.\n\t *\n\t * ## Dynamic Messaging\n\t * ngMessages also supports using expressions to dynamically change key values. Using arrays and\n\t * repeaters to list messages is also supported. This means that the code below will be able to\n\t * fully adapt itself and display the appropriate message when any of the expression data changes:\n\t *\n\t * ```html\n\t * <form name=\"myForm\">\n\t *   <label>\n\t *     Email address\n\t *     <input type=\"email\"\n\t *            name=\"myEmail\"\n\t *            ng-model=\"email\"\n\t *            minlength=\"5\"\n\t *            required />\n\t *   </label>\n\t *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n\t *     <div ng-message=\"required\">You did not enter your email address</div>\n\t *     <div ng-repeat=\"errorMessage in errorMessages\">\n\t *       <!-- use ng-message-exp for a message whose key is given by an expression -->\n\t *       <div ng-message-exp=\"errorMessage.type\">{{ errorMessage.text }}</div>\n\t *     </div>\n\t *   </div>\n\t * </form>\n\t * ```\n\t *\n\t * The `errorMessage.type` expression can be a string value or it can be an array so\n\t * that multiple errors can be associated with a single error message:\n\t *\n\t * ```html\n\t *   <label>\n\t *     Email address\n\t *     <input type=\"email\"\n\t *            ng-model=\"data.email\"\n\t *            name=\"myEmail\"\n\t *            ng-minlength=\"5\"\n\t *            ng-maxlength=\"100\"\n\t *            required />\n\t *   </label>\n\t *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n\t *     <div ng-message-exp=\"'required'\">You did not enter your email address</div>\n\t *     <div ng-message-exp=\"['minlength', 'maxlength']\">\n\t *       Your email must be between 5 and 100 characters long\n\t *     </div>\n\t *   </div>\n\t * ```\n\t *\n\t * Feel free to use other structural directives such as ng-if and ng-switch to further control\n\t * what messages are active and when. Be careful, if you place ng-message on the same element\n\t * as these structural directives, Angular may not be able to determine if a message is active\n\t * or not. Therefore it is best to place the ng-message on a child element of the structural\n\t * directive.\n\t *\n\t * ```html\n\t * <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n\t *   <div ng-if=\"showRequiredError\">\n\t *     <div ng-message=\"required\">Please enter something</div>\n\t *   </div>\n\t * </div>\n\t * ```\n\t *\n\t * ## Animations\n\t * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and\n\t * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from\n\t * the DOM by the `ngMessages` directive.\n\t *\n\t * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS\n\t * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no\n\t * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can\n\t * hook into the animations whenever these classes are added/removed.\n\t *\n\t * Let's say that our HTML code for our messages container looks like so:\n\t *\n\t * ```html\n\t * <div ng-messages=\"myMessages\" class=\"my-messages\" role=\"alert\">\n\t *   <div ng-message=\"alert\" class=\"some-message\">...</div>\n\t *   <div ng-message=\"fail\" class=\"some-message\">...</div>\n\t * </div>\n\t * ```\n\t *\n\t * Then the CSS animation code for the message container looks like so:\n\t *\n\t * ```css\n\t * .my-messages {\n\t *   transition:1s linear all;\n\t * }\n\t * .my-messages.ng-active {\n\t *   // messages are visible\n\t * }\n\t * .my-messages.ng-inactive {\n\t *   // messages are hidden\n\t * }\n\t * ```\n\t *\n\t * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter\n\t * and leave animation is triggered for each particular element bound to the `ngMessage` directive.\n\t *\n\t * Therefore, the CSS code for the inner messages looks like so:\n\t *\n\t * ```css\n\t * .some-message {\n\t *   transition:1s linear all;\n\t * }\n\t *\n\t * .some-message.ng-enter {}\n\t * .some-message.ng-enter.ng-enter-active {}\n\t *\n\t * .some-message.ng-leave {}\n\t * .some-message.ng-leave.ng-leave-active {}\n\t * ```\n\t *\n\t * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.\n\t */\n\tangular.module('ngMessages', [])\n\t\n\t   /**\n\t    * @ngdoc directive\n\t    * @module ngMessages\n\t    * @name ngMessages\n\t    * @restrict AE\n\t    *\n\t    * @description\n\t    * `ngMessages` is a directive that is designed to show and hide messages based on the state\n\t    * of a key/value object that it listens on. The directive itself complements error message\n\t    * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).\n\t    *\n\t    * `ngMessages` manages the state of internal messages within its container element. The internal\n\t    * messages use the `ngMessage` directive and will be inserted/removed from the page depending\n\t    * on if they're present within the key/value object. By default, only one message will be displayed\n\t    * at a time and this depends on the prioritization of the messages within the template. (This can\n\t    * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)\n\t    *\n\t    * A remote template can also be used to promote message reusability and messages can also be\n\t    * overridden.\n\t    *\n\t    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n\t    *\n\t    * @usage\n\t    * ```html\n\t    * <!-- using attribute directives -->\n\t    * <ANY ng-messages=\"expression\" role=\"alert\">\n\t    *   <ANY ng-message=\"stringValue\">...</ANY>\n\t    *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n\t    *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n\t    * </ANY>\n\t    *\n\t    * <!-- or by using element directives -->\n\t    * <ng-messages for=\"expression\" role=\"alert\">\n\t    *   <ng-message when=\"stringValue\">...</ng-message>\n\t    *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n\t    *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n\t    * </ng-messages>\n\t    * ```\n\t    *\n\t    * @param {string} ngMessages an angular expression evaluating to a key/value object\n\t    *                 (this is typically the $error object on an ngModel instance).\n\t    * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true\n\t    *\n\t    * @example\n\t    * <example name=\"ngMessages-directive\" module=\"ngMessagesExample\"\n\t    *          deps=\"angular-messages.js\"\n\t    *          animations=\"true\" fixBase=\"true\">\n\t    *   <file name=\"index.html\">\n\t    *     <form name=\"myForm\">\n\t    *       <label>\n\t    *         Enter your name:\n\t    *         <input type=\"text\"\n\t    *                name=\"myName\"\n\t    *                ng-model=\"name\"\n\t    *                ng-minlength=\"5\"\n\t    *                ng-maxlength=\"20\"\n\t    *                required />\n\t    *       </label>\n\t    *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>\n\t    *\n\t    *       <div ng-messages=\"myForm.myName.$error\" style=\"color:maroon\" role=\"alert\">\n\t    *         <div ng-message=\"required\">You did not enter a field</div>\n\t    *         <div ng-message=\"minlength\">Your field is too short</div>\n\t    *         <div ng-message=\"maxlength\">Your field is too long</div>\n\t    *       </div>\n\t    *     </form>\n\t    *   </file>\n\t    *   <file name=\"script.js\">\n\t    *     angular.module('ngMessagesExample', ['ngMessages']);\n\t    *   </file>\n\t    * </example>\n\t    */\n\t   .directive('ngMessages', ['$animate', function($animate) {\n\t     var ACTIVE_CLASS = 'ng-active';\n\t     var INACTIVE_CLASS = 'ng-inactive';\n\t\n\t     return {\n\t       require: 'ngMessages',\n\t       restrict: 'AE',\n\t       controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {\n\t         var ctrl = this;\n\t         var latestKey = 0;\n\t         var nextAttachId = 0;\n\t\n\t         this.getAttachId = function getAttachId() { return nextAttachId++; };\n\t\n\t         var messages = this.messages = {};\n\t         var renderLater, cachedCollection;\n\t\n\t         this.render = function(collection) {\n\t           collection = collection || {};\n\t\n\t           renderLater = false;\n\t           cachedCollection = collection;\n\t\n\t           // this is true if the attribute is empty or if the attribute value is truthy\n\t           var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) ||\n\t                          isAttrTruthy($scope, $attrs.multiple);\n\t\n\t           var unmatchedMessages = [];\n\t           var matchedKeys = {};\n\t           var messageItem = ctrl.head;\n\t           var messageFound = false;\n\t           var totalMessages = 0;\n\t\n\t           // we use != instead of !== to allow for both undefined and null values\n\t           while (messageItem != null) {\n\t             totalMessages++;\n\t             var messageCtrl = messageItem.message;\n\t\n\t             var messageUsed = false;\n\t             if (!messageFound) {\n\t               forEach(collection, function(value, key) {\n\t                 if (!messageUsed && truthy(value) && messageCtrl.test(key)) {\n\t                   // this is to prevent the same error name from showing up twice\n\t                   if (matchedKeys[key]) return;\n\t                   matchedKeys[key] = true;\n\t\n\t                   messageUsed = true;\n\t                   messageCtrl.attach();\n\t                 }\n\t               });\n\t             }\n\t\n\t             if (messageUsed) {\n\t               // unless we want to display multiple messages then we should\n\t               // set a flag here to avoid displaying the next message in the list\n\t               messageFound = !multiple;\n\t             } else {\n\t               unmatchedMessages.push(messageCtrl);\n\t             }\n\t\n\t             messageItem = messageItem.next;\n\t           }\n\t\n\t           forEach(unmatchedMessages, function(messageCtrl) {\n\t             messageCtrl.detach();\n\t           });\n\t\n\t           unmatchedMessages.length !== totalMessages\n\t              ? $animate.setClass($element, ACTIVE_CLASS, INACTIVE_CLASS)\n\t              : $animate.setClass($element, INACTIVE_CLASS, ACTIVE_CLASS);\n\t         };\n\t\n\t         $scope.$watchCollection($attrs.ngMessages || $attrs['for'], ctrl.render);\n\t\n\t         this.reRender = function() {\n\t           if (!renderLater) {\n\t             renderLater = true;\n\t             $scope.$evalAsync(function() {\n\t               if (renderLater) {\n\t                 cachedCollection && ctrl.render(cachedCollection);\n\t               }\n\t             });\n\t           }\n\t         };\n\t\n\t         this.register = function(comment, messageCtrl) {\n\t           var nextKey = latestKey.toString();\n\t           messages[nextKey] = {\n\t             message: messageCtrl\n\t           };\n\t           insertMessageNode($element[0], comment, nextKey);\n\t           comment.$$ngMessageNode = nextKey;\n\t           latestKey++;\n\t\n\t           ctrl.reRender();\n\t         };\n\t\n\t         this.deregister = function(comment) {\n\t           var key = comment.$$ngMessageNode;\n\t           delete comment.$$ngMessageNode;\n\t           removeMessageNode($element[0], comment, key);\n\t           delete messages[key];\n\t           ctrl.reRender();\n\t         };\n\t\n\t         function findPreviousMessage(parent, comment) {\n\t           var prevNode = comment;\n\t           var parentLookup = [];\n\t           while (prevNode && prevNode !== parent) {\n\t             var prevKey = prevNode.$$ngMessageNode;\n\t             if (prevKey && prevKey.length) {\n\t               return messages[prevKey];\n\t             }\n\t\n\t             // dive deeper into the DOM and examine its children for any ngMessage\n\t             // comments that may be in an element that appears deeper in the list\n\t             if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) == -1) {\n\t               parentLookup.push(prevNode);\n\t               prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];\n\t             } else {\n\t               prevNode = prevNode.previousSibling || prevNode.parentNode;\n\t             }\n\t           }\n\t         }\n\t\n\t         function insertMessageNode(parent, comment, key) {\n\t           var messageNode = messages[key];\n\t           if (!ctrl.head) {\n\t             ctrl.head = messageNode;\n\t           } else {\n\t             var match = findPreviousMessage(parent, comment);\n\t             if (match) {\n\t               messageNode.next = match.next;\n\t               match.next = messageNode;\n\t             } else {\n\t               messageNode.next = ctrl.head;\n\t               ctrl.head = messageNode;\n\t             }\n\t           }\n\t         }\n\t\n\t         function removeMessageNode(parent, comment, key) {\n\t           var messageNode = messages[key];\n\t\n\t           var match = findPreviousMessage(parent, comment);\n\t           if (match) {\n\t             match.next = messageNode.next;\n\t           } else {\n\t             ctrl.head = messageNode.next;\n\t           }\n\t         }\n\t       }]\n\t     };\n\t\n\t     function isAttrTruthy(scope, attr) {\n\t      return (isString(attr) && attr.length === 0) || //empty attribute\n\t             truthy(scope.$eval(attr));\n\t     }\n\t\n\t     function truthy(val) {\n\t       return isString(val) ? val.length : !!val;\n\t     }\n\t   }])\n\t\n\t   /**\n\t    * @ngdoc directive\n\t    * @name ngMessagesInclude\n\t    * @restrict AE\n\t    * @scope\n\t    *\n\t    * @description\n\t    * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template\n\t    * code from a remote template and place the downloaded template code into the exact spot\n\t    * that the ngMessagesInclude directive is placed within the ngMessages container. This allows\n\t    * for a series of pre-defined messages to be reused and also allows for the developer to\n\t    * determine what messages are overridden due to the placement of the ngMessagesInclude directive.\n\t    *\n\t    * @usage\n\t    * ```html\n\t    * <!-- using attribute directives -->\n\t    * <ANY ng-messages=\"expression\" role=\"alert\">\n\t    *   <ANY ng-messages-include=\"remoteTplString\">...</ANY>\n\t    * </ANY>\n\t    *\n\t    * <!-- or by using element directives -->\n\t    * <ng-messages for=\"expression\" role=\"alert\">\n\t    *   <ng-messages-include src=\"expressionValue1\">...</ng-messages-include>\n\t    * </ng-messages>\n\t    * ```\n\t    *\n\t    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n\t    *\n\t    * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.\n\t    */\n\t   .directive('ngMessagesInclude',\n\t     ['$templateRequest', '$document', '$compile', function($templateRequest, $document, $compile) {\n\t\n\t     return {\n\t       restrict: 'AE',\n\t       require: '^^ngMessages', // we only require this for validation sake\n\t       link: function($scope, element, attrs) {\n\t         var src = attrs.ngMessagesInclude || attrs.src;\n\t         $templateRequest(src).then(function(html) {\n\t           $compile(html)($scope, function(contents) {\n\t             element.after(contents);\n\t\n\t             // the anchor is placed for debugging purposes\n\t             var anchor = jqLite($document[0].createComment(' ngMessagesInclude: ' + src + ' '));\n\t             element.after(anchor);\n\t\n\t             // we don't want to pollute the DOM anymore by keeping an empty directive element\n\t             element.remove();\n\t           });\n\t         });\n\t       }\n\t     };\n\t   }])\n\t\n\t   /**\n\t    * @ngdoc directive\n\t    * @name ngMessage\n\t    * @restrict AE\n\t    * @scope\n\t    *\n\t    * @description\n\t    * `ngMessage` is a directive with the purpose to show and hide a particular message.\n\t    * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element\n\t    * must be situated since it determines which messages are visible based on the state\n\t    * of the provided key/value map that `ngMessages` listens on.\n\t    *\n\t    * More information about using `ngMessage` can be found in the\n\t    * {@link module:ngMessages `ngMessages` module documentation}.\n\t    *\n\t    * @usage\n\t    * ```html\n\t    * <!-- using attribute directives -->\n\t    * <ANY ng-messages=\"expression\" role=\"alert\">\n\t    *   <ANY ng-message=\"stringValue\">...</ANY>\n\t    *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n\t    * </ANY>\n\t    *\n\t    * <!-- or by using element directives -->\n\t    * <ng-messages for=\"expression\" role=\"alert\">\n\t    *   <ng-message when=\"stringValue\">...</ng-message>\n\t    *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n\t    * </ng-messages>\n\t    * ```\n\t    *\n\t    * @param {expression} ngMessage|when a string value corresponding to the message key.\n\t    */\n\t  .directive('ngMessage', ngMessageDirectiveFactory('AE'))\n\t\n\t\n\t   /**\n\t    * @ngdoc directive\n\t    * @name ngMessageExp\n\t    * @restrict AE\n\t    * @scope\n\t    *\n\t    * @description\n\t    * `ngMessageExp` is a directive with the purpose to show and hide a particular message.\n\t    * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element\n\t    * must be situated since it determines which messages are visible based on the state\n\t    * of the provided key/value map that `ngMessages` listens on.\n\t    *\n\t    * @usage\n\t    * ```html\n\t    * <!-- using attribute directives -->\n\t    * <ANY ng-messages=\"expression\">\n\t    *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n\t    * </ANY>\n\t    *\n\t    * <!-- or by using element directives -->\n\t    * <ng-messages for=\"expression\">\n\t    *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n\t    * </ng-messages>\n\t    * ```\n\t    *\n\t    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n\t    *\n\t    * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key.\n\t    */\n\t  .directive('ngMessageExp', ngMessageDirectiveFactory('A'));\n\t\n\tfunction ngMessageDirectiveFactory(restrict) {\n\t  return ['$animate', function($animate) {\n\t    return {\n\t      restrict: 'AE',\n\t      transclude: 'element',\n\t      terminal: true,\n\t      require: '^^ngMessages',\n\t      link: function(scope, element, attrs, ngMessagesCtrl, $transclude) {\n\t        var commentNode = element[0];\n\t\n\t        var records;\n\t        var staticExp = attrs.ngMessage || attrs.when;\n\t        var dynamicExp = attrs.ngMessageExp || attrs.whenExp;\n\t        var assignRecords = function(items) {\n\t          records = items\n\t              ? (isArray(items)\n\t                    ? items\n\t                    : items.split(/[\\s,]+/))\n\t              : null;\n\t          ngMessagesCtrl.reRender();\n\t        };\n\t\n\t        if (dynamicExp) {\n\t          assignRecords(scope.$eval(dynamicExp));\n\t          scope.$watchCollection(dynamicExp, assignRecords);\n\t        } else {\n\t          assignRecords(staticExp);\n\t        }\n\t\n\t        var currentElement, messageCtrl;\n\t        ngMessagesCtrl.register(commentNode, messageCtrl = {\n\t          test: function(name) {\n\t            return contains(records, name);\n\t          },\n\t          attach: function() {\n\t            if (!currentElement) {\n\t              $transclude(scope, function(elm) {\n\t                $animate.enter(elm, null, element);\n\t                currentElement = elm;\n\t\n\t                // Each time we attach this node to a message we get a new id that we can match\n\t                // when we are destroying the node later.\n\t                var $$attachId = currentElement.$$attachId = ngMessagesCtrl.getAttachId();\n\t\n\t                // in the event that the parent element is destroyed\n\t                // by any other structural directive then it's time\n\t                // to deregister the message from the controller\n\t                currentElement.on('$destroy', function() {\n\t                  if (currentElement && currentElement.$$attachId === $$attachId) {\n\t                    ngMessagesCtrl.deregister(commentNode);\n\t                    messageCtrl.detach();\n\t                  }\n\t                });\n\t              });\n\t            }\n\t          },\n\t          detach: function() {\n\t            if (currentElement) {\n\t              var elm = currentElement;\n\t              currentElement = null;\n\t              $animate.leave(elm);\n\t            }\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }];\n\t\n\t  function contains(collection, key) {\n\t    if (collection) {\n\t      return isArray(collection)\n\t          ? collection.indexOf(key) >= 0\n\t          : collection.hasOwnProperty(key);\n\t    }\n\t  }\n\t}\n\t\n\t\n\t})(window, window.angular);\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Should already be required, here for clarity\n\t__webpack_require__(1);\n\t\n\t// Load Angular and dependent libs\n\t__webpack_require__(5);\n\t__webpack_require__(7);\n\t\n\t// Now load Angular Material\n\t__webpack_require__(9);\n\t\n\t// Export namespace\n\tmodule.exports = 'ngMaterial';\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(6);\n\tmodule.exports = 'ngAnimate';\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @license AngularJS v1.4.8\n\t * (c) 2010-2015 Google, Inc. http://angularjs.org\n\t * License: MIT\n\t */\n\t(function(window, angular, undefined) {'use strict';\n\t\n\t/* jshint ignore:start */\n\tvar noop        = angular.noop;\n\tvar extend      = angular.extend;\n\tvar jqLite      = angular.element;\n\tvar forEach     = angular.forEach;\n\tvar isArray     = angular.isArray;\n\tvar isString    = angular.isString;\n\tvar isObject    = angular.isObject;\n\tvar isUndefined = angular.isUndefined;\n\tvar isDefined   = angular.isDefined;\n\tvar isFunction  = angular.isFunction;\n\tvar isElement   = angular.isElement;\n\t\n\tvar ELEMENT_NODE = 1;\n\tvar COMMENT_NODE = 8;\n\t\n\tvar ADD_CLASS_SUFFIX = '-add';\n\tvar REMOVE_CLASS_SUFFIX = '-remove';\n\tvar EVENT_CLASS_PREFIX = 'ng-';\n\tvar ACTIVE_CLASS_SUFFIX = '-active';\n\t\n\tvar NG_ANIMATE_CLASSNAME = 'ng-animate';\n\tvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\n\t\n\t// Detect proper transitionend/animationend event names.\n\tvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\t\n\t// If unprefixed events are not supported but webkit-prefixed are, use the latter.\n\t// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n\t// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n\t// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n\t// Register both events in case `window.onanimationend` is not supported because of that,\n\t// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n\t// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n\t// therefore there is no reason to test anymore for other vendor prefixes:\n\t// http://caniuse.com/#search=transition\n\tif (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {\n\t  CSS_PREFIX = '-webkit-';\n\t  TRANSITION_PROP = 'WebkitTransition';\n\t  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n\t} else {\n\t  TRANSITION_PROP = 'transition';\n\t  TRANSITIONEND_EVENT = 'transitionend';\n\t}\n\t\n\tif (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {\n\t  CSS_PREFIX = '-webkit-';\n\t  ANIMATION_PROP = 'WebkitAnimation';\n\t  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n\t} else {\n\t  ANIMATION_PROP = 'animation';\n\t  ANIMATIONEND_EVENT = 'animationend';\n\t}\n\t\n\tvar DURATION_KEY = 'Duration';\n\tvar PROPERTY_KEY = 'Property';\n\tvar DELAY_KEY = 'Delay';\n\tvar TIMING_KEY = 'TimingFunction';\n\tvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\n\tvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\n\tvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\t\n\tvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\n\tvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\n\tvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\n\tvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\t\n\tvar isPromiseLike = function(p) {\n\t  return p && p.then ? true : false;\n\t};\n\t\n\tfunction assertArg(arg, name, reason) {\n\t  if (!arg) {\n\t    throw ngMinErr('areq', \"Argument '{0}' is {1}\", (name || '?'), (reason || \"required\"));\n\t  }\n\t  return arg;\n\t}\n\t\n\tfunction mergeClasses(a,b) {\n\t  if (!a && !b) return '';\n\t  if (!a) return b;\n\t  if (!b) return a;\n\t  if (isArray(a)) a = a.join(' ');\n\t  if (isArray(b)) b = b.join(' ');\n\t  return a + ' ' + b;\n\t}\n\t\n\tfunction packageStyles(options) {\n\t  var styles = {};\n\t  if (options && (options.to || options.from)) {\n\t    styles.to = options.to;\n\t    styles.from = options.from;\n\t  }\n\t  return styles;\n\t}\n\t\n\tfunction pendClasses(classes, fix, isPrefix) {\n\t  var className = '';\n\t  classes = isArray(classes)\n\t      ? classes\n\t      : classes && isString(classes) && classes.length\n\t          ? classes.split(/\\s+/)\n\t          : [];\n\t  forEach(classes, function(klass, i) {\n\t    if (klass && klass.length > 0) {\n\t      className += (i > 0) ? ' ' : '';\n\t      className += isPrefix ? fix + klass\n\t                            : klass + fix;\n\t    }\n\t  });\n\t  return className;\n\t}\n\t\n\tfunction removeFromArray(arr, val) {\n\t  var index = arr.indexOf(val);\n\t  if (val >= 0) {\n\t    arr.splice(index, 1);\n\t  }\n\t}\n\t\n\tfunction stripCommentsFromElement(element) {\n\t  if (element instanceof jqLite) {\n\t    switch (element.length) {\n\t      case 0:\n\t        return [];\n\t        break;\n\t\n\t      case 1:\n\t        // there is no point of stripping anything if the element\n\t        // is the only element within the jqLite wrapper.\n\t        // (it's important that we retain the element instance.)\n\t        if (element[0].nodeType === ELEMENT_NODE) {\n\t          return element;\n\t        }\n\t        break;\n\t\n\t      default:\n\t        return jqLite(extractElementNode(element));\n\t        break;\n\t    }\n\t  }\n\t\n\t  if (element.nodeType === ELEMENT_NODE) {\n\t    return jqLite(element);\n\t  }\n\t}\n\t\n\tfunction extractElementNode(element) {\n\t  if (!element[0]) return element;\n\t  for (var i = 0; i < element.length; i++) {\n\t    var elm = element[i];\n\t    if (elm.nodeType == ELEMENT_NODE) {\n\t      return elm;\n\t    }\n\t  }\n\t}\n\t\n\tfunction $$addClass($$jqLite, element, className) {\n\t  forEach(element, function(elm) {\n\t    $$jqLite.addClass(elm, className);\n\t  });\n\t}\n\t\n\tfunction $$removeClass($$jqLite, element, className) {\n\t  forEach(element, function(elm) {\n\t    $$jqLite.removeClass(elm, className);\n\t  });\n\t}\n\t\n\tfunction applyAnimationClassesFactory($$jqLite) {\n\t  return function(element, options) {\n\t    if (options.addClass) {\n\t      $$addClass($$jqLite, element, options.addClass);\n\t      options.addClass = null;\n\t    }\n\t    if (options.removeClass) {\n\t      $$removeClass($$jqLite, element, options.removeClass);\n\t      options.removeClass = null;\n\t    }\n\t  }\n\t}\n\t\n\tfunction prepareAnimationOptions(options) {\n\t  options = options || {};\n\t  if (!options.$$prepared) {\n\t    var domOperation = options.domOperation || noop;\n\t    options.domOperation = function() {\n\t      options.$$domOperationFired = true;\n\t      domOperation();\n\t      domOperation = noop;\n\t    };\n\t    options.$$prepared = true;\n\t  }\n\t  return options;\n\t}\n\t\n\tfunction applyAnimationStyles(element, options) {\n\t  applyAnimationFromStyles(element, options);\n\t  applyAnimationToStyles(element, options);\n\t}\n\t\n\tfunction applyAnimationFromStyles(element, options) {\n\t  if (options.from) {\n\t    element.css(options.from);\n\t    options.from = null;\n\t  }\n\t}\n\t\n\tfunction applyAnimationToStyles(element, options) {\n\t  if (options.to) {\n\t    element.css(options.to);\n\t    options.to = null;\n\t  }\n\t}\n\t\n\tfunction mergeAnimationOptions(element, target, newOptions) {\n\t  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\n\t  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\n\t  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\n\t\n\t  if (newOptions.preparationClasses) {\n\t    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\n\t    delete newOptions.preparationClasses;\n\t  }\n\t\n\t  // noop is basically when there is no callback; otherwise something has been set\n\t  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\n\t\n\t  extend(target, newOptions);\n\t\n\t  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\n\t  if (realDomOperation) {\n\t    target.domOperation = realDomOperation;\n\t  }\n\t\n\t  if (classes.addClass) {\n\t    target.addClass = classes.addClass;\n\t  } else {\n\t    target.addClass = null;\n\t  }\n\t\n\t  if (classes.removeClass) {\n\t    target.removeClass = classes.removeClass;\n\t  } else {\n\t    target.removeClass = null;\n\t  }\n\t\n\t  return target;\n\t}\n\t\n\tfunction resolveElementClasses(existing, toAdd, toRemove) {\n\t  var ADD_CLASS = 1;\n\t  var REMOVE_CLASS = -1;\n\t\n\t  var flags = {};\n\t  existing = splitClassesToLookup(existing);\n\t\n\t  toAdd = splitClassesToLookup(toAdd);\n\t  forEach(toAdd, function(value, key) {\n\t    flags[key] = ADD_CLASS;\n\t  });\n\t\n\t  toRemove = splitClassesToLookup(toRemove);\n\t  forEach(toRemove, function(value, key) {\n\t    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n\t  });\n\t\n\t  var classes = {\n\t    addClass: '',\n\t    removeClass: ''\n\t  };\n\t\n\t  forEach(flags, function(val, klass) {\n\t    var prop, allow;\n\t    if (val === ADD_CLASS) {\n\t      prop = 'addClass';\n\t      allow = !existing[klass];\n\t    } else if (val === REMOVE_CLASS) {\n\t      prop = 'removeClass';\n\t      allow = existing[klass];\n\t    }\n\t    if (allow) {\n\t      if (classes[prop].length) {\n\t        classes[prop] += ' ';\n\t      }\n\t      classes[prop] += klass;\n\t    }\n\t  });\n\t\n\t  function splitClassesToLookup(classes) {\n\t    if (isString(classes)) {\n\t      classes = classes.split(' ');\n\t    }\n\t\n\t    var obj = {};\n\t    forEach(classes, function(klass) {\n\t      // sometimes the split leaves empty string values\n\t      // incase extra spaces were applied to the options\n\t      if (klass.length) {\n\t        obj[klass] = true;\n\t      }\n\t    });\n\t    return obj;\n\t  }\n\t\n\t  return classes;\n\t}\n\t\n\tfunction getDomNode(element) {\n\t  return (element instanceof angular.element) ? element[0] : element;\n\t}\n\t\n\tfunction applyGeneratedPreparationClasses(element, event, options) {\n\t  var classes = '';\n\t  if (event) {\n\t    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n\t  }\n\t  if (options.addClass) {\n\t    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\n\t  }\n\t  if (options.removeClass) {\n\t    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\n\t  }\n\t  if (classes.length) {\n\t    options.preparationClasses = classes;\n\t    element.addClass(classes);\n\t  }\n\t}\n\t\n\tfunction clearGeneratedClasses(element, options) {\n\t  if (options.preparationClasses) {\n\t    element.removeClass(options.preparationClasses);\n\t    options.preparationClasses = null;\n\t  }\n\t  if (options.activeClasses) {\n\t    element.removeClass(options.activeClasses);\n\t    options.activeClasses = null;\n\t  }\n\t}\n\t\n\tfunction blockTransitions(node, duration) {\n\t  // we use a negative delay value since it performs blocking\n\t  // yet it doesn't kill any existing transitions running on the\n\t  // same element which makes this safe for class-based animations\n\t  var value = duration ? '-' + duration + 's' : '';\n\t  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n\t  return [TRANSITION_DELAY_PROP, value];\n\t}\n\t\n\tfunction blockKeyframeAnimations(node, applyBlock) {\n\t  var value = applyBlock ? 'paused' : '';\n\t  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n\t  applyInlineStyle(node, [key, value]);\n\t  return [key, value];\n\t}\n\t\n\tfunction applyInlineStyle(node, styleTuple) {\n\t  var prop = styleTuple[0];\n\t  var value = styleTuple[1];\n\t  node.style[prop] = value;\n\t}\n\t\n\tfunction concatWithSpace(a,b) {\n\t  if (!a) return b;\n\t  if (!b) return a;\n\t  return a + ' ' + b;\n\t}\n\t\n\tvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\n\t  var queue, cancelFn;\n\t\n\t  function scheduler(tasks) {\n\t    // we make a copy since RAFScheduler mutates the state\n\t    // of the passed in array variable and this would be difficult\n\t    // to track down on the outside code\n\t    queue = queue.concat(tasks);\n\t    nextTick();\n\t  }\n\t\n\t  queue = scheduler.queue = [];\n\t\n\t  /* waitUntilQuiet does two things:\n\t   * 1. It will run the FINAL `fn` value only when an uncancelled RAF has passed through\n\t   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\n\t   *\n\t   * The motivation here is that animation code can request more time from the scheduler\n\t   * before the next wave runs. This allows for certain DOM properties such as classes to\n\t   * be resolved in time for the next animation to run.\n\t   */\n\t  scheduler.waitUntilQuiet = function(fn) {\n\t    if (cancelFn) cancelFn();\n\t\n\t    cancelFn = $$rAF(function() {\n\t      cancelFn = null;\n\t      fn();\n\t      nextTick();\n\t    });\n\t  };\n\t\n\t  return scheduler;\n\t\n\t  function nextTick() {\n\t    if (!queue.length) return;\n\t\n\t    var items = queue.shift();\n\t    for (var i = 0; i < items.length; i++) {\n\t      items[i]();\n\t    }\n\t\n\t    if (!cancelFn) {\n\t      $$rAF(function() {\n\t        if (!cancelFn) nextTick();\n\t      });\n\t    }\n\t  }\n\t}];\n\t\n\tvar $$AnimateChildrenDirective = [function() {\n\t  return function(scope, element, attrs) {\n\t    var val = attrs.ngAnimateChildren;\n\t    if (angular.isString(val) && val.length === 0) { //empty attribute\n\t      element.data(NG_ANIMATE_CHILDREN_DATA, true);\n\t    } else {\n\t      attrs.$observe('ngAnimateChildren', function(value) {\n\t        value = value === 'on' || value === 'true';\n\t        element.data(NG_ANIMATE_CHILDREN_DATA, value);\n\t      });\n\t    }\n\t  };\n\t}];\n\t\n\tvar ANIMATE_TIMER_KEY = '$$animateCss';\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $animateCss\n\t * @kind object\n\t *\n\t * @description\n\t * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\n\t * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\n\t * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\n\t * directives to create more complex animations that can be purely driven using CSS code.\n\t *\n\t * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\n\t * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\n\t *\n\t * ## Usage\n\t * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\n\t * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\n\t * any automatic control over cancelling animations and/or preventing animations from being run on\n\t * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to\n\t * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\n\t * the CSS animation.\n\t *\n\t * The example below shows how we can create a folding animation on an element using `ng-if`:\n\t *\n\t * ```html\n\t * <!-- notice the `fold-animation` CSS class -->\n\t * <div ng-if=\"onOff\" class=\"fold-animation\">\n\t *   This element will go BOOM\n\t * </div>\n\t * <button ng-click=\"onOff=true\">Fold In</button>\n\t * ```\n\t *\n\t * Now we create the **JavaScript animation** that will trigger the CSS transition:\n\t *\n\t * ```js\n\t * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n\t *   return {\n\t *     enter: function(element, doneFn) {\n\t *       var height = element[0].offsetHeight;\n\t *       return $animateCss(element, {\n\t *         from: { height:'0px' },\n\t *         to: { height:height + 'px' },\n\t *         duration: 1 // one second\n\t *       });\n\t *     }\n\t *   }\n\t * }]);\n\t * ```\n\t *\n\t * ## More Advanced Uses\n\t *\n\t * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\n\t * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\n\t *\n\t * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\n\t * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\n\t * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\n\t * to provide a working animation that will run in CSS.\n\t *\n\t * The example below showcases a more advanced version of the `.fold-animation` from the example above:\n\t *\n\t * ```js\n\t * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n\t *   return {\n\t *     enter: function(element, doneFn) {\n\t *       var height = element[0].offsetHeight;\n\t *       return $animateCss(element, {\n\t *         addClass: 'red large-text pulse-twice',\n\t *         easing: 'ease-out',\n\t *         from: { height:'0px' },\n\t *         to: { height:height + 'px' },\n\t *         duration: 1 // one second\n\t *       });\n\t *     }\n\t *   }\n\t * }]);\n\t * ```\n\t *\n\t * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\n\t *\n\t * ```css\n\t * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\n\t * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\n\t * .red { background:red; }\n\t * .large-text { font-size:20px; }\n\t *\n\t * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\n\t * .pulse-twice {\n\t *   animation: 0.5s pulse linear 2;\n\t *   -webkit-animation: 0.5s pulse linear 2;\n\t * }\n\t *\n\t * @keyframes pulse {\n\t *   from { transform: scale(0.5); }\n\t *   to { transform: scale(1.5); }\n\t * }\n\t *\n\t * @-webkit-keyframes pulse {\n\t *   from { -webkit-transform: scale(0.5); }\n\t *   to { -webkit-transform: scale(1.5); }\n\t * }\n\t * ```\n\t *\n\t * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\n\t *\n\t * ## How the Options are handled\n\t *\n\t * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\n\t * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\n\t * styles using the `from` and `to` properties.\n\t *\n\t * ```js\n\t * var animator = $animateCss(element, {\n\t *   from: { background:'red' },\n\t *   to: { background:'blue' }\n\t * });\n\t * animator.start();\n\t * ```\n\t *\n\t * ```css\n\t * .rotating-animation {\n\t *   animation:0.5s rotate linear;\n\t *   -webkit-animation:0.5s rotate linear;\n\t * }\n\t *\n\t * @keyframes rotate {\n\t *   from { transform: rotate(0deg); }\n\t *   to { transform: rotate(360deg); }\n\t * }\n\t *\n\t * @-webkit-keyframes rotate {\n\t *   from { -webkit-transform: rotate(0deg); }\n\t *   to { -webkit-transform: rotate(360deg); }\n\t * }\n\t * ```\n\t *\n\t * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\n\t * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\n\t * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\n\t * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\n\t * and spread across the transition and keyframe animation.\n\t *\n\t * ## What is returned\n\t *\n\t * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\n\t * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\n\t * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\n\t *\n\t * ```js\n\t * var animator = $animateCss(element, { ... });\n\t * ```\n\t *\n\t * Now what do the contents of our `animator` variable look like:\n\t *\n\t * ```js\n\t * {\n\t *   // starts the animation\n\t *   start: Function,\n\t *\n\t *   // ends (aborts) the animation\n\t *   end: Function\n\t * }\n\t * ```\n\t *\n\t * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\n\t * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and stlyes may have been\n\t * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\n\t * and that changing them will not reconfigure the parameters of the animation.\n\t *\n\t * ### runner.done() vs runner.then()\n\t * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\n\t * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\n\t * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\n\t * unless you really need a digest to kick off afterwards.\n\t *\n\t * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\n\t * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\n\t * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\n\t *\n\t * @param {DOMElement} element the element that will be animated\n\t * @param {object} options the animation-related options that will be applied during the animation\n\t *\n\t * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\n\t * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\n\t * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\n\t * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\n\t * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\n\t * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\n\t * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\n\t * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\n\t * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\n\t * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\n\t * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\n\t * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\n\t * is provided then the animation will be skipped entirely.\n\t * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\n\t * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\n\t * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\n\t * CSS delay value.\n\t * * `stagger` - A numeric time value representing the delay between successively animated elements\n\t * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\n\t * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\n\t * * `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\n\t * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occuring on the classes being added and removed.)\n\t * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\n\t *    the animation is closed. This is useful for when the styles are used purely for the sake of\n\t *    the animation and do not have a lasting visual effect on the element (e.g. a colapse and open animation).\n\t *    By default this value is set to `false`.\n\t *\n\t * @return {object} an object with start and end methods and details about the animation.\n\t *\n\t * * `start` - The method to start the animation. This will return a `Promise` when called.\n\t * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\n\t */\n\tvar ONE_SECOND = 1000;\n\tvar BASE_TEN = 10;\n\t\n\tvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\n\tvar CLOSING_TIME_BUFFER = 1.5;\n\t\n\tvar DETECT_CSS_PROPERTIES = {\n\t  transitionDuration:      TRANSITION_DURATION_PROP,\n\t  transitionDelay:         TRANSITION_DELAY_PROP,\n\t  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\n\t  animationDuration:       ANIMATION_DURATION_PROP,\n\t  animationDelay:          ANIMATION_DELAY_PROP,\n\t  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\n\t};\n\t\n\tvar DETECT_STAGGER_CSS_PROPERTIES = {\n\t  transitionDuration:      TRANSITION_DURATION_PROP,\n\t  transitionDelay:         TRANSITION_DELAY_PROP,\n\t  animationDuration:       ANIMATION_DURATION_PROP,\n\t  animationDelay:          ANIMATION_DELAY_PROP\n\t};\n\t\n\tfunction getCssKeyframeDurationStyle(duration) {\n\t  return [ANIMATION_DURATION_PROP, duration + 's'];\n\t}\n\t\n\tfunction getCssDelayStyle(delay, isKeyframeAnimation) {\n\t  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\n\t  return [prop, delay + 's'];\n\t}\n\t\n\tfunction computeCssStyles($window, element, properties) {\n\t  var styles = Object.create(null);\n\t  var detectedStyles = $window.getComputedStyle(element) || {};\n\t  forEach(properties, function(formalStyleName, actualStyleName) {\n\t    var val = detectedStyles[formalStyleName];\n\t    if (val) {\n\t      var c = val.charAt(0);\n\t\n\t      // only numerical-based values have a negative sign or digit as the first value\n\t      if (c === '-' || c === '+' || c >= 0) {\n\t        val = parseMaxTime(val);\n\t      }\n\t\n\t      // by setting this to null in the event that the delay is not set or is set directly as 0\n\t      // then we can still allow for zegative values to be used later on and not mistake this\n\t      // value for being greater than any other negative value.\n\t      if (val === 0) {\n\t        val = null;\n\t      }\n\t      styles[actualStyleName] = val;\n\t    }\n\t  });\n\t\n\t  return styles;\n\t}\n\t\n\tfunction parseMaxTime(str) {\n\t  var maxValue = 0;\n\t  var values = str.split(/\\s*,\\s*/);\n\t  forEach(values, function(value) {\n\t    // it's always safe to consider only second values and omit `ms` values since\n\t    // getComputedStyle will always handle the conversion for us\n\t    if (value.charAt(value.length - 1) == 's') {\n\t      value = value.substring(0, value.length - 1);\n\t    }\n\t    value = parseFloat(value) || 0;\n\t    maxValue = maxValue ? Math.max(value, maxValue) : value;\n\t  });\n\t  return maxValue;\n\t}\n\t\n\tfunction truthyTimingValue(val) {\n\t  return val === 0 || val != null;\n\t}\n\t\n\tfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n\t  var style = TRANSITION_PROP;\n\t  var value = duration + 's';\n\t  if (applyOnlyDuration) {\n\t    style += DURATION_KEY;\n\t  } else {\n\t    value += ' linear all';\n\t  }\n\t  return [style, value];\n\t}\n\t\n\tfunction createLocalCacheLookup() {\n\t  var cache = Object.create(null);\n\t  return {\n\t    flush: function() {\n\t      cache = Object.create(null);\n\t    },\n\t\n\t    count: function(key) {\n\t      var entry = cache[key];\n\t      return entry ? entry.total : 0;\n\t    },\n\t\n\t    get: function(key) {\n\t      var entry = cache[key];\n\t      return entry && entry.value;\n\t    },\n\t\n\t    put: function(key, value) {\n\t      if (!cache[key]) {\n\t        cache[key] = { total: 1, value: value };\n\t      } else {\n\t        cache[key].total++;\n\t      }\n\t    }\n\t  };\n\t}\n\t\n\t// we do not reassign an already present style value since\n\t// if we detect the style property value again we may be\n\t// detecting styles that were added via the `from` styles.\n\t// We make use of `isDefined` here since an empty string\n\t// or null value (which is what getPropertyValue will return\n\t// for a non-existing style) will still be marked as a valid\n\t// value for the style (a falsy value implies that the style\n\t// is to be removed at the end of the animation). If we had a simple\n\t// \"OR\" statement then it would not be enough to catch that.\n\tfunction registerRestorableStyles(backup, node, properties) {\n\t  forEach(properties, function(prop) {\n\t    backup[prop] = isDefined(backup[prop])\n\t        ? backup[prop]\n\t        : node.style.getPropertyValue(prop);\n\t  });\n\t}\n\t\n\tvar $AnimateCssProvider = ['$animateProvider', function($animateProvider) {\n\t  var gcsLookup = createLocalCacheLookup();\n\t  var gcsStaggerLookup = createLocalCacheLookup();\n\t\n\t  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\n\t               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$animate',\n\t       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\n\t                $$forceReflow,   $sniffer,   $$rAFScheduler, $animate) {\n\t\n\t    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\t\n\t    var parentCounter = 0;\n\t    function gcsHashFn(node, extraClasses) {\n\t      var KEY = \"$$ngAnimateParentKey\";\n\t      var parentNode = node.parentNode;\n\t      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\n\t      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\n\t    }\n\t\n\t    function computeCachedCssStyles(node, className, cacheKey, properties) {\n\t      var timings = gcsLookup.get(cacheKey);\n\t\n\t      if (!timings) {\n\t        timings = computeCssStyles($window, node, properties);\n\t        if (timings.animationIterationCount === 'infinite') {\n\t          timings.animationIterationCount = 1;\n\t        }\n\t      }\n\t\n\t      // we keep putting this in multiple times even though the value and the cacheKey are the same\n\t      // because we're keeping an interal tally of how many duplicate animations are detected.\n\t      gcsLookup.put(cacheKey, timings);\n\t      return timings;\n\t    }\n\t\n\t    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\n\t      var stagger;\n\t\n\t      // if we have one or more existing matches of matching elements\n\t      // containing the same parent + CSS styles (which is how cacheKey works)\n\t      // then staggering is possible\n\t      if (gcsLookup.count(cacheKey) > 0) {\n\t        stagger = gcsStaggerLookup.get(cacheKey);\n\t\n\t        if (!stagger) {\n\t          var staggerClassName = pendClasses(className, '-stagger');\n\t\n\t          $$jqLite.addClass(node, staggerClassName);\n\t\n\t          stagger = computeCssStyles($window, node, properties);\n\t\n\t          // force the conversion of a null value to zero incase not set\n\t          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n\t          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\n\t\n\t          $$jqLite.removeClass(node, staggerClassName);\n\t\n\t          gcsStaggerLookup.put(cacheKey, stagger);\n\t        }\n\t      }\n\t\n\t      return stagger || {};\n\t    }\n\t\n\t    var cancelLastRAFRequest;\n\t    var rafWaitQueue = [];\n\t    function waitUntilQuiet(callback) {\n\t      rafWaitQueue.push(callback);\n\t      $$rAFScheduler.waitUntilQuiet(function() {\n\t        gcsLookup.flush();\n\t        gcsStaggerLookup.flush();\n\t\n\t        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n\t        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n\t        var pageWidth = $$forceReflow();\n\t\n\t        // we use a for loop to ensure that if the queue is changed\n\t        // during this looping then it will consider new requests\n\t        for (var i = 0; i < rafWaitQueue.length; i++) {\n\t          rafWaitQueue[i](pageWidth);\n\t        }\n\t        rafWaitQueue.length = 0;\n\t      });\n\t    }\n\t\n\t    function computeTimings(node, className, cacheKey) {\n\t      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\n\t      var aD = timings.animationDelay;\n\t      var tD = timings.transitionDelay;\n\t      timings.maxDelay = aD && tD\n\t          ? Math.max(aD, tD)\n\t          : (aD || tD);\n\t      timings.maxDuration = Math.max(\n\t          timings.animationDuration * timings.animationIterationCount,\n\t          timings.transitionDuration);\n\t\n\t      return timings;\n\t    }\n\t\n\t    return function init(element, options) {\n\t      var restoreStyles = {};\n\t      var node = getDomNode(element);\n\t      if (!node\n\t          || !node.parentNode\n\t          || !$animate.enabled()) {\n\t        return closeAndReturnNoopAnimator();\n\t      }\n\t\n\t      options = prepareAnimationOptions(options);\n\t\n\t      var temporaryStyles = [];\n\t      var classes = element.attr('class');\n\t      var styles = packageStyles(options);\n\t      var animationClosed;\n\t      var animationPaused;\n\t      var animationCompleted;\n\t      var runner;\n\t      var runnerHost;\n\t      var maxDelay;\n\t      var maxDelayTime;\n\t      var maxDuration;\n\t      var maxDurationTime;\n\t\n\t      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\n\t        return closeAndReturnNoopAnimator();\n\t      }\n\t\n\t      var method = options.event && isArray(options.event)\n\t            ? options.event.join(' ')\n\t            : options.event;\n\t\n\t      var isStructural = method && options.structural;\n\t      var structuralClassName = '';\n\t      var addRemoveClassName = '';\n\t\n\t      if (isStructural) {\n\t        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n\t      } else if (method) {\n\t        structuralClassName = method;\n\t      }\n\t\n\t      if (options.addClass) {\n\t        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n\t      }\n\t\n\t      if (options.removeClass) {\n\t        if (addRemoveClassName.length) {\n\t          addRemoveClassName += ' ';\n\t        }\n\t        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\n\t      }\n\t\n\t      // there may be a situation where a structural animation is combined together\n\t      // with CSS classes that need to resolve before the animation is computed.\n\t      // However this means that there is no explicit CSS code to block the animation\n\t      // from happening (by setting 0s none in the class name). If this is the case\n\t      // we need to apply the classes before the first rAF so we know to continue if\n\t      // there actually is a detected transition or keyframe animation\n\t      if (options.applyClassesEarly && addRemoveClassName.length) {\n\t        applyAnimationClasses(element, options);\n\t      }\n\t\n\t      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\n\t      var fullClassName = classes + ' ' + preparationClasses;\n\t      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n\t      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n\t      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\n\t\n\t      // there is no way we can trigger an animation if no styles and\n\t      // no classes are being applied which would then trigger a transition,\n\t      // unless there a is raw keyframe value that is applied to the element.\n\t      if (!containsKeyframeAnimation\n\t           && !hasToStyles\n\t           && !preparationClasses) {\n\t        return closeAndReturnNoopAnimator();\n\t      }\n\t\n\t      var cacheKey, stagger;\n\t      if (options.stagger > 0) {\n\t        var staggerVal = parseFloat(options.stagger);\n\t        stagger = {\n\t          transitionDelay: staggerVal,\n\t          animationDelay: staggerVal,\n\t          transitionDuration: 0,\n\t          animationDuration: 0\n\t        };\n\t      } else {\n\t        cacheKey = gcsHashFn(node, fullClassName);\n\t        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\n\t      }\n\t\n\t      if (!options.$$skipPreparationClasses) {\n\t        $$jqLite.addClass(element, preparationClasses);\n\t      }\n\t\n\t      var applyOnlyDuration;\n\t\n\t      if (options.transitionStyle) {\n\t        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n\t        applyInlineStyle(node, transitionStyle);\n\t        temporaryStyles.push(transitionStyle);\n\t      }\n\t\n\t      if (options.duration >= 0) {\n\t        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n\t        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\n\t\n\t        // we set the duration so that it will be picked up by getComputedStyle later\n\t        applyInlineStyle(node, durationStyle);\n\t        temporaryStyles.push(durationStyle);\n\t      }\n\t\n\t      if (options.keyframeStyle) {\n\t        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n\t        applyInlineStyle(node, keyframeStyle);\n\t        temporaryStyles.push(keyframeStyle);\n\t      }\n\t\n\t      var itemIndex = stagger\n\t          ? options.staggerIndex >= 0\n\t              ? options.staggerIndex\n\t              : gcsLookup.count(cacheKey)\n\t          : 0;\n\t\n\t      var isFirst = itemIndex === 0;\n\t\n\t      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n\t      // without causing any combination of transitions to kick in. By adding a negative delay value\n\t      // it forces the setup class' transition to end immediately. We later then remove the negative\n\t      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n\t      // that if there is no transition defined then nothing will happen and this will also allow\n\t      // other transitions to be stacked on top of each other without any chopping them out.\n\t      if (isFirst && !options.skipBlocking) {\n\t        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n\t      }\n\t\n\t      var timings = computeTimings(node, fullClassName, cacheKey);\n\t      var relativeDelay = timings.maxDelay;\n\t      maxDelay = Math.max(relativeDelay, 0);\n\t      maxDuration = timings.maxDuration;\n\t\n\t      var flags = {};\n\t      flags.hasTransitions          = timings.transitionDuration > 0;\n\t      flags.hasAnimations           = timings.animationDuration > 0;\n\t      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';\n\t      flags.applyTransitionDuration = hasToStyles && (\n\t                                        (flags.hasTransitions && !flags.hasTransitionAll)\n\t                                         || (flags.hasAnimations && !flags.hasTransitions));\n\t      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\n\t      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\n\t      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\n\t      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\t\n\t      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n\t        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\n\t\n\t        if (flags.applyTransitionDuration) {\n\t          flags.hasTransitions = true;\n\t          timings.transitionDuration = maxDuration;\n\t          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n\t          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\n\t        }\n\t\n\t        if (flags.applyAnimationDuration) {\n\t          flags.hasAnimations = true;\n\t          timings.animationDuration = maxDuration;\n\t          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n\t        }\n\t      }\n\t\n\t      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n\t        return closeAndReturnNoopAnimator();\n\t      }\n\t\n\t      if (options.delay != null) {\n\t        var delayStyle = parseFloat(options.delay);\n\t\n\t        if (flags.applyTransitionDelay) {\n\t          temporaryStyles.push(getCssDelayStyle(delayStyle));\n\t        }\n\t\n\t        if (flags.applyAnimationDelay) {\n\t          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n\t        }\n\t      }\n\t\n\t      // we need to recalculate the delay value since we used a pre-emptive negative\n\t      // delay value and the delay value is required for the final event checking. This\n\t      // property will ensure that this will happen after the RAF phase has passed.\n\t      if (options.duration == null && timings.transitionDuration > 0) {\n\t        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\n\t      }\n\t\n\t      maxDelayTime = maxDelay * ONE_SECOND;\n\t      maxDurationTime = maxDuration * ONE_SECOND;\n\t      if (!options.skipBlocking) {\n\t        flags.blockTransition = timings.transitionDuration > 0;\n\t        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\n\t                                       stagger.animationDelay > 0 &&\n\t                                       stagger.animationDuration === 0;\n\t      }\n\t\n\t      if (options.from) {\n\t        if (options.cleanupStyles) {\n\t          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\n\t        }\n\t        applyAnimationFromStyles(element, options);\n\t      }\n\t\n\t      if (flags.blockTransition || flags.blockKeyframeAnimation) {\n\t        applyBlocking(maxDuration);\n\t      } else if (!options.skipBlocking) {\n\t        blockTransitions(node, false);\n\t      }\n\t\n\t      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n\t      return {\n\t        $$willAnimate: true,\n\t        end: endFn,\n\t        start: function() {\n\t          if (animationClosed) return;\n\t\n\t          runnerHost = {\n\t            end: endFn,\n\t            cancel: cancelFn,\n\t            resume: null, //this will be set during the start() phase\n\t            pause: null\n\t          };\n\t\n\t          runner = new $$AnimateRunner(runnerHost);\n\t\n\t          waitUntilQuiet(start);\n\t\n\t          // we don't have access to pause/resume the animation\n\t          // since it hasn't run yet. AnimateRunner will therefore\n\t          // set noop functions for resume and pause and they will\n\t          // later be overridden once the animation is triggered\n\t          return runner;\n\t        }\n\t      };\n\t\n\t      function endFn() {\n\t        close();\n\t      }\n\t\n\t      function cancelFn() {\n\t        close(true);\n\t      }\n\t\n\t      function close(rejected) { // jshint ignore:line\n\t        // if the promise has been called already then we shouldn't close\n\t        // the animation again\n\t        if (animationClosed || (animationCompleted && animationPaused)) return;\n\t        animationClosed = true;\n\t        animationPaused = false;\n\t\n\t        if (!options.$$skipPreparationClasses) {\n\t          $$jqLite.removeClass(element, preparationClasses);\n\t        }\n\t        $$jqLite.removeClass(element, activeClasses);\n\t\n\t        blockKeyframeAnimations(node, false);\n\t        blockTransitions(node, false);\n\t\n\t        forEach(temporaryStyles, function(entry) {\n\t          // There is only one way to remove inline style properties entirely from elements.\n\t          // By using `removeProperty` this works, but we need to convert camel-cased CSS\n\t          // styles down to hyphenated values.\n\t          node.style[entry[0]] = '';\n\t        });\n\t\n\t        applyAnimationClasses(element, options);\n\t        applyAnimationStyles(element, options);\n\t\n\t        if (Object.keys(restoreStyles).length) {\n\t          forEach(restoreStyles, function(value, prop) {\n\t            value ? node.style.setProperty(prop, value)\n\t                  : node.style.removeProperty(prop);\n\t          });\n\t        }\n\t\n\t        // the reason why we have this option is to allow a synchronous closing callback\n\t        // that is fired as SOON as the animation ends (when the CSS is removed) or if\n\t        // the animation never takes off at all. A good example is a leave animation since\n\t        // the element must be removed just after the animation is over or else the element\n\t        // will appear on screen for one animation frame causing an overbearing flicker.\n\t        if (options.onDone) {\n\t          options.onDone();\n\t        }\n\t\n\t        // if the preparation function fails then the promise is not setup\n\t        if (runner) {\n\t          runner.complete(!rejected);\n\t        }\n\t      }\n\t\n\t      function applyBlocking(duration) {\n\t        if (flags.blockTransition) {\n\t          blockTransitions(node, duration);\n\t        }\n\t\n\t        if (flags.blockKeyframeAnimation) {\n\t          blockKeyframeAnimations(node, !!duration);\n\t        }\n\t      }\n\t\n\t      function closeAndReturnNoopAnimator() {\n\t        runner = new $$AnimateRunner({\n\t          end: endFn,\n\t          cancel: cancelFn\n\t        });\n\t\n\t        // should flush the cache animation\n\t        waitUntilQuiet(noop);\n\t        close();\n\t\n\t        return {\n\t          $$willAnimate: false,\n\t          start: function() {\n\t            return runner;\n\t          },\n\t          end: endFn\n\t        };\n\t      }\n\t\n\t      function start() {\n\t        if (animationClosed) return;\n\t        if (!node.parentNode) {\n\t          close();\n\t          return;\n\t        }\n\t\n\t        var startTime, events = [];\n\t\n\t        // even though we only pause keyframe animations here the pause flag\n\t        // will still happen when transitions are used. Only the transition will\n\t        // not be paused since that is not possible. If the animation ends when\n\t        // paused then it will not complete until unpaused or cancelled.\n\t        var playPause = function(playAnimation) {\n\t          if (!animationCompleted) {\n\t            animationPaused = !playAnimation;\n\t            if (timings.animationDuration) {\n\t              var value = blockKeyframeAnimations(node, animationPaused);\n\t              animationPaused\n\t                  ? temporaryStyles.push(value)\n\t                  : removeFromArray(temporaryStyles, value);\n\t            }\n\t          } else if (animationPaused && playAnimation) {\n\t            animationPaused = false;\n\t            close();\n\t          }\n\t        };\n\t\n\t        // checking the stagger duration prevents an accidently cascade of the CSS delay style\n\t        // being inherited from the parent. If the transition duration is zero then we can safely\n\t        // rely that the delay value is an intential stagger delay style.\n\t        var maxStagger = itemIndex > 0\n\t                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n\t                            (timings.animationDuration && stagger.animationDuration === 0))\n\t                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\n\t        if (maxStagger) {\n\t          $timeout(triggerAnimationStart,\n\t                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\n\t                   false);\n\t        } else {\n\t          triggerAnimationStart();\n\t        }\n\t\n\t        // this will decorate the existing promise runner with pause/resume methods\n\t        runnerHost.resume = function() {\n\t          playPause(true);\n\t        };\n\t\n\t        runnerHost.pause = function() {\n\t          playPause(false);\n\t        };\n\t\n\t        function triggerAnimationStart() {\n\t          // just incase a stagger animation kicks in when the animation\n\t          // itself was cancelled entirely\n\t          if (animationClosed) return;\n\t\n\t          applyBlocking(false);\n\t\n\t          forEach(temporaryStyles, function(entry) {\n\t            var key = entry[0];\n\t            var value = entry[1];\n\t            node.style[key] = value;\n\t          });\n\t\n\t          applyAnimationClasses(element, options);\n\t          $$jqLite.addClass(element, activeClasses);\n\t\n\t          if (flags.recalculateTimingStyles) {\n\t            fullClassName = node.className + ' ' + preparationClasses;\n\t            cacheKey = gcsHashFn(node, fullClassName);\n\t\n\t            timings = computeTimings(node, fullClassName, cacheKey);\n\t            relativeDelay = timings.maxDelay;\n\t            maxDelay = Math.max(relativeDelay, 0);\n\t            maxDuration = timings.maxDuration;\n\t\n\t            if (maxDuration === 0) {\n\t              close();\n\t              return;\n\t            }\n\t\n\t            flags.hasTransitions = timings.transitionDuration > 0;\n\t            flags.hasAnimations = timings.animationDuration > 0;\n\t          }\n\t\n\t          if (flags.applyAnimationDelay) {\n\t            relativeDelay = typeof options.delay !== \"boolean\" && truthyTimingValue(options.delay)\n\t                  ? parseFloat(options.delay)\n\t                  : relativeDelay;\n\t\n\t            maxDelay = Math.max(relativeDelay, 0);\n\t            timings.animationDelay = relativeDelay;\n\t            delayStyle = getCssDelayStyle(relativeDelay, true);\n\t            temporaryStyles.push(delayStyle);\n\t            node.style[delayStyle[0]] = delayStyle[1];\n\t          }\n\t\n\t          maxDelayTime = maxDelay * ONE_SECOND;\n\t          maxDurationTime = maxDuration * ONE_SECOND;\n\t\n\t          if (options.easing) {\n\t            var easeProp, easeVal = options.easing;\n\t            if (flags.hasTransitions) {\n\t              easeProp = TRANSITION_PROP + TIMING_KEY;\n\t              temporaryStyles.push([easeProp, easeVal]);\n\t              node.style[easeProp] = easeVal;\n\t            }\n\t            if (flags.hasAnimations) {\n\t              easeProp = ANIMATION_PROP + TIMING_KEY;\n\t              temporaryStyles.push([easeProp, easeVal]);\n\t              node.style[easeProp] = easeVal;\n\t            }\n\t          }\n\t\n\t          if (timings.transitionDuration) {\n\t            events.push(TRANSITIONEND_EVENT);\n\t          }\n\t\n\t          if (timings.animationDuration) {\n\t            events.push(ANIMATIONEND_EVENT);\n\t          }\n\t\n\t          startTime = Date.now();\n\t          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n\t          var endTime = startTime + timerTime;\n\t\n\t          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\n\t          var setupFallbackTimer = true;\n\t          if (animationsData.length) {\n\t            var currentTimerData = animationsData[0];\n\t            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n\t            if (setupFallbackTimer) {\n\t              $timeout.cancel(currentTimerData.timer);\n\t            } else {\n\t              animationsData.push(close);\n\t            }\n\t          }\n\t\n\t          if (setupFallbackTimer) {\n\t            var timer = $timeout(onAnimationExpired, timerTime, false);\n\t            animationsData[0] = {\n\t              timer: timer,\n\t              expectedEndTime: endTime\n\t            };\n\t            animationsData.push(close);\n\t            element.data(ANIMATE_TIMER_KEY, animationsData);\n\t          }\n\t\n\t          element.on(events.join(' '), onAnimationProgress);\n\t          if (options.to) {\n\t            if (options.cleanupStyles) {\n\t              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\n\t            }\n\t            applyAnimationToStyles(element, options);\n\t          }\n\t        }\n\t\n\t        function onAnimationExpired() {\n\t          var animationsData = element.data(ANIMATE_TIMER_KEY);\n\t\n\t          // this will be false in the event that the element was\n\t          // removed from the DOM (via a leave animation or something\n\t          // similar)\n\t          if (animationsData) {\n\t            for (var i = 1; i < animationsData.length; i++) {\n\t              animationsData[i]();\n\t            }\n\t            element.removeData(ANIMATE_TIMER_KEY);\n\t          }\n\t        }\n\t\n\t        function onAnimationProgress(event) {\n\t          event.stopPropagation();\n\t          var ev = event.originalEvent || event;\n\t          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();\n\t\n\t          /* Firefox (or possibly just Gecko) likes to not round values up\n\t           * when a ms measurement is used for the animation */\n\t          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\t\n\t          /* $manualTimeStamp is a mocked timeStamp value which is set\n\t           * within browserTrigger(). This is only here so that tests can\n\t           * mock animations properly. Real events fallback to event.timeStamp,\n\t           * or, if they don't, then a timeStamp is automatically created for them.\n\t           * We're checking to see if the timeStamp surpasses the expected delay,\n\t           * but we're using elapsedTime instead of the timeStamp on the 2nd\n\t           * pre-condition since animations sometimes close off early */\n\t          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n\t            // we set this flag to ensure that if the transition is paused then, when resumed,\n\t            // the animation will automatically close itself since transitions cannot be paused.\n\t            animationCompleted = true;\n\t            close();\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }];\n\t}];\n\t\n\tvar $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {\n\t  $$animationProvider.drivers.push('$$animateCssDriver');\n\t\n\t  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\n\t  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\n\t\n\t  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\n\t  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\n\t\n\t  function isDocumentFragment(node) {\n\t    return node.parentNode && node.parentNode.nodeType === 11;\n\t  }\n\t\n\t  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\n\t       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\n\t\n\t    // only browsers that support these properties can render animations\n\t    if (!$sniffer.animations && !$sniffer.transitions) return noop;\n\t\n\t    var bodyNode = $document[0].body;\n\t    var rootNode = getDomNode($rootElement);\n\t\n\t    var rootBodyElement = jqLite(\n\t      // this is to avoid using something that exists outside of the body\n\t      // we also special case the doc fragement case because our unit test code\n\t      // appends the $rootElement to the body after the app has been bootstrapped\n\t      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\n\t    );\n\t\n\t    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\t\n\t    return function initDriverFn(animationDetails) {\n\t      return animationDetails.from && animationDetails.to\n\t          ? prepareFromToAnchorAnimation(animationDetails.from,\n\t                                         animationDetails.to,\n\t                                         animationDetails.classes,\n\t                                         animationDetails.anchors)\n\t          : prepareRegularAnimation(animationDetails);\n\t    };\n\t\n\t    function filterCssClasses(classes) {\n\t      //remove all the `ng-` stuff\n\t      return classes.replace(/\\bng-\\S+\\b/g, '');\n\t    }\n\t\n\t    function getUniqueValues(a, b) {\n\t      if (isString(a)) a = a.split(' ');\n\t      if (isString(b)) b = b.split(' ');\n\t      return a.filter(function(val) {\n\t        return b.indexOf(val) === -1;\n\t      }).join(' ');\n\t    }\n\t\n\t    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\n\t      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\n\t      var startingClasses = filterCssClasses(getClassVal(clone));\n\t\n\t      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\t      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\t\n\t      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\t\n\t      rootBodyElement.append(clone);\n\t\n\t      var animatorIn, animatorOut = prepareOutAnimation();\n\t\n\t      // the user may not end up using the `out` animation and\n\t      // only making use of the `in` animation or vice-versa.\n\t      // In either case we should allow this and not assume the\n\t      // animation is over unless both animations are not used.\n\t      if (!animatorOut) {\n\t        animatorIn = prepareInAnimation();\n\t        if (!animatorIn) {\n\t          return end();\n\t        }\n\t      }\n\t\n\t      var startingAnimator = animatorOut || animatorIn;\n\t\n\t      return {\n\t        start: function() {\n\t          var runner;\n\t\n\t          var currentAnimation = startingAnimator.start();\n\t          currentAnimation.done(function() {\n\t            currentAnimation = null;\n\t            if (!animatorIn) {\n\t              animatorIn = prepareInAnimation();\n\t              if (animatorIn) {\n\t                currentAnimation = animatorIn.start();\n\t                currentAnimation.done(function() {\n\t                  currentAnimation = null;\n\t                  end();\n\t                  runner.complete();\n\t                });\n\t                return currentAnimation;\n\t              }\n\t            }\n\t            // in the event that there is no `in` animation\n\t            end();\n\t            runner.complete();\n\t          });\n\t\n\t          runner = new $$AnimateRunner({\n\t            end: endFn,\n\t            cancel: endFn\n\t          });\n\t\n\t          return runner;\n\t\n\t          function endFn() {\n\t            if (currentAnimation) {\n\t              currentAnimation.end();\n\t            }\n\t          }\n\t        }\n\t      };\n\t\n\t      function calculateAnchorStyles(anchor) {\n\t        var styles = {};\n\t\n\t        var coords = getDomNode(anchor).getBoundingClientRect();\n\t\n\t        // we iterate directly since safari messes up and doesn't return\n\t        // all the keys for the coods object when iterated\n\t        forEach(['width','height','top','left'], function(key) {\n\t          var value = coords[key];\n\t          switch (key) {\n\t            case 'top':\n\t              value += bodyNode.scrollTop;\n\t              break;\n\t            case 'left':\n\t              value += bodyNode.scrollLeft;\n\t              break;\n\t          }\n\t          styles[key] = Math.floor(value) + 'px';\n\t        });\n\t        return styles;\n\t      }\n\t\n\t      function prepareOutAnimation() {\n\t        var animator = $animateCss(clone, {\n\t          addClass: NG_OUT_ANCHOR_CLASS_NAME,\n\t          delay: true,\n\t          from: calculateAnchorStyles(outAnchor)\n\t        });\n\t\n\t        // read the comment within `prepareRegularAnimation` to understand\n\t        // why this check is necessary\n\t        return animator.$$willAnimate ? animator : null;\n\t      }\n\t\n\t      function getClassVal(element) {\n\t        return element.attr('class') || '';\n\t      }\n\t\n\t      function prepareInAnimation() {\n\t        var endingClasses = filterCssClasses(getClassVal(inAnchor));\n\t        var toAdd = getUniqueValues(endingClasses, startingClasses);\n\t        var toRemove = getUniqueValues(startingClasses, endingClasses);\n\t\n\t        var animator = $animateCss(clone, {\n\t          to: calculateAnchorStyles(inAnchor),\n\t          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\n\t          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\n\t          delay: true\n\t        });\n\t\n\t        // read the comment within `prepareRegularAnimation` to understand\n\t        // why this check is necessary\n\t        return animator.$$willAnimate ? animator : null;\n\t      }\n\t\n\t      function end() {\n\t        clone.remove();\n\t        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\t        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\t      }\n\t    }\n\t\n\t    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\n\t      var fromAnimation = prepareRegularAnimation(from, noop);\n\t      var toAnimation = prepareRegularAnimation(to, noop);\n\t\n\t      var anchorAnimations = [];\n\t      forEach(anchors, function(anchor) {\n\t        var outElement = anchor['out'];\n\t        var inElement = anchor['in'];\n\t        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\n\t        if (animator) {\n\t          anchorAnimations.push(animator);\n\t        }\n\t      });\n\t\n\t      // no point in doing anything when there are no elements to animate\n\t      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\n\t\n\t      return {\n\t        start: function() {\n\t          var animationRunners = [];\n\t\n\t          if (fromAnimation) {\n\t            animationRunners.push(fromAnimation.start());\n\t          }\n\t\n\t          if (toAnimation) {\n\t            animationRunners.push(toAnimation.start());\n\t          }\n\t\n\t          forEach(anchorAnimations, function(animation) {\n\t            animationRunners.push(animation.start());\n\t          });\n\t\n\t          var runner = new $$AnimateRunner({\n\t            end: endFn,\n\t            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\n\t          });\n\t\n\t          $$AnimateRunner.all(animationRunners, function(status) {\n\t            runner.complete(status);\n\t          });\n\t\n\t          return runner;\n\t\n\t          function endFn() {\n\t            forEach(animationRunners, function(runner) {\n\t              runner.end();\n\t            });\n\t          }\n\t        }\n\t      };\n\t    }\n\t\n\t    function prepareRegularAnimation(animationDetails) {\n\t      var element = animationDetails.element;\n\t      var options = animationDetails.options || {};\n\t\n\t      if (animationDetails.structural) {\n\t        options.event = animationDetails.event;\n\t        options.structural = true;\n\t        options.applyClassesEarly = true;\n\t\n\t        // we special case the leave animation since we want to ensure that\n\t        // the element is removed as soon as the animation is over. Otherwise\n\t        // a flicker might appear or the element may not be removed at all\n\t        if (animationDetails.event === 'leave') {\n\t          options.onDone = options.domOperation;\n\t        }\n\t      }\n\t\n\t      // We assign the preparationClasses as the actual animation event since\n\t      // the internals of $animateCss will just suffix the event token values\n\t      // with `-active` to trigger the animation.\n\t      if (options.preparationClasses) {\n\t        options.event = concatWithSpace(options.event, options.preparationClasses);\n\t      }\n\t\n\t      var animator = $animateCss(element, options);\n\t\n\t      // the driver lookup code inside of $$animation attempts to spawn a\n\t      // driver one by one until a driver returns a.$$willAnimate animator object.\n\t      // $animateCss will always return an object, however, it will pass in\n\t      // a flag as a hint as to whether an animation was detected or not\n\t      return animator.$$willAnimate ? animator : null;\n\t    }\n\t  }];\n\t}];\n\t\n\t// TODO(matsko): use caching here to speed things up for detection\n\t// TODO(matsko): add documentation\n\t//  by the time...\n\t\n\tvar $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {\n\t  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\n\t       function($injector,   $$AnimateRunner,   $$jqLite) {\n\t\n\t    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\t         // $animateJs(element, 'enter');\n\t    return function(element, event, classes, options) {\n\t      // the `classes` argument is optional and if it is not used\n\t      // then the classes will be resolved from the element's className\n\t      // property as well as options.addClass/options.removeClass.\n\t      if (arguments.length === 3 && isObject(classes)) {\n\t        options = classes;\n\t        classes = null;\n\t      }\n\t\n\t      options = prepareAnimationOptions(options);\n\t      if (!classes) {\n\t        classes = element.attr('class') || '';\n\t        if (options.addClass) {\n\t          classes += ' ' + options.addClass;\n\t        }\n\t        if (options.removeClass) {\n\t          classes += ' ' + options.removeClass;\n\t        }\n\t      }\n\t\n\t      var classesToAdd = options.addClass;\n\t      var classesToRemove = options.removeClass;\n\t\n\t      // the lookupAnimations function returns a series of animation objects that are\n\t      // matched up with one or more of the CSS classes. These animation objects are\n\t      // defined via the module.animation factory function. If nothing is detected then\n\t      // we don't return anything which then makes $animation query the next driver.\n\t      var animations = lookupAnimations(classes);\n\t      var before, after;\n\t      if (animations.length) {\n\t        var afterFn, beforeFn;\n\t        if (event == 'leave') {\n\t          beforeFn = 'leave';\n\t          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\n\t        } else {\n\t          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\n\t          afterFn = event;\n\t        }\n\t\n\t        if (event !== 'enter' && event !== 'move') {\n\t          before = packageAnimations(element, event, options, animations, beforeFn);\n\t        }\n\t        after  = packageAnimations(element, event, options, animations, afterFn);\n\t      }\n\t\n\t      // no matching animations\n\t      if (!before && !after) return;\n\t\n\t      function applyOptions() {\n\t        options.domOperation();\n\t        applyAnimationClasses(element, options);\n\t      }\n\t\n\t      return {\n\t        start: function() {\n\t          var closeActiveAnimations;\n\t          var chain = [];\n\t\n\t          if (before) {\n\t            chain.push(function(fn) {\n\t              closeActiveAnimations = before(fn);\n\t            });\n\t          }\n\t\n\t          if (chain.length) {\n\t            chain.push(function(fn) {\n\t              applyOptions();\n\t              fn(true);\n\t            });\n\t          } else {\n\t            applyOptions();\n\t          }\n\t\n\t          if (after) {\n\t            chain.push(function(fn) {\n\t              closeActiveAnimations = after(fn);\n\t            });\n\t          }\n\t\n\t          var animationClosed = false;\n\t          var runner = new $$AnimateRunner({\n\t            end: function() {\n\t              endAnimations();\n\t            },\n\t            cancel: function() {\n\t              endAnimations(true);\n\t            }\n\t          });\n\t\n\t          $$AnimateRunner.chain(chain, onComplete);\n\t          return runner;\n\t\n\t          function onComplete(success) {\n\t            animationClosed = true;\n\t            applyOptions();\n\t            applyAnimationStyles(element, options);\n\t            runner.complete(success);\n\t          }\n\t\n\t          function endAnimations(cancelled) {\n\t            if (!animationClosed) {\n\t              (closeActiveAnimations || noop)(cancelled);\n\t              onComplete(cancelled);\n\t            }\n\t          }\n\t        }\n\t      };\n\t\n\t      function executeAnimationFn(fn, element, event, options, onDone) {\n\t        var args;\n\t        switch (event) {\n\t          case 'animate':\n\t            args = [element, options.from, options.to, onDone];\n\t            break;\n\t\n\t          case 'setClass':\n\t            args = [element, classesToAdd, classesToRemove, onDone];\n\t            break;\n\t\n\t          case 'addClass':\n\t            args = [element, classesToAdd, onDone];\n\t            break;\n\t\n\t          case 'removeClass':\n\t            args = [element, classesToRemove, onDone];\n\t            break;\n\t\n\t          default:\n\t            args = [element, onDone];\n\t            break;\n\t        }\n\t\n\t        args.push(options);\n\t\n\t        var value = fn.apply(fn, args);\n\t        if (value) {\n\t          if (isFunction(value.start)) {\n\t            value = value.start();\n\t          }\n\t\n\t          if (value instanceof $$AnimateRunner) {\n\t            value.done(onDone);\n\t          } else if (isFunction(value)) {\n\t            // optional onEnd / onCancel callback\n\t            return value;\n\t          }\n\t        }\n\t\n\t        return noop;\n\t      }\n\t\n\t      function groupEventedAnimations(element, event, options, animations, fnName) {\n\t        var operations = [];\n\t        forEach(animations, function(ani) {\n\t          var animation = ani[fnName];\n\t          if (!animation) return;\n\t\n\t          // note that all of these animations will run in parallel\n\t          operations.push(function() {\n\t            var runner;\n\t            var endProgressCb;\n\t\n\t            var resolved = false;\n\t            var onAnimationComplete = function(rejected) {\n\t              if (!resolved) {\n\t                resolved = true;\n\t                (endProgressCb || noop)(rejected);\n\t                runner.complete(!rejected);\n\t              }\n\t            };\n\t\n\t            runner = new $$AnimateRunner({\n\t              end: function() {\n\t                onAnimationComplete();\n\t              },\n\t              cancel: function() {\n\t                onAnimationComplete(true);\n\t              }\n\t            });\n\t\n\t            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\n\t              var cancelled = result === false;\n\t              onAnimationComplete(cancelled);\n\t            });\n\t\n\t            return runner;\n\t          });\n\t        });\n\t\n\t        return operations;\n\t      }\n\t\n\t      function packageAnimations(element, event, options, animations, fnName) {\n\t        var operations = groupEventedAnimations(element, event, options, animations, fnName);\n\t        if (operations.length === 0) {\n\t          var a,b;\n\t          if (fnName === 'beforeSetClass') {\n\t            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\n\t            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\n\t          } else if (fnName === 'setClass') {\n\t            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\n\t            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\n\t          }\n\t\n\t          if (a) {\n\t            operations = operations.concat(a);\n\t          }\n\t          if (b) {\n\t            operations = operations.concat(b);\n\t          }\n\t        }\n\t\n\t        if (operations.length === 0) return;\n\t\n\t        // TODO(matsko): add documentation\n\t        return function startAnimation(callback) {\n\t          var runners = [];\n\t          if (operations.length) {\n\t            forEach(operations, function(animateFn) {\n\t              runners.push(animateFn());\n\t            });\n\t          }\n\t\n\t          runners.length ? $$AnimateRunner.all(runners, callback) : callback();\n\t\n\t          return function endFn(reject) {\n\t            forEach(runners, function(runner) {\n\t              reject ? runner.cancel() : runner.end();\n\t            });\n\t          };\n\t        };\n\t      }\n\t    };\n\t\n\t    function lookupAnimations(classes) {\n\t      classes = isArray(classes) ? classes : classes.split(' ');\n\t      var matches = [], flagMap = {};\n\t      for (var i=0; i < classes.length; i++) {\n\t        var klass = classes[i],\n\t            animationFactory = $animateProvider.$$registeredAnimations[klass];\n\t        if (animationFactory && !flagMap[klass]) {\n\t          matches.push($injector.get(animationFactory));\n\t          flagMap[klass] = true;\n\t        }\n\t      }\n\t      return matches;\n\t    }\n\t  }];\n\t}];\n\t\n\tvar $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {\n\t  $$animationProvider.drivers.push('$$animateJsDriver');\n\t  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\n\t    return function initDriverFn(animationDetails) {\n\t      if (animationDetails.from && animationDetails.to) {\n\t        var fromAnimation = prepareAnimation(animationDetails.from);\n\t        var toAnimation = prepareAnimation(animationDetails.to);\n\t        if (!fromAnimation && !toAnimation) return;\n\t\n\t        return {\n\t          start: function() {\n\t            var animationRunners = [];\n\t\n\t            if (fromAnimation) {\n\t              animationRunners.push(fromAnimation.start());\n\t            }\n\t\n\t            if (toAnimation) {\n\t              animationRunners.push(toAnimation.start());\n\t            }\n\t\n\t            $$AnimateRunner.all(animationRunners, done);\n\t\n\t            var runner = new $$AnimateRunner({\n\t              end: endFnFactory(),\n\t              cancel: endFnFactory()\n\t            });\n\t\n\t            return runner;\n\t\n\t            function endFnFactory() {\n\t              return function() {\n\t                forEach(animationRunners, function(runner) {\n\t                  // at this point we cannot cancel animations for groups just yet. 1.5+\n\t                  runner.end();\n\t                });\n\t              };\n\t            }\n\t\n\t            function done(status) {\n\t              runner.complete(status);\n\t            }\n\t          }\n\t        };\n\t      } else {\n\t        return prepareAnimation(animationDetails);\n\t      }\n\t    };\n\t\n\t    function prepareAnimation(animationDetails) {\n\t      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n\t      var element = animationDetails.element;\n\t      var event = animationDetails.event;\n\t      var options = animationDetails.options;\n\t      var classes = animationDetails.classes;\n\t      return $$animateJs(element, event, classes, options);\n\t    }\n\t  }];\n\t}];\n\t\n\tvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\n\tvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\n\tvar $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {\n\t  var PRE_DIGEST_STATE = 1;\n\t  var RUNNING_STATE = 2;\n\t\n\t  var rules = this.rules = {\n\t    skip: [],\n\t    cancel: [],\n\t    join: []\n\t  };\n\t\n\t  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {\n\t    return rules[ruleType].some(function(fn) {\n\t      return fn(element, currentAnimation, previousAnimation);\n\t    });\n\t  }\n\t\n\t  function hasAnimationClasses(options, and) {\n\t    options = options || {};\n\t    var a = (options.addClass || '').length > 0;\n\t    var b = (options.removeClass || '').length > 0;\n\t    return and ? a && b : a || b;\n\t  }\n\t\n\t  rules.join.push(function(element, newAnimation, currentAnimation) {\n\t    // if the new animation is class-based then we can just tack that on\n\t    return !newAnimation.structural && hasAnimationClasses(newAnimation.options);\n\t  });\n\t\n\t  rules.skip.push(function(element, newAnimation, currentAnimation) {\n\t    // there is no need to animate anything if no classes are being added and\n\t    // there is no structural animation that will be triggered\n\t    return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);\n\t  });\n\t\n\t  rules.skip.push(function(element, newAnimation, currentAnimation) {\n\t    // why should we trigger a new structural animation if the element will\n\t    // be removed from the DOM anyway?\n\t    return currentAnimation.event == 'leave' && newAnimation.structural;\n\t  });\n\t\n\t  rules.skip.push(function(element, newAnimation, currentAnimation) {\n\t    // if there is an ongoing current animation then don't even bother running the class-based animation\n\t    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\n\t  });\n\t\n\t  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n\t    // there can never be two structural animations running at the same time\n\t    return currentAnimation.structural && newAnimation.structural;\n\t  });\n\t\n\t  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n\t    // if the previous animation is already running, but the new animation will\n\t    // be triggered, but the new animation is structural\n\t    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\n\t  });\n\t\n\t  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n\t    var nO = newAnimation.options;\n\t    var cO = currentAnimation.options;\n\t\n\t    // if the exact same CSS class is added/removed then it's safe to cancel it\n\t    return (nO.addClass && nO.addClass === cO.removeClass) || (nO.removeClass && nO.removeClass === cO.addClass);\n\t  });\n\t\n\t  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',\n\t               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\n\t       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,\n\t                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {\n\t\n\t    var activeAnimationsLookup = new $$HashMap();\n\t    var disabledElementsLookup = new $$HashMap();\n\t    var animationsEnabled = null;\n\t\n\t    function postDigestTaskFactory() {\n\t      var postDigestCalled = false;\n\t      return function(fn) {\n\t        // we only issue a call to postDigest before\n\t        // it has first passed. This prevents any callbacks\n\t        // from not firing once the animation has completed\n\t        // since it will be out of the digest cycle.\n\t        if (postDigestCalled) {\n\t          fn();\n\t        } else {\n\t          $rootScope.$$postDigest(function() {\n\t            postDigestCalled = true;\n\t            fn();\n\t          });\n\t        }\n\t      };\n\t    }\n\t\n\t    // Wait until all directive and route-related templates are downloaded and\n\t    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n\t    // all of the remote templates being currently downloaded. If there are no\n\t    // templates currently downloading then the watcher will still fire anyway.\n\t    var deregisterWatch = $rootScope.$watch(\n\t      function() { return $templateRequest.totalPendingRequests === 0; },\n\t      function(isEmpty) {\n\t        if (!isEmpty) return;\n\t        deregisterWatch();\n\t\n\t        // Now that all templates have been downloaded, $animate will wait until\n\t        // the post digest queue is empty before enabling animations. By having two\n\t        // calls to $postDigest calls we can ensure that the flag is enabled at the\n\t        // very end of the post digest queue. Since all of the animations in $animate\n\t        // use $postDigest, it's important that the code below executes at the end.\n\t        // This basically means that the page is fully downloaded and compiled before\n\t        // any animations are triggered.\n\t        $rootScope.$$postDigest(function() {\n\t          $rootScope.$$postDigest(function() {\n\t            // we check for null directly in the event that the application already called\n\t            // .enabled() with whatever arguments that it provided it with\n\t            if (animationsEnabled === null) {\n\t              animationsEnabled = true;\n\t            }\n\t          });\n\t        });\n\t      }\n\t    );\n\t\n\t    var callbackRegistry = {};\n\t\n\t    // remember that the classNameFilter is set during the provider/config\n\t    // stage therefore we can optimize here and setup a helper function\n\t    var classNameFilter = $animateProvider.classNameFilter();\n\t    var isAnimatableClassName = !classNameFilter\n\t              ? function() { return true; }\n\t              : function(className) {\n\t                return classNameFilter.test(className);\n\t              };\n\t\n\t    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\t\n\t    function normalizeAnimationOptions(element, options) {\n\t      return mergeAnimationOptions(element, options, {});\n\t    }\n\t\n\t    function findCallbacks(parent, element, event) {\n\t      var targetNode = getDomNode(element);\n\t      var targetParentNode = getDomNode(parent);\n\t\n\t      var matches = [];\n\t      var entries = callbackRegistry[event];\n\t      if (entries) {\n\t        forEach(entries, function(entry) {\n\t          if (entry.node.contains(targetNode)) {\n\t            matches.push(entry.callback);\n\t          } else if (event === 'leave' && entry.node.contains(targetParentNode)) {\n\t            matches.push(entry.callback);\n\t          }\n\t        });\n\t      }\n\t\n\t      return matches;\n\t    }\n\t\n\t    return {\n\t      on: function(event, container, callback) {\n\t        var node = extractElementNode(container);\n\t        callbackRegistry[event] = callbackRegistry[event] || [];\n\t        callbackRegistry[event].push({\n\t          node: node,\n\t          callback: callback\n\t        });\n\t      },\n\t\n\t      off: function(event, container, callback) {\n\t        var entries = callbackRegistry[event];\n\t        if (!entries) return;\n\t\n\t        callbackRegistry[event] = arguments.length === 1\n\t            ? null\n\t            : filterFromRegistry(entries, container, callback);\n\t\n\t        function filterFromRegistry(list, matchContainer, matchCallback) {\n\t          var containerNode = extractElementNode(matchContainer);\n\t          return list.filter(function(entry) {\n\t            var isMatch = entry.node === containerNode &&\n\t                            (!matchCallback || entry.callback === matchCallback);\n\t            return !isMatch;\n\t          });\n\t        }\n\t      },\n\t\n\t      pin: function(element, parentElement) {\n\t        assertArg(isElement(element), 'element', 'not an element');\n\t        assertArg(isElement(parentElement), 'parentElement', 'not an element');\n\t        element.data(NG_ANIMATE_PIN_DATA, parentElement);\n\t      },\n\t\n\t      push: function(element, event, options, domOperation) {\n\t        options = options || {};\n\t        options.domOperation = domOperation;\n\t        return queueAnimation(element, event, options);\n\t      },\n\t\n\t      // this method has four signatures:\n\t      //  () - global getter\n\t      //  (bool) - global setter\n\t      //  (element) - element getter\n\t      //  (element, bool) - element setter<F37>\n\t      enabled: function(element, bool) {\n\t        var argCount = arguments.length;\n\t\n\t        if (argCount === 0) {\n\t          // () - Global getter\n\t          bool = !!animationsEnabled;\n\t        } else {\n\t          var hasElement = isElement(element);\n\t\n\t          if (!hasElement) {\n\t            // (bool) - Global setter\n\t            bool = animationsEnabled = !!element;\n\t          } else {\n\t            var node = getDomNode(element);\n\t            var recordExists = disabledElementsLookup.get(node);\n\t\n\t            if (argCount === 1) {\n\t              // (element) - Element getter\n\t              bool = !recordExists;\n\t            } else {\n\t              // (element, bool) - Element setter\n\t              bool = !!bool;\n\t              if (!bool) {\n\t                disabledElementsLookup.put(node, true);\n\t              } else if (recordExists) {\n\t                disabledElementsLookup.remove(node);\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        return bool;\n\t      }\n\t    };\n\t\n\t    function queueAnimation(element, event, options) {\n\t      var node, parent;\n\t      element = stripCommentsFromElement(element);\n\t      if (element) {\n\t        node = getDomNode(element);\n\t        parent = element.parent();\n\t      }\n\t\n\t      options = prepareAnimationOptions(options);\n\t\n\t      // we create a fake runner with a working promise.\n\t      // These methods will become available after the digest has passed\n\t      var runner = new $$AnimateRunner();\n\t\n\t      // this is used to trigger callbacks in postDigest mode\n\t      var runInNextPostDigestOrNow = postDigestTaskFactory();\n\t\n\t      if (isArray(options.addClass)) {\n\t        options.addClass = options.addClass.join(' ');\n\t      }\n\t\n\t      if (options.addClass && !isString(options.addClass)) {\n\t        options.addClass = null;\n\t      }\n\t\n\t      if (isArray(options.removeClass)) {\n\t        options.removeClass = options.removeClass.join(' ');\n\t      }\n\t\n\t      if (options.removeClass && !isString(options.removeClass)) {\n\t        options.removeClass = null;\n\t      }\n\t\n\t      if (options.from && !isObject(options.from)) {\n\t        options.from = null;\n\t      }\n\t\n\t      if (options.to && !isObject(options.to)) {\n\t        options.to = null;\n\t      }\n\t\n\t      // there are situations where a directive issues an animation for\n\t      // a jqLite wrapper that contains only comment nodes... If this\n\t      // happens then there is no way we can perform an animation\n\t      if (!node) {\n\t        close();\n\t        return runner;\n\t      }\n\t\n\t      var className = [node.className, options.addClass, options.removeClass].join(' ');\n\t      if (!isAnimatableClassName(className)) {\n\t        close();\n\t        return runner;\n\t      }\n\t\n\t      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\t\n\t      // this is a hard disable of all animations for the application or on\n\t      // the element itself, therefore  there is no need to continue further\n\t      // past this point if not enabled\n\t      var skipAnimations = !animationsEnabled || disabledElementsLookup.get(node);\n\t      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n\t      var hasExistingAnimation = !!existingAnimation.state;\n\t\n\t      // there is no point in traversing the same collection of parent ancestors if a followup\n\t      // animation will be run on the same element that already did all that checking work\n\t      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {\n\t        skipAnimations = !areAnimationsAllowed(element, parent, event);\n\t      }\n\t\n\t      if (skipAnimations) {\n\t        close();\n\t        return runner;\n\t      }\n\t\n\t      if (isStructural) {\n\t        closeChildAnimations(element);\n\t      }\n\t\n\t      var newAnimation = {\n\t        structural: isStructural,\n\t        element: element,\n\t        event: event,\n\t        close: close,\n\t        options: options,\n\t        runner: runner\n\t      };\n\t\n\t      if (hasExistingAnimation) {\n\t        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);\n\t        if (skipAnimationFlag) {\n\t          if (existingAnimation.state === RUNNING_STATE) {\n\t            close();\n\t            return runner;\n\t          } else {\n\t            mergeAnimationOptions(element, existingAnimation.options, options);\n\t            return existingAnimation.runner;\n\t          }\n\t        }\n\t\n\t        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);\n\t        if (cancelAnimationFlag) {\n\t          if (existingAnimation.state === RUNNING_STATE) {\n\t            // this will end the animation right away and it is safe\n\t            // to do so since the animation is already running and the\n\t            // runner callback code will run in async\n\t            existingAnimation.runner.end();\n\t          } else if (existingAnimation.structural) {\n\t            // this means that the animation is queued into a digest, but\n\t            // hasn't started yet. Therefore it is safe to run the close\n\t            // method which will call the runner methods in async.\n\t            existingAnimation.close();\n\t          } else {\n\t            // this will merge the new animation options into existing animation options\n\t            mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);\n\t            return existingAnimation.runner;\n\t          }\n\t        } else {\n\t          // a joined animation means that this animation will take over the existing one\n\t          // so an example would involve a leave animation taking over an enter. Then when\n\t          // the postDigest kicks in the enter will be ignored.\n\t          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);\n\t          if (joinAnimationFlag) {\n\t            if (existingAnimation.state === RUNNING_STATE) {\n\t              normalizeAnimationOptions(element, options);\n\t            } else {\n\t              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\n\t\n\t              event = newAnimation.event = existingAnimation.event;\n\t              options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);\n\t\n\t              //we return the same runner since only the option values of this animation will\n\t              //be fed into the `existingAnimation`.\n\t              return existingAnimation.runner;\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        // normalization in this case means that it removes redundant CSS classes that\n\t        // already exist (addClass) or do not exist (removeClass) on the element\n\t        normalizeAnimationOptions(element, options);\n\t      }\n\t\n\t      // when the options are merged and cleaned up we may end up not having to do\n\t      // an animation at all, therefore we should check this before issuing a post\n\t      // digest callback. Structural animations will always run no matter what.\n\t      var isValidAnimation = newAnimation.structural;\n\t      if (!isValidAnimation) {\n\t        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n\t        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\n\t                            || hasAnimationClasses(newAnimation.options);\n\t      }\n\t\n\t      if (!isValidAnimation) {\n\t        close();\n\t        clearElementAnimationState(element);\n\t        return runner;\n\t      }\n\t\n\t      // the counter keeps track of cancelled animations\n\t      var counter = (existingAnimation.counter || 0) + 1;\n\t      newAnimation.counter = counter;\n\t\n\t      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);\n\t\n\t      $rootScope.$$postDigest(function() {\n\t        var animationDetails = activeAnimationsLookup.get(node);\n\t        var animationCancelled = !animationDetails;\n\t        animationDetails = animationDetails || {};\n\t\n\t        // if addClass/removeClass is called before something like enter then the\n\t        // registered parent element may not be present. The code below will ensure\n\t        // that a final value for parent element is obtained\n\t        var parentElement = element.parent() || [];\n\t\n\t        // animate/structural/class-based animations all have requirements. Otherwise there\n\t        // is no point in performing an animation. The parent node must also be set.\n\t        var isValidAnimation = parentElement.length > 0\n\t                                && (animationDetails.event === 'animate'\n\t                                    || animationDetails.structural\n\t                                    || hasAnimationClasses(animationDetails.options));\n\t\n\t        // this means that the previous animation was cancelled\n\t        // even if the follow-up animation is the same event\n\t        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\n\t          // if another animation did not take over then we need\n\t          // to make sure that the domOperation and options are\n\t          // handled accordingly\n\t          if (animationCancelled) {\n\t            applyAnimationClasses(element, options);\n\t            applyAnimationStyles(element, options);\n\t          }\n\t\n\t          // if the event changed from something like enter to leave then we do\n\t          // it, otherwise if it's the same then the end result will be the same too\n\t          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\n\t            options.domOperation();\n\t            runner.end();\n\t          }\n\t\n\t          // in the event that the element animation was not cancelled or a follow-up animation\n\t          // isn't allowed to animate from here then we need to clear the state of the element\n\t          // so that any future animations won't read the expired animation data.\n\t          if (!isValidAnimation) {\n\t            clearElementAnimationState(element);\n\t          }\n\t\n\t          return;\n\t        }\n\t\n\t        // this combined multiple class to addClass / removeClass into a setClass event\n\t        // so long as a structural event did not take over the animation\n\t        event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, true)\n\t            ? 'setClass'\n\t            : animationDetails.event;\n\t\n\t        markElementAnimationState(element, RUNNING_STATE);\n\t        var realRunner = $$animation(element, event, animationDetails.options);\n\t\n\t        realRunner.done(function(status) {\n\t          close(!status);\n\t          var animationDetails = activeAnimationsLookup.get(node);\n\t          if (animationDetails && animationDetails.counter === counter) {\n\t            clearElementAnimationState(getDomNode(element));\n\t          }\n\t          notifyProgress(runner, event, 'close', {});\n\t        });\n\t\n\t        // this will update the runner's flow-control events based on\n\t        // the `realRunner` object.\n\t        runner.setHost(realRunner);\n\t        notifyProgress(runner, event, 'start', {});\n\t      });\n\t\n\t      return runner;\n\t\n\t      function notifyProgress(runner, event, phase, data) {\n\t        runInNextPostDigestOrNow(function() {\n\t          var callbacks = findCallbacks(parent, element, event);\n\t          if (callbacks.length) {\n\t            // do not optimize this call here to RAF because\n\t            // we don't know how heavy the callback code here will\n\t            // be and if this code is buffered then this can\n\t            // lead to a performance regression.\n\t            $$rAF(function() {\n\t              forEach(callbacks, function(callback) {\n\t                callback(element, phase, data);\n\t              });\n\t            });\n\t          }\n\t        });\n\t        runner.progress(event, phase, data);\n\t      }\n\t\n\t      function close(reject) { // jshint ignore:line\n\t        clearGeneratedClasses(element, options);\n\t        applyAnimationClasses(element, options);\n\t        applyAnimationStyles(element, options);\n\t        options.domOperation();\n\t        runner.complete(!reject);\n\t      }\n\t    }\n\t\n\t    function closeChildAnimations(element) {\n\t      var node = getDomNode(element);\n\t      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\n\t      forEach(children, function(child) {\n\t        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));\n\t        var animationDetails = activeAnimationsLookup.get(child);\n\t        switch (state) {\n\t          case RUNNING_STATE:\n\t            animationDetails.runner.end();\n\t            /* falls through */\n\t          case PRE_DIGEST_STATE:\n\t            if (animationDetails) {\n\t              activeAnimationsLookup.remove(child);\n\t            }\n\t            break;\n\t        }\n\t      });\n\t    }\n\t\n\t    function clearElementAnimationState(element) {\n\t      var node = getDomNode(element);\n\t      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n\t      activeAnimationsLookup.remove(node);\n\t    }\n\t\n\t    function isMatchingElement(nodeOrElmA, nodeOrElmB) {\n\t      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);\n\t    }\n\t\n\t    function areAnimationsAllowed(element, parentElement, event) {\n\t      var bodyElement = jqLite($document[0].body);\n\t      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';\n\t      var rootElementDetected = isMatchingElement(element, $rootElement);\n\t      var parentAnimationDetected = false;\n\t      var animateChildren;\n\t\n\t      var parentHost = element.data(NG_ANIMATE_PIN_DATA);\n\t      if (parentHost) {\n\t        parentElement = parentHost;\n\t      }\n\t\n\t      while (parentElement && parentElement.length) {\n\t        if (!rootElementDetected) {\n\t          // angular doesn't want to attempt to animate elements outside of the application\n\t          // therefore we need to ensure that the rootElement is an ancestor of the current element\n\t          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n\t        }\n\t\n\t        var parentNode = parentElement[0];\n\t        if (parentNode.nodeType !== ELEMENT_NODE) {\n\t          // no point in inspecting the #document element\n\t          break;\n\t        }\n\t\n\t        var details = activeAnimationsLookup.get(parentNode) || {};\n\t        // either an enter, leave or move animation will commence\n\t        // therefore we can't allow any animations to take place\n\t        // but if a parent animation is class-based then that's ok\n\t        if (!parentAnimationDetected) {\n\t          parentAnimationDetected = details.structural || disabledElementsLookup.get(parentNode);\n\t        }\n\t\n\t        if (isUndefined(animateChildren) || animateChildren === true) {\n\t          var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);\n\t          if (isDefined(value)) {\n\t            animateChildren = value;\n\t          }\n\t        }\n\t\n\t        // there is no need to continue traversing at this point\n\t        if (parentAnimationDetected && animateChildren === false) break;\n\t\n\t        if (!rootElementDetected) {\n\t          // angular doesn't want to attempt to animate elements outside of the application\n\t          // therefore we need to ensure that the rootElement is an ancestor of the current element\n\t          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n\t          if (!rootElementDetected) {\n\t            parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);\n\t            if (parentHost) {\n\t              parentElement = parentHost;\n\t            }\n\t          }\n\t        }\n\t\n\t        if (!bodyElementDetected) {\n\t          // we also need to ensure that the element is or will be apart of the body element\n\t          // otherwise it is pointless to even issue an animation to be rendered\n\t          bodyElementDetected = isMatchingElement(parentElement, bodyElement);\n\t        }\n\t\n\t        parentElement = parentElement.parent();\n\t      }\n\t\n\t      var allowAnimation = !parentAnimationDetected || animateChildren;\n\t      return allowAnimation && rootElementDetected && bodyElementDetected;\n\t    }\n\t\n\t    function markElementAnimationState(element, state, details) {\n\t      details = details || {};\n\t      details.state = state;\n\t\n\t      var node = getDomNode(element);\n\t      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\t\n\t      var oldValue = activeAnimationsLookup.get(node);\n\t      var newValue = oldValue\n\t          ? extend(oldValue, details)\n\t          : details;\n\t      activeAnimationsLookup.put(node, newValue);\n\t    }\n\t  }];\n\t}];\n\t\n\tvar $$AnimateAsyncRunFactory = ['$$rAF', function($$rAF) {\n\t  var waitQueue = [];\n\t\n\t  function waitForTick(fn) {\n\t    waitQueue.push(fn);\n\t    if (waitQueue.length > 1) return;\n\t    $$rAF(function() {\n\t      for (var i = 0; i < waitQueue.length; i++) {\n\t        waitQueue[i]();\n\t      }\n\t      waitQueue = [];\n\t    });\n\t  }\n\t\n\t  return function() {\n\t    var passed = false;\n\t    waitForTick(function() {\n\t      passed = true;\n\t    });\n\t    return function(callback) {\n\t      passed ? callback() : waitForTick(callback);\n\t    };\n\t  };\n\t}];\n\t\n\tvar $$AnimateRunnerFactory = ['$q', '$sniffer', '$$animateAsyncRun',\n\t                      function($q,   $sniffer,   $$animateAsyncRun) {\n\t\n\t  var INITIAL_STATE = 0;\n\t  var DONE_PENDING_STATE = 1;\n\t  var DONE_COMPLETE_STATE = 2;\n\t\n\t  AnimateRunner.chain = function(chain, callback) {\n\t    var index = 0;\n\t\n\t    next();\n\t    function next() {\n\t      if (index === chain.length) {\n\t        callback(true);\n\t        return;\n\t      }\n\t\n\t      chain[index](function(response) {\n\t        if (response === false) {\n\t          callback(false);\n\t          return;\n\t        }\n\t        index++;\n\t        next();\n\t      });\n\t    }\n\t  };\n\t\n\t  AnimateRunner.all = function(runners, callback) {\n\t    var count = 0;\n\t    var status = true;\n\t    forEach(runners, function(runner) {\n\t      runner.done(onProgress);\n\t    });\n\t\n\t    function onProgress(response) {\n\t      status = status && response;\n\t      if (++count === runners.length) {\n\t        callback(status);\n\t      }\n\t    }\n\t  };\n\t\n\t  function AnimateRunner(host) {\n\t    this.setHost(host);\n\t\n\t    this._doneCallbacks = [];\n\t    this._runInAnimationFrame = $$animateAsyncRun();\n\t    this._state = 0;\n\t  }\n\t\n\t  AnimateRunner.prototype = {\n\t    setHost: function(host) {\n\t      this.host = host || {};\n\t    },\n\t\n\t    done: function(fn) {\n\t      if (this._state === DONE_COMPLETE_STATE) {\n\t        fn();\n\t      } else {\n\t        this._doneCallbacks.push(fn);\n\t      }\n\t    },\n\t\n\t    progress: noop,\n\t\n\t    getPromise: function() {\n\t      if (!this.promise) {\n\t        var self = this;\n\t        this.promise = $q(function(resolve, reject) {\n\t          self.done(function(status) {\n\t            status === false ? reject() : resolve();\n\t          });\n\t        });\n\t      }\n\t      return this.promise;\n\t    },\n\t\n\t    then: function(resolveHandler, rejectHandler) {\n\t      return this.getPromise().then(resolveHandler, rejectHandler);\n\t    },\n\t\n\t    'catch': function(handler) {\n\t      return this.getPromise()['catch'](handler);\n\t    },\n\t\n\t    'finally': function(handler) {\n\t      return this.getPromise()['finally'](handler);\n\t    },\n\t\n\t    pause: function() {\n\t      if (this.host.pause) {\n\t        this.host.pause();\n\t      }\n\t    },\n\t\n\t    resume: function() {\n\t      if (this.host.resume) {\n\t        this.host.resume();\n\t      }\n\t    },\n\t\n\t    end: function() {\n\t      if (this.host.end) {\n\t        this.host.end();\n\t      }\n\t      this._resolve(true);\n\t    },\n\t\n\t    cancel: function() {\n\t      if (this.host.cancel) {\n\t        this.host.cancel();\n\t      }\n\t      this._resolve(false);\n\t    },\n\t\n\t    complete: function(response) {\n\t      var self = this;\n\t      if (self._state === INITIAL_STATE) {\n\t        self._state = DONE_PENDING_STATE;\n\t        self._runInAnimationFrame(function() {\n\t          self._resolve(response);\n\t        });\n\t      }\n\t    },\n\t\n\t    _resolve: function(response) {\n\t      if (this._state !== DONE_COMPLETE_STATE) {\n\t        forEach(this._doneCallbacks, function(fn) {\n\t          fn(response);\n\t        });\n\t        this._doneCallbacks.length = 0;\n\t        this._state = DONE_COMPLETE_STATE;\n\t      }\n\t    }\n\t  };\n\t\n\t  return AnimateRunner;\n\t}];\n\t\n\tvar $$AnimationProvider = ['$animateProvider', function($animateProvider) {\n\t  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\n\t\n\t  var drivers = this.drivers = [];\n\t\n\t  var RUNNER_STORAGE_KEY = '$$animationRunner';\n\t\n\t  function setRunner(element, runner) {\n\t    element.data(RUNNER_STORAGE_KEY, runner);\n\t  }\n\t\n\t  function removeRunner(element) {\n\t    element.removeData(RUNNER_STORAGE_KEY);\n\t  }\n\t\n\t  function getRunner(element) {\n\t    return element.data(RUNNER_STORAGE_KEY);\n\t  }\n\t\n\t  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',\n\t       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {\n\t\n\t    var animationQueue = [];\n\t    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\t\n\t    function sortAnimations(animations) {\n\t      var tree = { children: [] };\n\t      var i, lookup = new $$HashMap();\n\t\n\t      // this is done first beforehand so that the hashmap\n\t      // is filled with a list of the elements that will be animated\n\t      for (i = 0; i < animations.length; i++) {\n\t        var animation = animations[i];\n\t        lookup.put(animation.domNode, animations[i] = {\n\t          domNode: animation.domNode,\n\t          fn: animation.fn,\n\t          children: []\n\t        });\n\t      }\n\t\n\t      for (i = 0; i < animations.length; i++) {\n\t        processNode(animations[i]);\n\t      }\n\t\n\t      return flatten(tree);\n\t\n\t      function processNode(entry) {\n\t        if (entry.processed) return entry;\n\t        entry.processed = true;\n\t\n\t        var elementNode = entry.domNode;\n\t        var parentNode = elementNode.parentNode;\n\t        lookup.put(elementNode, entry);\n\t\n\t        var parentEntry;\n\t        while (parentNode) {\n\t          parentEntry = lookup.get(parentNode);\n\t          if (parentEntry) {\n\t            if (!parentEntry.processed) {\n\t              parentEntry = processNode(parentEntry);\n\t            }\n\t            break;\n\t          }\n\t          parentNode = parentNode.parentNode;\n\t        }\n\t\n\t        (parentEntry || tree).children.push(entry);\n\t        return entry;\n\t      }\n\t\n\t      function flatten(tree) {\n\t        var result = [];\n\t        var queue = [];\n\t        var i;\n\t\n\t        for (i = 0; i < tree.children.length; i++) {\n\t          queue.push(tree.children[i]);\n\t        }\n\t\n\t        var remainingLevelEntries = queue.length;\n\t        var nextLevelEntries = 0;\n\t        var row = [];\n\t\n\t        for (i = 0; i < queue.length; i++) {\n\t          var entry = queue[i];\n\t          if (remainingLevelEntries <= 0) {\n\t            remainingLevelEntries = nextLevelEntries;\n\t            nextLevelEntries = 0;\n\t            result.push(row);\n\t            row = [];\n\t          }\n\t          row.push(entry.fn);\n\t          entry.children.forEach(function(childEntry) {\n\t            nextLevelEntries++;\n\t            queue.push(childEntry);\n\t          });\n\t          remainingLevelEntries--;\n\t        }\n\t\n\t        if (row.length) {\n\t          result.push(row);\n\t        }\n\t\n\t        return result;\n\t      }\n\t    }\n\t\n\t    // TODO(matsko): document the signature in a better way\n\t    return function(element, event, options) {\n\t      options = prepareAnimationOptions(options);\n\t      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\t\n\t      // there is no animation at the current moment, however\n\t      // these runner methods will get later updated with the\n\t      // methods leading into the driver's end/cancel methods\n\t      // for now they just stop the animation from starting\n\t      var runner = new $$AnimateRunner({\n\t        end: function() { close(); },\n\t        cancel: function() { close(true); }\n\t      });\n\t\n\t      if (!drivers.length) {\n\t        close();\n\t        return runner;\n\t      }\n\t\n\t      setRunner(element, runner);\n\t\n\t      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\n\t      var tempClasses = options.tempClasses;\n\t      if (tempClasses) {\n\t        classes += ' ' + tempClasses;\n\t        options.tempClasses = null;\n\t      }\n\t\n\t      animationQueue.push({\n\t        // this data is used by the postDigest code and passed into\n\t        // the driver step function\n\t        element: element,\n\t        classes: classes,\n\t        event: event,\n\t        structural: isStructural,\n\t        options: options,\n\t        beforeStart: beforeStart,\n\t        close: close\n\t      });\n\t\n\t      element.on('$destroy', handleDestroyedElement);\n\t\n\t      // we only want there to be one function called within the post digest\n\t      // block. This way we can group animations for all the animations that\n\t      // were apart of the same postDigest flush call.\n\t      if (animationQueue.length > 1) return runner;\n\t\n\t      $rootScope.$$postDigest(function() {\n\t        var animations = [];\n\t        forEach(animationQueue, function(entry) {\n\t          // the element was destroyed early on which removed the runner\n\t          // form its storage. This means we can't animate this element\n\t          // at all and it already has been closed due to destruction.\n\t          if (getRunner(entry.element)) {\n\t            animations.push(entry);\n\t          } else {\n\t            entry.close();\n\t          }\n\t        });\n\t\n\t        // now any future animations will be in another postDigest\n\t        animationQueue.length = 0;\n\t\n\t        var groupedAnimations = groupAnimations(animations);\n\t        var toBeSortedAnimations = [];\n\t\n\t        forEach(groupedAnimations, function(animationEntry) {\n\t          toBeSortedAnimations.push({\n\t            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\n\t            fn: function triggerAnimationStart() {\n\t              // it's important that we apply the `ng-animate` CSS class and the\n\t              // temporary classes before we do any driver invoking since these\n\t              // CSS classes may be required for proper CSS detection.\n\t              animationEntry.beforeStart();\n\t\n\t              var startAnimationFn, closeFn = animationEntry.close;\n\t\n\t              // in the event that the element was removed before the digest runs or\n\t              // during the RAF sequencing then we should not trigger the animation.\n\t              var targetElement = animationEntry.anchors\n\t                  ? (animationEntry.from.element || animationEntry.to.element)\n\t                  : animationEntry.element;\n\t\n\t              if (getRunner(targetElement)) {\n\t                var operation = invokeFirstDriver(animationEntry);\n\t                if (operation) {\n\t                  startAnimationFn = operation.start;\n\t                }\n\t              }\n\t\n\t              if (!startAnimationFn) {\n\t                closeFn();\n\t              } else {\n\t                var animationRunner = startAnimationFn();\n\t                animationRunner.done(function(status) {\n\t                  closeFn(!status);\n\t                });\n\t                updateAnimationRunners(animationEntry, animationRunner);\n\t              }\n\t            }\n\t          });\n\t        });\n\t\n\t        // we need to sort each of the animations in order of parent to child\n\t        // relationships. This ensures that the child classes are applied at the\n\t        // right time.\n\t        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\n\t      });\n\t\n\t      return runner;\n\t\n\t      // TODO(matsko): change to reference nodes\n\t      function getAnchorNodes(node) {\n\t        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\n\t        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n\t              ? [node]\n\t              : node.querySelectorAll(SELECTOR);\n\t        var anchors = [];\n\t        forEach(items, function(node) {\n\t          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n\t          if (attr && attr.length) {\n\t            anchors.push(node);\n\t          }\n\t        });\n\t        return anchors;\n\t      }\n\t\n\t      function groupAnimations(animations) {\n\t        var preparedAnimations = [];\n\t        var refLookup = {};\n\t        forEach(animations, function(animation, index) {\n\t          var element = animation.element;\n\t          var node = getDomNode(element);\n\t          var event = animation.event;\n\t          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\n\t          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\n\t\n\t          if (anchorNodes.length) {\n\t            var direction = enterOrMove ? 'to' : 'from';\n\t\n\t            forEach(anchorNodes, function(anchor) {\n\t              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n\t              refLookup[key] = refLookup[key] || {};\n\t              refLookup[key][direction] = {\n\t                animationID: index,\n\t                element: jqLite(anchor)\n\t              };\n\t            });\n\t          } else {\n\t            preparedAnimations.push(animation);\n\t          }\n\t        });\n\t\n\t        var usedIndicesLookup = {};\n\t        var anchorGroups = {};\n\t        forEach(refLookup, function(operations, key) {\n\t          var from = operations.from;\n\t          var to = operations.to;\n\t\n\t          if (!from || !to) {\n\t            // only one of these is set therefore we can't have an\n\t            // anchor animation since all three pieces are required\n\t            var index = from ? from.animationID : to.animationID;\n\t            var indexKey = index.toString();\n\t            if (!usedIndicesLookup[indexKey]) {\n\t              usedIndicesLookup[indexKey] = true;\n\t              preparedAnimations.push(animations[index]);\n\t            }\n\t            return;\n\t          }\n\t\n\t          var fromAnimation = animations[from.animationID];\n\t          var toAnimation = animations[to.animationID];\n\t          var lookupKey = from.animationID.toString();\n\t          if (!anchorGroups[lookupKey]) {\n\t            var group = anchorGroups[lookupKey] = {\n\t              structural: true,\n\t              beforeStart: function() {\n\t                fromAnimation.beforeStart();\n\t                toAnimation.beforeStart();\n\t              },\n\t              close: function() {\n\t                fromAnimation.close();\n\t                toAnimation.close();\n\t              },\n\t              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\n\t              from: fromAnimation,\n\t              to: toAnimation,\n\t              anchors: [] // TODO(matsko): change to reference nodes\n\t            };\n\t\n\t            // the anchor animations require that the from and to elements both have at least\n\t            // one shared CSS class which effictively marries the two elements together to use\n\t            // the same animation driver and to properly sequence the anchor animation.\n\t            if (group.classes.length) {\n\t              preparedAnimations.push(group);\n\t            } else {\n\t              preparedAnimations.push(fromAnimation);\n\t              preparedAnimations.push(toAnimation);\n\t            }\n\t          }\n\t\n\t          anchorGroups[lookupKey].anchors.push({\n\t            'out': from.element, 'in': to.element\n\t          });\n\t        });\n\t\n\t        return preparedAnimations;\n\t      }\n\t\n\t      function cssClassesIntersection(a,b) {\n\t        a = a.split(' ');\n\t        b = b.split(' ');\n\t        var matches = [];\n\t\n\t        for (var i = 0; i < a.length; i++) {\n\t          var aa = a[i];\n\t          if (aa.substring(0,3) === 'ng-') continue;\n\t\n\t          for (var j = 0; j < b.length; j++) {\n\t            if (aa === b[j]) {\n\t              matches.push(aa);\n\t              break;\n\t            }\n\t          }\n\t        }\n\t\n\t        return matches.join(' ');\n\t      }\n\t\n\t      function invokeFirstDriver(animationDetails) {\n\t        // we loop in reverse order since the more general drivers (like CSS and JS)\n\t        // may attempt more elements, but custom drivers are more particular\n\t        for (var i = drivers.length - 1; i >= 0; i--) {\n\t          var driverName = drivers[i];\n\t          if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check\n\t\n\t          var factory = $injector.get(driverName);\n\t          var driver = factory(animationDetails);\n\t          if (driver) {\n\t            return driver;\n\t          }\n\t        }\n\t      }\n\t\n\t      function beforeStart() {\n\t        element.addClass(NG_ANIMATE_CLASSNAME);\n\t        if (tempClasses) {\n\t          $$jqLite.addClass(element, tempClasses);\n\t        }\n\t      }\n\t\n\t      function updateAnimationRunners(animation, newRunner) {\n\t        if (animation.from && animation.to) {\n\t          update(animation.from.element);\n\t          update(animation.to.element);\n\t        } else {\n\t          update(animation.element);\n\t        }\n\t\n\t        function update(element) {\n\t          getRunner(element).setHost(newRunner);\n\t        }\n\t      }\n\t\n\t      function handleDestroyedElement() {\n\t        var runner = getRunner(element);\n\t        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\n\t          runner.end();\n\t        }\n\t      }\n\t\n\t      function close(rejected) { // jshint ignore:line\n\t        element.off('$destroy', handleDestroyedElement);\n\t        removeRunner(element);\n\t\n\t        applyAnimationClasses(element, options);\n\t        applyAnimationStyles(element, options);\n\t        options.domOperation();\n\t\n\t        if (tempClasses) {\n\t          $$jqLite.removeClass(element, tempClasses);\n\t        }\n\t\n\t        element.removeClass(NG_ANIMATE_CLASSNAME);\n\t        runner.complete(!rejected);\n\t      }\n\t    };\n\t  }];\n\t}];\n\t\n\t/* global angularAnimateModule: true,\n\t\n\t   $$AnimateAsyncRunFactory,\n\t   $$rAFSchedulerFactory,\n\t   $$AnimateChildrenDirective,\n\t   $$AnimateRunnerFactory,\n\t   $$AnimateQueueProvider,\n\t   $$AnimationProvider,\n\t   $AnimateCssProvider,\n\t   $$AnimateCssDriverProvider,\n\t   $$AnimateJsProvider,\n\t   $$AnimateJsDriverProvider,\n\t*/\n\t\n\t/**\n\t * @ngdoc module\n\t * @name ngAnimate\n\t * @description\n\t *\n\t * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\n\t * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.\n\t *\n\t * <div doc-module-components=\"ngAnimate\"></div>\n\t *\n\t * # Usage\n\t * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\n\t * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\n\t * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\n\t * the HTML element that the animation will be triggered on.\n\t *\n\t * ## Directive Support\n\t * The following directives are \"animation aware\":\n\t *\n\t * | Directive                                                                                                | Supported Animations                                                     |\n\t * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n\t * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\n\t * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\n\t * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\n\t * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\n\t * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\n\t * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\n\t * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\n\t * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\n\t * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\n\t * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\n\t *\n\t * (More information can be found by visiting each the documentation associated with each directive.)\n\t *\n\t * ## CSS-based Animations\n\t *\n\t * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\n\t * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.\n\t *\n\t * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\n\t *\n\t * ```html\n\t * <div ng-if=\"bool\" class=\"fade\">\n\t *    Fade me in out\n\t * </div>\n\t * <button ng-click=\"bool=true\">Fade In!</button>\n\t * <button ng-click=\"bool=false\">Fade Out!</button>\n\t * ```\n\t *\n\t * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\n\t *\n\t * ```css\n\t * /&#42; The starting CSS styles for the enter animation &#42;/\n\t * .fade.ng-enter {\n\t *   transition:0.5s linear all;\n\t *   opacity:0;\n\t * }\n\t *\n\t * /&#42; The finishing CSS styles for the enter animation &#42;/\n\t * .fade.ng-enter.ng-enter-active {\n\t *   opacity:1;\n\t * }\n\t * ```\n\t *\n\t * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\n\t * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\n\t * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\n\t *\n\t * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\n\t *\n\t * ```css\n\t * /&#42; now the element will fade out before it is removed from the DOM &#42;/\n\t * .fade.ng-leave {\n\t *   transition:0.5s linear all;\n\t *   opacity:1;\n\t * }\n\t * .fade.ng-leave.ng-leave-active {\n\t *   opacity:0;\n\t * }\n\t * ```\n\t *\n\t * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\n\t *\n\t * ```css\n\t * /&#42; there is no need to define anything inside of the destination\n\t * CSS class since the keyframe will take charge of the animation &#42;/\n\t * .fade.ng-leave {\n\t *   animation: my_fade_animation 0.5s linear;\n\t *   -webkit-animation: my_fade_animation 0.5s linear;\n\t * }\n\t *\n\t * @keyframes my_fade_animation {\n\t *   from { opacity:1; }\n\t *   to { opacity:0; }\n\t * }\n\t *\n\t * @-webkit-keyframes my_fade_animation {\n\t *   from { opacity:1; }\n\t *   to { opacity:0; }\n\t * }\n\t * ```\n\t *\n\t * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\n\t *\n\t * ### CSS Class-based Animations\n\t *\n\t * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\n\t * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\n\t * and removed.\n\t *\n\t * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\n\t *\n\t * ```html\n\t * <div ng-show=\"bool\" class=\"fade\">\n\t *   Show and hide me\n\t * </div>\n\t * <button ng-click=\"bool=true\">Toggle</button>\n\t *\n\t * <style>\n\t * .fade.ng-hide {\n\t *   transition:0.5s linear all;\n\t *   opacity:0;\n\t * }\n\t * </style>\n\t * ```\n\t *\n\t * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\n\t * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\n\t *\n\t * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\n\t * with CSS styles.\n\t *\n\t * ```html\n\t * <div ng-class=\"{on:onOff}\" class=\"highlight\">\n\t *   Highlight this box\n\t * </div>\n\t * <button ng-click=\"onOff=!onOff\">Toggle</button>\n\t *\n\t * <style>\n\t * .highlight {\n\t *   transition:0.5s linear all;\n\t * }\n\t * .highlight.on-add {\n\t *   background:white;\n\t * }\n\t * .highlight.on {\n\t *   background:yellow;\n\t * }\n\t * .highlight.on-remove {\n\t *   background:black;\n\t * }\n\t * </style>\n\t * ```\n\t *\n\t * We can also make use of CSS keyframes by placing them within the CSS classes.\n\t *\n\t *\n\t * ### CSS Staggering Animations\n\t * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n\t * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n\t * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n\t * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n\t * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n\t *\n\t * ```css\n\t * .my-animation.ng-enter {\n\t *   /&#42; standard transition code &#42;/\n\t *   transition: 1s linear all;\n\t *   opacity:0;\n\t * }\n\t * .my-animation.ng-enter-stagger {\n\t *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n\t *   transition-delay: 0.1s;\n\t *\n\t *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\n\t *     to not accidentally inherit a delay property from another CSS class &#42;/\n\t *   transition-duration: 0s;\n\t * }\n\t * .my-animation.ng-enter.ng-enter-active {\n\t *   /&#42; standard transition styles &#42;/\n\t *   opacity:1;\n\t * }\n\t * ```\n\t *\n\t * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n\t * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n\t * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n\t * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\n\t *\n\t * The following code will issue the **ng-leave-stagger** event on the element provided:\n\t *\n\t * ```js\n\t * var kids = parent.children();\n\t *\n\t * $animate.leave(kids[0]); //stagger index=0\n\t * $animate.leave(kids[1]); //stagger index=1\n\t * $animate.leave(kids[2]); //stagger index=2\n\t * $animate.leave(kids[3]); //stagger index=3\n\t * $animate.leave(kids[4]); //stagger index=4\n\t *\n\t * window.requestAnimationFrame(function() {\n\t *   //stagger has reset itself\n\t *   $animate.leave(kids[5]); //stagger index=0\n\t *   $animate.leave(kids[6]); //stagger index=1\n\t *\n\t *   $scope.$digest();\n\t * });\n\t * ```\n\t *\n\t * Stagger animations are currently only supported within CSS-defined animations.\n\t *\n\t * ### The `ng-animate` CSS class\n\t *\n\t * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\n\t * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\n\t *\n\t * Therefore, animations can be applied to an element using this temporary class directly via CSS.\n\t *\n\t * ```css\n\t * .zipper.ng-animate {\n\t *   transition:0.5s linear all;\n\t * }\n\t * .zipper.ng-enter {\n\t *   opacity:0;\n\t * }\n\t * .zipper.ng-enter.ng-enter-active {\n\t *   opacity:1;\n\t * }\n\t * .zipper.ng-leave {\n\t *   opacity:1;\n\t * }\n\t * .zipper.ng-leave.ng-leave-active {\n\t *   opacity:0;\n\t * }\n\t * ```\n\t *\n\t * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\n\t * the CSS class once an animation has completed.)\n\t *\n\t *\n\t * ## JavaScript-based Animations\n\t *\n\t * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\n\t * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\n\t * `module.animation()` module function we can register the ainmation.\n\t *\n\t * Let's see an example of a enter/leave animation using `ngRepeat`:\n\t *\n\t * ```html\n\t * <div ng-repeat=\"item in items\" class=\"slide\">\n\t *   {{ item }}\n\t * </div>\n\t * ```\n\t *\n\t * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\n\t *\n\t * ```js\n\t * myModule.animation('.slide', [function() {\n\t *   return {\n\t *     // make note that other events (like addClass/removeClass)\n\t *     // have different function input parameters\n\t *     enter: function(element, doneFn) {\n\t *       jQuery(element).fadeIn(1000, doneFn);\n\t *\n\t *       // remember to call doneFn so that angular\n\t *       // knows that the animation has concluded\n\t *     },\n\t *\n\t *     move: function(element, doneFn) {\n\t *       jQuery(element).fadeIn(1000, doneFn);\n\t *     },\n\t *\n\t *     leave: function(element, doneFn) {\n\t *       jQuery(element).fadeOut(1000, doneFn);\n\t *     }\n\t *   }\n\t * }]);\n\t * ```\n\t *\n\t * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\n\t * greensock.js and velocity.js.\n\t *\n\t * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\n\t * our animations inside of the same registered animation, however, the function input arguments are a bit different:\n\t *\n\t * ```html\n\t * <div ng-class=\"color\" class=\"colorful\">\n\t *   this box is moody\n\t * </div>\n\t * <button ng-click=\"color='red'\">Change to red</button>\n\t * <button ng-click=\"color='blue'\">Change to blue</button>\n\t * <button ng-click=\"color='green'\">Change to green</button>\n\t * ```\n\t *\n\t * ```js\n\t * myModule.animation('.colorful', [function() {\n\t *   return {\n\t *     addClass: function(element, className, doneFn) {\n\t *       // do some cool animation and call the doneFn\n\t *     },\n\t *     removeClass: function(element, className, doneFn) {\n\t *       // do some cool animation and call the doneFn\n\t *     },\n\t *     setClass: function(element, addedClass, removedClass, doneFn) {\n\t *       // do some cool animation and call the doneFn\n\t *     }\n\t *   }\n\t * }]);\n\t * ```\n\t *\n\t * ## CSS + JS Animations Together\n\t *\n\t * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,\n\t * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\n\t * charge of the animation**:\n\t *\n\t * ```html\n\t * <div ng-if=\"bool\" class=\"slide\">\n\t *   Slide in and out\n\t * </div>\n\t * ```\n\t *\n\t * ```js\n\t * myModule.animation('.slide', [function() {\n\t *   return {\n\t *     enter: function(element, doneFn) {\n\t *       jQuery(element).slideIn(1000, doneFn);\n\t *     }\n\t *   }\n\t * }]);\n\t * ```\n\t *\n\t * ```css\n\t * .slide.ng-enter {\n\t *   transition:0.5s linear all;\n\t *   transform:translateY(-100px);\n\t * }\n\t * .slide.ng-enter.ng-enter-active {\n\t *   transform:translateY(0);\n\t * }\n\t * ```\n\t *\n\t * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\n\t * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\n\t * our own JS-based animation code:\n\t *\n\t * ```js\n\t * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n\t *   return {\n\t *     enter: function(element) {\n\t*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\n\t *       return $animateCss(element, {\n\t *         event: 'enter',\n\t *         structural: true\n\t *       });\n\t *     }\n\t *   }\n\t * }]);\n\t * ```\n\t *\n\t * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\n\t *\n\t * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\n\t * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\n\t * data into `$animateCss` directly:\n\t *\n\t * ```js\n\t * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n\t *   return {\n\t *     enter: function(element) {\n\t *       return $animateCss(element, {\n\t *         event: 'enter',\n\t *         structural: true,\n\t *         addClass: 'maroon-setting',\n\t *         from: { height:0 },\n\t *         to: { height: 200 }\n\t *       });\n\t *     }\n\t *   }\n\t * }]);\n\t * ```\n\t *\n\t * Now we can fill in the rest via our transition CSS code:\n\t *\n\t * ```css\n\t * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\n\t * .slide.ng-enter { transition:0.5s linear all; }\n\t *\n\t * /&#42; this extra CSS class will be absorbed into the transition\n\t * since the $animateCss code is adding the class &#42;/\n\t * .maroon-setting { background:red; }\n\t * ```\n\t *\n\t * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\n\t *\n\t * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\n\t *\n\t * ## Animation Anchoring (via `ng-animate-ref`)\n\t *\n\t * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\n\t * structural areas of an application (like views) by pairing up elements using an attribute\n\t * called `ng-animate-ref`.\n\t *\n\t * Let's say for example we have two views that are managed by `ng-view` and we want to show\n\t * that there is a relationship between two components situated in within these views. By using the\n\t * `ng-animate-ref` attribute we can identify that the two components are paired together and we\n\t * can then attach an animation, which is triggered when the view changes.\n\t *\n\t * Say for example we have the following template code:\n\t *\n\t * ```html\n\t * <!-- index.html -->\n\t * <div ng-view class=\"view-animation\">\n\t * </div>\n\t *\n\t * <!-- home.html -->\n\t * <a href=\"#/banner-page\">\n\t *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n\t * </a>\n\t *\n\t * <!-- banner-page.html -->\n\t * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n\t * ```\n\t *\n\t * Now, when the view changes (once the link is clicked), ngAnimate will examine the\n\t * HTML contents to see if there is a match reference between any components in the view\n\t * that is leaving and the view that is entering. It will scan both the view which is being\n\t * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\n\t * contain a matching ref value.\n\t *\n\t * The two images match since they share the same ref value. ngAnimate will now create a\n\t * transport element (which is a clone of the first image element) and it will then attempt\n\t * to animate to the position of the second image element in the next view. For the animation to\n\t * work a special CSS class called `ng-anchor` will be added to the transported element.\n\t *\n\t * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\n\t * ngAnimate will handle the entire transition for us as well as the addition and removal of\n\t * any changes of CSS classes between the elements:\n\t *\n\t * ```css\n\t * .banner.ng-anchor {\n\t *   /&#42; this animation will last for 1 second since there are\n\t *          two phases to the animation (an `in` and an `out` phase) &#42;/\n\t *   transition:0.5s linear all;\n\t * }\n\t * ```\n\t *\n\t * We also **must** include animations for the views that are being entered and removed\n\t * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\n\t *\n\t * ```css\n\t * .view-animation.ng-enter, .view-animation.ng-leave {\n\t *   transition:0.5s linear all;\n\t *   position:fixed;\n\t *   left:0;\n\t *   top:0;\n\t *   width:100%;\n\t * }\n\t * .view-animation.ng-enter {\n\t *   transform:translateX(100%);\n\t * }\n\t * .view-animation.ng-leave,\n\t * .view-animation.ng-enter.ng-enter-active {\n\t *   transform:translateX(0%);\n\t * }\n\t * .view-animation.ng-leave.ng-leave-active {\n\t *   transform:translateX(-100%);\n\t * }\n\t * ```\n\t *\n\t * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\n\t * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\n\t * from its origin. Once that animation is over then the `in` stage occurs which animates the\n\t * element to its destination. The reason why there are two animations is to give enough time\n\t * for the enter animation on the new element to be ready.\n\t *\n\t * The example above sets up a transition for both the in and out phases, but we can also target the out or\n\t * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\n\t *\n\t * ```css\n\t * .banner.ng-anchor-out {\n\t *   transition: 0.5s linear all;\n\t *\n\t *   /&#42; the scale will be applied during the out animation,\n\t *          but will be animated away when the in animation runs &#42;/\n\t *   transform: scale(1.2);\n\t * }\n\t *\n\t * .banner.ng-anchor-in {\n\t *   transition: 1s linear all;\n\t * }\n\t * ```\n\t *\n\t *\n\t *\n\t *\n\t * ### Anchoring Demo\n\t *\n\t  <example module=\"anchoringExample\"\n\t           name=\"anchoringExample\"\n\t           id=\"anchoringExample\"\n\t           deps=\"angular-animate.js;angular-route.js\"\n\t           animations=\"true\">\n\t    <file name=\"index.html\">\n\t      <a href=\"#/\">Home</a>\n\t      <hr />\n\t      <div class=\"view-container\">\n\t        <div ng-view class=\"view\"></div>\n\t      </div>\n\t    </file>\n\t    <file name=\"script.js\">\n\t      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\n\t        .config(['$routeProvider', function($routeProvider) {\n\t          $routeProvider.when('/', {\n\t            templateUrl: 'home.html',\n\t            controller: 'HomeController as home'\n\t          });\n\t          $routeProvider.when('/profile/:id', {\n\t            templateUrl: 'profile.html',\n\t            controller: 'ProfileController as profile'\n\t          });\n\t        }])\n\t        .run(['$rootScope', function($rootScope) {\n\t          $rootScope.records = [\n\t            { id:1, title: \"Miss Beulah Roob\" },\n\t            { id:2, title: \"Trent Morissette\" },\n\t            { id:3, title: \"Miss Ava Pouros\" },\n\t            { id:4, title: \"Rod Pouros\" },\n\t            { id:5, title: \"Abdul Rice\" },\n\t            { id:6, title: \"Laurie Rutherford Sr.\" },\n\t            { id:7, title: \"Nakia McLaughlin\" },\n\t            { id:8, title: \"Jordon Blanda DVM\" },\n\t            { id:9, title: \"Rhoda Hand\" },\n\t            { id:10, title: \"Alexandrea Sauer\" }\n\t          ];\n\t        }])\n\t        .controller('HomeController', [function() {\n\t          //empty\n\t        }])\n\t        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {\n\t          var index = parseInt($routeParams.id, 10);\n\t          var record = $rootScope.records[index - 1];\n\t\n\t          this.title = record.title;\n\t          this.id = record.id;\n\t        }]);\n\t    </file>\n\t    <file name=\"home.html\">\n\t      <h2>Welcome to the home page</h1>\n\t      <p>Please click on an element</p>\n\t      <a class=\"record\"\n\t         ng-href=\"#/profile/{{ record.id }}\"\n\t         ng-animate-ref=\"{{ record.id }}\"\n\t         ng-repeat=\"record in records\">\n\t        {{ record.title }}\n\t      </a>\n\t    </file>\n\t    <file name=\"profile.html\">\n\t      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\n\t        {{ profile.title }}\n\t      </div>\n\t    </file>\n\t    <file name=\"animations.css\">\n\t      .record {\n\t        display:block;\n\t        font-size:20px;\n\t      }\n\t      .profile {\n\t        background:black;\n\t        color:white;\n\t        font-size:100px;\n\t      }\n\t      .view-container {\n\t        position:relative;\n\t      }\n\t      .view-container > .view.ng-animate {\n\t        position:absolute;\n\t        top:0;\n\t        left:0;\n\t        width:100%;\n\t        min-height:500px;\n\t      }\n\t      .view.ng-enter, .view.ng-leave,\n\t      .record.ng-anchor {\n\t        transition:0.5s linear all;\n\t      }\n\t      .view.ng-enter {\n\t        transform:translateX(100%);\n\t      }\n\t      .view.ng-enter.ng-enter-active, .view.ng-leave {\n\t        transform:translateX(0%);\n\t      }\n\t      .view.ng-leave.ng-leave-active {\n\t        transform:translateX(-100%);\n\t      }\n\t      .record.ng-anchor-out {\n\t        background:red;\n\t      }\n\t    </file>\n\t  </example>\n\t *\n\t * ### How is the element transported?\n\t *\n\t * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\n\t * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\n\t * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\n\t * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\n\t * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\n\t * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\n\t * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\n\t * will become visible since the shim class will be removed.\n\t *\n\t * ### How is the morphing handled?\n\t *\n\t * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\n\t * what CSS classes differ between the starting element and the destination element. These different CSS classes\n\t * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\n\t * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\n\t * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\n\t * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\n\t * the cloned element is placed inside of root element which is likely close to the body element).\n\t *\n\t * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\n\t *\n\t *\n\t * ## Using $animate in your directive code\n\t *\n\t * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?\n\t * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\n\t * imagine we have a greeting box that shows and hides itself when the data changes\n\t *\n\t * ```html\n\t * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\n\t * ```\n\t *\n\t * ```js\n\t * ngModule.directive('greetingBox', ['$animate', function($animate) {\n\t *   return function(scope, element, attrs) {\n\t *     attrs.$observe('active', function(value) {\n\t *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\n\t *     });\n\t *   });\n\t * }]);\n\t * ```\n\t *\n\t * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\n\t * in our HTML code then we can trigger a CSS or JS animation to happen.\n\t *\n\t * ```css\n\t * /&#42; normally we would create a CSS class to reference on the element &#42;/\n\t * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\n\t * ```\n\t *\n\t * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\n\t * possible be sure to visit the {@link ng.$animate $animate service API page}.\n\t *\n\t *\n\t * ### Preventing Collisions With Third Party Libraries\n\t *\n\t * Some third-party frameworks place animation duration defaults across many element or className\n\t * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which\n\t * is expecting actual animations on these elements and has to wait for their completion.\n\t *\n\t * You can prevent this unwanted behavior by using a prefix on all your animation classes:\n\t *\n\t * ```css\n\t * /&#42; prefixed with animate- &#42;/\n\t * .animate-fade-add.animate-fade-add-active {\n\t *   transition:1s linear all;\n\t *   opacity:0;\n\t * }\n\t * ```\n\t *\n\t * You then configure `$animate` to enforce this prefix:\n\t *\n\t * ```js\n\t * $animateProvider.classNameFilter(/animate-/);\n\t * ```\n\t *\n\t * This also may provide your application with a speed boost since only specific elements containing CSS class prefix\n\t * will be evaluated for animation when any DOM changes occur in the application.\n\t *\n\t * ## Callbacks and Promises\n\t *\n\t * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\n\t * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\n\t * ended by chaining onto the returned promise that animation method returns.\n\t *\n\t * ```js\n\t * // somewhere within the depths of the directive\n\t * $animate.enter(element, parent).then(function() {\n\t *   //the animation has completed\n\t * });\n\t * ```\n\t *\n\t * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\n\t * anymore.)\n\t *\n\t * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\n\t * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\n\t * routing controller to hook into that:\n\t *\n\t * ```js\n\t * ngModule.controller('HomePageController', ['$animate', function($animate) {\n\t *   $animate.on('enter', ngViewElement, function(element) {\n\t *     // the animation for this route has completed\n\t *   }]);\n\t * }])\n\t * ```\n\t *\n\t * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)\n\t */\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $animate\n\t * @kind object\n\t *\n\t * @description\n\t * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\n\t *\n\t * Click here {@link ng.$animate to learn more about animations with `$animate`}.\n\t */\n\tangular.module('ngAnimate', [])\n\t  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\n\t  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\n\t\n\t  .factory('$$AnimateRunner', $$AnimateRunnerFactory)\n\t  .factory('$$animateAsyncRun', $$AnimateAsyncRunFactory)\n\t\n\t  .provider('$$animateQueue', $$AnimateQueueProvider)\n\t  .provider('$$animation', $$AnimationProvider)\n\t\n\t  .provider('$animateCss', $AnimateCssProvider)\n\t  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\n\t\n\t  .provider('$$animateJs', $$AnimateJsProvider)\n\t  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\n\t\n\t\n\t})(window, window.angular);\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(8);\n\tmodule.exports = 'ngAria';\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @license AngularJS v1.4.8\n\t * (c) 2010-2015 Google, Inc. http://angularjs.org\n\t * License: MIT\n\t */\n\t(function(window, angular, undefined) {'use strict';\n\t\n\t/**\n\t * @ngdoc module\n\t * @name ngAria\n\t * @description\n\t *\n\t * The `ngAria` module provides support for common\n\t * [<abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)\n\t * attributes that convey state or semantic information about the application for users\n\t * of assistive technologies, such as screen readers.\n\t *\n\t * <div doc-module-components=\"ngAria\"></div>\n\t *\n\t * ## Usage\n\t *\n\t * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following\n\t * directives are supported:\n\t * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.\n\t *\n\t * Below is a more detailed breakdown of the attributes handled by ngAria:\n\t *\n\t * | Directive                                   | Supported Attributes                                                                   |\n\t * |---------------------------------------------|----------------------------------------------------------------------------------------|\n\t * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |\n\t * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |\n\t * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |\n\t * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |\n\t * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |\n\t * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |\n\t * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |\n\t *\n\t * Find out more information about each directive by reading the\n\t * {@link guide/accessibility ngAria Developer Guide}.\n\t *\n\t * ##Example\n\t * Using ngDisabled with ngAria:\n\t * ```html\n\t * <md-checkbox ng-disabled=\"disabled\">\n\t * ```\n\t * Becomes:\n\t * ```html\n\t * <md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\">\n\t * ```\n\t *\n\t * ##Disabling Attributes\n\t * It's possible to disable individual attributes added by ngAria with the\n\t * {@link ngAria.$ariaProvider#config config} method. For more details, see the\n\t * {@link guide/accessibility Developer Guide}.\n\t */\n\t /* global -ngAriaModule */\n\tvar ngAriaModule = angular.module('ngAria', ['ng']).\n\t                        provider('$aria', $AriaProvider);\n\t\n\t/**\n\t* Internal Utilities\n\t*/\n\tvar nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY'];\n\t\n\tvar isNodeOneOf = function(elem, nodeTypeArray) {\n\t  if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {\n\t    return true;\n\t  }\n\t};\n\t/**\n\t * @ngdoc provider\n\t * @name $ariaProvider\n\t *\n\t * @description\n\t *\n\t * Used for configuring the ARIA attributes injected and managed by ngAria.\n\t *\n\t * ```js\n\t * angular.module('myApp', ['ngAria'], function config($ariaProvider) {\n\t *   $ariaProvider.config({\n\t *     ariaValue: true,\n\t *     tabindex: false\n\t *   });\n\t * });\n\t *```\n\t *\n\t * ## Dependencies\n\t * Requires the {@link ngAria} module to be installed.\n\t *\n\t */\n\tfunction $AriaProvider() {\n\t  var config = {\n\t    ariaHidden: true,\n\t    ariaChecked: true,\n\t    ariaDisabled: true,\n\t    ariaRequired: true,\n\t    ariaInvalid: true,\n\t    ariaMultiline: true,\n\t    ariaValue: true,\n\t    tabindex: true,\n\t    bindKeypress: true,\n\t    bindRoleForClick: true\n\t  };\n\t\n\t  /**\n\t   * @ngdoc method\n\t   * @name $ariaProvider#config\n\t   *\n\t   * @param {object} config object to enable/disable specific ARIA attributes\n\t   *\n\t   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags\n\t   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags\n\t   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags\n\t   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags\n\t   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags\n\t   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags\n\t   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags\n\t   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags\n\t   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and\n\t   *    `&lt;li&gt;` elements with ng-click\n\t   *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements like `div`\n\t   *    using ng-click, making them more accessible to users of assistive technologies\n\t   *\n\t   * @description\n\t   * Enables/disables various ARIA attributes\n\t   */\n\t  this.config = function(newConfig) {\n\t    config = angular.extend(config, newConfig);\n\t  };\n\t\n\t  function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {\n\t    return function(scope, elem, attr) {\n\t      var ariaCamelName = attr.$normalize(ariaAttr);\n\t      if (config[ariaCamelName] && !isNodeOneOf(elem, nodeBlackList) && !attr[ariaCamelName]) {\n\t        scope.$watch(attr[attrName], function(boolVal) {\n\t          // ensure boolean value\n\t          boolVal = negate ? !boolVal : !!boolVal;\n\t          elem.attr(ariaAttr, boolVal);\n\t        });\n\t      }\n\t    };\n\t  }\n\t  /**\n\t   * @ngdoc service\n\t   * @name $aria\n\t   *\n\t   * @description\n\t   * @priority 200\n\t   *\n\t   * The $aria service contains helper methods for applying common\n\t   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.\n\t   *\n\t   * ngAria injects common accessibility attributes that tell assistive technologies when HTML\n\t   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,\n\t   * let's review a code snippet from ngAria itself:\n\t   *\n\t   *```js\n\t   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {\n\t   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');\n\t   * }])\n\t   *```\n\t   * Shown above, the ngAria module creates a directive with the same signature as the\n\t   * traditional `ng-disabled` directive. But this ngAria version is dedicated to\n\t   * solely managing accessibility attributes. The internal `$aria` service is used to watch the\n\t   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,\n\t   * `aria-disabled` is injected as an attribute with its value synchronized to the value in\n\t   * `ngDisabled`.\n\t   *\n\t   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do\n\t   * anything to enable this feature. The `aria-disabled` attribute is automatically managed\n\t   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.\n\t   *\n\t   * The full list of directives that interface with ngAria:\n\t   * * **ngModel**\n\t   * * **ngShow**\n\t   * * **ngHide**\n\t   * * **ngClick**\n\t   * * **ngDblclick**\n\t   * * **ngMessages**\n\t   * * **ngDisabled**\n\t   *\n\t   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each\n\t   * directive.\n\t   *\n\t   *\n\t   * ## Dependencies\n\t   * Requires the {@link ngAria} module to be installed.\n\t   */\n\t  this.$get = function() {\n\t    return {\n\t      config: function(key) {\n\t        return config[key];\n\t      },\n\t      $$watchExpr: watchExpr\n\t    };\n\t  };\n\t}\n\t\n\t\n\tngAriaModule.directive('ngShow', ['$aria', function($aria) {\n\t  return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true);\n\t}])\n\t.directive('ngHide', ['$aria', function($aria) {\n\t  return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false);\n\t}])\n\t.directive('ngModel', ['$aria', function($aria) {\n\t\n\t  function shouldAttachAttr(attr, normalizedAttr, elem) {\n\t    return $aria.config(normalizedAttr) && !elem.attr(attr);\n\t  }\n\t\n\t  function shouldAttachRole(role, elem) {\n\t    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');\n\t  }\n\t\n\t  function getShape(attr, elem) {\n\t    var type = attr.type,\n\t        role = attr.role;\n\t\n\t    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :\n\t           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :\n\t           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' :\n\t           (type || role) === 'textbox'   || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';\n\t  }\n\t\n\t  return {\n\t    restrict: 'A',\n\t    require: '?ngModel',\n\t    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value\n\t    compile: function(elem, attr) {\n\t      var shape = getShape(attr, elem);\n\t\n\t      return {\n\t        pre: function(scope, elem, attr, ngModel) {\n\t          if (shape === 'checkbox' && attr.type !== 'checkbox') {\n\t            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles\n\t            ngModel.$isEmpty = function(value) {\n\t              return value === false;\n\t            };\n\t          }\n\t        },\n\t        post: function(scope, elem, attr, ngModel) {\n\t          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem)\n\t                                && !isNodeOneOf(elem, nodeBlackList);\n\t\n\t          function ngAriaWatchModelValue() {\n\t            return ngModel.$modelValue;\n\t          }\n\t\n\t          function getRadioReaction() {\n\t            if (needsTabIndex) {\n\t              needsTabIndex = false;\n\t              return function ngAriaRadioReaction(newVal) {\n\t                var boolVal = (attr.value == ngModel.$viewValue);\n\t                elem.attr('aria-checked', boolVal);\n\t                elem.attr('tabindex', 0 - !boolVal);\n\t              };\n\t            } else {\n\t              return function ngAriaRadioReaction(newVal) {\n\t                elem.attr('aria-checked', (attr.value == ngModel.$viewValue));\n\t              };\n\t            }\n\t          }\n\t\n\t          function ngAriaCheckboxReaction() {\n\t            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));\n\t          }\n\t\n\t          switch (shape) {\n\t            case 'radio':\n\t            case 'checkbox':\n\t              if (shouldAttachRole(shape, elem)) {\n\t                elem.attr('role', shape);\n\t              }\n\t              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {\n\t                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?\n\t                    getRadioReaction() : ngAriaCheckboxReaction);\n\t              }\n\t              if (needsTabIndex) {\n\t                elem.attr('tabindex', 0);\n\t              }\n\t              break;\n\t            case 'range':\n\t              if (shouldAttachRole(shape, elem)) {\n\t                elem.attr('role', 'slider');\n\t              }\n\t              if ($aria.config('ariaValue')) {\n\t                var needsAriaValuemin = !elem.attr('aria-valuemin') &&\n\t                    (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));\n\t                var needsAriaValuemax = !elem.attr('aria-valuemax') &&\n\t                    (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));\n\t                var needsAriaValuenow = !elem.attr('aria-valuenow');\n\t\n\t                if (needsAriaValuemin) {\n\t                  attr.$observe('min', function ngAriaValueMinReaction(newVal) {\n\t                    elem.attr('aria-valuemin', newVal);\n\t                  });\n\t                }\n\t                if (needsAriaValuemax) {\n\t                  attr.$observe('max', function ngAriaValueMinReaction(newVal) {\n\t                    elem.attr('aria-valuemax', newVal);\n\t                  });\n\t                }\n\t                if (needsAriaValuenow) {\n\t                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {\n\t                    elem.attr('aria-valuenow', newVal);\n\t                  });\n\t                }\n\t              }\n\t              if (needsTabIndex) {\n\t                elem.attr('tabindex', 0);\n\t              }\n\t              break;\n\t            case 'multiline':\n\t              if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {\n\t                elem.attr('aria-multiline', true);\n\t              }\n\t              break;\n\t          }\n\t\n\t          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {\n\t            scope.$watch(function ngAriaRequiredWatch() {\n\t              return ngModel.$error.required;\n\t            }, function ngAriaRequiredReaction(newVal) {\n\t              elem.attr('aria-required', !!newVal);\n\t            });\n\t          }\n\t\n\t          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {\n\t            scope.$watch(function ngAriaInvalidWatch() {\n\t              return ngModel.$invalid;\n\t            }, function ngAriaInvalidReaction(newVal) {\n\t              elem.attr('aria-invalid', !!newVal);\n\t            });\n\t          }\n\t        }\n\t      };\n\t    }\n\t  };\n\t}])\n\t.directive('ngDisabled', ['$aria', function($aria) {\n\t  return $aria.$$watchExpr('ngDisabled', 'aria-disabled', []);\n\t}])\n\t.directive('ngMessages', function() {\n\t  return {\n\t    restrict: 'A',\n\t    require: '?ngMessages',\n\t    link: function(scope, elem, attr, ngMessages) {\n\t      if (!elem.attr('aria-live')) {\n\t        elem.attr('aria-live', 'assertive');\n\t      }\n\t    }\n\t  };\n\t})\n\t.directive('ngClick',['$aria', '$parse', function($aria, $parse) {\n\t  return {\n\t    restrict: 'A',\n\t    compile: function(elem, attr) {\n\t      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);\n\t      return function(scope, elem, attr) {\n\t\n\t        if (!isNodeOneOf(elem, nodeBlackList)) {\n\t\n\t          if ($aria.config('bindRoleForClick') && !elem.attr('role')) {\n\t            elem.attr('role', 'button');\n\t          }\n\t\n\t          if ($aria.config('tabindex') && !elem.attr('tabindex')) {\n\t            elem.attr('tabindex', 0);\n\t          }\n\t\n\t          if ($aria.config('bindKeypress') && !attr.ngKeypress) {\n\t            elem.on('keypress', function(event) {\n\t              var keyCode = event.which || event.keyCode;\n\t              if (keyCode === 32 || keyCode === 13) {\n\t                scope.$apply(callback);\n\t              }\n\t\n\t              function callback() {\n\t                fn(scope, { $event: event });\n\t              }\n\t            });\n\t          }\n\t        }\n\t      };\n\t    }\n\t  };\n\t}])\n\t.directive('ngDblclick', ['$aria', function($aria) {\n\t  return function(scope, elem, attr) {\n\t    if ($aria.config('tabindex') && !elem.attr('tabindex') && !isNodeOneOf(elem, nodeBlackList)) {\n\t      elem.attr('tabindex', 0);\n\t    }\n\t  };\n\t}]);\n\t\n\t\n\t})(window, window.angular);\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Angular Material Design\n\t * https://github.com/angular/material\n\t * @license MIT\n\t * v0.11.4\n\t */\n\t(function( window, angular, undefined ){\n\t\"use strict\";\n\t\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('ngMaterial', [\"ng\",\"ngAnimate\",\"ngAria\",\"material.core\",\"material.core.gestures\",\"material.core.layout\",\"material.core.theming.palette\",\"material.core.theming\",\"material.core.animate\",\"material.components.autocomplete\",\"material.components.backdrop\",\"material.components.bottomSheet\",\"material.components.button\",\"material.components.card\",\"material.components.checkbox\",\"material.components.chips\",\"material.components.content\",\"material.components.dialog\",\"material.components.divider\",\"material.components.datepicker\",\"material.components.fabActions\",\"material.components.fabShared\",\"material.components.fabSpeedDial\",\"material.components.fabToolbar\",\"material.components.fabTrigger\",\"material.components.gridList\",\"material.components.icon\",\"material.components.input\",\"material.components.list\",\"material.components.menu\",\"material.components.menuBar\",\"material.components.progressCircular\",\"material.components.radioButton\",\"material.components.progressLinear\",\"material.components.select\",\"material.components.sidenav\",\"material.components.slider\",\"material.components.sticky\",\"material.components.subheader\",\"material.components.swipe\",\"material.components.switch\",\"material.components.toast\",\"material.components.tabs\",\"material.components.toolbar\",\"material.components.tooltip\",\"material.components.virtualRepeat\",\"material.components.whiteframe\"]);\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * Initialization function that validates environment\n\t * requirements.\n\t */\n\tangular\n\t  .module('material.core', [\n\t    'ngAnimate',\n\t    'material.core.animate',\n\t    'material.core.layout',\n\t    'material.core.gestures',\n\t    'material.core.theming'\n\t  ])\n\t  .directive('mdTemplate', MdTemplateDirective)\n\t  .config(MdCoreConfigure);\n\t\n\tfunction MdCoreConfigure($provide, $mdThemingProvider) {\n\t\n\t  $provide.decorator('$$rAF', [\"$delegate\", rAFDecorator]);\n\t\n\t  $mdThemingProvider.theme('default')\n\t    .primaryPalette('indigo')\n\t    .accentPalette('pink')\n\t    .warnPalette('red')\n\t    .backgroundPalette('grey');\n\t}\n\tMdCoreConfigure.$inject = [\"$provide\", \"$mdThemingProvider\"];\n\t\n\tfunction MdTemplateDirective($compile) {\n\t  return {\n\t    restrict: 'A',\n\t    scope: {\n\t      template: '=mdTemplate'\n\t    },\n\t    link: function postLink(scope, element) {\n\t      scope.$watch('template', assignSafeHTML);\n\t\n\t      /**\n\t       * To add safe HTML: assign and compile in\n\t       * isolated scope.\n\t       */\n\t      function assignSafeHTML(value) {\n\t        // when the 'compile' expression changes\n\t        // assign it into the current DOM\n\t        element.html(value);\n\t\n\t        // Compile the new DOM and link it to the current scope.\n\t        // NOTE: we only compile .childNodes so that we don't get\n\t        //       into infinite loop compiling ourselves\n\t        $compile(element.contents())(scope);\n\t      }\n\t    }\n\t  };\n\t\n\t}\n\tMdTemplateDirective.$inject = [\"$compile\"];\n\t\n\tfunction rAFDecorator($delegate) {\n\t  /**\n\t   * Use this to throttle events that come in often.\n\t   * The throttled function will always use the *last* invocation before the\n\t   * coming frame.\n\t   *\n\t   * For example, window resize events that fire many times a second:\n\t   * If we set to use an raf-throttled callback on window resize, then\n\t   * our callback will only be fired once per frame, with the last resize\n\t   * event that happened before that frame.\n\t   *\n\t   * @param {function} callback function to debounce\n\t   */\n\t  $delegate.throttle = function(cb) {\n\t    var queuedArgs, alreadyQueued, queueCb, context;\n\t    return function debounced() {\n\t      queuedArgs = arguments;\n\t      context = this;\n\t      queueCb = cb;\n\t      if (!alreadyQueued) {\n\t        alreadyQueued = true;\n\t        $delegate(function() {\n\t          queueCb.apply(context, Array.prototype.slice.call(queuedArgs));\n\t          alreadyQueued = false;\n\t        });\n\t      }\n\t    };\n\t  };\n\t  return $delegate;\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('material.core')\n\t.factory('$mdConstant', MdConstantFactory);\n\t\n\t/**\n\t * Factory function that creates the grab-bag $mdConstant service.\n\t * @ngInject\n\t */\n\tfunction MdConstantFactory($sniffer) {\n\t\n\t  var webkit = /webkit/i.test($sniffer.vendorPrefix);\n\t  function vendorProperty(name) {\n\t    return webkit ?  ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;\n\t  }\n\t\n\t  return {\n\t    KEY_CODE: {\n\t      ENTER: 13,\n\t      ESCAPE: 27,\n\t      SPACE: 32,\n\t      PAGE_UP: 33,\n\t      PAGE_DOWN: 34,\n\t      END: 35,\n\t      HOME: 36,\n\t      LEFT_ARROW : 37,\n\t      UP_ARROW : 38,\n\t      RIGHT_ARROW : 39,\n\t      DOWN_ARROW : 40,\n\t      TAB : 9,\n\t      BACKSPACE: 8,\n\t      DELETE: 46\n\t    },\n\t    CSS: {\n\t      /* Constants */\n\t      TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),\n\t      ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),\n\t\n\t      TRANSFORM: vendorProperty('transform'),\n\t      TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),\n\t      TRANSITION: vendorProperty('transition'),\n\t      TRANSITION_DURATION: vendorProperty('transitionDuration'),\n\t      ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),\n\t      ANIMATION_DURATION: vendorProperty('animationDuration'),\n\t      ANIMATION_NAME: vendorProperty('animationName'),\n\t      ANIMATION_TIMING: vendorProperty('animationTimingFunction'),\n\t      ANIMATION_DIRECTION: vendorProperty('animationDirection')\n\t    },\n\t    MEDIA: {\n\t      'sm': '(max-width: 599px)',\n\t      'gt-sm': '(min-width: 600px)',\n\t      'md': '(min-width: 600px) and (max-width: 959px)',\n\t      'gt-md': '(min-width: 960px)',\n\t      'lg': '(min-width: 960px) and (max-width: 1199px)',\n\t      'gt-lg': '(min-width: 1200px)'\n\t    },\n\t    MEDIA_PRIORITY: [\n\t      'gt-lg',\n\t      'lg',\n\t      'gt-md',\n\t      'md',\n\t      'gt-sm',\n\t      'sm'\n\t    ]\n\t  };\n\t}\n\tMdConstantFactory.$inject = [\"$sniffer\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t  angular\n\t    .module('material.core')\n\t    .config( [\"$provide\", function($provide){\n\t       $provide.decorator('$mdUtil', ['$delegate', function ($delegate){\n\t           /**\n\t            * Inject the iterator facade to easily support iteration and accessors\n\t            * @see iterator below\n\t            */\n\t           $delegate.iterator = MdIterator;\n\t\n\t           return $delegate;\n\t         }\n\t       ]);\n\t     }]);\n\t\n\t  /**\n\t   * iterator is a list facade to easily support iteration and accessors\n\t   *\n\t   * @param items Array list which this iterator will enumerate\n\t   * @param reloop Boolean enables iterator to consider the list as an endless reloop\n\t   */\n\t  function MdIterator(items, reloop) {\n\t    var trueFn = function() { return true; };\n\t\n\t    if (items && !angular.isArray(items)) {\n\t      items = Array.prototype.slice.call(items);\n\t    }\n\t\n\t    reloop = !!reloop;\n\t    var _items = items || [ ];\n\t\n\t    // Published API\n\t    return {\n\t      items: getItems,\n\t      count: count,\n\t\n\t      inRange: inRange,\n\t      contains: contains,\n\t      indexOf: indexOf,\n\t      itemAt: itemAt,\n\t\n\t      findBy: findBy,\n\t\n\t      add: add,\n\t      remove: remove,\n\t\n\t      first: first,\n\t      last: last,\n\t      next: angular.bind(null, findSubsequentItem, false),\n\t      previous: angular.bind(null, findSubsequentItem, true),\n\t\n\t      hasPrevious: hasPrevious,\n\t      hasNext: hasNext\n\t\n\t    };\n\t\n\t    /**\n\t     * Publish copy of the enumerable set\n\t     * @returns {Array|*}\n\t     */\n\t    function getItems() {\n\t      return [].concat(_items);\n\t    }\n\t\n\t    /**\n\t     * Determine length of the list\n\t     * @returns {Array.length|*|number}\n\t     */\n\t    function count() {\n\t      return _items.length;\n\t    }\n\t\n\t    /**\n\t     * Is the index specified valid\n\t     * @param index\n\t     * @returns {Array.length|*|number|boolean}\n\t     */\n\t    function inRange(index) {\n\t      return _items.length && ( index > -1 ) && (index < _items.length );\n\t    }\n\t\n\t    /**\n\t     * Can the iterator proceed to the next item in the list; relative to\n\t     * the specified item.\n\t     *\n\t     * @param item\n\t     * @returns {Array.length|*|number|boolean}\n\t     */\n\t    function hasNext(item) {\n\t      return item ? inRange(indexOf(item) + 1) : false;\n\t    }\n\t\n\t    /**\n\t     * Can the iterator proceed to the previous item in the list; relative to\n\t     * the specified item.\n\t     *\n\t     * @param item\n\t     * @returns {Array.length|*|number|boolean}\n\t     */\n\t    function hasPrevious(item) {\n\t      return item ? inRange(indexOf(item) - 1) : false;\n\t    }\n\t\n\t    /**\n\t     * Get item at specified index/position\n\t     * @param index\n\t     * @returns {*}\n\t     */\n\t    function itemAt(index) {\n\t      return inRange(index) ? _items[index] : null;\n\t    }\n\t\n\t    /**\n\t     * Find all elements matching the key/value pair\n\t     * otherwise return null\n\t     *\n\t     * @param val\n\t     * @param key\n\t     *\n\t     * @return array\n\t     */\n\t    function findBy(key, val) {\n\t      return _items.filter(function(item) {\n\t        return item[key] === val;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Add item to list\n\t     * @param item\n\t     * @param index\n\t     * @returns {*}\n\t     */\n\t    function add(item, index) {\n\t      if ( !item ) return -1;\n\t\n\t      if (!angular.isNumber(index)) {\n\t        index = _items.length;\n\t      }\n\t\n\t      _items.splice(index, 0, item);\n\t\n\t      return indexOf(item);\n\t    }\n\t\n\t    /**\n\t     * Remove item from list...\n\t     * @param item\n\t     */\n\t    function remove(item) {\n\t      if ( contains(item) ){\n\t        _items.splice(indexOf(item), 1);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Get the zero-based index of the target item\n\t     * @param item\n\t     * @returns {*}\n\t     */\n\t    function indexOf(item) {\n\t      return _items.indexOf(item);\n\t    }\n\t\n\t    /**\n\t     * Boolean existence check\n\t     * @param item\n\t     * @returns {boolean}\n\t     */\n\t    function contains(item) {\n\t      return item && (indexOf(item) > -1);\n\t    }\n\t\n\t    /**\n\t     * Return first item in the list\n\t     * @returns {*}\n\t     */\n\t    function first() {\n\t      return _items.length ? _items[0] : null;\n\t    }\n\t\n\t    /**\n\t     * Return last item in the list...\n\t     * @returns {*}\n\t     */\n\t    function last() {\n\t      return _items.length ? _items[_items.length - 1] : null;\n\t    }\n\t\n\t    /**\n\t     * Find the next item. If reloop is true and at the end of the list, it will go back to the\n\t     * first item. If given, the `validate` callback will be used to determine whether the next item\n\t     * is valid. If not valid, it will try to find the next item again.\n\t     *\n\t     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)\n\t     * @param {*} item The item whose subsequent item we are looking for\n\t     * @param {Function=} validate The `validate` function\n\t     * @param {integer=} limit The recursion limit\n\t     *\n\t     * @returns {*} The subsequent item or null\n\t     */\n\t    function findSubsequentItem(backwards, item, validate, limit) {\n\t      validate = validate || trueFn;\n\t\n\t      var curIndex = indexOf(item);\n\t      while (true) {\n\t        if (!inRange(curIndex)) return null;\n\t\n\t        var nextIndex = curIndex + (backwards ? -1 : 1);\n\t        var foundItem = null;\n\t        if (inRange(nextIndex)) {\n\t          foundItem = _items[nextIndex];\n\t        } else if (reloop) {\n\t          foundItem = backwards ? last() : first();\n\t          nextIndex = indexOf(foundItem);\n\t        }\n\t\n\t        if ((foundItem === null) || (nextIndex === limit)) return null;\n\t        if (validate(foundItem)) return foundItem;\n\t\n\t        if (angular.isUndefined(limit)) limit = nextIndex;\n\t\n\t        curIndex = nextIndex;\n\t      }\n\t    }\n\t  }\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('material.core')\n\t.factory('$mdMedia', mdMediaFactory);\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $mdMedia\n\t * @module material.core\n\t *\n\t * @description\n\t * `$mdMedia` is used to evaluate whether a given media query is true or false given the\n\t * current device's screen / window size. The media query will be re-evaluated on resize, allowing\n\t * you to register a watch.\n\t *\n\t * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints.\n\t *  (`sm`, `gt-sm`, `md`, `gt-md`, `lg`, `gt-lg`).\n\t *\n\t * @returns {boolean} a boolean representing whether or not the given media query is true or false.\n\t *\n\t * @usage\n\t * <hljs lang=\"js\">\n\t * app.controller('MyController', function($mdMedia, $scope) {\n\t *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {\n\t *     $scope.bigScreen = big;\n\t *   });\n\t *\n\t *   $scope.screenIsSmall = $mdMedia('sm');\n\t *   $scope.customQuery = $mdMedia('(min-width: 1234px)');\n\t *   $scope.anotherCustom = $mdMedia('max-width: 300px');\n\t * });\n\t * </hljs>\n\t */\n\t\n\tfunction mdMediaFactory($mdConstant, $rootScope, $window) {\n\t  var queries = {};\n\t  var mqls = {};\n\t  var results = {};\n\t  var normalizeCache = {};\n\t\n\t  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;\n\t  $mdMedia.getQuery = getQuery;\n\t  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;\n\t\n\t  return $mdMedia;\n\t\n\t  function $mdMedia(query) {\n\t    var validated = queries[query];\n\t    if (angular.isUndefined(validated)) {\n\t      validated = queries[query] = validate(query);\n\t    }\n\t\n\t    var result = results[validated];\n\t    if (angular.isUndefined(result)) {\n\t      result = add(validated);\n\t    }\n\t\n\t    return result;\n\t  }\n\t\n\t  function validate(query) {\n\t    return $mdConstant.MEDIA[query] ||\n\t           ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);\n\t  }\n\t\n\t  function add(query) {\n\t    var result = mqls[query] = $window.matchMedia(query);\n\t    result.addListener(onQueryChange);\n\t    return (results[result.media] = !!result.matches);\n\t  }\n\t\n\t  function onQueryChange(query) {\n\t    $rootScope.$evalAsync(function() {\n\t      results[query.media] = !!query.matches;\n\t    });\n\t  }\n\t\n\t  function getQuery(name) {\n\t    return mqls[name];\n\t  }\n\t\n\t  function getResponsiveAttribute(attrs, attrName) {\n\t    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {\n\t      var mediaName = $mdConstant.MEDIA_PRIORITY[i];\n\t      if (!mqls[queries[mediaName]].matches) {\n\t        continue;\n\t      }\n\t\n\t      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);\n\t      if (attrs[normalizedName]) {\n\t        return attrs[normalizedName];\n\t      }\n\t    }\n\t\n\t    // fallback on unprefixed\n\t    return attrs[getNormalizedName(attrs, attrName)];\n\t  }\n\t\n\t  function watchResponsiveAttributes(attrNames, attrs, watchFn) {\n\t    var unwatchFns = [];\n\t    attrNames.forEach(function(attrName) {\n\t      var normalizedName = getNormalizedName(attrs, attrName);\n\t      if (angular.isDefined(attrs[normalizedName])) {\n\t        unwatchFns.push(\n\t            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));\n\t      }\n\t\n\t      for (var mediaName in $mdConstant.MEDIA) {\n\t        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);\n\t        if (angular.isDefined(attrs[normalizedName])) {\n\t          unwatchFns.push(\n\t              attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));\n\t        }\n\t      }\n\t    });\n\t\n\t    return function unwatch() {\n\t      unwatchFns.forEach(function(fn) { fn(); })\n\t    };\n\t  }\n\t\n\t  // Improves performance dramatically\n\t  function getNormalizedName(attrs, attrName) {\n\t    return normalizeCache[attrName] ||\n\t        (normalizeCache[attrName] = attrs.$normalize(attrName));\n\t  }\n\t}\n\tmdMediaFactory.$inject = [\"$mdConstant\", \"$rootScope\", \"$window\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/*\n\t * This var has to be outside the angular factory, otherwise when\n\t * there are multiple material apps on the same page, each app\n\t * will create its own instance of this array and the app's IDs\n\t * will not be unique.\n\t */\n\tvar nextUniqueId = 0;\n\t\n\tangular\n\t  .module('material.core')\n\t  .factory('$mdUtil', UtilFactory);\n\t\n\tfunction UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log) {\n\t  // Setup some core variables for the processTemplate method\n\t  var startSymbol = $interpolate.startSymbol(),\n\t    endSymbol = $interpolate.endSymbol(),\n\t    usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}'));\n\t\n\t  var $mdUtil = {\n\t    dom: {},\n\t    now: window.performance ?\n\t      angular.bind(window.performance, window.performance.now) : Date.now || function() {\n\t      return new Date().getTime();\n\t    },\n\t\n\t    clientRect: function(element, offsetParent, isOffsetRect) {\n\t      var node = getNode(element);\n\t      offsetParent = getNode(offsetParent || node.offsetParent || document.body);\n\t      var nodeRect = node.getBoundingClientRect();\n\t\n\t      // The user can ask for an offsetRect: a rect relative to the offsetParent,\n\t      // or a clientRect: a rect relative to the page\n\t      var offsetRect = isOffsetRect ?\n\t        offsetParent.getBoundingClientRect() :\n\t      {left: 0, top: 0, width: 0, height: 0};\n\t      return {\n\t        left: nodeRect.left - offsetRect.left,\n\t        top: nodeRect.top - offsetRect.top,\n\t        width: nodeRect.width,\n\t        height: nodeRect.height\n\t      };\n\t    },\n\t    offsetRect: function(element, offsetParent) {\n\t      return $mdUtil.clientRect(element, offsetParent, true);\n\t    },\n\t\n\t    // Annoying method to copy nodes to an array, thanks to IE\n\t    nodesToArray: function(nodes) {\n\t      nodes = nodes || [];\n\t\n\t      var results = [];\n\t      for (var i = 0; i < nodes.length; ++i) {\n\t        results.push(nodes.item(i));\n\t      }\n\t      return results;\n\t    },\n\t\n\t    /**\n\t     * Calculate the positive scroll offset\n\t     * TODO: Check with pinch-zoom in IE/Chrome;\n\t     *       https://code.google.com/p/chromium/issues/detail?id=496285\n\t     */\n\t    scrollTop: function(element) {\n\t      element = angular.element(element || $document[0].body);\n\t\n\t      var body = (element[0] == $document[0].body) ? $document[0].body : undefined;\n\t      var scrollTop = body ? body.scrollTop + body.parentElement.scrollTop : 0;\n\t\n\t      // Calculate the positive scroll offset\n\t      return scrollTop || Math.abs(element[0].getBoundingClientRect().top);\n\t    },\n\t\n\t    /**\n\t     * `findFocusTarget()` provides an optional way to identify the focused element when a dialog, bottomsheet, sideNav\n\t     * or other element opens. This is optional attribute finds a nested element with the mdAutoFocus attribute and optional\n\t     * expression. An expression may be specified as the directive value; to enable conditional activation of the autoFocus.\n\t     *\n\t     * NOTE: It is up to the component logic to use the '$mdUtil.findFocusTarget()'\n\t     *\n\t     * @usage\n\t     * <hljs lang=\"html\">\n\t     * <md-dialog>\n\t     *   <form>\n\t     *     <md-input-container>\n\t     *       <label for=\"testInput\">Label</label>\n\t     *       <input id=\"testInput\" type=\"text\" md-autofocus>\n\t     *     </md-input-container>\n\t     *   </form>\n\t     * </md-dialog>\n\t     * </hljs>\n\t     *\n\t     *<hljs lang=\"html\">\n\t     * <md-bottom-sheet class=\"md-list md-has-header\">\n\t     *  <md-subheader>Comment Actions</md-subheader>\n\t     *  <md-list>\n\t     *    <md-list-item ng-repeat=\"item in items\">\n\t     *\n\t     *      <md-button md-autofocus=\"$index == 2\">\n\t     *        <md-icon md-svg-src=\"{{item.icon}}\"></md-icon>\n\t     *        <span class=\"md-inline-list-icon-label\">{{ item.name }}</span>\n\t     *      </md-button>\n\t     *\n\t     *    </md-list-item>\n\t     *  </md-list>\n\t     * </md-bottom-sheet>\n\t     *</hljs>\n\t     **/\n\t    findFocusTarget: function(containerEl, attributeVal) {\n\t      var AUTO_FOCUS = '[md-autofocus]';\n\t      var elToFocus;\n\t\n\t      elToFocus = scanForFocusable(containerEl, attributeVal || AUTO_FOCUS);\n\t\n\t      if ( !elToFocus && attributeVal != AUTO_FOCUS) {\n\t        // Scan for deprecated attribute\n\t        elToFocus = scanForFocusable(containerEl, '[md-auto-focus]');\n\t\n\t        if ( !elToFocus ) {\n\t          // Scan for fallback to 'universal' API\n\t          elToFocus = scanForFocusable(containerEl, AUTO_FOCUS);\n\t        }\n\t      }\n\t\n\t      return elToFocus;\n\t\n\t      /**\n\t       * Can target and nested children for specified Selector (attribute)\n\t       * whose value may be an expression that evaluates to True/False.\n\t       */\n\t      function scanForFocusable(target, selector) {\n\t        var elFound, items = target[0].querySelectorAll(selector);\n\t\n\t        // Find the last child element with the focus attribute\n\t        if ( items && items.length ){\n\t          var EXP_ATTR = /\\s*\\[?([\\-a-z]*)\\]?\\s*/i;\n\t          var matches = EXP_ATTR.exec(selector);\n\t          var attribute = matches ? matches[1] : null;\n\t\n\t          items.length && angular.forEach(items, function(it) {\n\t            it = angular.element(it);\n\t\n\t            // If the expression evaluates to FALSE, then it is not focusable target\n\t            var focusExpression = it[0].getAttribute(attribute);\n\t            var isFocusable = !focusExpression || !$mdUtil.validateScope(it) ? true :\n\t                              (it.scope().$eval(focusExpression) !== false );\n\t\n\t            if (isFocusable) elFound = it;\n\t          });\n\t        }\n\t        return elFound;\n\t      }\n\t    },\n\t\n\t    // Disables scroll around the passed element.\n\t    disableScrollAround: function(element, parent) {\n\t      $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;\n\t      ++$mdUtil.disableScrollAround._count;\n\t      if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;\n\t      element = angular.element(element);\n\t      var body = $document[0].body,\n\t        restoreBody = disableBodyScroll(),\n\t        restoreElement = disableElementScroll(parent);\n\t\n\t      return $mdUtil.disableScrollAround._enableScrolling = function() {\n\t        if (!--$mdUtil.disableScrollAround._count) {\n\t          restoreBody();\n\t          restoreElement();\n\t          delete $mdUtil.disableScrollAround._enableScrolling;\n\t        }\n\t      };\n\t\n\t      // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events\n\t      function disableElementScroll(element) {\n\t        element = angular.element(element || body)[0];\n\t        var zIndex = 50;\n\t        var scrollMask = angular.element(\n\t          '<div class=\"md-scroll-mask\" style=\"z-index: ' + zIndex + '\">' +\n\t          '  <div class=\"md-scroll-mask-bar\"></div>' +\n\t          '</div>');\n\t        element.appendChild(scrollMask[0]);\n\t\n\t        scrollMask.on('wheel', preventDefault);\n\t        scrollMask.on('touchmove', preventDefault);\n\t        $document.on('keydown', disableKeyNav);\n\t\n\t        return function restoreScroll() {\n\t          scrollMask.off('wheel');\n\t          scrollMask.off('touchmove');\n\t          scrollMask[0].parentNode.removeChild(scrollMask[0]);\n\t          $document.off('keydown', disableKeyNav);\n\t          delete $mdUtil.disableScrollAround._enableScrolling;\n\t        };\n\t\n\t        // Prevent keypresses from elements inside the body\n\t        // used to stop the keypresses that could cause the page to scroll\n\t        // (arrow keys, spacebar, tab, etc).\n\t        function disableKeyNav(e) {\n\t          //-- temporarily removed this logic, will possibly re-add at a later date\n\t          //if (!element[0].contains(e.target)) {\n\t          //  e.preventDefault();\n\t          //  e.stopImmediatePropagation();\n\t          //}\n\t        }\n\t\n\t        function preventDefault(e) {\n\t          e.preventDefault();\n\t        }\n\t      }\n\t\n\t      // Converts the body to a position fixed block and translate it to the proper scroll\n\t      // position\n\t      function disableBodyScroll() {\n\t        var htmlNode = body.parentNode;\n\t        var restoreHtmlStyle = htmlNode.getAttribute('style') || '';\n\t        var restoreBodyStyle = body.getAttribute('style') || '';\n\t        var scrollOffset = $mdUtil.scrollTop(body);\n\t        var clientWidth = body.clientWidth;\n\t\n\t        if (body.scrollHeight > body.clientHeight) {\n\t          applyStyles(body, {\n\t            position: 'fixed',\n\t            width: '100%',\n\t            top: -scrollOffset + 'px'\n\t          });\n\t\n\t          applyStyles(htmlNode, {\n\t            overflowY: 'scroll'\n\t          });\n\t        }\n\t\n\t        if (body.clientWidth < clientWidth) applyStyles(body, {overflow: 'hidden'});\n\t\n\t        return function restoreScroll() {\n\t          body.setAttribute('style', restoreBodyStyle);\n\t          htmlNode.setAttribute('style', restoreHtmlStyle);\n\t          body.scrollTop = scrollOffset;\n\t        };\n\t      }\n\t\n\t      function applyStyles(el, styles) {\n\t        for (var key in styles) {\n\t          el.style[key] = styles[key];\n\t        }\n\t      }\n\t    },\n\t    enableScrolling: function() {\n\t      var method = this.disableScrollAround._enableScrolling;\n\t      method && method();\n\t    },\n\t    floatingScrollbars: function() {\n\t      if (this.floatingScrollbars.cached === undefined) {\n\t        var tempNode = angular.element('<div style=\"width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll\"><div style=\"height: 60;\"></div></div>');\n\t        $document[0].body.appendChild(tempNode[0]);\n\t        this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);\n\t        tempNode.remove();\n\t      }\n\t      return this.floatingScrollbars.cached;\n\t    },\n\t\n\t    // Mobile safari only allows you to set focus in click event listeners...\n\t    forceFocus: function(element) {\n\t      var node = element[0] || element;\n\t\n\t      document.addEventListener('click', function focusOnClick(ev) {\n\t        if (ev.target === node && ev.$focus) {\n\t          node.focus();\n\t          ev.stopImmediatePropagation();\n\t          ev.preventDefault();\n\t          node.removeEventListener('click', focusOnClick);\n\t        }\n\t      }, true);\n\t\n\t      var newEvent = document.createEvent('MouseEvents');\n\t      newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,\n\t        false, false, false, false, 0, null);\n\t      newEvent.$material = true;\n\t      newEvent.$focus = true;\n\t      node.dispatchEvent(newEvent);\n\t    },\n\t\n\t    /**\n\t     * facade to build md-backdrop element with desired styles\n\t     * NOTE: Use $compile to trigger backdrop postLink function\n\t     */\n\t    createBackdrop: function(scope, addClass) {\n\t      return $compile($mdUtil.supplant('<md-backdrop class=\"{0}\">', [addClass]))(scope);\n\t    },\n\t\n\t    /**\n\t     * supplant() method from Crockford's `Remedial Javascript`\n\t     * Equivalent to use of $interpolate; without dependency on\n\t     * interpolation symbols and scope. Note: the '{<token>}' can\n\t     * be property names, property chains, or array indices.\n\t     */\n\t    supplant: function(template, values, pattern) {\n\t      pattern = pattern || /\\{([^\\{\\}]*)\\}/g;\n\t      return template.replace(pattern, function(a, b) {\n\t        var p = b.split('.'),\n\t          r = values;\n\t        try {\n\t          for (var s in p) {\n\t            if (p.hasOwnProperty(s) ) {\n\t              r = r[p[s]];\n\t            }\n\t          }\n\t        } catch (e) {\n\t          r = a;\n\t        }\n\t        return (typeof r === 'string' || typeof r === 'number') ? r : a;\n\t      });\n\t    },\n\t\n\t    fakeNgModel: function() {\n\t      return {\n\t        $fake: true,\n\t        $setTouched: angular.noop,\n\t        $setViewValue: function(value) {\n\t          this.$viewValue = value;\n\t          this.$render(value);\n\t          this.$viewChangeListeners.forEach(function(cb) {\n\t            cb();\n\t          });\n\t        },\n\t        $isEmpty: function(value) {\n\t          return ('' + value).length === 0;\n\t        },\n\t        $parsers: [],\n\t        $formatters: [],\n\t        $viewChangeListeners: [],\n\t        $render: angular.noop\n\t      };\n\t    },\n\t\n\t    // Returns a function, that, as long as it continues to be invoked, will not\n\t    // be triggered. The function will be called after it stops being called for\n\t    // N milliseconds.\n\t    // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs\n\t    // @param invokeApply should the $timeout trigger $digest() dirty checking\n\t    debounce: function(func, wait, scope, invokeApply) {\n\t      var timer;\n\t\n\t      return function debounced() {\n\t        var context = scope,\n\t          args = Array.prototype.slice.call(arguments);\n\t\n\t        $timeout.cancel(timer);\n\t        timer = $timeout(function() {\n\t\n\t          timer = undefined;\n\t          func.apply(context, args);\n\t\n\t        }, wait || 10, invokeApply);\n\t      };\n\t    },\n\t\n\t    // Returns a function that can only be triggered every `delay` milliseconds.\n\t    // In other words, the function will not be called unless it has been more\n\t    // than `delay` milliseconds since the last call.\n\t    throttle: function throttle(func, delay) {\n\t      var recent;\n\t      return function throttled() {\n\t        var context = this;\n\t        var args = arguments;\n\t        var now = $mdUtil.now();\n\t\n\t        if (!recent || (now - recent > delay)) {\n\t          func.apply(context, args);\n\t          recent = now;\n\t        }\n\t      };\n\t    },\n\t\n\t    /**\n\t     * Measures the number of milliseconds taken to run the provided callback\n\t     * function. Uses a high-precision timer if available.\n\t     */\n\t    time: function time(cb) {\n\t      var start = $mdUtil.now();\n\t      cb();\n\t      return $mdUtil.now() - start;\n\t    },\n\t\n\t    /**\n\t     * Create an implicit getter that caches its `getter()`\n\t     * lookup value\n\t     */\n\t    valueOnUse : function (scope, key, getter) {\n\t      var value = null, args = Array.prototype.slice.call(arguments);\n\t      var params = (args.length > 3) ? args.slice(3) : [ ];\n\t\n\t      Object.defineProperty(scope, key, {\n\t        get: function () {\n\t          if (value === null) value = getter.apply(scope, params);\n\t          return value;\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Get a unique ID.\n\t     *\n\t     * @returns {string} an unique numeric string\n\t     */\n\t    nextUid: function() {\n\t      return '' + nextUniqueId++;\n\t    },\n\t\n\t    /**\n\t     * By default AngularJS attaches information about binding and scopes to DOM nodes,\n\t     * and adds CSS classes to data-bound elements. But this information is NOT available\n\t     * when `$compileProvider.debugInfoEnabled(false);`\n\t     *\n\t     * @see https://docs.angularjs.org/guide/production\n\t     */\n\t    validateScope : function(element) {\n\t      var hasScope = element && angular.isDefined(element.scope());\n\t      if ( !hasScope ) {\n\t        $log.warn(\"element.scope() is not available when 'debug mode' == false. @see https://docs.angularjs.org/guide/production!\");\n\t      }\n\t\n\t      return hasScope;\n\t    },\n\t\n\t    // Stop watchers and events from firing on a scope without destroying it,\n\t    // by disconnecting it from its parent and its siblings' linked lists.\n\t    disconnectScope: function disconnectScope(scope) {\n\t      if (!scope) return;\n\t\n\t      // we can't destroy the root scope or a scope that has been already destroyed\n\t      if (scope.$root === scope) return;\n\t      if (scope.$$destroyed) return;\n\t\n\t      var parent = scope.$parent;\n\t      scope.$$disconnected = true;\n\t\n\t      // See Scope.$destroy\n\t      if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;\n\t      if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;\n\t      if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;\n\t      if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;\n\t\n\t      scope.$$nextSibling = scope.$$prevSibling = null;\n\t\n\t    },\n\t\n\t    // Undo the effects of disconnectScope above.\n\t    reconnectScope: function reconnectScope(scope) {\n\t      if (!scope) return;\n\t\n\t      // we can't disconnect the root node or scope already disconnected\n\t      if (scope.$root === scope) return;\n\t      if (!scope.$$disconnected) return;\n\t\n\t      var child = scope;\n\t\n\t      var parent = child.$parent;\n\t      child.$$disconnected = false;\n\t      // See Scope.$new for this logic...\n\t      child.$$prevSibling = parent.$$childTail;\n\t      if (parent.$$childHead) {\n\t        parent.$$childTail.$$nextSibling = child;\n\t        parent.$$childTail = child;\n\t      } else {\n\t        parent.$$childHead = parent.$$childTail = child;\n\t      }\n\t    },\n\t\n\t    /*\n\t     * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName\n\t     *\n\t     * @param el Element to start walking the DOM from\n\t     * @param tagName Tag name to find closest to el, such as 'form'\n\t     */\n\t    getClosest: function getClosest(el, tagName, onlyParent) {\n\t      if (el instanceof angular.element) el = el[0];\n\t      tagName = tagName.toUpperCase();\n\t      if (onlyParent) el = el.parentNode;\n\t      if (!el) return null;\n\t      do {\n\t        if (el.nodeName === tagName) {\n\t          return el;\n\t        }\n\t      } while (el = el.parentNode);\n\t      return null;\n\t    },\n\t\n\t    /**\n\t     * Build polyfill for the Node.contains feature (if needed)\n\t     */\n\t    elementContains: function(node, child) {\n\t      var hasContains = (window.Node && window.Node.prototype && Node.prototype.contains);\n\t      var findFn = hasContains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {\n\t        // compares the positions of two nodes and returns a bitmask\n\t        return (node === child) || !!(this.compareDocumentPosition(arg) & 16)\n\t      });\n\t\n\t      return findFn(child);\n\t    },\n\t\n\t    /**\n\t     * Functional equivalent for $element.filter(‘md-bottom-sheet’)\n\t     * useful with interimElements where the element and its container are important...\n\t     *\n\t     * @param {[]} elements to scan\n\t     * @param {string} name of node to find (e.g. 'md-dialog')\n\t     * @param {boolean=} optional flag to allow deep scans; defaults to 'false'.\n\t     * @param {boolean=} optional flag to enable log warnings; defaults to false\n\t     */\n\t    extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {\n\t      var found = scanTree(element);\n\t      if (!found && !!warnNotFound) {\n\t        $log.warn( $mdUtil.supplant(\"Unable to find node '{0}' in element '{1}'.\",[nodeName, element[0].outerHTML]) );\n\t      }\n\t\n\t      return angular.element(found || element);\n\t\n\t      /**\n\t       * Breadth-First tree scan for element with matching `nodeName`\n\t       */\n\t      function scanTree(element) {\n\t        return scanLevel(element) || (!!scanDeep ? scanChildren(element) : null);\n\t      }\n\t\n\t      /**\n\t       * Case-insensitive scan of current elements only (do not descend).\n\t       */\n\t      function scanLevel(element) {\n\t        if ( element ) {\n\t          for (var i = 0, len = element.length; i < len; i++) {\n\t            if (element[i].nodeName.toLowerCase() === nodeName) {\n\t              return element[i];\n\t            }\n\t          }\n\t        }\n\t        return null;\n\t      }\n\t\n\t      /**\n\t       * Scan children of specified node\n\t       */\n\t      function scanChildren(element) {\n\t        var found;\n\t        if ( element ) {\n\t          for (var i = 0, len = element.length; i < len; i++) {\n\t            var target = element[i];\n\t            if ( !found ) {\n\t              for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) {\n\t                found = found || scanTree([target.childNodes[j]]);\n\t              }\n\t            }\n\t          }\n\t        }\n\t        return found;\n\t      }\n\t\n\t    },\n\t\n\t    /**\n\t     * Give optional properties with no value a boolean true if attr provided or false otherwise\n\t     */\n\t    initOptionalProperties: function(scope, attr, defaults) {\n\t      defaults = defaults || {};\n\t      angular.forEach(scope.$$isolateBindings, function(binding, key) {\n\t        if (binding.optional && angular.isUndefined(scope[key])) {\n\t          var attrIsDefined = angular.isDefined(attr[binding.attrName]);\n\t          scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Alternative to $timeout calls with 0 delay.\n\t     * nextTick() coalesces all calls within a single frame\n\t     * to minimize $digest thrashing\n\t     *\n\t     * @param callback\n\t     * @param digest\n\t     * @returns {*}\n\t     */\n\t    nextTick: function(callback, digest, scope) {\n\t      //-- grab function reference for storing state details\n\t      var nextTick = $mdUtil.nextTick;\n\t      var timeout = nextTick.timeout;\n\t      var queue = nextTick.queue || [];\n\t\n\t      //-- add callback to the queue\n\t      queue.push(callback);\n\t\n\t      //-- set default value for digest\n\t      if (digest == null) digest = true;\n\t\n\t      //-- store updated digest/queue values\n\t      nextTick.digest = nextTick.digest || digest;\n\t      nextTick.queue = queue;\n\t\n\t      //-- either return existing timeout or create a new one\n\t      return timeout || (nextTick.timeout = $timeout(processQueue, 0, false));\n\t\n\t      /**\n\t       * Grab a copy of the current queue\n\t       * Clear the queue for future use\n\t       * Process the existing queue\n\t       * Trigger digest if necessary\n\t       */\n\t      function processQueue() {\n\t        var skip = scope && scope.$$destroyed;\n\t        var queue = !skip ? nextTick.queue : [];\n\t        var digest = !skip ? nextTick.digest : null;\n\t\n\t        nextTick.queue = [];\n\t        nextTick.timeout = null;\n\t        nextTick.digest = false;\n\t\n\t        queue.forEach(function(callback) {\n\t          callback();\n\t        });\n\t\n\t        if (digest) $rootScope.$digest();\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Processes a template and replaces the start/end symbols if the application has\n\t     * overriden them.\n\t     *\n\t     * @param template The template to process whose start/end tags may be replaced.\n\t     * @returns {*}\n\t     */\n\t    processTemplate: function(template) {\n\t      if (usesStandardSymbols) {\n\t        return template;\n\t      } else {\n\t        if (!template || !angular.isString(template)) return template;\n\t        return template.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n\t      }\n\t    }\n\t  };\n\t\n\t// Instantiate other namespace utility methods\n\t\n\t  $mdUtil.dom.animator = $$mdAnimate($mdUtil);\n\t\n\t  return $mdUtil;\n\t\n\t  function getNode(el) {\n\t    return el[0] || el;\n\t  }\n\t\n\t}\n\tUtilFactory.$inject = [\"$document\", \"$timeout\", \"$compile\", \"$rootScope\", \"$$mdAnimate\", \"$interpolate\", \"$log\"];\n\t\n\t/*\n\t * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.\n\t * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.\n\t */\n\t\n\tangular.element.prototype.focus = angular.element.prototype.focus || function() {\n\t    if (this.length) {\n\t      this[0].focus();\n\t    }\n\t    return this;\n\t  };\n\tangular.element.prototype.blur = angular.element.prototype.blur || function() {\n\t    if (this.length) {\n\t      this[0].blur();\n\t    }\n\t    return this;\n\t  };\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t\n\tangular.module('material.core')\n\t  .service('$mdAria', AriaService);\n\t\n\t/*\n\t * @ngInject\n\t */\n\tfunction AriaService($$rAF, $log, $window) {\n\t\n\t  return {\n\t    expect: expect,\n\t    expectAsync: expectAsync,\n\t    expectWithText: expectWithText\n\t  };\n\t\n\t  /**\n\t   * Check if expected attribute has been specified on the target element or child\n\t   * @param element\n\t   * @param attrName\n\t   * @param {optional} defaultValue What to set the attr to if no value is found\n\t   */\n\t  function expect(element, attrName, defaultValue) {\n\t\n\t    var node = angular.element(element)[0] || element;\n\t\n\t    // if node exists and neither it nor its children have the attribute\n\t    if (node &&\n\t       ((!node.hasAttribute(attrName) ||\n\t        node.getAttribute(attrName).length === 0) &&\n\t        !childHasAttribute(node, attrName))) {\n\t\n\t      defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';\n\t      if (defaultValue.length) {\n\t        element.attr(attrName, defaultValue);\n\t      } else {\n\t        $log.warn('ARIA: Attribute \"', attrName, '\", required for accessibility, is missing on node:', node);\n\t      }\n\t\n\t    }\n\t  }\n\t\n\t  function expectAsync(element, attrName, defaultValueGetter) {\n\t    // Problem: when retrieving the element's contents synchronously to find the label,\n\t    // the text may not be defined yet in the case of a binding.\n\t    // There is a higher chance that a binding will be defined if we wait one frame.\n\t    $$rAF(function() {\n\t      expect(element, attrName, defaultValueGetter());\n\t    });\n\t  }\n\t\n\t  function expectWithText(element, attrName) {\n\t    expectAsync(element, attrName, function() {\n\t      return getText(element);\n\t    });\n\t  }\n\t\n\t  function getText(element) {\n\t    return element.text().trim();\n\t  }\n\t\n\t  function childHasAttribute(node, attrName) {\n\t    var hasChildren = node.hasChildNodes(),\n\t        hasAttr = false;\n\t\n\t    function isHidden(el) {\n\t      var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);\n\t      return (style.display === 'none');\n\t    }\n\t\n\t    if(hasChildren) {\n\t      var children = node.childNodes;\n\t      for(var i=0; i<children.length; i++){\n\t        var child = children[i];\n\t        if(child.nodeType === 1 && child.hasAttribute(attrName)) {\n\t          if(!isHidden(child)){\n\t            hasAttr = true;\n\t          }\n\t        }\n\t      }\n\t    }\n\t    return hasAttr;\n\t  }\n\t}\n\tAriaService.$inject = [\"$$rAF\", \"$log\", \"$window\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t  .module('material.core')\n\t  .service('$mdCompiler', mdCompilerService);\n\t\n\tfunction mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n\t  /* jshint validthis: true */\n\t\n\t  /*\n\t   * @ngdoc service\n\t   * @name $mdCompiler\n\t   * @module material.core\n\t   * @description\n\t   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer\n\t   * to easily compile an element with a templateUrl, controller, and locals.\n\t   *\n\t   * @usage\n\t   * <hljs lang=\"js\">\n\t   * $mdCompiler.compile({\n\t   *   templateUrl: 'modal.html',\n\t   *   controller: 'ModalCtrl',\n\t   *   locals: {\n\t   *     modal: myModalInstance;\n\t   *   }\n\t   * }).then(function(compileData) {\n\t   *   compileData.element; // modal.html's template in an element\n\t   *   compileData.link(myScope); //attach controller & scope to element\n\t   * });\n\t   * </hljs>\n\t   */\n\t\n\t   /*\n\t    * @ngdoc method\n\t    * @name $mdCompiler#compile\n\t    * @description A helper to compile an HTML template/templateUrl with a given controller,\n\t    * locals, and scope.\n\t    * @param {object} options An options object, with the following properties:\n\t    *\n\t    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n\t    *      newly created scope or the name of a registered controller if passed as a string.\n\t    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n\t    *      published to scope under the `controllerAs` name.\n\t    *    - `template` - `{string=}` An html template as a string.\n\t    *    - `templateUrl` - `{string=}` A path to an html template.\n\t    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n\t    *      it is loaded. It will be given the template string as a parameter, and should\n\t    *      return a a new string representing the transformed template.\n\t    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n\t    *      be injected into the controller. If any of these dependencies are promises, the compiler\n\t    *      will wait for them all to be resolved, or if one is rejected before the controller is\n\t    *      instantiated `compile()` will fail..\n\t    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n\t    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n\t    *        Otherwise if function, then it is injected and the return value is treated as the\n\t    *        dependency. If the result is a promise, it is resolved before its value is \n\t    *        injected into the controller.\n\t    *\n\t    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n\t    * `compileData` has the following properties: \n\t    *\n\t    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n\t    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n\t    *     the element and instantiate the provided controller (if given).\n\t    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n\t    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n\t    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n\t    */\n\t  this.compile = function(options) {\n\t    var templateUrl = options.templateUrl;\n\t    var template = options.template || '';\n\t    var controller = options.controller;\n\t    var controllerAs = options.controllerAs;\n\t    var resolve = angular.extend({}, options.resolve || {});\n\t    var locals = angular.extend({}, options.locals || {});\n\t    var transformTemplate = options.transformTemplate || angular.identity;\n\t    var bindToController = options.bindToController;\n\t\n\t    // Take resolve values and invoke them.  \n\t    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n\t    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n\t    angular.forEach(resolve, function(value, key) {\n\t      if (angular.isString(value)) {\n\t        resolve[key] = $injector.get(value);\n\t      } else {\n\t        resolve[key] = $injector.invoke(value);\n\t      }\n\t    });\n\t    //Add the locals, which are just straight values to inject\n\t    //eg locals: { three: 3 }, will inject three into the controller\n\t    angular.extend(resolve, locals);\n\t\n\t    if (templateUrl) {\n\t      resolve.$template = $http.get(templateUrl, {cache: $templateCache})\n\t        .then(function(response) {\n\t          return response.data;\n\t        });\n\t    } else {\n\t      resolve.$template = $q.when(template);\n\t    }\n\t\n\t    // Wait for all the resolves to finish if they are promises\n\t    return $q.all(resolve).then(function(locals) {\n\t\n\t      var compiledData;\n\t      var template = transformTemplate(locals.$template);\n\t      var element = options.element || angular.element('<div>').html(template.trim()).contents();\n\t      var linkFn = $compile(element);\n\t\n\t      // Return a linking function that can be used later when the element is ready\n\t      return compiledData = {\n\t        locals: locals,\n\t        element: element,\n\t        link: function link(scope) {\n\t          locals.$scope = scope;\n\t\n\t          //Instantiate controller if it exists, because we have scope\n\t          if (controller) {\n\t            var invokeCtrl = $controller(controller, locals, true);\n\t            if (bindToController) {\n\t              angular.extend(invokeCtrl.instance, locals);\n\t            }\n\t            var ctrl = invokeCtrl();\n\t            //See angular-route source for this logic\n\t            element.data('$ngControllerController', ctrl);\n\t            element.children().data('$ngControllerController', ctrl);\n\t\n\t            if (controllerAs) {\n\t              scope[controllerAs] = ctrl;\n\t            }\n\t\n\t            // Publish reference to this controller\n\t            compiledData.controller = ctrl;\n\t          }\n\t          return linkFn(scope);\n\t        }\n\t      };\n\t    });\n\t\n\t  };\n\t}\n\tmdCompilerService.$inject = [\"$q\", \"$http\", \"$injector\", \"$compile\", \"$controller\", \"$templateCache\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t  var HANDLERS = {};\n\t  /* The state of the current 'pointer'\n\t   * The pointer represents the state of the current touch.\n\t   * It contains normalized x and y coordinates from DOM events,\n\t   * as well as other information abstracted from the DOM.\n\t   */\n\t  var pointer, lastPointer, forceSkipClickHijack = false;\n\t\n\t  /**\n\t   * The position of the most recent click if that click was on a label element.\n\t   * @type {{x: number, y: number}?}\n\t   */\n\t  var lastLabelClickPos = null;\n\t\n\t  // Used to attach event listeners once when multiple ng-apps are running.\n\t  var isInitialized = false;\n\t  \n\t  angular\n\t    .module('material.core.gestures', [ ])\n\t    .provider('$mdGesture', MdGestureProvider)\n\t    .factory('$$MdGestureHandler', MdGestureHandler)\n\t    .run( attachToDocument );\n\t\n\t  /**\n\t     * @ngdoc service\n\t     * @name $mdGestureProvider\n\t     * @module material.core.gestures\n\t     *\n\t     * @description\n\t     * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.\n\t     * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile\n\t     * devices.\n\t     *\n\t     * <hljs lang=\"js\">\n\t     *   app.config(function($mdGestureProvider) {\n\t     *\n\t     *     // For mobile devices without jQuery loaded, do not\n\t     *     // intercept click events during the capture phase.\n\t     *     $mdGestureProvider.skipClickHijack();\n\t     *\n\t     *   });\n\t     * </hljs>\n\t     *\n\t     */\n\t  function MdGestureProvider() { }\n\t\n\t  MdGestureProvider.prototype = {\n\t\n\t    // Publish access to setter to configure a variable  BEFORE the\n\t    // $mdGesture service is instantiated...\n\t    skipClickHijack: function() {\n\t      return forceSkipClickHijack = true;\n\t    },\n\t\n\t    /**\n\t     * $get is used to build an instance of $mdGesture\n\t     * @ngInject\n\t     */\n\t    $get : [\"$$MdGestureHandler\", \"$$rAF\", \"$timeout\", function($$MdGestureHandler, $$rAF, $timeout) {\n\t         return new MdGesture($$MdGestureHandler, $$rAF, $timeout);\n\t    }]\n\t  };\n\t\n\t\n\t\n\t  /**\n\t   * MdGesture factory construction function\n\t   * @ngInject\n\t   */\n\t  function MdGesture($$MdGestureHandler, $$rAF, $timeout) {\n\t    var userAgent = navigator.userAgent || navigator.vendor || window.opera;\n\t    var isIos = userAgent.match(/ipad|iphone|ipod/i);\n\t    var isAndroid = userAgent.match(/android/i);\n\t    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);\n\t\n\t    var self = {\n\t      handler: addHandler,\n\t      register: register,\n\t      // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?\n\t      isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack\n\t    };\n\t\n\t    if (self.isHijackingClicks) {\n\t      self.handler('click', {\n\t        options: {\n\t          maxDistance: 6\n\t        },\n\t        onEnd: function (ev, pointer) {\n\t          if (pointer.distance < this.state.options.maxDistance) {\n\t            this.dispatchEvent(ev, 'click');\n\t          }\n\t        }\n\t      });\n\t    }\n\t\n\t    /*\n\t     * Register an element to listen for a handler.\n\t     * This allows an element to override the default options for a handler.\n\t     * Additionally, some handlers like drag and hold only dispatch events if\n\t     * the domEvent happens inside an element that's registered to listen for these events.\n\t     *\n\t     * @see GestureHandler for how overriding of default options works.\n\t     * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })\n\t     */\n\t    function register(element, handlerName, options) {\n\t      var handler = HANDLERS[handlerName.replace(/^\\$md./, '')];\n\t      if (!handler) {\n\t        throw new Error('Failed to register element with handler ' + handlerName + '. ' +\n\t        'Available handlers: ' + Object.keys(HANDLERS).join(', '));\n\t      }\n\t      return handler.registerElement(element, options);\n\t    }\n\t\n\t    /*\n\t     * add a handler to $mdGesture. see below.\n\t     */\n\t    function addHandler(name, definition) {\n\t      var handler = new $$MdGestureHandler(name);\n\t      angular.extend(handler, definition);\n\t      HANDLERS[name] = handler;\n\t\n\t      return self;\n\t    }\n\t\n\t    /*\n\t     * Register handlers. These listen to touch/start/move events, interpret them,\n\t     * and dispatch gesture events depending on options & conditions. These are all\n\t     * instances of GestureHandler.\n\t     * @see GestureHandler \n\t     */\n\t    return self\n\t      /*\n\t       * The press handler dispatches an event on touchdown/touchend.\n\t       * It's a simple abstraction of touch/mouse/pointer start and end.\n\t       */\n\t      .handler('press', {\n\t        onStart: function (ev, pointer) {\n\t          this.dispatchEvent(ev, '$md.pressdown');\n\t        },\n\t        onEnd: function (ev, pointer) {\n\t          this.dispatchEvent(ev, '$md.pressup');\n\t        }\n\t      })\n\t\n\t      /*\n\t       * The hold handler dispatches an event if the user keeps their finger within\n\t       * the same <maxDistance> area for <delay> ms.\n\t       * The hold handler will only run if a parent of the touch target is registered\n\t       * to listen for hold events through $mdGesture.register()\n\t       */\n\t      .handler('hold', {\n\t        options: {\n\t          maxDistance: 6,\n\t          delay: 500\n\t        },\n\t        onCancel: function () {\n\t          $timeout.cancel(this.state.timeout);\n\t        },\n\t        onStart: function (ev, pointer) {\n\t          // For hold, require a parent to be registered with $mdGesture.register()\n\t          // Because we prevent scroll events, this is necessary.\n\t          if (!this.state.registeredParent) return this.cancel();\n\t\n\t          this.state.pos = {x: pointer.x, y: pointer.y};\n\t          this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {\n\t            this.dispatchEvent(ev, '$md.hold');\n\t            this.cancel(); //we're done!\n\t          }), this.state.options.delay, false);\n\t        },\n\t        onMove: function (ev, pointer) {\n\t          // Don't scroll while waiting for hold.\n\t          // If we don't preventDefault touchmove events here, Android will assume we don't\n\t          // want to listen to anymore touch events. It will start scrolling and stop sending\n\t          // touchmove events.\n\t          ev.preventDefault();\n\t\n\t          // If the user moves greater than <maxDistance> pixels, stop the hold timer\n\t          // set in onStart\n\t          var dx = this.state.pos.x - pointer.x;\n\t          var dy = this.state.pos.y - pointer.y;\n\t          if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {\n\t            this.cancel();\n\t          }\n\t        },\n\t        onEnd: function () {\n\t          this.onCancel();\n\t        }\n\t      })\n\t\n\t      /*\n\t       * The drag handler dispatches a drag event if the user holds and moves his finger greater than\n\t       * <minDistance> px in the x or y direction, depending on options.horizontal.\n\t       * The drag will be cancelled if the user moves his finger greater than <minDistance>*<cancelMultiplier> in\n\t       * the perpindicular direction. Eg if the drag is horizontal and the user moves his finger <minDistance>*<cancelMultiplier>\n\t       * pixels vertically, this handler won't consider the move part of a drag.\n\t       */\n\t      .handler('drag', {\n\t        options: {\n\t          minDistance: 6,\n\t          horizontal: true,\n\t          cancelMultiplier: 1.5\n\t        },\n\t        onStart: function (ev) {\n\t          // For drag, require a parent to be registered with $mdGesture.register()\n\t          if (!this.state.registeredParent) this.cancel();\n\t        },\n\t        onMove: function (ev, pointer) {\n\t          var shouldStartDrag, shouldCancel;\n\t          // Don't scroll while deciding if this touchmove qualifies as a drag event.\n\t          // If we don't preventDefault touchmove events here, Android will assume we don't\n\t          // want to listen to anymore touch events. It will start scrolling and stop sending\n\t          // touchmove events.\n\t          ev.preventDefault();\n\t\n\t          if (!this.state.dragPointer) {\n\t            if (this.state.options.horizontal) {\n\t              shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;\n\t              shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;\n\t            } else {\n\t              shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;\n\t              shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;\n\t            }\n\t\n\t            if (shouldStartDrag) {\n\t              // Create a new pointer representing this drag, starting at this point where the drag started.\n\t              this.state.dragPointer = makeStartPointer(ev);\n\t              updatePointerState(ev, this.state.dragPointer);\n\t              this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);\n\t\n\t            } else if (shouldCancel) {\n\t              this.cancel();\n\t            }\n\t          } else {\n\t            this.dispatchDragMove(ev);\n\t          }\n\t        },\n\t        // Only dispatch dragmove events every frame; any more is unnecessray\n\t        dispatchDragMove: $$rAF.throttle(function (ev) {\n\t          // Make sure the drag didn't stop while waiting for the next frame\n\t          if (this.state.isRunning) {\n\t            updatePointerState(ev, this.state.dragPointer);\n\t            this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);\n\t          }\n\t        }),\n\t        onEnd: function (ev, pointer) {\n\t          if (this.state.dragPointer) {\n\t            updatePointerState(ev, this.state.dragPointer);\n\t            this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);\n\t          }\n\t        }\n\t      })\n\t\n\t      /*\n\t       * The swipe handler will dispatch a swipe event if, on the end of a touch,\n\t       * the velocity and distance were high enough.\n\t       * TODO: add vertical swiping with a `horizontal` option similar to the drag handler.\n\t       */\n\t      .handler('swipe', {\n\t        options: {\n\t          minVelocity: 0.65,\n\t          minDistance: 10\n\t        },\n\t        onEnd: function (ev, pointer) {\n\t          if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&\n\t            Math.abs(pointer.distanceX) > this.state.options.minDistance) {\n\t            var eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';\n\t            this.dispatchEvent(ev, eventType);\n\t          }\n\t        }\n\t      });\n\t\n\t  }\n\t  MdGesture.$inject = [\"$$MdGestureHandler\", \"$$rAF\", \"$timeout\"];\n\t\n\t  /**\n\t   * MdGestureHandler\n\t   * A GestureHandler is an object which is able to dispatch custom dom events\n\t   * based on native dom {touch,pointer,mouse}{start,move,end} events.\n\t   *\n\t   * A gesture will manage its lifecycle through the start,move,end, and cancel\n\t   * functions, which are called by native dom events.\n\t   *\n\t   * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be\n\t   * overridden by elements registering through $mdGesture.register()\n\t   */\n\t  function GestureHandler (name) {\n\t    this.name = name;\n\t    this.state = {};\n\t  }\n\t\n\t  function MdGestureHandler() {\n\t    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);\n\t\n\t    GestureHandler.prototype = {\n\t      options: {},\n\t      // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events\n\t      // differently when jQuery is loaded\n\t      dispatchEvent: hasJQuery ?  jQueryDispatchEvent : nativeDispatchEvent,\n\t\n\t      // These are overridden by the registered handler\n\t      onStart: angular.noop,\n\t      onMove: angular.noop,\n\t      onEnd: angular.noop,\n\t      onCancel: angular.noop,\n\t\n\t      // onStart sets up a new state for the handler, which includes options from the\n\t      // nearest registered parent element of ev.target.\n\t      start: function (ev, pointer) {\n\t        if (this.state.isRunning) return;\n\t        var parentTarget = this.getNearestParent(ev.target);\n\t        // Get the options from the nearest registered parent\n\t        var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};\n\t\n\t        this.state = {\n\t          isRunning: true,\n\t          // Override the default options with the nearest registered parent's options\n\t          options: angular.extend({}, this.options, parentTargetOptions),\n\t          // Pass in the registered parent node to the state so the onStart listener can use\n\t          registeredParent: parentTarget\n\t        };\n\t        this.onStart(ev, pointer);\n\t      },\n\t      move: function (ev, pointer) {\n\t        if (!this.state.isRunning) return;\n\t        this.onMove(ev, pointer);\n\t      },\n\t      end: function (ev, pointer) {\n\t        if (!this.state.isRunning) return;\n\t        this.onEnd(ev, pointer);\n\t        this.state.isRunning = false;\n\t      },\n\t      cancel: function (ev, pointer) {\n\t        this.onCancel(ev, pointer);\n\t        this.state = {};\n\t      },\n\t\n\t      // Find and return the nearest parent element that has been registered to\n\t      // listen for this handler via $mdGesture.register(element, 'handlerName').\n\t      getNearestParent: function (node) {\n\t        var current = node;\n\t        while (current) {\n\t          if ((current.$mdGesture || {})[this.name]) {\n\t            return current;\n\t          }\n\t          current = current.parentNode;\n\t        }\n\t        return null;\n\t      },\n\t\n\t      // Called from $mdGesture.register when an element reigsters itself with a handler.\n\t      // Store the options the user gave on the DOMElement itself. These options will\n\t      // be retrieved with getNearestParent when the handler starts.\n\t      registerElement: function (element, options) {\n\t        var self = this;\n\t        element[0].$mdGesture = element[0].$mdGesture || {};\n\t        element[0].$mdGesture[this.name] = options || {};\n\t        element.on('$destroy', onDestroy);\n\t\n\t        return onDestroy;\n\t\n\t        function onDestroy() {\n\t          delete element[0].$mdGesture[self.name];\n\t          element.off('$destroy', onDestroy);\n\t        }\n\t      }\n\t    };\n\t\n\t    return GestureHandler;\n\t\n\t    /*\n\t     * Dispatch an event with jQuery\n\t     * TODO: Make sure this sends bubbling events\n\t     *\n\t     * @param srcEvent the original DOM touch event that started this.\n\t     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')\n\t     * @param eventPointer the pointer object that matches this event.\n\t     */\n\t    function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {\n\t      eventPointer = eventPointer || pointer;\n\t      var eventObj = new angular.element.Event(eventType);\n\t\n\t      eventObj.$material = true;\n\t      eventObj.pointer = eventPointer;\n\t      eventObj.srcEvent = srcEvent;\n\t\n\t      angular.extend(eventObj, {\n\t        clientX: eventPointer.x,\n\t        clientY: eventPointer.y,\n\t        screenX: eventPointer.x,\n\t        screenY: eventPointer.y,\n\t        pageX: eventPointer.x,\n\t        pageY: eventPointer.y,\n\t        ctrlKey: srcEvent.ctrlKey,\n\t        altKey: srcEvent.altKey,\n\t        shiftKey: srcEvent.shiftKey,\n\t        metaKey: srcEvent.metaKey\n\t      });\n\t      angular.element(eventPointer.target).trigger(eventObj);\n\t    }\n\t\n\t    /*\n\t     * NOTE: nativeDispatchEvent is very performance sensitive.\n\t     * @param srcEvent the original DOM touch event that started this.\n\t     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')\n\t     * @param eventPointer the pointer object that matches this event.\n\t     */\n\t    function nativeDispatchEvent(srcEvent, eventType, eventPointer) {\n\t      eventPointer = eventPointer || pointer;\n\t      var eventObj;\n\t\n\t      if (eventType === 'click') {\n\t        eventObj = document.createEvent('MouseEvents');\n\t        eventObj.initMouseEvent(\n\t          'click', true, true, window, srcEvent.detail,\n\t          eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,\n\t          srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,\n\t          srcEvent.button, srcEvent.relatedTarget || null\n\t        );\n\t\n\t      } else {\n\t        eventObj = document.createEvent('CustomEvent');\n\t        eventObj.initCustomEvent(eventType, true, true, {});\n\t      }\n\t      eventObj.$material = true;\n\t      eventObj.pointer = eventPointer;\n\t      eventObj.srcEvent = srcEvent;\n\t      eventPointer.target.dispatchEvent(eventObj);\n\t    }\n\t\n\t  }\n\t\n\t  /**\n\t   * Attach Gestures: hook document and check shouldHijack clicks\n\t   * @ngInject\n\t   */\n\t  function attachToDocument( $mdGesture, $$MdGestureHandler ) {\n\t\n\t    // Polyfill document.contains for IE11.\n\t    // TODO: move to util\n\t    document.contains || (document.contains = function (node) {\n\t      return document.body.contains(node);\n\t    });\n\t\n\t    if (!isInitialized && $mdGesture.isHijackingClicks ) {\n\t      /*\n\t       * If hijack clicks is true, we preventDefault any click that wasn't\n\t       * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',\n\t       * click event will be sent ~400ms after a touchend event happens.\n\t       * The only way to know if this click is real is to prevent any normal\n\t       * click events, and add a flag to events sent by material so we know not to prevent those.\n\t       * \n\t       * Two exceptions to click events that should be prevented are:\n\t       *  - click events sent by the keyboard (eg form submit)\n\t       *  - events that originate from an Ionic app\n\t       */\n\t      document.addEventListener('click', function clickHijacker(ev) {\n\t        var isKeyClick = ev.clientX === 0 && ev.clientY === 0;\n\t        if (!isKeyClick && !ev.$material && !ev.isIonicTap\n\t            && !isInputEventFromLabelClick(ev)) {\n\t          ev.preventDefault();\n\t          ev.stopPropagation();\n\t          lastLabelClickPos = null;\n\t        } else {\n\t          lastLabelClickPos = null;\n\t          if (ev.target.tagName.toLowerCase() == 'label') {\n\t            lastLabelClickPos = {x: ev.x, y: ev.y};\n\t          }\n\t        }\n\t      }, true);\n\t      \n\t      isInitialized = true;\n\t    }\n\t\n\t    // Listen to all events to cover all platforms.\n\t    var START_EVENTS = 'mousedown touchstart pointerdown';\n\t    var MOVE_EVENTS = 'mousemove touchmove pointermove';\n\t    var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';\n\t\n\t    angular.element(document)\n\t      .on(START_EVENTS, gestureStart)\n\t      .on(MOVE_EVENTS, gestureMove)\n\t      .on(END_EVENTS, gestureEnd)\n\t      // For testing\n\t      .on('$$mdGestureReset', function gestureClearCache () {\n\t        lastPointer = pointer = null;\n\t      });\n\t\n\t    /*\n\t     * When a DOM event happens, run all registered gesture handlers' lifecycle\n\t     * methods which match the DOM event.\n\t     * Eg when a 'touchstart' event happens, runHandlers('start') will call and\n\t     * run `handler.cancel()` and `handler.start()` on all registered handlers.\n\t     */\n\t    function runHandlers(handlerEvent, event) {\n\t      var handler;\n\t      for (var name in HANDLERS) {\n\t        handler = HANDLERS[name];\n\t        if( handler instanceof $$MdGestureHandler ) {\n\t\n\t          if (handlerEvent === 'start') {\n\t            // Run cancel to reset any handlers' state\n\t            handler.cancel();\n\t          }\n\t          handler[handlerEvent](event, pointer);\n\t\n\t        }\n\t      }\n\t    }\n\t\n\t    /*\n\t     * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)\n\t     * If it is legitimate, we initiate the pointer state and mark the current pointer's type\n\t     * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events\n\t     * won't effect it.\n\t     */\n\t    function gestureStart(ev) {\n\t      // If we're already touched down, abort\n\t      if (pointer) return;\n\t\n\t      var now = +Date.now();\n\t\n\t      // iOS & old android bug: after a touch event, a click event is sent 350 ms later.\n\t      // If <400ms have passed, don't allow an event of a different type than the previous event\n\t      if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {\n\t        return;\n\t      }\n\t\n\t      pointer = makeStartPointer(ev);\n\t\n\t      runHandlers('start', ev);\n\t    }\n\t    /*\n\t     * If a move event happens of the right type, update the pointer and run all the move handlers.\n\t     * \"of the right type\": if a mousemove happens but our pointer started with a touch event, do nothing.\n\t     */\n\t    function gestureMove(ev) {\n\t      if (!pointer || !typesMatch(ev, pointer)) return;\n\t\n\t      updatePointerState(ev, pointer);\n\t      runHandlers('move', ev);\n\t    }\n\t    /*\n\t     * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'\n\t     */\n\t    function gestureEnd(ev) {\n\t      if (!pointer || !typesMatch(ev, pointer)) return;\n\t\n\t      updatePointerState(ev, pointer);\n\t      pointer.endTime = +Date.now();\n\t\n\t      runHandlers('end', ev);\n\t\n\t      lastPointer = pointer;\n\t      pointer = null;\n\t    }\n\t\n\t  }\n\t  attachToDocument.$inject = [\"$mdGesture\", \"$$MdGestureHandler\"];\n\t\n\t  // ********************\n\t  // Module Functions\n\t  // ********************\n\t\n\t  /*\n\t   * Initiate the pointer. x, y, and the pointer's type.\n\t   */\n\t  function makeStartPointer(ev) {\n\t    var point = getEventPoint(ev);\n\t    var startPointer = {\n\t      startTime: +Date.now(),\n\t      target: ev.target,\n\t      // 'p' for pointer events, 'm' for mouse, 't' for touch\n\t      type: ev.type.charAt(0)\n\t    };\n\t    startPointer.startX = startPointer.x = point.pageX;\n\t    startPointer.startY = startPointer.y = point.pageY;\n\t    return startPointer;\n\t  }\n\t\n\t  /*\n\t   * return whether the pointer's type matches the event's type.\n\t   * Eg if a touch event happens but the pointer has a mouse type, return false.\n\t   */\n\t  function typesMatch(ev, pointer) {\n\t    return ev && pointer && ev.type.charAt(0) === pointer.type;\n\t  }\n\t\n\t  /**\n\t   * Gets whether the given event is an input event that was caused by clicking on an\n\t   * associated label element.\n\t   *\n\t   * This is necessary because the browser will, upon clicking on a label element, fire an\n\t   * *extra* click event on its associated input (if any). mdGesture is able to flag the label\n\t   * click as with `$material` correctly, but not the second input click.\n\t   *\n\t   * In order to determine whether an input event is from a label click, we compare the (x, y) for\n\t   * the event to the (x, y) for the most recent label click (which is cleared whenever a non-label\n\t   * click occurs). Unfortunately, there are no event properties that tie the input and the label\n\t   * together (such as relatedTarget).\n\t   *\n\t   * @param {MouseEvent} event\n\t   * @returns {boolean}\n\t   */\n\t  function isInputEventFromLabelClick(event) {\n\t    return lastLabelClickPos\n\t        && lastLabelClickPos.x == event.x\n\t        && lastLabelClickPos.y == event.y;\n\t  }\n\t\n\t  /*\n\t   * Update the given pointer based upon the given DOMEvent.\n\t   * Distance, velocity, direction, duration, etc\n\t   */\n\t  function updatePointerState(ev, pointer) {\n\t    var point = getEventPoint(ev);\n\t    var x = pointer.x = point.pageX;\n\t    var y = pointer.y = point.pageY;\n\t\n\t    pointer.distanceX = x - pointer.startX;\n\t    pointer.distanceY = y - pointer.startY;\n\t    pointer.distance = Math.sqrt(\n\t      pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY\n\t    );\n\t\n\t    pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';\n\t    pointer.directionY = pointer.distanceY > 0 ? 'up' : pointer.distanceY < 0 ? 'down' : '';\n\t\n\t    pointer.duration = +Date.now() - pointer.startTime;\n\t    pointer.velocityX = pointer.distanceX / pointer.duration;\n\t    pointer.velocityY = pointer.distanceY / pointer.duration;\n\t  }\n\t\n\t  /*\n\t   * Normalize the point where the DOM event happened whether it's touch or mouse.\n\t   * @returns point event obj with pageX and pageY on it.\n\t   */\n\t  function getEventPoint(ev) {\n\t    ev = ev.originalEvent || ev; // support jQuery events\n\t    return (ev.touches && ev.touches[0]) ||\n\t      (ev.changedTouches && ev.changedTouches[0]) ||\n\t      ev;\n\t  }\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('material.core')\n\t  .provider('$$interimElement', InterimElementProvider);\n\t\n\t/*\n\t * @ngdoc service\n\t * @name $$interimElement\n\t * @module material.core\n\t *\n\t * @description\n\t *\n\t * Factory that contructs `$$interimElement.$service` services.\n\t * Used internally in material design for elements that appear on screen temporarily.\n\t * The service provides a promise-like API for interacting with the temporary\n\t * elements.\n\t *\n\t * ```js\n\t * app.service('$mdToast', function($$interimElement) {\n\t *   var $mdToast = $$interimElement(toastDefaultOptions);\n\t *   return $mdToast;\n\t * });\n\t * ```\n\t * @param {object=} defaultOptions Options used by default for the `show` method on the service.\n\t *\n\t * @returns {$$interimElement.$service}\n\t *\n\t */\n\t\n\tfunction InterimElementProvider() {\n\t  createInterimElementProvider.$get = InterimElementFactory;\n\t  InterimElementFactory.$inject = [\"$document\", \"$q\", \"$$q\", \"$rootScope\", \"$timeout\", \"$rootElement\", \"$animate\", \"$mdUtil\", \"$mdCompiler\", \"$mdTheming\", \"$log\"];\n\t  return createInterimElementProvider;\n\t\n\t  /**\n\t   * Returns a new provider which allows configuration of a new interimElement\n\t   * service. Allows configuration of default options & methods for options,\n\t   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)\n\t   */\n\t  function createInterimElementProvider(interimFactoryName) {\n\t    var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];\n\t\n\t    var customMethods = {};\n\t    var providerConfig = {\n\t      presets: {}\n\t    };\n\t\n\t    var provider = {\n\t      setDefaults: setDefaults,\n\t      addPreset: addPreset,\n\t      addMethod: addMethod,\n\t      $get: factory\n\t    };\n\t\n\t    /**\n\t     * all interim elements will come with the 'build' preset\n\t     */\n\t    provider.addPreset('build', {\n\t      methods: ['controller', 'controllerAs', 'resolve',\n\t        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent']\n\t    });\n\t\n\t    factory.$inject = [\"$$interimElement\", \"$injector\"];\n\t    return provider;\n\t\n\t    /**\n\t     * Save the configured defaults to be used when the factory is instantiated\n\t     */\n\t    function setDefaults(definition) {\n\t      providerConfig.optionsFactory = definition.options;\n\t      providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);\n\t      return provider;\n\t    }\n\t\n\t    /**\n\t     * Add a method to the factory that isn't specific to any interim element operations\n\t     */\n\t\n\t    function addMethod(name, fn) {\n\t      customMethods[name] = fn;\n\t      return provider;\n\t    }\n\t\n\t    /**\n\t     * Save the configured preset to be used when the factory is instantiated\n\t     */\n\t    function addPreset(name, definition) {\n\t      definition = definition || {};\n\t      definition.methods = definition.methods || [];\n\t      definition.options = definition.options || function() { return {}; };\n\t\n\t      if (/^cancel|hide|show$/.test(name)) {\n\t        throw new Error(\"Preset '\" + name + \"' in \" + interimFactoryName + \" is reserved!\");\n\t      }\n\t      if (definition.methods.indexOf('_options') > -1) {\n\t        throw new Error(\"Method '_options' in \" + interimFactoryName + \" is reserved!\");\n\t      }\n\t      providerConfig.presets[name] = {\n\t        methods: definition.methods.concat(EXPOSED_METHODS),\n\t        optionsFactory: definition.options,\n\t        argOption: definition.argOption\n\t      };\n\t      return provider;\n\t    }\n\t\n\t    /**\n\t     * Create a factory that has the given methods & defaults implementing interimElement\n\t     */\n\t    /* @ngInject */\n\t    function factory($$interimElement, $injector) {\n\t      var defaultMethods;\n\t      var defaultOptions;\n\t      var interimElementService = $$interimElement();\n\t\n\t      /*\n\t       * publicService is what the developer will be using.\n\t       * It has methods hide(), cancel(), show(), build(), and any other\n\t       * presets which were set during the config phase.\n\t       */\n\t      var publicService = {\n\t        hide: interimElementService.hide,\n\t        cancel: interimElementService.cancel,\n\t        show: showInterimElement,\n\t\n\t        // Special internal method to destroy an interim element without animations\n\t        // used when navigation changes causes a $scope.$destroy() action\n\t        destroy : destroyInterimElement\n\t      };\n\t\n\t\n\t      defaultMethods = providerConfig.methods || [];\n\t      // This must be invoked after the publicService is initialized\n\t      defaultOptions = invokeFactory(providerConfig.optionsFactory, {});\n\t\n\t      // Copy over the simple custom methods\n\t      angular.forEach(customMethods, function(fn, name) {\n\t        publicService[name] = fn;\n\t      });\n\t\n\t      angular.forEach(providerConfig.presets, function(definition, name) {\n\t        var presetDefaults = invokeFactory(definition.optionsFactory, {});\n\t        var presetMethods = (definition.methods || []).concat(defaultMethods);\n\t\n\t        // Every interimElement built with a preset has a field called `$type`,\n\t        // which matches the name of the preset.\n\t        // Eg in preset 'confirm', options.$type === 'confirm'\n\t        angular.extend(presetDefaults, { $type: name });\n\t\n\t        // This creates a preset class which has setter methods for every\n\t        // method given in the `.addPreset()` function, as well as every\n\t        // method given in the `.setDefaults()` function.\n\t        //\n\t        // @example\n\t        // .setDefaults({\n\t        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],\n\t        //   options: dialogDefaultOptions\n\t        // })\n\t        // .addPreset('alert', {\n\t        //   methods: ['title', 'ok'],\n\t        //   options: alertDialogOptions\n\t        // })\n\t        //\n\t        // Set values will be passed to the options when interimElement.show() is called.\n\t        function Preset(opts) {\n\t          this._options = angular.extend({}, presetDefaults, opts);\n\t        }\n\t        angular.forEach(presetMethods, function(name) {\n\t          Preset.prototype[name] = function(value) {\n\t            this._options[name] = value;\n\t            return this;\n\t          };\n\t        });\n\t\n\t        // Create shortcut method for one-linear methods\n\t        if (definition.argOption) {\n\t          var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);\n\t          publicService[methodName] = function(arg) {\n\t            var config = publicService[name](arg);\n\t            return publicService.show(config);\n\t          };\n\t        }\n\t\n\t        // eg $mdDialog.alert() will return a new alert preset\n\t        publicService[name] = function(arg) {\n\t          // If argOption is supplied, eg `argOption: 'content'`, then we assume\n\t          // if the argument is not an options object then it is the `argOption` option.\n\t          //\n\t          // @example `$mdToast.simple('hello')` // sets options.content to hello\n\t          //                                     // because argOption === 'content'\n\t          if (arguments.length && definition.argOption &&\n\t              !angular.isObject(arg) && !angular.isArray(arg))  {\n\t\n\t            return (new Preset())[definition.argOption](arg);\n\t\n\t          } else {\n\t            return new Preset(arg);\n\t          }\n\t\n\t        };\n\t      });\n\t\n\t      return publicService;\n\t\n\t      /**\n\t       *\n\t       */\n\t      function showInterimElement(opts) {\n\t        // opts is either a preset which stores its options on an _options field,\n\t        // or just an object made up of options\n\t        opts = opts || { };\n\t        if (opts._options) opts = opts._options;\n\t\n\t        return interimElementService.show(\n\t          angular.extend({}, defaultOptions, opts)\n\t        );\n\t      }\n\t\n\t      /**\n\t       *  Special method to hide and destroy an interimElement WITHOUT\n\t       *  any 'leave` or hide animations ( an immediate force hide/remove )\n\t       *\n\t       *  NOTE: This calls the onRemove() subclass method for each component...\n\t       *  which must have code to respond to `options.$destroy == true`\n\t       */\n\t      function destroyInterimElement(opts) {\n\t          return interimElementService.destroy(opts);\n\t      }\n\t\n\t      /**\n\t       * Helper to call $injector.invoke with a local of the factory name for\n\t       * this provider.\n\t       * If an $mdDialog is providing options for a dialog and tries to inject\n\t       * $mdDialog, a circular dependency error will happen.\n\t       * We get around that by manually injecting $mdDialog as a local.\n\t       */\n\t      function invokeFactory(factory, defaultVal) {\n\t        var locals = {};\n\t        locals[interimFactoryName] = publicService;\n\t        return $injector.invoke(factory || function() { return defaultVal; }, {}, locals);\n\t      }\n\t\n\t    }\n\t\n\t  }\n\t\n\t  /* @ngInject */\n\t  function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate,\n\t                                 $mdUtil, $mdCompiler, $mdTheming, $log ) {\n\t    return function createInterimElementService() {\n\t      var SHOW_CANCELLED = false;\n\t\n\t      /*\n\t       * @ngdoc service\n\t       * @name $$interimElement.$service\n\t       *\n\t       * @description\n\t       * A service used to control inserting and removing an element into the DOM.\n\t       *\n\t       */\n\t      var service, stack = [];\n\t\n\t      // Publish instance $$interimElement service;\n\t      // ... used as $mdDialog, $mdToast, $mdMenu, and $mdSelect\n\t\n\t      return service = {\n\t        show: show,\n\t        hide: hide,\n\t        cancel: cancel,\n\t        destroy : destroy\n\t      };\n\t\n\t      /*\n\t       * @ngdoc method\n\t       * @name $$interimElement.$service#show\n\t       * @kind function\n\t       *\n\t       * @description\n\t       * Adds the `$interimElement` to the DOM and returns a special promise that will be resolved or rejected\n\t       * with hide or cancel, respectively. To external cancel/hide, developers should use the\n\t       *\n\t       * @param {*} options is hashMap of settings\n\t       * @returns a Promise\n\t       *\n\t       */\n\t      function show(options) {\n\t        options = options || {};\n\t        var interimElement = new InterimElement(options || {});\n\t        var hideExisting = !options.skipHide && stack.length ? service.hide() : $q.when(true);\n\t\n\t        // This hide()s only the current interim element before showing the next, new one\n\t        // NOTE: this is not reversible (e.g. interim elements are not stackable)\n\t\n\t        hideExisting.finally(function() {\n\t\n\t          stack.push(interimElement);\n\t          interimElement\n\t            .show()\n\t            .catch(function( reason ) {\n\t              //$log.error(\"InterimElement.show() error: \" + reason );\n\t              return reason;\n\t            });\n\t\n\t        });\n\t\n\t        // Return a promise that will be resolved when the interim\n\t        // element is hidden or cancelled...\n\t\n\t        return interimElement.deferred.promise;\n\t      }\n\t\n\t      /*\n\t       * @ngdoc method\n\t       * @name $$interimElement.$service#hide\n\t       * @kind function\n\t       *\n\t       * @description\n\t       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`\n\t       *\n\t       * @param {*} resolveParam Data to resolve the promise with\n\t       * @returns a Promise that will be resolved after the element has been removed.\n\t       *\n\t       */\n\t      function hide(reason, options) {\n\t        if ( !stack.length ) return $q.when(reason);\n\t        options = options || {};\n\t\n\t        if (options.closeAll) {\n\t          var promise = $q.all(stack.reverse().map(closeElement));\n\t          stack = [];\n\t          return promise;\n\t        } else if (options.closeTo !== undefined) {\n\t          return $q.all(stack.splice(options.closeTo).map(closeElement));\n\t        } else {\n\t          var interim = stack.pop();\n\t          return closeElement(interim);\n\t        }\n\t\n\t        function closeElement(interim) {\n\t          interim\n\t            .remove(reason, false, options || { })\n\t            .catch(function( reason ) {\n\t              //$log.error(\"InterimElement.hide() error: \" + reason );\n\t              return reason;\n\t            });\n\t          return interim.deferred.promise;\n\t        }\n\t      }\n\t\n\t      /*\n\t       * @ngdoc method\n\t       * @name $$interimElement.$service#cancel\n\t       * @kind function\n\t       *\n\t       * @description\n\t       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`\n\t       *\n\t       * @param {*} reason Data to reject the promise with\n\t       * @returns Promise that will be resolved after the element has been removed.\n\t       *\n\t       */\n\t      function cancel(reason, options) {\n\t        var interim = stack.shift();\n\t        if ( !interim ) return $q.when(reason);\n\t\n\t        interim\n\t          .remove(reason, true, options || { })\n\t          .catch(function( reason ) {\n\t            //$log.error(\"InterimElement.cancel() error: \" + reason );\n\t            return reason;\n\t          });\n\t\n\t        return interim.deferred.promise;\n\t      }\n\t\n\t      /*\n\t       * Special method to quick-remove the interim element without animations\n\t       */\n\t      function destroy() {\n\t        var interim = stack.shift();\n\t\n\t        return interim ? interim.remove(SHOW_CANCELLED, false, {'$destroy':true}) :\n\t               $q.when(SHOW_CANCELLED);\n\t      }\n\t\n\t\n\t      /*\n\t       * Internal Interim Element Object\n\t       * Used internally to manage the DOM element and related data\n\t       */\n\t      function InterimElement(options) {\n\t        var self, element, showAction = $q.when(true);\n\t\n\t        options = configureScopeAndTransitions(options);\n\t\n\t        return self = {\n\t          options : options,\n\t          deferred: $q.defer(),\n\t          show    : createAndTransitionIn,\n\t          remove  : transitionOutAndRemove\n\t        };\n\t\n\t        /**\n\t         * Compile, link, and show this interim element\n\t         * Use optional autoHided and transition-in effects\n\t         */\n\t        function createAndTransitionIn() {\n\t          return $q(function(resolve, reject){\n\t\n\t            compileElement(options)\n\t              .then(function( compiledData ) {\n\t                element = linkElement( compiledData, options );\n\t\n\t                showAction = showElement(element, options, compiledData.controller)\n\t                  .then(resolve, rejectAll );\n\t\n\t              }, rejectAll);\n\t\n\t            function rejectAll(fault) {\n\t              // Force the '$md<xxx>.show()' promise to reject\n\t              self.deferred.reject(fault);\n\t\n\t              // Continue rejection propagation\n\t              reject(fault);\n\t            }\n\t          });\n\t        }\n\t\n\t        /**\n\t         * After the show process has finished/rejected:\n\t         * - announce 'removing',\n\t         * - perform the transition-out, and\n\t         * - perform optional clean up scope.\n\t         */\n\t        function transitionOutAndRemove(response, isCancelled, opts) {\n\t\n\t          // abort if the show() and compile failed\n\t          if ( !element ) return $q.when(false);\n\t\n\t          options = angular.extend(options || {}, opts || {});\n\t          options.cancelAutoHide && options.cancelAutoHide();\n\t          options.element.triggerHandler('$mdInterimElementRemove');\n\t\n\t          if ( options.$destroy === true ) {\n\t\n\t            return hideElement(options.element, options);\n\t\n\t          } else {\n\t\n\t            $q.when(showAction)\n\t                .finally(function() {\n\t                  hideElement(options.element, options).then(function() {\n\t\n\t                    (isCancelled && rejectAll(response)) || resolveAll(response);\n\t\n\t                  }, rejectAll);\n\t                });\n\t\n\t            return self.deferred.promise;\n\t          }\n\t\n\t\n\t          /**\n\t           * The `show()` returns a promise that will be resolved when the interim\n\t           * element is hidden or cancelled...\n\t           */\n\t          function resolveAll(response) {\n\t            self.deferred.resolve(response);\n\t          }\n\t\n\t          /**\n\t           * Force the '$md<xxx>.show()' promise to reject\n\t           */\n\t          function rejectAll(fault) {\n\t            self.deferred.reject(fault);\n\t          }\n\t        }\n\t\n\t        /**\n\t         * Prepare optional isolated scope and prepare $animate with default enter and leave\n\t         * transitions for the new element instance.\n\t         */\n\t        function configureScopeAndTransitions(options) {\n\t          options = options || { };\n\t          if ( options.template ) {\n\t            options.template = $mdUtil.processTemplate(options.template);\n\t          }\n\t\n\t          return angular.extend({\n\t            preserveScope: false,\n\t            cancelAutoHide : angular.noop,\n\t            scope: options.scope || $rootScope.$new(options.isolateScope),\n\t\n\t            /**\n\t             * Default usage to enable $animate to transition-in; can be easily overridden via 'options'\n\t             */\n\t            onShow: function transitionIn(scope, element, options) {\n\t              return $animate.enter(element, options.parent);\n\t            },\n\t\n\t            /**\n\t             * Default usage to enable $animate to transition-out; can be easily overridden via 'options'\n\t             */\n\t            onRemove: function transitionOut(scope, element) {\n\t              // Element could be undefined if a new element is shown before\n\t              // the old one finishes compiling.\n\t              return element && $animate.leave(element) || $q.when();\n\t            }\n\t          }, options );\n\t\n\t        }\n\t\n\t        /**\n\t         * Compile an element with a templateUrl, controller, and locals\n\t         */\n\t        function compileElement(options) {\n\t\n\t          var compiled = !options.skipCompile ? $mdCompiler.compile(options) : null;\n\t\n\t          return compiled || $q(function (resolve) {\n\t              resolve({\n\t                locals: {},\n\t                link: function () {\n\t                  return options.element;\n\t                }\n\t              });\n\t            });\n\t        }\n\t\n\t        /**\n\t         *  Link an element with compiled configuration\n\t         */\n\t        function linkElement(compileData, options){\n\t          angular.extend(compileData.locals, options);\n\t\n\t          var element = compileData.link(options.scope);\n\t\n\t          // Search for parent at insertion time, if not specified\n\t          options.element = element;\n\t          options.parent = findParent(element, options);\n\t          if (options.themable) $mdTheming(element);\n\t\n\t          return element;\n\t        }\n\t\n\t        /**\n\t         * Search for parent at insertion time, if not specified\n\t         */\n\t        function findParent(element, options) {\n\t          var parent = options.parent;\n\t\n\t          // Search for parent at insertion time, if not specified\n\t          if (angular.isFunction(parent)) {\n\t            parent = parent(options.scope, element, options);\n\t          } else if (angular.isString(parent)) {\n\t            parent = angular.element($document[0].querySelector(parent));\n\t          } else {\n\t            parent = angular.element(parent);\n\t          }\n\t\n\t          // If parent querySelector/getter function fails, or it's just null,\n\t          // find a default.\n\t          if (!(parent || {}).length) {\n\t            var el;\n\t            if ($rootElement[0] && $rootElement[0].querySelector) {\n\t              el = $rootElement[0].querySelector(':not(svg) > body');\n\t            }\n\t            if (!el) el = $rootElement[0];\n\t            if (el.nodeName == '#comment') {\n\t              el = $document[0].body;\n\t            }\n\t            return angular.element(el);\n\t          }\n\t\n\t          return parent;\n\t        }\n\t\n\t        /**\n\t         * If auto-hide is enabled, start timer and prepare cancel function\n\t         */\n\t        function startAutoHide() {\n\t          var autoHideTimer, cancelAutoHide = angular.noop;\n\t\n\t          if (options.hideDelay) {\n\t            autoHideTimer = $timeout(service.hide, options.hideDelay) ;\n\t            cancelAutoHide = function() {\n\t              $timeout.cancel(autoHideTimer);\n\t            }\n\t          }\n\t\n\t          // Cache for subsequent use\n\t          options.cancelAutoHide = function() {\n\t            cancelAutoHide();\n\t            options.cancelAutoHide = undefined;\n\t          }\n\t        }\n\t\n\t        /**\n\t         * Show the element ( with transitions), notify complete and start\n\t         * optional auto-Hide\n\t         */\n\t        function showElement(element, options, controller) {\n\t          // Trigger onShowing callback before the `show()` starts\n\t          var notifyShowing = options.onShowing || angular.noop;\n\t          // Trigger onComplete callback when the `show()` finishes\n\t          var notifyComplete = options.onComplete || angular.noop;\n\t\n\t          return $q(function (resolve, reject) {\n\t            try {\n\t              notifyShowing(options.scope, element, options);\n\t\n\t              // Start transitionIn\n\t              $q.when(options.onShow(options.scope, element, options, controller))\n\t                .then(function () {\n\t                  notifyComplete(options.scope, element, options);\n\t                  startAutoHide();\n\t\n\t                  resolve(element);\n\t\n\t                }, reject );\n\t\n\t            } catch(e) {\n\t              reject(e.message);\n\t            }\n\t          });\n\t        }\n\t\n\t        function hideElement(element, options) {\n\t          var announceRemoving = options.onRemoving || angular.noop;\n\t\n\t          return $$q(function (resolve, reject) {\n\t            try {\n\t              // Start transitionIn\n\t              var action = $$q.when( options.onRemove(options.scope, element, options) || true );\n\t\n\t              // Trigger callback *before* the remove operation starts\n\t              announceRemoving(element, action);\n\t\n\t              if ( options.$destroy == true ) {\n\t\n\t                // For $destroy, onRemove should be synchronous\n\t                resolve(element);\n\t\n\t              } else {\n\t\n\t                // Wait until transition-out is done\n\t                action.then(function () {\n\t\n\t                  if (!options.preserveScope && options.scope ) {\n\t                    options.scope.$destroy();\n\t                  }\n\t\n\t                  resolve(element);\n\t\n\t                }, reject );\n\t              }\n\t\n\t            } catch(e) {\n\t              reject(e.message);\n\t            }\n\t          });\n\t        }\n\t\n\t      }\n\t    };\n\t\n\t  }\n\t\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t  /**\n\t   * @ngdoc module\n\t   * @name material.core.componentRegistry\n\t   *\n\t   * @description\n\t   * A component instance registration service.\n\t   * Note: currently this as a private service in the SideNav component.\n\t   */\n\t  angular.module('material.core')\n\t    .factory('$mdComponentRegistry', ComponentRegistry);\n\t\n\t  /*\n\t   * @private\n\t   * @ngdoc factory\n\t   * @name ComponentRegistry\n\t   * @module material.core.componentRegistry\n\t   *\n\t   */\n\t  function ComponentRegistry($log, $q) {\n\t\n\t    var self;\n\t    var instances = [ ];\n\t    var pendings = { };\n\t\n\t    return self = {\n\t      /**\n\t       * Used to print an error when an instance for a handle isn't found.\n\t       */\n\t      notFoundError: function(handle) {\n\t        $log.error('No instance found for handle', handle);\n\t      },\n\t      /**\n\t       * Return all registered instances as an array.\n\t       */\n\t      getInstances: function() {\n\t        return instances;\n\t      },\n\t\n\t      /**\n\t       * Get a registered instance.\n\t       * @param handle the String handle to look up for a registered instance.\n\t       */\n\t      get: function(handle) {\n\t        if ( !isValidID(handle) ) return null;\n\t\n\t        var i, j, instance;\n\t        for(i = 0, j = instances.length; i < j; i++) {\n\t          instance = instances[i];\n\t          if(instance.$$mdHandle === handle) {\n\t            return instance;\n\t          }\n\t        }\n\t        return null;\n\t      },\n\t\n\t      /**\n\t       * Register an instance.\n\t       * @param instance the instance to register\n\t       * @param handle the handle to identify the instance under.\n\t       */\n\t      register: function(instance, handle) {\n\t        if ( !handle ) return angular.noop;\n\t\n\t        instance.$$mdHandle = handle;\n\t        instances.push(instance);\n\t        resolveWhen();\n\t\n\t        return deregister;\n\t\n\t        /**\n\t         * Remove registration for an instance\n\t         */\n\t        function deregister() {\n\t          var index = instances.indexOf(instance);\n\t          if (index !== -1) {\n\t            instances.splice(index, 1);\n\t          }\n\t        }\n\t\n\t        /**\n\t         * Resolve any pending promises for this instance\n\t         */\n\t        function resolveWhen() {\n\t          var dfd = pendings[handle];\n\t          if ( dfd ) {\n\t            dfd.resolve( instance );\n\t            delete pendings[handle];\n\t          }\n\t        }\n\t      },\n\t\n\t      /**\n\t       * Async accessor to registered component instance\n\t       * If not available then a promise is created to notify\n\t       * all listeners when the instance is registered.\n\t       */\n\t      when : function(handle) {\n\t        if ( isValidID(handle) ) {\n\t          var deferred = $q.defer();\n\t          var instance = self.get(handle);\n\t\n\t          if ( instance )  {\n\t            deferred.resolve( instance );\n\t          } else {\n\t            pendings[handle] = deferred;\n\t          }\n\t\n\t          return deferred.promise;\n\t        }\n\t        return $q.reject(\"Invalid `md-component-id` value.\");\n\t      }\n\t\n\t    };\n\t\n\t    function isValidID(handle){\n\t      return handle && (handle !== \"\");\n\t    }\n\t\n\t  }\n\t  ComponentRegistry.$inject = [\"$log\", \"$q\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  var $mdUtil, $interpolate;\n\t\n\t  var SUFFIXES = /(-gt)?-(sm|md|lg)/g;\n\t  var WHITESPACE = /\\s+/g;\n\t\n\t  var FLEX_OPTIONS = ['grow', 'initial', 'auto', 'none'];\n\t  var LAYOUT_OPTIONS = ['row', 'column'];\n\t  var ALIGNMENT_OPTIONS = [\n\t        \"start start\", \"start center\", \"start end\",\n\t        \"center\", \"center center\", \"center start\", \"center end\",\n\t        \"end\", \"end center\", \"end start\", \"end end\",\n\t        \"space-around\", \"space-around center\", \"space-around start\", \"space-around end\",\n\t        \"space-between\", \"space-between center\", \"space-between start\", \"space-between end\"\n\t      ];\n\t\n\t\n\t  var config = {\n\t    /**\n\t     * Enable directive attribute-to-class conversions\n\t     */\n\t    enabled: true,\n\t\n\t    /**\n\t     * After translation to classname equivalents, remove the\n\t     * original Layout attribute\n\t     */\n\t    removeAttributes : true,\n\t\n\t    /**\n\t     * List of mediaQuery breakpoints and associated suffixes\n\t     *\n\t     *   [\n\t     *    { suffix: \"sm\", mediaQuery: \"screen and (max-width: 599px)\" },\n\t     *    { suffix: \"md\", mediaQuery: \"screen and (min-width: 600px) and (max-width: 959px)\" }\n\t     *   ]\n\t     */\n\t    breakpoints: []\n\t  };\n\t\n\t  /**\n\t   *   The original ngMaterial Layout solution used attribute selectors and CSS.\n\t   *\n\t   *  ```html\n\t   *  <div layout=\"column\"> My Content </div>\n\t   *  ```\n\t   *\n\t   *  ```css\n\t   *  [layout] {\n\t     *    box-sizing: border-box;\n\t     *    display:flex;\n\t     *  }\n\t   *  [layout=column] {\n\t     *    flex-direction : column\n\t     *  }\n\t   *  ```\n\t   *\n\t   *  Use of attribute selectors creates significant performance impacts in some\n\t   *  browsers... mainly IE.\n\t   *\n\t   *  This module registers directives that allow the same layout attributes to be\n\t   *  interpreted and converted to class selectors. The directive will add equivalent classes to each element that\n\t   *  contains a Layout directive.\n\t   *\n\t   * ```html\n\t   *   <div layout=\"column\" class=\"layout layout-column\"> My Content </div>\n\t   *```\n\t   *\n\t   *  ```css\n\t   *  .layout {\n\t     *    box-sizing: border-box;\n\t     *    display:flex;\n\t     *  }\n\t   *  .layout-column {\n\t     *    flex-direction : column\n\t     *  }\n\t   *  ```\n\t   */\n\t  angular.module('material.core.layout', ['ng'])\n\t\n\t    .directive('mdLayoutCss', disableLayoutDirective )\n\t\n\t    .directive('layout', attributeWithObserve('layout'))\n\t    .directive('layoutSm', attributeWithObserve('layout-sm'))\n\t    .directive('layoutGtSm', attributeWithObserve('layout-gt-sm'))\n\t    .directive('layoutMd', attributeWithObserve('layout-md'))\n\t    .directive('layoutGtMd', attributeWithObserve('layout-gt-md'))\n\t    .directive('layoutLg', attributeWithObserve('layout-lg'))\n\t    .directive('layoutGtLg', attributeWithObserve('layout-gt-lg'))\n\t\n\t    .directive('flex', attributeWithObserve('flex'))\n\t    .directive('flexSm', attributeWithObserve('flex-sm'))\n\t    .directive('flexGtSm', attributeWithObserve('flex-gt-sm'))\n\t    .directive('flexMd', attributeWithObserve('flex-md'))\n\t    .directive('flexGtMd', attributeWithObserve('flex-gt-md'))\n\t    .directive('flexLg', attributeWithObserve('flex-lg'))\n\t    .directive('flexGtLg', attributeWithObserve('flex-gt-lg'))\n\t\n\t    .directive('flexOrder', attributeWithObserve('flex-order'))\n\t    .directive('flexOrderSm', attributeWithObserve('flex-order-sm'))\n\t    .directive('flexOrderGtSm', attributeWithObserve('flex-order-gt-sm'))\n\t    .directive('flexOrderMd', attributeWithObserve('flex-order-md'))\n\t    .directive('flexOrderGtMd', attributeWithObserve('flex-order-gt-md'))\n\t    .directive('flexOrderLg', attributeWithObserve('flex-order-lg'))\n\t    .directive('flexOrderGtLg', attributeWithObserve('flex-order-gt-lg'))\n\t\n\t    .directive('flexOffset', attributeWithObserve('flex-offset'))\n\t    .directive('flexOffsetSm', attributeWithObserve('flex-offset-sm'))\n\t    .directive('flexOffsetGtSm', attributeWithObserve('flex-offset-gt-sm'))\n\t    .directive('flexOffsetMd', attributeWithObserve('flex-offset-md'))\n\t    .directive('flexOffsetGtMd', attributeWithObserve('flex-offset-gt-md'))\n\t    .directive('flexOffsetLg', attributeWithObserve('flex-offset-lg'))\n\t    .directive('flexOffsetGtLg', attributeWithObserve('flex-offset-gt-lg'))\n\t\n\t    .directive('layoutAlign', attributeWithObserve('layout-align'))\n\t    .directive('layoutAlignSm', attributeWithObserve('layout-align-sm'))\n\t    .directive('layoutAlignGtSm', attributeWithObserve('layout-align-gt-sm'))\n\t    .directive('layoutAlignMd', attributeWithObserve('layout-align-md'))\n\t    .directive('layoutAlignGtMd', attributeWithObserve('layout-align-gt-md'))\n\t    .directive('layoutAlignLg', attributeWithObserve('layout-align-lg'))\n\t    .directive('layoutAlignGtLg', attributeWithObserve('layout-align-gt-lg'))\n\t\n\t    // Attribute directives with no value(s)\n\t\n\t    .directive('hide', attributeWithoutValue('hide'))\n\t    .directive('hideSm', attributeWithoutValue('hide-sm'))\n\t    .directive('hideGtSm', attributeWithoutValue('hide-gt-sm'))\n\t    .directive('hideMd', attributeWithoutValue('hide-md'))\n\t    .directive('hideGtMd', attributeWithoutValue('hide-gt-md'))\n\t    .directive('hideLg', attributeWithoutValue('hide-lg'))\n\t    .directive('hideGtLg', attributeWithoutValue('hide-gt-lg'))\n\t    .directive('show', attributeWithoutValue('show'))\n\t    .directive('showSm', attributeWithoutValue('show-sm'))\n\t    .directive('showGtSm', attributeWithoutValue('show-gt-sm'))\n\t    .directive('showMd', attributeWithoutValue('show-md'))\n\t    .directive('showGtMd', attributeWithoutValue('show-gt-md'))\n\t    .directive('showLg', attributeWithoutValue('show-lg'))\n\t    .directive('showGtLg', attributeWithoutValue('show-gt-lg'))\n\t\n\t    // Attribute directives with no value(s) and NO breakpoints\n\t\n\t    .directive('layoutMargin', attributeWithoutValue('layout-margin'))\n\t    .directive('layoutPadding', attributeWithoutValue('layout-padding'))\n\t    .directive('layoutWrap', attributeWithoutValue('layout-wrap'))\n\t    .directive('layoutNoWrap', attributeWithoutValue('layout-no-wrap'))\n\t    .directive('layoutFill', attributeWithoutValue('layout-fill'))\n\t\n\t    // !! Deprecated attributes: use the `-lt` (aka less-than) notations\n\t\n\t    .directive('layoutLtMd', warnAttrNotSupported('layout-lt-md', true))\n\t    .directive('layoutLtLg', warnAttrNotSupported('layout-lt-lg', true))\n\t    .directive('flexLtMd', warnAttrNotSupported('flex-lt-md', true))\n\t    .directive('flexLtLg', warnAttrNotSupported('flex-lt-lg', true))\n\t\n\t    .directive('layoutAlignLtMd', warnAttrNotSupported('layout-align-lt-md'))\n\t    .directive('layoutAlignLtLg', warnAttrNotSupported('layout-align-lt-lg'))\n\t    .directive('flexOrderLtMd', warnAttrNotSupported('flex-order-lt-md'))\n\t    .directive('flexOrderLtLg', warnAttrNotSupported('flex-order-lt-lg'))\n\t    .directive('offsetLtMd', warnAttrNotSupported('flex-offset-lt-md'))\n\t    .directive('offsetLtLg', warnAttrNotSupported('flex-offset-lt-lg'))\n\t\n\t    .directive('hideLtMd', warnAttrNotSupported('hide-lt-md'))\n\t    .directive('hideLtLg', warnAttrNotSupported('hide-lt-lg'))\n\t    .directive('showLtMd', warnAttrNotSupported('show-lt-md'))\n\t    .directive('showLtLg', warnAttrNotSupported('show-lt-lg'));\n\t\n\t  /**\n\t   * Special directive that will disable ALL Layout conversions of layout\n\t   * attribute(s) to classname(s).\n\t   *\n\t   * <link rel=\"stylesheet\" href=\"angular-material.min.css\">\n\t   * <link rel=\"stylesheet\" href=\"angular-material.layout.css\">\n\t   *\n\t   * <body md-layout-css>\n\t   *  ...\n\t   * </body>\n\t   *\n\t   * Note: Using md-layout-css directive requires the developer to load the Material\n\t   * Layout Attribute stylesheet (which only uses attribute selectors):\n\t   *\n\t   *       `angular-material.layout.css`\n\t   *\n\t   * Another option is to use the LayoutProvider to configure and disable the attribute\n\t   * conversions; this would obviate the use of the `md-layout-css` directive\n\t   *\n\t   */\n\t  function disableLayoutDirective() {\n\t    return {\n\t      restrict : 'A',\n\t      priority : '900',\n\t      compile  : function(element, attr) {\n\t        config.enabled = false;\n\t        return angular.noop;\n\t      }\n\t    };\n\t  }\n\t\n\t  // *********************************************************************************\n\t  //\n\t  // These functions create registration functions for ngMaterial Layout attribute directives\n\t  // This provides easy translation to switch ngMaterial attribute selectors to\n\t  // CLASS selectors and directives; which has huge performance implications\n\t  // for IE Browsers\n\t  //\n\t  // *********************************************************************************\n\t\n\t\n\t  /**\n\t   * Creates a directive registration function where a possible dynamic attribute\n\t   * value will be observed/watched.\n\t   * @param {string} className attribute name; eg `layout-gt-md` with value =\"row\"\n\t   */\n\t  function attributeWithObserve(className) {\n\t\n\t    return ['$mdUtil', '$interpolate', function(_$mdUtil_, _$interpolate_) {\n\t      $mdUtil = _$mdUtil_;\n\t      $interpolate = _$interpolate_;\n\t\n\t      return {\n\t        restrict: 'A',\n\t        compile: function(element, attr) {\n\t          var linkFn;\n\t          if (config.enabled) {\n\t            // immediately replace static (non-interpolated) invalid values...\n\t\n\t            validateAttributeValue( className,\n\t              getNormalizedAttrValue(className, attr, \"\"),\n\t              buildUpdateFn(element, className, attr)\n\t            );\n\t\n\t            linkFn = translateWithValueToCssClass;\n\t          }\n\t\n\t          // Use for postLink to account for transforms after ng-transclude.\n\t          return linkFn || angular.noop;\n\t        }\n\t      };\n\t    }];\n\t\n\t    /**\n\t     * Add as transformed class selector(s), then\n\t     * remove the deprecated attribute selector\n\t     */\n\t    function translateWithValueToCssClass(scope, element, attrs) {\n\t      var updateFn = updateClassWithValue(element, className, attrs);\n\t      var unwatch = attrs.$observe(attrs.$normalize(className), updateFn);\n\t\n\t      updateFn(getNormalizedAttrValue(className, attrs, \"\"));\n\t      scope.$on(\"$destroy\", function() { unwatch() });\n\t\n\t      if (config.removeAttributes) element.removeAttr(className);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Creates a registration function for ngMaterial Layout attribute directive.\n\t   * This is a `simple` transpose of attribute usage to class usage; where we ignore\n\t   * any attribute value\n\t   */\n\t  function attributeWithoutValue(className) {\n\t    return ['$interpolate', function(_$interpolate_) {\n\t      $interpolate = _$interpolate_;\n\t\n\t      return {\n\t        restrict: 'A',\n\t        compile: function(element, attr) {\n\t          var linkFn;\n\t          if (config.enabled) {\n\t            // immediately replace static (non-interpolated) invalid values...\n\t\n\t            validateAttributeValue( className,\n\t              getNormalizedAttrValue(className, attr, \"\"),\n\t              buildUpdateFn(element, className, attr)\n\t            );\n\t\n\t            translateToCssClass(null, element);\n\t\n\t            // Use for postLink to account for transforms after ng-transclude.\n\t            linkFn = translateToCssClass;\n\t          }\n\t\n\t          return linkFn || angular.noop;\n\t        }\n\t      };\n\t    }];\n\t\n\t    /**\n\t     * Add as transformed class selector, then\n\t     * remove the deprecated attribute selector\n\t     */\n\t    function translateToCssClass(scope, element) {\n\t      element.addClass(className);\n\t\n\t      if (config.removeAttributes) {\n\t        // After link-phase, remove deprecated layout attribute selector\n\t        element.removeAttr(className);\n\t      }\n\t    }\n\t  }\n\t\n\t\n\t\n\t  /**\n\t   * After link-phase, do NOT remove deprecated layout attribute selector.\n\t   * Instead watch the attribute so interpolated data-bindings to layout\n\t   * selectors will continue to be supported.\n\t   *\n\t   * $observe() the className and update with new class (after removing the last one)\n\t   *\n\t   * e.g. `layout=\"{{layoutDemo.direction}}\"` will update...\n\t   *\n\t   * NOTE: The value must match one of the specified styles in the CSS.\n\t   * For example `flex-gt-md=\"{{size}}`  where `scope.size == 47` will NOT work since\n\t   * only breakpoints for 0, 5, 10, 15... 100, 33, 34, 66, 67 are defined.\n\t   *\n\t   */\n\t  function updateClassWithValue(element, className) {\n\t    var lastClass;\n\t\n\t    return function updateClassFn(newValue) {\n\t      var value = validateAttributeValue(className, newValue || \"\");\n\t      if ( angular.isDefined(value) ) {\n\t        element.removeClass(lastClass);\n\t        lastClass = !value ? className : className + \"-\" + value.replace(WHITESPACE, \"-\")\n\t        element.addClass(lastClass);\n\t      }\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Provide console warning that this layout attribute has been deprecated\n\t   *\n\t   */\n\t  function warnAttrNotSupported(className) {\n\t    var parts = className.split(\"-\");\n\t    return [\"$log\", function($log) {\n\t      $log.warn(className + \"has been deprecated. Please use a `\" + parts[0] + \"-gt-<xxx>` variant.\");\n\t      return angular.noop;\n\t    }];\n\t  }\n\t\n\t  /**\n\t   * For the Layout attribute value, validate or replace with default\n\t   * fallback value\n\t   */\n\t  function validateAttributeValue(className, value, updateFn) {\n\t    var origValue = value;\n\t\n\t    if (!needsInterpolation(value)) {\n\t      switch (className.replace(SUFFIXES,\"\")) {\n\t        case 'layout'        :\n\t          if ( !findIn(value, LAYOUT_OPTIONS) ) {\n\t            value = LAYOUT_OPTIONS[0];    // 'row';\n\t          }\n\t          break;\n\t\n\t        case 'flex'          :\n\t          if (!findIn(value, FLEX_OPTIONS)) {\n\t            if (isNaN(value)) {\n\t              value = '';\n\t            }\n\t          }\n\t          break;\n\t\n\t        case 'flex-offset' :\n\t        case 'flex-order'    :\n\t          if (!value || isNaN(+value)) {\n\t            value = '0';\n\t          }\n\t          break;\n\t\n\t        case 'layout-align'  :\n\t          if (!findIn(value, ALIGNMENT_OPTIONS, \"-\")) {\n\t            value = ALIGNMENT_OPTIONS[0];   // 'start-start';\n\t          }\n\t          break;\n\t\n\t        case 'layout-padding' :\n\t        case 'layout-margin'  :\n\t        case 'layout-fill'    :\n\t        case 'layout-wrap'    :\n\t        case 'layout-no-wrap' :\n\t          value = '';\n\t          break;\n\t      }\n\t\n\t      if (value != origValue) {\n\t        (updateFn || angular.noop)(value);\n\t      }\n\t    }\n\t\n\t    return value;\n\t  }\n\t\n\t  /**\n\t   * Replace current attribute value with fallback value\n\t   */\n\t  function buildUpdateFn(element, className, attrs) {\n\t    return function updateAttrValue(fallback) {\n\t      if (!needsInterpolation(fallback)) {\n\t        element.attr(className, fallback);\n\t        attrs[attrs.$normalize(className)] = fallback;\n\t      }\n\t    };\n\t  }\n\t\n\t  /**\n\t   * See if the original value has interpolation symbols:\n\t   * e.g.  flex-gt-md=\"{{triggerPoint}}\"\n\t   */\n\t  function needsInterpolation(value) {\n\t    return (value || \"\").indexOf($interpolate.startSymbol()) > -1;\n\t  }\n\t\n\t  function getNormalizedAttrValue(className, attrs, defaultVal) {\n\t    var normalizedAttr = attrs.$normalize(className);\n\t    return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, \"-\") : defaultVal || null;\n\t  }\n\t\n\t  function findIn(item, list, replaceWith) {\n\t    item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;\n\t\n\t    var found = false;\n\t    if (item) {\n\t      list.forEach(function(it) {\n\t        it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;\n\t        found = found || (it === item);\n\t      });\n\t    }\n\t    return found;\n\t  }\n\t\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc service\n\t   * @name $mdButtonInkRipple\n\t   * @module material.core\n\t   *\n\t   * @description\n\t   * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.\n\t   *\n\t   * @param {object=} scope Scope within the current context\n\t   * @param {object=} element The element the ripple effect should be applied to\n\t   * @param {object=} options (Optional) Configuration options to override the default ripple configuration\n\t   */\n\t\n\t  angular.module('material.core')\n\t    .factory('$mdButtonInkRipple', MdButtonInkRipple);\n\t\n\t  function MdButtonInkRipple($mdInkRipple) {\n\t    return {\n\t      attach: function attachRipple(scope, element, options) {\n\t        options = angular.extend(optionsForElement(element), options);\n\t\n\t        return $mdInkRipple.attach(scope, element, options);\n\t      }\n\t    };\n\t\n\t    function optionsForElement(element) {\n\t      if (element.hasClass('md-icon-button')) {\n\t        return {\n\t          isMenuItem: element.hasClass('md-menu-item'),\n\t          fitRipple: true,\n\t          center: true\n\t        };\n\t      } else {\n\t        return {\n\t          isMenuItem: element.hasClass('md-menu-item'),\n\t          dimBackground: true\n\t        }\n\t      }\n\t    };\n\t  }\n\t  MdButtonInkRipple.$inject = [\"$mdInkRipple\"];;\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t    /**\n\t   * @ngdoc service\n\t   * @name $mdCheckboxInkRipple\n\t   * @module material.core\n\t   *\n\t   * @description\n\t   * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.\n\t   *\n\t   * @param {object=} scope Scope within the current context\n\t   * @param {object=} element The element the ripple effect should be applied to\n\t   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration\n\t   */\n\t\n\t  angular.module('material.core')\n\t    .factory('$mdCheckboxInkRipple', MdCheckboxInkRipple);\n\t\n\t  function MdCheckboxInkRipple($mdInkRipple) {\n\t    return {\n\t      attach: attach\n\t    };\n\t\n\t    function attach(scope, element, options) {\n\t      return $mdInkRipple.attach(scope, element, angular.extend({\n\t        center: true,\n\t        dimBackground: false,\n\t        fitRipple: true\n\t      }, options));\n\t    };\n\t  }\n\t  MdCheckboxInkRipple.$inject = [\"$mdInkRipple\"];;\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc service\n\t   * @name $mdListInkRipple\n\t   * @module material.core\n\t   *\n\t   * @description\n\t   * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.\n\t   *\n\t   * @param {object=} scope Scope within the current context\n\t   * @param {object=} element The element the ripple effect should be applied to\n\t   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration\n\t   */\n\t\n\t  angular.module('material.core')\n\t    .factory('$mdListInkRipple', MdListInkRipple);\n\t\n\t  function MdListInkRipple($mdInkRipple) {\n\t    return {\n\t      attach: attach\n\t    };\n\t\n\t    function attach(scope, element, options) {\n\t      return $mdInkRipple.attach(scope, element, angular.extend({\n\t        center: false,\n\t        dimBackground: true,\n\t        outline: false,\n\t        rippleSize: 'full'\n\t      }, options));\n\t    };\n\t  }\n\t  MdListInkRipple.$inject = [\"$mdInkRipple\"];;\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('material.core')\n\t    .factory('$mdInkRipple', InkRippleService)\n\t    .directive('mdInkRipple', InkRippleDirective)\n\t    .directive('mdNoInk', attrNoDirective)\n\t    .directive('mdNoBar', attrNoDirective)\n\t    .directive('mdNoStretch', attrNoDirective);\n\t\n\tvar DURATION = 450;\n\t\n\t/**\n\t * Directive used to add ripples to any element\n\t * @ngInject\n\t */\n\tfunction InkRippleDirective ($mdButtonInkRipple, $mdCheckboxInkRipple) {\n\t  return {\n\t    controller: angular.noop,\n\t    link:       function (scope, element, attr) {\n\t      attr.hasOwnProperty('mdInkRippleCheckbox')\n\t          ? $mdCheckboxInkRipple.attach(scope, element)\n\t          : $mdButtonInkRipple.attach(scope, element);\n\t    }\n\t  };\n\t}\n\tInkRippleDirective.$inject = [\"$mdButtonInkRipple\", \"$mdCheckboxInkRipple\"];\n\t\n\t/**\n\t * Service for adding ripples to any element\n\t * @ngInject\n\t */\n\tfunction InkRippleService ($injector) {\n\t  return { attach: attach };\n\t  function attach (scope, element, options) {\n\t    if (element.controller('mdNoInk')) return angular.noop;\n\t    return $injector.instantiate(InkRippleCtrl, {\n\t      $scope:        scope,\n\t      $element:      element,\n\t      rippleOptions: options\n\t    });\n\t  }\n\t}\n\tInkRippleService.$inject = [\"$injector\"];\n\t\n\t/**\n\t * Controller used by the ripple service in order to apply ripples\n\t * @ngInject\n\t */\n\tfunction InkRippleCtrl ($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {\n\t  this.$window    = $window;\n\t  this.$timeout   = $timeout;\n\t  this.$mdUtil    = $mdUtil;\n\t  this.$scope     = $scope;\n\t  this.$element   = $element;\n\t  this.options    = rippleOptions;\n\t  this.mousedown  = false;\n\t  this.ripples    = [];\n\t  this.timeout    = null; // Stores a reference to the most-recent ripple timeout\n\t  this.lastRipple = null;\n\t\n\t  $mdUtil.valueOnUse(this, 'container', this.createContainer);\n\t  $mdUtil.valueOnUse(this, 'background', this.getColor, 0.5);\n\t\n\t  this.color = this.getColor(1);\n\t  this.$element.addClass('md-ink-ripple');\n\t\n\t  // attach method for unit tests\n\t  ($element.controller('mdInkRipple') || {}).createRipple = angular.bind(this, this.createRipple);\n\t  ($element.controller('mdInkRipple') || {}).setColor = angular.bind(this, this.setColor);\n\t\n\t  this.bindEvents();\n\t}\n\tInkRippleCtrl.$inject = [\"$scope\", \"$element\", \"rippleOptions\", \"$window\", \"$timeout\", \"$mdUtil\"];\n\t\n\t/**\n\t * Returns the color that the ripple should be (either based on CSS or hard-coded)\n\t * @returns {string}\n\t */\n\tInkRippleCtrl.prototype.getColor = function () {\n\t  return this._parseColor(this.$element.attr('md-ink-ripple'))\n\t      || this._parseColor(getElementColor.call(this));\n\t\n\t  /**\n\t   * Finds the color element and returns its text color for use as default ripple color\n\t   * @returns {string}\n\t   */\n\t  function getElementColor () {\n\t    var colorElement = this.options.colorElement && this.options.colorElement[ 0 ];\n\t    colorElement     = colorElement || this.$element[ 0 ];\n\t    return colorElement ? this.$window.getComputedStyle(colorElement).color : 'rgb(0,0,0)';\n\t  }\n\t};\n\t/**\n\t * Takes a string color and converts it to RGBA format\n\t * @param color {string}\n\t * @param [multiplier] {int}\n\t * @returns {string}\n\t */\n\t\n\tInkRippleCtrl.prototype._parseColor = function parseColor (color, multiplier) {\n\t  multiplier = multiplier || 1;\n\t\n\t  if (!color) return;\n\t  if (color.indexOf('rgba') === 0) return color.replace(/\\d?\\.?\\d*\\s*\\)\\s*$/, (0.1 * multiplier).toString() + ')');\n\t  if (color.indexOf('rgb') === 0) return rgbToRGBA(color);\n\t  if (color.indexOf('#') === 0) return hexToRGBA(color);\n\t\n\t  /**\n\t   * Converts hex value to RGBA string\n\t   * @param color {string}\n\t   * @returns {string}\n\t   */\n\t  function hexToRGBA (color) {\n\t    var hex   = color[ 0 ] === '#' ? color.substr(1) : color,\n\t      dig   = hex.length / 3,\n\t      red   = hex.substr(0, dig),\n\t      green = hex.substr(dig, dig),\n\t      blue  = hex.substr(dig * 2);\n\t    if (dig === 1) {\n\t      red += red;\n\t      green += green;\n\t      blue += blue;\n\t    }\n\t    return 'rgba(' + parseInt(red, 16) + ',' + parseInt(green, 16) + ',' + parseInt(blue, 16) + ',0.1)';\n\t  }\n\t\n\t  /**\n\t   * Converts an RGB color to RGBA\n\t   * @param color {string}\n\t   * @returns {string}\n\t   */\n\t  function rgbToRGBA (color) {\n\t    return color.replace(')', ', 0.1)').replace('(', 'a(');\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Binds events to the root element for\n\t */\n\tInkRippleCtrl.prototype.bindEvents = function () {\n\t  this.$element.on('mousedown', angular.bind(this, this.handleMousedown));\n\t  this.$element.on('mouseup', angular.bind(this, this.handleMouseup));\n\t  this.$element.on('mouseleave', angular.bind(this, this.handleMouseup));\n\t};\n\t\n\t/**\n\t * Create a new ripple on every mousedown event from the root element\n\t * @param event {MouseEvent}\n\t */\n\tInkRippleCtrl.prototype.handleMousedown = function (event) {\n\t  if ( this.mousedown ) return;\n\t\n\t  this.setColor(window.getComputedStyle(this.$element[0])['color']);\n\t\n\t  // When jQuery is loaded, we have to get the original event\n\t  if (event.hasOwnProperty('originalEvent')) event = event.originalEvent;\n\t  this.mousedown = true;\n\t  if (this.options.center) {\n\t    this.createRipple(this.container.prop('clientWidth') / 2, this.container.prop('clientWidth') / 2);\n\t  } else {\n\t    this.createRipple(event.layerX, event.layerY);\n\t  }\n\t};\n\t\n\t/**\n\t * Either remove or unlock any remaining ripples when the user mouses off of the element (either by\n\t * mouseup or mouseleave event)\n\t */\n\tInkRippleCtrl.prototype.handleMouseup = function () {\n\t  if ( this.mousedown || this.lastRipple ) {\n\t    var ctrl       = this;\n\t    this.mousedown = false;\n\t    this.$mdUtil.nextTick(function () {\n\t      ctrl.clearRipples();\n\t    }, false);\n\t  }\n\t};\n\t\n\t/**\n\t * Cycles through all ripples and attempts to remove them.\n\t * Depending on logic within `fadeInComplete`, some removals will be postponed.\n\t */\n\tInkRippleCtrl.prototype.clearRipples = function () {\n\t  for (var i = 0; i < this.ripples.length; i++) {\n\t    this.fadeInComplete(this.ripples[ i ]);\n\t  }\n\t};\n\t\n\t/**\n\t * Creates the ripple container element\n\t * @returns {*}\n\t */\n\tInkRippleCtrl.prototype.createContainer = function () {\n\t  var container = angular.element('<div class=\"md-ripple-container\"></div>');\n\t  this.$element.append(container);\n\t  return container;\n\t};\n\t\n\tInkRippleCtrl.prototype.clearTimeout = function () {\n\t  if (this.timeout) {\n\t    this.$timeout.cancel(this.timeout);\n\t    this.timeout = null;\n\t  }\n\t};\n\t\n\tInkRippleCtrl.prototype.isRippleAllowed = function () {\n\t  var element = this.$element[0];\n\t  do {\n\t    if (!element.tagName || element.tagName === 'BODY') break;\n\t    if (element && element.hasAttribute && element.hasAttribute('disabled')) return false;\n\t  } while (element = element.parentNode);\n\t  return true;\n\t};\n\t\n\t/**\n\t * Creates a new ripple and adds it to the container.  Also tracks ripple in `this.ripples`.\n\t * @param left\n\t * @param top\n\t */\n\tInkRippleCtrl.prototype.createRipple = function (left, top) {\n\t  if (!this.isRippleAllowed()) return;\n\t\n\t  var ctrl        = this;\n\t  var ripple      = angular.element('<div class=\"md-ripple\"></div>');\n\t  var width       = this.$element.prop('clientWidth');\n\t  var height      = this.$element.prop('clientHeight');\n\t  var x           = Math.max(Math.abs(width - left), left) * 2;\n\t  var y           = Math.max(Math.abs(height - top), top) * 2;\n\t  var size        = getSize(this.options.fitRipple, x, y);\n\t\n\t  ripple.css({\n\t    left:            left + 'px',\n\t    top:             top + 'px',\n\t    background:      'black',\n\t    width:           size + 'px',\n\t    height:          size + 'px',\n\t    backgroundColor: rgbaToRGB(this.color),\n\t    borderColor:     rgbaToRGB(this.color)\n\t  });\n\t  this.lastRipple = ripple;\n\t\n\t  // we only want one timeout to be running at a time\n\t  this.clearTimeout();\n\t  this.timeout    = this.$timeout(function () {\n\t    ctrl.clearTimeout();\n\t    if (!ctrl.mousedown) ctrl.fadeInComplete(ripple);\n\t  }, DURATION * 0.35, false);\n\t\n\t  if (this.options.dimBackground) this.container.css({ backgroundColor: this.background });\n\t  this.container.append(ripple);\n\t  this.ripples.push(ripple);\n\t  ripple.addClass('md-ripple-placed');\n\t\n\t  this.$mdUtil.nextTick(function () {\n\t\n\t    ripple.addClass('md-ripple-scaled md-ripple-active');\n\t    ctrl.$timeout(function () {\n\t      ctrl.clearRipples();\n\t    }, DURATION, false);\n\t\n\t  }, false);\n\t\n\t  function rgbaToRGB (color) {\n\t    return color\n\t        ? color.replace('rgba', 'rgb').replace(/,[^\\),]+\\)/, ')')\n\t        : 'rgb(0,0,0)';\n\t  }\n\t\n\t  function getSize (fit, x, y) {\n\t    return fit\n\t        ? Math.max(x, y)\n\t        : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n\t  }\n\t};\n\t\n\tInkRippleCtrl.prototype.setColor = function (color) {\n\t  this.color = this._parseColor(color);\n\t};\n\t\n\t/**\n\t * Either kicks off the fade-out animation or queues the element for removal on mouseup\n\t * @param ripple\n\t */\n\tInkRippleCtrl.prototype.fadeInComplete = function (ripple) {\n\t  if (this.lastRipple === ripple) {\n\t    if (!this.timeout && !this.mousedown) {\n\t      this.removeRipple(ripple);\n\t    }\n\t  } else {\n\t    this.removeRipple(ripple);\n\t  }\n\t};\n\t\n\t/**\n\t * Kicks off the animation for removing a ripple\n\t * @param ripple {Element}\n\t */\n\tInkRippleCtrl.prototype.removeRipple = function (ripple) {\n\t  var ctrl  = this;\n\t  var index = this.ripples.indexOf(ripple);\n\t  if (index < 0) return;\n\t  this.ripples.splice(this.ripples.indexOf(ripple), 1);\n\t  ripple.removeClass('md-ripple-active');\n\t  if (this.ripples.length === 0) this.container.css({ backgroundColor: '' });\n\t  // use a 2-second timeout in order to allow for the animation to finish\n\t  // we don't actually care how long the animation takes\n\t  this.$timeout(function () {\n\t    ctrl.fadeOutComplete(ripple);\n\t  }, DURATION, false);\n\t};\n\t\n\t/**\n\t * Removes the provided ripple from the DOM\n\t * @param ripple\n\t */\n\tInkRippleCtrl.prototype.fadeOutComplete = function (ripple) {\n\t  ripple.remove();\n\t  this.lastRipple = null;\n\t};\n\t\n\t/**\n\t * Used to create an empty directive.  This is used to track flag-directives whose children may have\n\t * functionality based on them.\n\t *\n\t * Example: `md-no-ink` will potentially be used by all child directives.\n\t */\n\tfunction attrNoDirective () {\n\t  return { controller: angular.noop };\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t    /**\n\t   * @ngdoc service\n\t   * @name $mdTabInkRipple\n\t   * @module material.core\n\t   *\n\t   * @description\n\t   * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.\n\t   *\n\t   * @param {object=} scope Scope within the current context\n\t   * @param {object=} element The element the ripple effect should be applied to\n\t   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration\n\t   */\n\t\n\t  angular.module('material.core')\n\t    .factory('$mdTabInkRipple', MdTabInkRipple);\n\t\n\t  function MdTabInkRipple($mdInkRipple) {\n\t    return {\n\t      attach: attach\n\t    };\n\t\n\t    function attach(scope, element, options) {\n\t      return $mdInkRipple.attach(scope, element, angular.extend({\n\t        center: false,\n\t        dimBackground: true,\n\t        outline: false,\n\t        rippleSize: 'full'\n\t      }, options));\n\t    };\n\t  }\n\t  MdTabInkRipple.$inject = [\"$mdInkRipple\"];;\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('material.core.theming.palette', [])\n\t.constant('$mdColorPalette', {\n\t  'red': {\n\t    '50': '#ffebee',\n\t    '100': '#ffcdd2',\n\t    '200': '#ef9a9a',\n\t    '300': '#e57373',\n\t    '400': '#ef5350',\n\t    '500': '#f44336',\n\t    '600': '#e53935',\n\t    '700': '#d32f2f',\n\t    '800': '#c62828',\n\t    '900': '#b71c1c',\n\t    'A100': '#ff8a80',\n\t    'A200': '#ff5252',\n\t    'A400': '#ff1744',\n\t    'A700': '#d50000',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 300 A100',\n\t    'contrastStrongLightColors': '400 500 600 700 A200 A400 A700'\n\t  },\n\t  'pink': {\n\t    '50': '#fce4ec',\n\t    '100': '#f8bbd0',\n\t    '200': '#f48fb1',\n\t    '300': '#f06292',\n\t    '400': '#ec407a',\n\t    '500': '#e91e63',\n\t    '600': '#d81b60',\n\t    '700': '#c2185b',\n\t    '800': '#ad1457',\n\t    '900': '#880e4f',\n\t    'A100': '#ff80ab',\n\t    'A200': '#ff4081',\n\t    'A400': '#f50057',\n\t    'A700': '#c51162',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 A100',\n\t    'contrastStrongLightColors': '500 600 A200 A400 A700'\n\t  },\n\t  'purple': {\n\t    '50': '#f3e5f5',\n\t    '100': '#e1bee7',\n\t    '200': '#ce93d8',\n\t    '300': '#ba68c8',\n\t    '400': '#ab47bc',\n\t    '500': '#9c27b0',\n\t    '600': '#8e24aa',\n\t    '700': '#7b1fa2',\n\t    '800': '#6a1b9a',\n\t    '900': '#4a148c',\n\t    'A100': '#ea80fc',\n\t    'A200': '#e040fb',\n\t    'A400': '#d500f9',\n\t    'A700': '#aa00ff',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 A100',\n\t    'contrastStrongLightColors': '300 400 A200 A400 A700'\n\t  },\n\t  'deep-purple': {\n\t    '50': '#ede7f6',\n\t    '100': '#d1c4e9',\n\t    '200': '#b39ddb',\n\t    '300': '#9575cd',\n\t    '400': '#7e57c2',\n\t    '500': '#673ab7',\n\t    '600': '#5e35b1',\n\t    '700': '#512da8',\n\t    '800': '#4527a0',\n\t    '900': '#311b92',\n\t    'A100': '#b388ff',\n\t    'A200': '#7c4dff',\n\t    'A400': '#651fff',\n\t    'A700': '#6200ea',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 A100',\n\t    'contrastStrongLightColors': '300 400 A200'\n\t  },\n\t  'indigo': {\n\t    '50': '#e8eaf6',\n\t    '100': '#c5cae9',\n\t    '200': '#9fa8da',\n\t    '300': '#7986cb',\n\t    '400': '#5c6bc0',\n\t    '500': '#3f51b5',\n\t    '600': '#3949ab',\n\t    '700': '#303f9f',\n\t    '800': '#283593',\n\t    '900': '#1a237e',\n\t    'A100': '#8c9eff',\n\t    'A200': '#536dfe',\n\t    'A400': '#3d5afe',\n\t    'A700': '#304ffe',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 A100',\n\t    'contrastStrongLightColors': '300 400 A200 A400'\n\t  },\n\t  'blue': {\n\t    '50': '#e3f2fd',\n\t    '100': '#bbdefb',\n\t    '200': '#90caf9',\n\t    '300': '#64b5f6',\n\t    '400': '#42a5f5',\n\t    '500': '#2196f3',\n\t    '600': '#1e88e5',\n\t    '700': '#1976d2',\n\t    '800': '#1565c0',\n\t    '900': '#0d47a1',\n\t    'A100': '#82b1ff',\n\t    'A200': '#448aff',\n\t    'A400': '#2979ff',\n\t    'A700': '#2962ff',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 300 400 A100',\n\t    'contrastStrongLightColors': '500 600 700 A200 A400 A700'\n\t  },\n\t  'light-blue': {\n\t    '50': '#e1f5fe',\n\t    '100': '#b3e5fc',\n\t    '200': '#81d4fa',\n\t    '300': '#4fc3f7',\n\t    '400': '#29b6f6',\n\t    '500': '#03a9f4',\n\t    '600': '#039be5',\n\t    '700': '#0288d1',\n\t    '800': '#0277bd',\n\t    '900': '#01579b',\n\t    'A100': '#80d8ff',\n\t    'A200': '#40c4ff',\n\t    'A400': '#00b0ff',\n\t    'A700': '#0091ea',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '600 700 800 900 A700',\n\t    'contrastStrongLightColors': '600 700 800 A700'\n\t  },\n\t  'cyan': {\n\t    '50': '#e0f7fa',\n\t    '100': '#b2ebf2',\n\t    '200': '#80deea',\n\t    '300': '#4dd0e1',\n\t    '400': '#26c6da',\n\t    '500': '#00bcd4',\n\t    '600': '#00acc1',\n\t    '700': '#0097a7',\n\t    '800': '#00838f',\n\t    '900': '#006064',\n\t    'A100': '#84ffff',\n\t    'A200': '#18ffff',\n\t    'A400': '#00e5ff',\n\t    'A700': '#00b8d4',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '700 800 900',\n\t    'contrastStrongLightColors': '700 800 900'\n\t  },\n\t  'teal': {\n\t    '50': '#e0f2f1',\n\t    '100': '#b2dfdb',\n\t    '200': '#80cbc4',\n\t    '300': '#4db6ac',\n\t    '400': '#26a69a',\n\t    '500': '#009688',\n\t    '600': '#00897b',\n\t    '700': '#00796b',\n\t    '800': '#00695c',\n\t    '900': '#004d40',\n\t    'A100': '#a7ffeb',\n\t    'A200': '#64ffda',\n\t    'A400': '#1de9b6',\n\t    'A700': '#00bfa5',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '500 600 700 800 900',\n\t    'contrastStrongLightColors': '500 600 700'\n\t  },\n\t  'green': {\n\t    '50': '#e8f5e9',\n\t    '100': '#c8e6c9',\n\t    '200': '#a5d6a7',\n\t    '300': '#81c784',\n\t    '400': '#66bb6a',\n\t    '500': '#4caf50',\n\t    '600': '#43a047',\n\t    '700': '#388e3c',\n\t    '800': '#2e7d32',\n\t    '900': '#1b5e20',\n\t    'A100': '#b9f6ca',\n\t    'A200': '#69f0ae',\n\t    'A400': '#00e676',\n\t    'A700': '#00c853',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '600 700 800 900',\n\t    'contrastStrongLightColors': '600 700'\n\t  },\n\t  'light-green': {\n\t    '50': '#f1f8e9',\n\t    '100': '#dcedc8',\n\t    '200': '#c5e1a5',\n\t    '300': '#aed581',\n\t    '400': '#9ccc65',\n\t    '500': '#8bc34a',\n\t    '600': '#7cb342',\n\t    '700': '#689f38',\n\t    '800': '#558b2f',\n\t    '900': '#33691e',\n\t    'A100': '#ccff90',\n\t    'A200': '#b2ff59',\n\t    'A400': '#76ff03',\n\t    'A700': '#64dd17',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '700 800 900',\n\t    'contrastStrongLightColors': '700 800 900'\n\t  },\n\t  'lime': {\n\t    '50': '#f9fbe7',\n\t    '100': '#f0f4c3',\n\t    '200': '#e6ee9c',\n\t    '300': '#dce775',\n\t    '400': '#d4e157',\n\t    '500': '#cddc39',\n\t    '600': '#c0ca33',\n\t    '700': '#afb42b',\n\t    '800': '#9e9d24',\n\t    '900': '#827717',\n\t    'A100': '#f4ff81',\n\t    'A200': '#eeff41',\n\t    'A400': '#c6ff00',\n\t    'A700': '#aeea00',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '900',\n\t    'contrastStrongLightColors': '900'\n\t  },\n\t  'yellow': {\n\t    '50': '#fffde7',\n\t    '100': '#fff9c4',\n\t    '200': '#fff59d',\n\t    '300': '#fff176',\n\t    '400': '#ffee58',\n\t    '500': '#ffeb3b',\n\t    '600': '#fdd835',\n\t    '700': '#fbc02d',\n\t    '800': '#f9a825',\n\t    '900': '#f57f17',\n\t    'A100': '#ffff8d',\n\t    'A200': '#ffff00',\n\t    'A400': '#ffea00',\n\t    'A700': '#ffd600',\n\t    'contrastDefaultColor': 'dark'\n\t  },\n\t  'amber': {\n\t    '50': '#fff8e1',\n\t    '100': '#ffecb3',\n\t    '200': '#ffe082',\n\t    '300': '#ffd54f',\n\t    '400': '#ffca28',\n\t    '500': '#ffc107',\n\t    '600': '#ffb300',\n\t    '700': '#ffa000',\n\t    '800': '#ff8f00',\n\t    '900': '#ff6f00',\n\t    'A100': '#ffe57f',\n\t    'A200': '#ffd740',\n\t    'A400': '#ffc400',\n\t    'A700': '#ffab00',\n\t    'contrastDefaultColor': 'dark'\n\t  },\n\t  'orange': {\n\t    '50': '#fff3e0',\n\t    '100': '#ffe0b2',\n\t    '200': '#ffcc80',\n\t    '300': '#ffb74d',\n\t    '400': '#ffa726',\n\t    '500': '#ff9800',\n\t    '600': '#fb8c00',\n\t    '700': '#f57c00',\n\t    '800': '#ef6c00',\n\t    '900': '#e65100',\n\t    'A100': '#ffd180',\n\t    'A200': '#ffab40',\n\t    'A400': '#ff9100',\n\t    'A700': '#ff6d00',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '800 900',\n\t    'contrastStrongLightColors': '800 900'\n\t  },\n\t  'deep-orange': {\n\t    '50': '#fbe9e7',\n\t    '100': '#ffccbc',\n\t    '200': '#ffab91',\n\t    '300': '#ff8a65',\n\t    '400': '#ff7043',\n\t    '500': '#ff5722',\n\t    '600': '#f4511e',\n\t    '700': '#e64a19',\n\t    '800': '#d84315',\n\t    '900': '#bf360c',\n\t    'A100': '#ff9e80',\n\t    'A200': '#ff6e40',\n\t    'A400': '#ff3d00',\n\t    'A700': '#dd2c00',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 300 400 A100 A200',\n\t    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'\n\t  },\n\t  'brown': {\n\t    '50': '#efebe9',\n\t    '100': '#d7ccc8',\n\t    '200': '#bcaaa4',\n\t    '300': '#a1887f',\n\t    '400': '#8d6e63',\n\t    '500': '#795548',\n\t    '600': '#6d4c41',\n\t    '700': '#5d4037',\n\t    '800': '#4e342e',\n\t    '900': '#3e2723',\n\t    'A100': '#d7ccc8',\n\t    'A200': '#bcaaa4',\n\t    'A400': '#8d6e63',\n\t    'A700': '#5d4037',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200',\n\t    'contrastStrongLightColors': '300 400'\n\t  },\n\t  'grey': {\n\t    '50': '#fafafa',\n\t    '100': '#f5f5f5',\n\t    '200': '#eeeeee',\n\t    '300': '#e0e0e0',\n\t    '400': '#bdbdbd',\n\t    '500': '#9e9e9e',\n\t    '600': '#757575',\n\t    '700': '#616161',\n\t    '800': '#424242',\n\t    '900': '#212121',\n\t    '1000': '#000000',\n\t    'A100': '#ffffff',\n\t    'A200': '#eeeeee',\n\t    'A400': '#bdbdbd',\n\t    'A700': '#616161',\n\t    'contrastDefaultColor': 'dark',\n\t    'contrastLightColors': '600 700 800 900'\n\t  },\n\t  'blue-grey': {\n\t    '50': '#eceff1',\n\t    '100': '#cfd8dc',\n\t    '200': '#b0bec5',\n\t    '300': '#90a4ae',\n\t    '400': '#78909c',\n\t    '500': '#607d8b',\n\t    '600': '#546e7a',\n\t    '700': '#455a64',\n\t    '800': '#37474f',\n\t    '900': '#263238',\n\t    'A100': '#cfd8dc',\n\t    'A200': '#b0bec5',\n\t    'A400': '#78909c',\n\t    'A700': '#455a64',\n\t    'contrastDefaultColor': 'light',\n\t    'contrastDarkColors': '50 100 200 300',\n\t    'contrastStrongLightColors': '400 500'\n\t  }\n\t});\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('material.core.theming', ['material.core.theming.palette'])\n\t  .directive('mdTheme', ThemingDirective)\n\t  .directive('mdThemable', ThemableDirective)\n\t  .provider('$mdTheming', ThemingProvider)\n\t  .run(generateThemes);\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $mdThemingProvider\n\t * @module material.core.theming\n\t *\n\t * @description Provider to configure the `$mdTheming` service.\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdThemingProvider#setDefaultTheme\n\t * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdThemingProvider#alwaysWatchTheme\n\t * @param {boolean} watch Whether or not to always watch themes for changes and re-apply\n\t * classes when they change. Default is `false`. Enabling can reduce performance.\n\t */\n\t\n\t/* Some Example Valid Theming Expressions\n\t * =======================================\n\t *\n\t * Intention group expansion: (valid for primary, accent, warn, background)\n\t *\n\t * {{primary-100}} - grab shade 100 from the primary palette\n\t * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7\n\t * {{primary-100-contrast}} - grab shade 100's contrast color\n\t * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette\n\t * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1\n\t * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue\n\t * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules\n\t * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue\n\t * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules\n\t *\n\t * Foreground expansion: Applies rgba to black/white foreground text\n\t *\n\t * {{foreground-1}} - used for primary text\n\t * {{foreground-2}} - used for secondary text/divider\n\t * {{foreground-3}} - used for disabled text\n\t * {{foreground-4}} - used for dividers\n\t *\n\t */\n\t\n\t// In memory generated CSS rules; registered by theme.name\n\tvar GENERATED = { };\n\t\n\t// In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)\n\tvar PALETTES;\n\tvar THEMES;\n\t\n\tvar DARK_FOREGROUND = {\n\t  name: 'dark',\n\t  '1': 'rgba(0,0,0,0.87)',\n\t  '2': 'rgba(0,0,0,0.54)',\n\t  '3': 'rgba(0,0,0,0.26)',\n\t  '4': 'rgba(0,0,0,0.12)'\n\t};\n\tvar LIGHT_FOREGROUND = {\n\t  name: 'light',\n\t  '1': 'rgba(255,255,255,1.0)',\n\t  '2': 'rgba(255,255,255,0.7)',\n\t  '3': 'rgba(255,255,255,0.3)',\n\t  '4': 'rgba(255,255,255,0.12)'\n\t};\n\t\n\tvar DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';\n\tvar LIGHT_SHADOW = '';\n\t\n\tvar DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');\n\tvar LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87');\n\tvar STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');\n\t\n\tvar THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];\n\tvar DEFAULT_COLOR_TYPE = 'primary';\n\t\n\t// A color in a theme will use these hues by default, if not specified by user.\n\tvar LIGHT_DEFAULT_HUES = {\n\t  'accent': {\n\t    'default': 'A200',\n\t    'hue-1': 'A100',\n\t    'hue-2': 'A400',\n\t    'hue-3': 'A700'\n\t  },\n\t  'background': {\n\t    'default': 'A100',\n\t    'hue-1': '300',\n\t    'hue-2': '800',\n\t    'hue-3': '900'\n\t  }\n\t};\n\t\n\tvar DARK_DEFAULT_HUES = {\n\t  'background': {\n\t    'default': '800',\n\t    'hue-1': '600',\n\t    'hue-2': '300',\n\t    'hue-3': '900'\n\t  }\n\t};\n\tTHEME_COLOR_TYPES.forEach(function(colorType) {\n\t  // Color types with unspecified default hues will use these default hue values\n\t  var defaultDefaultHues = {\n\t    'default': '500',\n\t    'hue-1': '300',\n\t    'hue-2': '800',\n\t    'hue-3': 'A100'\n\t  };\n\t  if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;\n\t  if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;\n\t});\n\t\n\tvar VALID_HUE_VALUES = [\n\t  '50', '100', '200', '300', '400', '500', '600',\n\t  '700', '800', '900', 'A100', 'A200', 'A400', 'A700'\n\t];\n\t\n\tfunction ThemingProvider($mdColorPalette) {\n\t  PALETTES = { };\n\t  THEMES = { };\n\t\n\t  var themingProvider;\n\t  var defaultTheme = 'default';\n\t  var alwaysWatchTheme = false;\n\t\n\t  // Load JS Defined Palettes\n\t  angular.extend(PALETTES, $mdColorPalette);\n\t\n\t  // Default theme defined in core.js\n\t\n\t  ThemingService.$inject = [\"$rootScope\", \"$log\"];\n\t  return themingProvider = {\n\t    definePalette: definePalette,\n\t    extendPalette: extendPalette,\n\t    theme: registerTheme,\n\t\n\t    setDefaultTheme: function(theme) {\n\t      defaultTheme = theme;\n\t    },\n\t    alwaysWatchTheme: function(alwaysWatch) {\n\t      alwaysWatchTheme = alwaysWatch;\n\t    },\n\t    $get: ThemingService,\n\t    _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,\n\t    _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,\n\t    _PALETTES: PALETTES,\n\t    _THEMES: THEMES,\n\t    _parseRules: parseRules,\n\t    _rgba: rgba\n\t  };\n\t\n\t  // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });\n\t  function definePalette(name, map) {\n\t    map = map || {};\n\t    PALETTES[name] = checkPaletteValid(name, map);\n\t    return themingProvider;\n\t  }\n\t\n\t  // Returns an new object which is a copy of a given palette `name` with variables from\n\t  // `map` overwritten\n\t  // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });\n\t  function extendPalette(name, map) {\n\t    return checkPaletteValid(name,  angular.extend({}, PALETTES[name] || {}, map) );\n\t  }\n\t\n\t  // Make sure that palette has all required hues\n\t  function checkPaletteValid(name, map) {\n\t    var missingColors = VALID_HUE_VALUES.filter(function(field) {\n\t      return !map[field];\n\t    });\n\t    if (missingColors.length) {\n\t      throw new Error(\"Missing colors %1 in palette %2!\"\n\t                      .replace('%1', missingColors.join(', '))\n\t                      .replace('%2', name));\n\t    }\n\t\n\t    return map;\n\t  }\n\t\n\t  // Register a theme (which is a collection of color palettes to use with various states\n\t  // ie. warn, accent, primary )\n\t  // Optionally inherit from an existing theme\n\t  // $mdThemingProvider.theme('custom-theme').primaryPalette('red');\n\t  function registerTheme(name, inheritFrom) {\n\t    if (THEMES[name]) return THEMES[name];\n\t\n\t    inheritFrom = inheritFrom || 'default';\n\t\n\t    var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;\n\t    var theme = new Theme(name);\n\t\n\t    if (parentTheme) {\n\t      angular.forEach(parentTheme.colors, function(color, colorType) {\n\t        theme.colors[colorType] = {\n\t          name: color.name,\n\t          // Make sure a COPY of the hues is given to the child color,\n\t          // not the same reference.\n\t          hues: angular.extend({}, color.hues)\n\t        };\n\t      });\n\t    }\n\t    THEMES[name] = theme;\n\t\n\t    return theme;\n\t  }\n\t\n\t  function Theme(name) {\n\t    var self = this;\n\t    self.name = name;\n\t    self.colors = {};\n\t\n\t    self.dark = setDark;\n\t    setDark(false);\n\t\n\t    function setDark(isDark) {\n\t      isDark = arguments.length === 0 ? true : !!isDark;\n\t\n\t      // If no change, abort\n\t      if (isDark === self.isDark) return;\n\t\n\t      self.isDark = isDark;\n\t\n\t      self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;\n\t      self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;\n\t\n\t      // Light and dark themes have different default hues.\n\t      // Go through each existing color type for this theme, and for every\n\t      // hue value that is still the default hue value from the previous light/dark setting,\n\t      // set it to the default hue value from the new light/dark setting.\n\t      var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;\n\t      var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;\n\t      angular.forEach(newDefaultHues, function(newDefaults, colorType) {\n\t        var color = self.colors[colorType];\n\t        var oldDefaults = oldDefaultHues[colorType];\n\t        if (color) {\n\t          for (var hueName in color.hues) {\n\t            if (color.hues[hueName] === oldDefaults[hueName]) {\n\t              color.hues[hueName] = newDefaults[hueName];\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      return self;\n\t    }\n\t\n\t    THEME_COLOR_TYPES.forEach(function(colorType) {\n\t      var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];\n\t      self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {\n\t        var color = self.colors[colorType] = {\n\t          name: paletteName,\n\t          hues: angular.extend({}, defaultHues, hues)\n\t        };\n\t\n\t        Object.keys(color.hues).forEach(function(name) {\n\t          if (!defaultHues[name]) {\n\t            throw new Error(\"Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4\"\n\t              .replace('%1', name)\n\t              .replace('%2', self.name)\n\t              .replace('%3', paletteName)\n\t              .replace('%4', Object.keys(defaultHues).join(', '))\n\t            );\n\t          }\n\t        });\n\t        Object.keys(color.hues).map(function(key) {\n\t          return color.hues[key];\n\t        }).forEach(function(hueValue) {\n\t          if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {\n\t            throw new Error(\"Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5\"\n\t              .replace('%1', hueValue)\n\t              .replace('%2', self.name)\n\t              .replace('%3', colorType)\n\t              .replace('%4', paletteName)\n\t              .replace('%5', VALID_HUE_VALUES.join(', '))\n\t            );\n\t          }\n\t        });\n\t        return self;\n\t      };\n\t\n\t      self[colorType + 'Color'] = function() {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +\n\t                     'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');\n\t        return self[colorType + 'Palette'].apply(self, args);\n\t      };\n\t    });\n\t  }\n\t\n\t  /**\n\t   * @ngdoc service\n\t   * @name $mdTheming\n\t   *\n\t   * @description\n\t   *\n\t   * Service that makes an element apply theming related classes to itself.\n\t   *\n\t   * ```js\n\t   * app.directive('myFancyDirective', function($mdTheming) {\n\t   *   return {\n\t   *     restrict: 'e',\n\t   *     link: function(scope, el, attrs) {\n\t   *       $mdTheming(el);\n\t   *     }\n\t   *   };\n\t   * });\n\t   * ```\n\t   * @param {el=} element to apply theming to\n\t   */\n\t  /* @ngInject */\n\t  function ThemingService($rootScope, $log) {\n\t\n\t    applyTheme.inherit = function(el, parent) {\n\t      var ctrl = parent.controller('mdTheme');\n\t\n\t      var attrThemeValue = el.attr('md-theme-watch');\n\t      if ( (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {\n\t        var deregisterWatch = $rootScope.$watch(function() {\n\t          return ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);\n\t        }, changeTheme);\n\t        el.on('$destroy', deregisterWatch);\n\t      } else {\n\t        var theme = ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);\n\t        changeTheme(theme);\n\t      }\n\t\n\t      function changeTheme(theme) {\n\t        if (!theme) return;\n\t        if (!registered(theme)) {\n\t          $log.warn('Attempted to use unregistered theme \\'' + theme + '\\'. ' +\n\t                    'Register it with $mdThemingProvider.theme().');\n\t        }\n\t        var oldTheme = el.data('$mdThemeName');\n\t        if (oldTheme) el.removeClass('md-' + oldTheme +'-theme');\n\t        el.addClass('md-' + theme + '-theme');\n\t        el.data('$mdThemeName', theme);\n\t        if (ctrl) {\n\t          el.data('$mdThemeController', ctrl);\n\t        }\n\t      }\n\t    };\n\t\n\t    applyTheme.THEMES = angular.extend({}, THEMES);\n\t    applyTheme.defaultTheme = function() { return defaultTheme; };\n\t    applyTheme.registered = registered;\n\t\n\t    return applyTheme;\n\t\n\t    function registered(themeName) {\n\t      if (themeName === undefined || themeName === '') return true;\n\t      return applyTheme.THEMES[themeName] !== undefined;\n\t    }\n\t\n\t    function applyTheme(scope, el) {\n\t      // Allow us to be invoked via a linking function signature.\n\t      if (el === undefined) {\n\t        el = scope;\n\t        scope = undefined;\n\t      }\n\t      if (scope === undefined) {\n\t        scope = $rootScope;\n\t      }\n\t      applyTheme.inherit(el, el);\n\t    }\n\t  }\n\t}\n\tThemingProvider.$inject = [\"$mdColorPalette\"];\n\t\n\tfunction ThemingDirective($mdTheming, $interpolate, $log) {\n\t  return {\n\t    priority: 100,\n\t    link: {\n\t      pre: function(scope, el, attrs) {\n\t        var ctrl = {\n\t          $setTheme: function(theme) {\n\t            if (!$mdTheming.registered(theme)) {\n\t              $log.warn('attempted to use unregistered theme \\'' + theme + '\\'');\n\t            }\n\t            ctrl.$mdTheme = theme;\n\t          }\n\t        };\n\t        el.data('$mdThemeController', ctrl);\n\t        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));\n\t        attrs.$observe('mdTheme', ctrl.$setTheme);\n\t      }\n\t    }\n\t  };\n\t}\n\tThemingDirective.$inject = [\"$mdTheming\", \"$interpolate\", \"$log\"];\n\t\n\tfunction ThemableDirective($mdTheming) {\n\t  return $mdTheming;\n\t}\n\tThemableDirective.$inject = [\"$mdTheming\"];\n\t\n\tfunction parseRules(theme, colorType, rules) {\n\t  checkValidPalette(theme, colorType);\n\t\n\t  rules = rules.replace(/THEME_NAME/g, theme.name);\n\t  var generatedRules = [];\n\t  var color = theme.colors[colorType];\n\t\n\t  var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');\n\t  // Matches '{{ primary-color }}', etc\n\t  var hueRegex = new RegExp('(\\'|\")?{{\\\\s*(' + colorType + ')-(color|contrast)-?(\\\\d\\\\.?\\\\d*)?\\\\s*}}(\\\"|\\')?','g');\n\t  var simpleVariableRegex = /'?\"?\\{\\{\\s*([a-zA-Z]+)-(A?\\d+|hue\\-[0-3]|shadow)-?(\\d\\.?\\d*)?(contrast)?\\s*\\}\\}'?\"?/g;\n\t  var palette = PALETTES[color.name];\n\t\n\t  // find and replace simple variables where we use a specific hue, not an entire palette\n\t  // eg. \"{{primary-100}}\"\n\t  //\\(' + THEME_COLOR_TYPES.join('\\|') + '\\)'\n\t  rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity, contrast) {\n\t    if (colorType === 'foreground') {\n\t      if (hue == 'shadow') {\n\t        return theme.foregroundShadow;\n\t      } else {\n\t        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];\n\t      }\n\t    }\n\t    if (hue.indexOf('hue') === 0) {\n\t      hue = theme.colors[colorType].hues[hue];\n\t    }\n\t    return rgba( (PALETTES[ theme.colors[colorType].name ][hue] || '')[contrast ? 'contrast' : 'value'], opacity );\n\t  });\n\t\n\t  // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)\n\t  angular.forEach(color.hues, function(hueValue, hueName) {\n\t    var newRule = rules\n\t      .replace(hueRegex, function(match, _, colorType, hueType, opacity) {\n\t        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);\n\t      });\n\t    if (hueName !== 'default') {\n\t      newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);\n\t    }\n\t\n\t    // Don't apply a selector rule to the default theme, making it easier to override\n\t    // styles of the base-component\n\t    if (theme.name == 'default') {\n\t      newRule = newRule.replace(/((\\w|\\.|-)+)\\.md-default-theme((\\.|\\w|-|:|\\(|\\)|\\[|\\]|\"|'|=)*)/g, '$&, $1$3');\n\t    }\n\t    generatedRules.push(newRule);\n\t  });\n\t\n\t  return generatedRules;\n\t}\n\t\n\t// Generate our themes at run time given the state of THEMES and PALETTES\n\tfunction generateThemes($injector) {\n\t\n\t  var head = document.getElementsByTagName('head')[0];\n\t  var firstChild = head ? head.firstElementChild : null;\n\t  var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';\n\t\n\t  if ( !firstChild ) return;\n\t  if (themeCss.length === 0) return; // no rules, so no point in running this expensive task\n\t\n\t  // Expose contrast colors for palettes to ensure that text is always readable\n\t  angular.forEach(PALETTES, sanitizePalette);\n\t\n\t  // MD_THEME_CSS is a string generated by the build process that includes all the themable\n\t  // components as templates\n\t\n\t  // Break the CSS into individual rules\n\t  var rulesByType = {};\n\t  var rules = themeCss\n\t                  .split(/\\}(?!(\\}|'|\"|;))/)\n\t                  .filter(function(rule) { return rule && rule.length; })\n\t                  .map(function(rule) { return rule.trim() + '}'; });\n\t\n\t\n\t  var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');\n\t\n\t  THEME_COLOR_TYPES.forEach(function(type) {\n\t    rulesByType[type] = '';\n\t  });\n\t\n\t\n\t  // Sort the rules based on type, allowing us to do color substitution on a per-type basis\n\t  rules.forEach(function(rule) {\n\t    var match = rule.match(ruleMatchRegex);\n\t    // First: test that if the rule has '.md-accent', it goes into the accent set of rules\n\t    for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {\n\t      if (rule.indexOf('.md-' + type) > -1) {\n\t        return rulesByType[type] += rule;\n\t      }\n\t    }\n\t\n\t    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from\n\t    // there\n\t    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {\n\t      if (rule.indexOf(type) > -1) {\n\t        return rulesByType[type] += rule;\n\t      }\n\t    }\n\t\n\t    // Default to the primary array\n\t    return rulesByType[DEFAULT_COLOR_TYPE] += rule;\n\t  });\n\t\n\t    // For each theme, use the color palettes specified for\n\t    // `primary`, `warn` and `accent` to generate CSS rules.\n\t\n\t    angular.forEach(THEMES, function(theme) {\n\t      if ( !GENERATED[theme.name] ) {\n\t\n\t\n\t        THEME_COLOR_TYPES.forEach(function(colorType) {\n\t          var styleStrings = parseRules(theme, colorType, rulesByType[colorType]);\n\t          while (styleStrings.length) {\n\t            var style = document.createElement('style');\n\t                style.setAttribute('type', 'text/css');\n\t            style.appendChild(document.createTextNode(styleStrings.shift()));\n\t            head.insertBefore(style, firstChild);\n\t          }\n\t        });\n\t\n\t\n\t        if (theme.colors.primary.name == theme.colors.accent.name) {\n\t          console.warn(\"$mdThemingProvider: Using the same palette for primary and\" +\n\t                       \" accent. This violates the material design spec.\");\n\t        }\n\t\n\t        GENERATED[theme.name] = true;\n\t      }\n\t    });\n\t\n\t\n\t  // *************************\n\t  // Internal functions\n\t  // *************************\n\t\n\t  // The user specifies a 'default' contrast color as either light or dark,\n\t  // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)\n\t  function sanitizePalette(palette) {\n\t    var defaultContrast = palette.contrastDefaultColor;\n\t    var lightColors = palette.contrastLightColors || [];\n\t    var strongLightColors = palette.contrastStrongLightColors || [];\n\t    var darkColors = palette.contrastDarkColors || [];\n\t\n\t    // These colors are provided as space-separated lists\n\t    if (typeof lightColors === 'string') lightColors = lightColors.split(' ');\n\t    if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');\n\t    if (typeof darkColors === 'string') darkColors = darkColors.split(' ');\n\t\n\t    // Cleanup after ourselves\n\t    delete palette.contrastDefaultColor;\n\t    delete palette.contrastLightColors;\n\t    delete palette.contrastStrongLightColors;\n\t    delete palette.contrastDarkColors;\n\t\n\t    // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }\n\t    angular.forEach(palette, function(hueValue, hueName) {\n\t      if (angular.isObject(hueValue)) return; // Already converted\n\t      // Map everything to rgb colors\n\t      var rgbValue = colorToRgbaArray(hueValue);\n\t      if (!rgbValue) {\n\t        throw new Error(\"Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.\"\n\t                        .replace('%1', hueValue)\n\t                        .replace('%2', palette.name)\n\t                        .replace('%3', hueName));\n\t      }\n\t\n\t      palette[hueName] = {\n\t        value: rgbValue,\n\t        contrast: getContrastColor()\n\t      };\n\t      function getContrastColor() {\n\t        if (defaultContrast === 'light') {\n\t          if (darkColors.indexOf(hueName) > -1) {\n\t            return DARK_CONTRAST_COLOR;\n\t          } else {\n\t            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR\n\t              : LIGHT_CONTRAST_COLOR;\n\t          }\n\t        } else {\n\t          if (lightColors.indexOf(hueName) > -1) {\n\t            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR\n\t              : LIGHT_CONTRAST_COLOR;\n\t          } else {\n\t            return DARK_CONTRAST_COLOR;\n\t          }\n\t        }\n\t      }\n\t    });\n\t  }\n\t\n\t\n\t}\n\tgenerateThemes.$inject = [\"$injector\"];\n\t\n\tfunction checkValidPalette(theme, colorType) {\n\t  // If theme attempts to use a palette that doesnt exist, throw error\n\t  if (!PALETTES[ (theme.colors[colorType] || {}).name ]) {\n\t    throw new Error(\n\t      \"You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3\"\n\t                    .replace('%1', theme.name)\n\t                    .replace('%2', colorType)\n\t                    .replace('%3', Object.keys(PALETTES).join(', '))\n\t    );\n\t  }\n\t}\n\t\n\tfunction colorToRgbaArray(clr) {\n\t  if (angular.isArray(clr) && clr.length == 3) return clr;\n\t  if (/^rgb/.test(clr)) {\n\t    return clr.replace(/(^\\s*rgba?\\(|\\)\\s*$)/g, '').split(',').map(function(value, i) {\n\t      return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);\n\t    });\n\t  }\n\t  if (clr.charAt(0) == '#') clr = clr.substring(1);\n\t  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;\n\t\n\t  var dig = clr.length / 3;\n\t  var red = clr.substr(0, dig);\n\t  var grn = clr.substr(dig, dig);\n\t  var blu = clr.substr(dig * 2);\n\t  if (dig === 1) {\n\t    red += red;\n\t    grn += grn;\n\t    blu += blu;\n\t  }\n\t  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];\n\t}\n\t\n\tfunction rgba(rgbArray, opacity) {\n\t  if ( !rgbArray ) return \"rgb('0,0,0')\";\n\t\n\t  if (rgbArray.length == 4) {\n\t    rgbArray = angular.copy(rgbArray);\n\t    opacity ? rgbArray.pop() : opacity = rgbArray.pop();\n\t  }\n\t  return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?\n\t    'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :\n\t    'rgb(' + rgbArray.join(',') + ')';\n\t}\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t// Polyfill angular < 1.4 (provide $animateCss)\n\tangular\n\t  .module('material.core')\n\t  .factory('$$mdAnimate', [\"$q\", \"$timeout\", \"$mdConstant\", \"$animateCss\", function($q, $timeout, $mdConstant, $animateCss){\n\t\n\t     // Since $$mdAnimate is injected into $mdUtil... use a wrapper function\n\t     // to subsequently inject $mdUtil as an argument to the AnimateDomUtils\n\t\n\t     return function($mdUtil) {\n\t       return AnimateDomUtils( $mdUtil, $q, $timeout, $mdConstant, $animateCss);\n\t     };\n\t   }]);\n\t\n\t/**\n\t * Factory function that requires special injections\n\t */\n\tfunction AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss) {\n\t  var self;\n\t  return self = {\n\t    /**\n\t     *\n\t     */\n\t    translate3d : function( target, from, to, options ) {\n\t      return $animateCss(target,{\n\t        from:from,\n\t        to:to,\n\t        addClass:options.transitionInClass\n\t      })\n\t      .start()\n\t      .then(function(){\n\t          // Resolve with reverser function...\n\t          return reverseTranslate;\n\t      });\n\t\n\t      /**\n\t       * Specific reversal of the request translate animation above...\n\t       */\n\t      function reverseTranslate (newFrom) {\n\t        return $animateCss(target, {\n\t           to: newFrom || from,\n\t           addClass: options.transitionOutClass,\n\t           removeClass: options.transitionInClass\n\t        }).start();\n\t\n\t      }\n\t  },\n\t\n\t    /**\n\t     * Listen for transitionEnd event (with optional timeout)\n\t     * Announce completion or failure via promise handlers\n\t     */\n\t    waitTransitionEnd: function (element, opts) {\n\t        var TIMEOUT = 3000; // fallback is 3 secs\n\t\n\t        return $q(function(resolve, reject){\n\t          opts = opts || { };\n\t\n\t          var timer = $timeout(finished, opts.timeout || TIMEOUT);\n\t          element.on($mdConstant.CSS.TRANSITIONEND, finished);\n\t\n\t          /**\n\t           * Upon timeout or transitionEnd, reject or resolve (respectively) this promise.\n\t           * NOTE: Make sure this transitionEnd didn't bubble up from a child\n\t           */\n\t          function finished(ev) {\n\t            if ( ev && ev.target !== element[0]) return;\n\t\n\t            if ( ev  ) $timeout.cancel(timer);\n\t            element.off($mdConstant.CSS.TRANSITIONEND, finished);\n\t\n\t            // Never reject since ngAnimate may cause timeouts due missed transitionEnd events\n\t            resolve();\n\t\n\t          }\n\t\n\t        });\n\t      },\n\t\n\t    /**\n\t     * Calculate the zoom transform from dialog to origin.\n\t     *\n\t     * We use this to set the dialog position immediately;\n\t     * then the md-transition-in actually translates back to\n\t     * `translate3d(0,0,0) scale(1.0)`...\n\t     *\n\t     * NOTE: all values are rounded to the nearest integer\n\t     */\n\t    calculateZoomToOrigin: function (element, originator) {\n\t      var origin = originator.element;\n\t      var zoomTemplate = \"translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )\";\n\t      var buildZoom = angular.bind(null, $mdUtil.supplant, zoomTemplate);\n\t      var zoomStyle = buildZoom({centerX: 0, centerY: 0, scaleX: 0.5, scaleY: 0.5});\n\t\n\t      if (origin) {\n\t        var originBnds = self.clientRect(origin) || self.copyRect(originator.bounds);\n\t        var dialogRect = self.copyRect(element[0].getBoundingClientRect());\n\t        var dialogCenterPt = self.centerPointFor(dialogRect);\n\t        var originCenterPt = self.centerPointFor(originBnds);\n\t\n\t        // Build the transform to zoom from the dialog center to the origin center\n\t\n\t        zoomStyle = buildZoom({\n\t          centerX: originCenterPt.x - dialogCenterPt.x,\n\t          centerY: originCenterPt.y - dialogCenterPt.y,\n\t          scaleX: Math.round(100 * Math.min(0.5, originBnds.width / dialogRect.width))/100,\n\t          scaleY: Math.round(100 * Math.min(0.5, originBnds.height / dialogRect.height))/100\n\t        });\n\t      }\n\t\n\t      return zoomStyle;\n\t    },\n\t\n\t    /**\n\t     * Enhance raw values to represent valid css stylings...\n\t     */\n\t    toCss : function( raw ) {\n\t      var css = { };\n\t      var lookups = 'left top right bottom width height x y min-width min-height max-width max-height';\n\t\n\t      angular.forEach(raw, function(value,key) {\n\t        if ( angular.isUndefined(value) ) return;\n\t\n\t        if ( lookups.indexOf(key) >= 0 ) {\n\t          css[key] = value + 'px';\n\t        } else {\n\t          switch (key) {\n\t            case 'transition':\n\t              convertToVendor(key, $mdConstant.CSS.TRANSITION, value);\n\t              break;\n\t            case 'transform':\n\t              convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);\n\t              break;\n\t            case 'transformOrigin':\n\t              convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);\n\t              break;\n\t          }\n\t        }\n\t      });\n\t\n\t      return css;\n\t\n\t      function convertToVendor(key, vendor, value) {\n\t        angular.forEach(vendor.split(' '), function (key) {\n\t          css[key] = value;\n\t        });\n\t      }\n\t    },\n\t\n\t    /**\n\t     * Convert the translate CSS value to key/value pair(s).\n\t     */\n\t    toTransformCss: function (transform, addTransition, transition) {\n\t      var css = {};\n\t      angular.forEach($mdConstant.CSS.TRANSFORM.split(' '), function (key) {\n\t        css[key] = transform;\n\t      });\n\t\n\t      if (addTransition) {\n\t        transition = transition || \"all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important\";\n\t        css['transition'] = transition;\n\t      }\n\t\n\t      return css;\n\t    },\n\t\n\t    /**\n\t     *  Clone the Rect and calculate the height/width if needed\n\t     */\n\t    copyRect: function (source, destination) {\n\t      if (!source) return null;\n\t\n\t      destination = destination || {};\n\t\n\t      angular.forEach('left top right bottom width height'.split(' '), function (key) {\n\t        destination[key] = Math.round(source[key])\n\t      });\n\t\n\t      destination.width = destination.width || (destination.right - destination.left);\n\t      destination.height = destination.height || (destination.bottom - destination.top);\n\t\n\t      return destination;\n\t    },\n\t\n\t    /**\n\t     * Calculate ClientRect of element; return null if hidden or zero size\n\t     */\n\t    clientRect: function (element) {\n\t      var bounds = angular.element(element)[0].getBoundingClientRect();\n\t      var isPositiveSizeClientRect = function (rect) {\n\t        return rect && (rect.width > 0) && (rect.height > 0);\n\t      };\n\t\n\t      // If the event origin element has zero size, it has probably been hidden.\n\t      return isPositiveSizeClientRect(bounds) ? self.copyRect(bounds) : null;\n\t    },\n\t\n\t    /**\n\t     *  Calculate 'rounded' center point of Rect\n\t     */\n\t    centerPointFor: function (targetRect) {\n\t      return {\n\t        x: Math.round(targetRect.left + (targetRect.width / 2)),\n\t        y: Math.round(targetRect.top + (targetRect.height / 2))\n\t      }\n\t    }\n\t\n\t  };\n\t};\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t\"use strict\";\n\t\n\tif (angular.version.minor >= 4) {\n\t  angular.module('material.core.animate', []);\n\t} else {\n\t(function() {\n\t\n\t  var forEach = angular.forEach;\n\t\n\t  var WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance);\n\t  var TRANSITION_PROP = WEBKIT ? 'WebkitTransition' : 'transition';\n\t  var ANIMATION_PROP = WEBKIT ? 'WebkitAnimation' : 'animation';\n\t  var PREFIX = WEBKIT ? '-webkit-' : '';\n\t\n\t  var TRANSITION_EVENTS = (WEBKIT ? 'webkitTransitionEnd ' : '') + 'transitionend';\n\t  var ANIMATION_EVENTS = (WEBKIT ? 'webkitAnimationEnd ' : '') + 'animationend';\n\t\n\t  var $$ForceReflowFactory = ['$document', function($document) {\n\t    return function() {\n\t      return $document[0].body.clientWidth + 1;\n\t    }\n\t  }];\n\t\n\t  var $$rAFMutexFactory = ['$$rAF', function($$rAF) {\n\t    return function() {\n\t      var passed = false;\n\t      $$rAF(function() {\n\t        passed = true;\n\t      });\n\t      return function(fn) {\n\t        passed ? fn() : $$rAF(fn);\n\t      };\n\t    };\n\t  }];\n\t\n\t  var $$AnimateRunnerFactory = ['$q', '$$rAFMutex', function($q, $$rAFMutex) {\n\t    var INITIAL_STATE = 0;\n\t    var DONE_PENDING_STATE = 1;\n\t    var DONE_COMPLETE_STATE = 2;\n\t\n\t    function AnimateRunner(host) {\n\t      this.setHost(host);\n\t\n\t      this._doneCallbacks = [];\n\t      this._runInAnimationFrame = $$rAFMutex();\n\t      this._state = 0;\n\t    }\n\t\n\t    AnimateRunner.prototype = {\n\t      setHost: function(host) {\n\t        this.host = host || {};\n\t      },\n\t\n\t      done: function(fn) {\n\t        if (this._state === DONE_COMPLETE_STATE) {\n\t          fn();\n\t        } else {\n\t          this._doneCallbacks.push(fn);\n\t        }\n\t      },\n\t\n\t      progress: angular.noop,\n\t\n\t      getPromise: function() {\n\t        if (!this.promise) {\n\t          var self = this;\n\t          this.promise = $q(function(resolve, reject) {\n\t            self.done(function(status) {\n\t              status === false ? reject() : resolve();\n\t            });\n\t          });\n\t        }\n\t        return this.promise;\n\t      },\n\t\n\t      then: function(resolveHandler, rejectHandler) {\n\t        return this.getPromise().then(resolveHandler, rejectHandler);\n\t      },\n\t\n\t      'catch': function(handler) {\n\t        return this.getPromise()['catch'](handler);\n\t      },\n\t\n\t      'finally': function(handler) {\n\t        return this.getPromise()['finally'](handler);\n\t      },\n\t\n\t      pause: function() {\n\t        if (this.host.pause) {\n\t          this.host.pause();\n\t        }\n\t      },\n\t\n\t      resume: function() {\n\t        if (this.host.resume) {\n\t          this.host.resume();\n\t        }\n\t      },\n\t\n\t      end: function() {\n\t        if (this.host.end) {\n\t          this.host.end();\n\t        }\n\t        this._resolve(true);\n\t      },\n\t\n\t      cancel: function() {\n\t        if (this.host.cancel) {\n\t          this.host.cancel();\n\t        }\n\t        this._resolve(false);\n\t      },\n\t\n\t      complete: function(response) {\n\t        var self = this;\n\t        if (self._state === INITIAL_STATE) {\n\t          self._state = DONE_PENDING_STATE;\n\t          self._runInAnimationFrame(function() {\n\t            self._resolve(response);\n\t          });\n\t        }\n\t      },\n\t\n\t      _resolve: function(response) {\n\t        if (this._state !== DONE_COMPLETE_STATE) {\n\t          forEach(this._doneCallbacks, function(fn) {\n\t            fn(response);\n\t          });\n\t          this._doneCallbacks.length = 0;\n\t          this._state = DONE_COMPLETE_STATE;\n\t        }\n\t      }\n\t    };\n\t\n\t    return AnimateRunner;\n\t  }];\n\t\n\t  angular\n\t    .module('material.core.animate', [])\n\t    .factory('$$forceReflow', $$ForceReflowFactory)\n\t    .factory('$$AnimateRunner', $$AnimateRunnerFactory)\n\t    .factory('$$rAFMutex', $$rAFMutexFactory)\n\t    .factory('$animateCss', ['$window', '$$rAF', '$$AnimateRunner', '$$forceReflow', '$$jqLite', '$timeout',\n\t                     function($window,   $$rAF,   $$AnimateRunner,   $$forceReflow,   $$jqLite,   $timeout) {\n\t\n\t      function init(element, options) {\n\t\n\t        var temporaryStyles = [];\n\t        var node = getDomNode(element);\n\t\n\t        if (options.transitionStyle) {\n\t          temporaryStyles.push([PREFIX + 'transition', options.transitionStyle]);\n\t        }\n\t\n\t        if (options.keyframeStyle) {\n\t          temporaryStyles.push([PREFIX + 'animation', options.keyframeStyle]);\n\t        }\n\t\n\t        if (options.delay) {\n\t          temporaryStyles.push([PREFIX + 'transition-delay', options.delay + 's']);\n\t        }\n\t\n\t        if (options.duration) {\n\t          temporaryStyles.push([PREFIX + 'transition-duration', options.duration + 's']);\n\t        }\n\t\n\t        var hasCompleteStyles = options.keyframeStyle ||\n\t                                (options.to && (options.duration > 0 || options.transitionStyle));\n\t        var hasCompleteClasses = !!options.addClass || !!options.removeClass;\n\t        var hasCompleteAnimation = hasCompleteStyles || hasCompleteClasses;\n\t\n\t        blockTransition(element, true);\n\t        applyAnimationFromStyles(element, options);\n\t\n\t        var animationClosed = false;\n\t        var events, eventFn;\n\t\n\t        return {\n\t          close: $window.close,\n\t          start: function() {\n\t            var runner = new $$AnimateRunner();\n\t            waitUntilQuiet(function() {\n\t              blockTransition(element, false);\n\t              if (!hasCompleteAnimation) {\n\t                return close();\n\t              }\n\t\n\t              forEach(temporaryStyles, function(entry) {\n\t                var key = entry[0];\n\t                var value = entry[1];\n\t                node.style[camelCase(key)] = value;\n\t              });\n\t\n\t              applyClasses(element, options);\n\t\n\t              var timings = computeTimings(element);\n\t              if (timings.duration === 0) {\n\t                return close();\n\t              }\n\t\n\t              var moreStyles = [];\n\t\n\t              if (options.easing) {\n\t                if (timings.transitionDuration) {\n\t                  moreStyles.push([PREFIX + 'transition-timing-function', options.easing]);\n\t                }\n\t                if (timings.animationDuration) {\n\t                  moreStyles.push([PREFIX + 'animation-timing-function', options.easing]);\n\t                }\n\t              }\n\t\n\t              if (options.delay && timings.animationDelay) {\n\t                moreStyles.push([PREFIX + 'animation-delay', options.delay + 's']);\n\t              }\n\t\n\t              if (options.duration && timings.animationDuration) {\n\t                moreStyles.push([PREFIX + 'animation-duration', options.duration + 's']);\n\t              }\n\t\n\t              forEach(moreStyles, function(entry) {\n\t                var key = entry[0];\n\t                var value = entry[1];\n\t                node.style[camelCase(key)] = value;\n\t                temporaryStyles.push(entry);\n\t              });\n\t\n\t              var maxDelay = timings.delay;\n\t              var maxDelayTime = maxDelay * 1000;\n\t              var maxDuration = timings.duration;\n\t              var maxDurationTime = maxDuration * 1000;\n\t              var startTime = Date.now();\n\t\n\t              events = [];\n\t              if (timings.transitionDuration) {\n\t                events.push(TRANSITION_EVENTS);\n\t              }\n\t              if (timings.animationDuration) {\n\t                events.push(ANIMATION_EVENTS);\n\t              }\n\t              events = events.join(' ');\n\t              eventFn = function(event) {\n\t                event.stopPropagation();\n\t                var ev = event.originalEvent || event;\n\t                var timeStamp = ev.timeStamp || Date.now();\n\t                var elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));\n\t                if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n\t                  close();\n\t                }\n\t              };\n\t              element.on(events, eventFn);\n\t\n\t              applyAnimationToStyles(element, options);\n\t\n\t              $timeout(close, maxDelayTime + maxDurationTime * 1.5, false);\n\t            });\n\t\n\t            return runner;\n\t\n\t            function close() {\n\t              if (animationClosed) return;\n\t              animationClosed = true;\n\t\n\t              if (events && eventFn) {\n\t                element.off(events, eventFn);\n\t              }\n\t              applyClasses(element, options);\n\t              applyAnimationStyles(element, options);\n\t              forEach(temporaryStyles, function(entry) {\n\t                node.style[camelCase(entry[0])] = '';\n\t              });\n\t              runner.complete(true);\n\t              return runner;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      function applyClasses(element, options) {\n\t        if (options.addClass) {\n\t          $$jqLite.addClass(element, options.addClass);\n\t          options.addClass = null;\n\t        }\n\t        if (options.removeClass) {\n\t          $$jqLite.removeClass(element, options.removeClass);\n\t          options.removeClass = null;\n\t        }\n\t      }\n\t\n\t      function computeTimings(element) {\n\t        var node = getDomNode(element);\n\t        var cs = $window.getComputedStyle(node)\n\t        var tdr = parseMaxTime(cs[prop('transitionDuration')]);\n\t        var adr = parseMaxTime(cs[prop('animationDuration')]);\n\t        var tdy = parseMaxTime(cs[prop('transitionDelay')]);\n\t        var ady = parseMaxTime(cs[prop('animationDelay')]);\n\t\n\t        adr *= (parseInt(cs[prop('animationIterationCount')], 10) || 1);\n\t        var duration = Math.max(adr, tdr);\n\t        var delay = Math.max(ady, tdy);\n\t\n\t        return {\n\t          duration: duration,\n\t          delay: delay,\n\t          animationDuration: adr,\n\t          transitionDuration: tdr,\n\t          animationDelay: ady,\n\t          transitionDelay: tdy\n\t        };\n\t\n\t        function prop(key) {\n\t          return WEBKIT ? 'Webkit' + key.charAt(0).toUpperCase() + key.substr(1)\n\t                        : key;\n\t        }\n\t      }\n\t\n\t      function parseMaxTime(str) {\n\t        var maxValue = 0;\n\t        var values = (str || \"\").split(/\\s*,\\s*/);\n\t        forEach(values, function(value) {\n\t          // it's always safe to consider only second values and omit `ms` values since\n\t          // getComputedStyle will always handle the conversion for us\n\t          if (value.charAt(value.length - 1) == 's') {\n\t            value = value.substring(0, value.length - 1);\n\t          }\n\t          value = parseFloat(value) || 0;\n\t          maxValue = maxValue ? Math.max(value, maxValue) : value;\n\t        });\n\t        return maxValue;\n\t      }\n\t\n\t      var cancelLastRAFRequest;\n\t      var rafWaitQueue = [];\n\t      function waitUntilQuiet(callback) {\n\t        if (cancelLastRAFRequest) {\n\t          cancelLastRAFRequest(); //cancels the request\n\t        }\n\t        rafWaitQueue.push(callback);\n\t        cancelLastRAFRequest = $$rAF(function() {\n\t          cancelLastRAFRequest = null;\n\t\n\t          // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n\t          // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n\t          var pageWidth = $$forceReflow();\n\t\n\t          // we use a for loop to ensure that if the queue is changed\n\t          // during this looping then it will consider new requests\n\t          for (var i = 0; i < rafWaitQueue.length; i++) {\n\t            rafWaitQueue[i](pageWidth);\n\t          }\n\t          rafWaitQueue.length = 0;\n\t        });\n\t      }\n\t\n\t      function applyAnimationStyles(element, options) {\n\t        applyAnimationFromStyles(element, options);\n\t        applyAnimationToStyles(element, options);\n\t      }\n\t\n\t      function applyAnimationFromStyles(element, options) {\n\t        if (options.from) {\n\t          element.css(options.from);\n\t          options.from = null;\n\t        }\n\t      }\n\t\n\t      function applyAnimationToStyles(element, options) {\n\t        if (options.to) {\n\t          element.css(options.to);\n\t          options.to = null;\n\t        }\n\t      }\n\t\n\t      function getDomNode(element) {\n\t        for (var i = 0; i < element.length; i++) {\n\t          if (element[i].nodeType === 1) return element[i];\n\t        }\n\t      }\n\t\n\t      function blockTransition(element, bool) {\n\t        var node = getDomNode(element);\n\t        var key = camelCase(PREFIX + 'transition-delay');\n\t        node.style[key] = bool ? '-9999s' : '';\n\t      }\n\t\n\t      return init;\n\t    }]);\n\t\n\t  /**\n\t   * Older browsers [FF31] expect camelCase\n\t   * property keys.\n\t   * e.g.\n\t   *  animation-duration --> animationDuration\n\t   */\n\t  function camelCase(str) {\n\t    return str.replace(/-[a-z]/g, function(str) {\n\t      return str.charAt(1).toUpperCase();\n\t    });\n\t  }\n\t\n\t})();\n\t\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.autocomplete\n\t */\n\t/*\n\t * @see js folder for autocomplete implementation\n\t */\n\tangular.module('material.components.autocomplete', [\n\t  'material.core',\n\t  'material.components.icon',\n\t  'material.components.virtualRepeat'\n\t]);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/*\n\t * @ngdoc module\n\t * @name material.components.backdrop\n\t * @description Backdrop\n\t */\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdBackdrop\n\t * @module material.components.backdrop\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.\n\t * Apply class `opaque` to make the backdrop use the theme backdrop color.\n\t *\n\t */\n\t\n\tangular\n\t  .module('material.components.backdrop', ['material.core'])\n\t  .directive('mdBackdrop', [\"$mdTheming\", \"$animate\", \"$rootElement\", \"$window\", \"$log\", \"$$rAF\", \"$document\", function BackdropDirective($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {\n\t    var ERROR_CSS_POSITION = \"<md-backdrop> may not work properly in a scrolled, static-positioned parent container.\";\n\t\n\t    return {\n\t      restrict: 'E',\n\t      link: postLink\n\t    };\n\t\n\t    function postLink(scope, element, attrs) {\n\t\n\t      // If body scrolling has been disabled using mdUtil.disableBodyScroll(),\n\t      // adjust the 'backdrop' height to account for the fixed 'body' top offset\n\t      var body = $window.getComputedStyle($document[0].body);\n\t      if (body.position == 'fixed') {\n\t        var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));\n\t        element.css({\n\t          height: hViewport + 'px'\n\t        });\n\t      }\n\t\n\t      // backdrop may be outside the $rootElement, tell ngAnimate to animate regardless\n\t      if ($animate.pin) $animate.pin(element, $rootElement);\n\t\n\t      $$rAF(function () {\n\t\n\t        // Often $animate.enter() is used to append the backDrop element\n\t        // so let's wait until $animate is done...\n\t        var parent = element.parent()[0];\n\t        if (parent) {\n\t          var styles = $window.getComputedStyle(parent);\n\t          if (styles.position == 'static') {\n\t            // backdrop uses position:absolute and will not work properly with parent position:static (default)\n\t            $log.warn(ERROR_CSS_POSITION);\n\t          }\n\t        }\n\t\n\t        $mdTheming.inherit(element, element.parent());\n\t      });\n\t\n\t    }\n\t\n\t  }]);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.bottomSheet\n\t * @description\n\t * BottomSheet\n\t */\n\tangular\n\t  .module('material.components.bottomSheet', [\n\t    'material.core',\n\t    'material.components.backdrop'\n\t  ])\n\t  .directive('mdBottomSheet', MdBottomSheetDirective)\n\t  .provider('$mdBottomSheet', MdBottomSheetProvider);\n\t\n\t/* @ngInject */\n\tfunction MdBottomSheetDirective($mdBottomSheet) {\n\t  return {\n\t    restrict: 'E',\n\t    link : function postLink(scope, element, attr) {\n\t      // When navigation force destroys an interimElement, then\n\t      // listen and $destroy() that interim instance...\n\t      scope.$on('$destroy', function() {\n\t        $mdBottomSheet.destroy();\n\t      });\n\t    }\n\t  };\n\t}\n\tMdBottomSheetDirective.$inject = [\"$mdBottomSheet\"];\n\t\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $mdBottomSheet\n\t * @module material.components.bottomSheet\n\t *\n\t * @description\n\t * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.\n\t *\n\t * ## Restrictions\n\t *\n\t * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.\n\t * - Add the `md-grid` class to the bottom sheet for a grid layout.\n\t * - Add the `md-list` class to the bottom sheet for a list layout.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <div ng-controller=\"MyController\">\n\t *   <md-button ng-click=\"openBottomSheet()\">\n\t *     Open a Bottom Sheet!\n\t *   </md-button>\n\t * </div>\n\t * </hljs>\n\t * <hljs lang=\"js\">\n\t * var app = angular.module('app', ['ngMaterial']);\n\t * app.controller('MyController', function($scope, $mdBottomSheet) {\n\t *   $scope.openBottomSheet = function() {\n\t *     $mdBottomSheet.show({\n\t *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'\n\t *     });\n\t *   };\n\t * });\n\t * </hljs>\n\t */\n\t\n\t /**\n\t * @ngdoc method\n\t * @name $mdBottomSheet#show\n\t *\n\t * @description\n\t * Show a bottom sheet with the specified options.\n\t *\n\t * @param {object} options An options object, with the following properties:\n\t *\n\t *   - `templateUrl` - `{string=}`: The url of an html template file that will\n\t *   be used as the content of the bottom sheet. Restrictions: the template must\n\t *   have an outer `md-bottom-sheet` element.\n\t *   - `template` - `{string=}`: Same as templateUrl, except this is an actual\n\t *   template string.\n\t *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.\n\t *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.\n\t *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n\t *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.\n\t *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will\n\t *   be used as names of values to inject into the controller. For example,\n\t *   `locals: {three: 3}` would inject `three` into the controller with the value\n\t *   of 3.\n\t *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the bottom sheet to\n\t *     close it. Default true.\n\t *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the bottom sheet.\n\t *     Default true.\n\t *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values\n\t *   and the bottom sheet will not open until the promises resolve.\n\t *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n\t *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`,\n\t *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.\n\t *   e.g. angular.element(document.getElementById('content')) or \"#content\"\n\t *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.\n\t *     Default true.\n\t *\n\t * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or\n\t * rejected with `$mdBottomSheet.cancel()`.\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdBottomSheet#hide\n\t *\n\t * @description\n\t * Hide the existing bottom sheet and resolve the promise returned from\n\t * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).\n\t *\n\t * @param {*=} response An argument for the resolved promise.\n\t *\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdBottomSheet#cancel\n\t *\n\t * @description\n\t * Hide the existing bottom sheet and reject the promise returned from\n\t * `$mdBottomSheet.show()`.\n\t *\n\t * @param {*=} response An argument for the rejected promise.\n\t *\n\t */\n\t\n\tfunction MdBottomSheetProvider($$interimElementProvider) {\n\t  // how fast we need to flick down to close the sheet, pixels/ms\n\t  var CLOSING_VELOCITY = 0.5;\n\t  var PADDING = 80; // same as css\n\t\n\t  bottomSheetDefaults.$inject = [\"$animate\", \"$mdConstant\", \"$mdUtil\", \"$mdTheming\", \"$mdBottomSheet\", \"$rootElement\", \"$mdGesture\"];\n\t  return $$interimElementProvider('$mdBottomSheet')\n\t    .setDefaults({\n\t      methods: ['disableParentScroll', 'escapeToClose', 'clickOutsideToClose'],\n\t      options: bottomSheetDefaults\n\t    });\n\t\n\t  /* @ngInject */\n\t  function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {\n\t    var backdrop;\n\t\n\t    return {\n\t      themable: true,\n\t      onShow: onShow,\n\t      onRemove: onRemove,\n\t      escapeToClose: true,\n\t      clickOutsideToClose: true,\n\t      disableParentScroll: true\n\t    };\n\t\n\t\n\t    function onShow(scope, element, options, controller) {\n\t\n\t      element = $mdUtil.extractElementByName(element, 'md-bottom-sheet');\n\t\n\t      // Add a backdrop that will close on click\n\t      backdrop = $mdUtil.createBackdrop(scope, \"md-bottom-sheet-backdrop md-opaque\");\n\t\n\t      if (options.clickOutsideToClose) {\n\t        backdrop.on('click', function() {\n\t          $mdUtil.nextTick($mdBottomSheet.cancel,true);\n\t        });\n\t      }\n\t\n\t      $mdTheming.inherit(backdrop, options.parent);\n\t\n\t      $animate.enter(backdrop, options.parent, null);\n\t\n\t      var bottomSheet = new BottomSheet(element, options.parent);\n\t      options.bottomSheet = bottomSheet;\n\t\n\t      $mdTheming.inherit(bottomSheet.element, options.parent);\n\t\n\t      if (options.disableParentScroll) {\n\t        options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent);\n\t      }\n\t\n\t      return $animate.enter(bottomSheet.element, options.parent)\n\t        .then(function() {\n\t          var focusable = $mdUtil.findFocusTarget(element) || angular.element(\n\t            element[0].querySelector('button') ||\n\t            element[0].querySelector('a') ||\n\t            element[0].querySelector('[ng-click]')\n\t          );\n\t          focusable.focus();\n\t\n\t          if (options.escapeToClose) {\n\t            options.rootElementKeyupCallback = function(e) {\n\t              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {\n\t                $mdUtil.nextTick($mdBottomSheet.cancel,true);\n\t              }\n\t            };\n\t            $rootElement.on('keyup', options.rootElementKeyupCallback);\n\t          }\n\t        });\n\t\n\t    }\n\t\n\t    function onRemove(scope, element, options) {\n\t\n\t      var bottomSheet = options.bottomSheet;\n\t\n\t      $animate.leave(backdrop);\n\t      return $animate.leave(bottomSheet.element).then(function() {\n\t        if (options.disableParentScroll) {\n\t          options.restoreScroll();\n\t          delete options.restoreScroll;\n\t        }\n\t\n\t        bottomSheet.cleanup();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * BottomSheet class to apply bottom-sheet behavior to an element\n\t     */\n\t    function BottomSheet(element, parent) {\n\t      var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });\n\t      parent.on('$md.dragstart', onDragStart)\n\t        .on('$md.drag', onDrag)\n\t        .on('$md.dragend', onDragEnd);\n\t\n\t      return {\n\t        element: element,\n\t        cleanup: function cleanup() {\n\t          deregister();\n\t          parent.off('$md.dragstart', onDragStart);\n\t          parent.off('$md.drag', onDrag);\n\t          parent.off('$md.dragend', onDragEnd);\n\t        }\n\t      };\n\t\n\t      function onDragStart(ev) {\n\t        // Disable transitions on transform so that it feels fast\n\t        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');\n\t      }\n\t\n\t      function onDrag(ev) {\n\t        var transform = ev.pointer.distanceY;\n\t        if (transform < 5) {\n\t          // Slow down drag when trying to drag up, and stop after PADDING\n\t          transform = Math.max(-PADDING, transform / 2);\n\t        }\n\t        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');\n\t      }\n\t\n\t      function onDragEnd(ev) {\n\t        if (ev.pointer.distanceY > 0 &&\n\t            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {\n\t          var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;\n\t          var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);\n\t          element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');\n\t          $mdUtil.nextTick($mdBottomSheet.cancel,true);\n\t        } else {\n\t          element.css($mdConstant.CSS.TRANSITION_DURATION, '');\n\t          element.css($mdConstant.CSS.TRANSFORM, '');\n\t        }\n\t      }\n\t    }\n\t\n\t  }\n\t\n\t}\n\tMdBottomSheetProvider.$inject = [\"$$interimElementProvider\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.button\n\t * @description\n\t *\n\t * Button\n\t */\n\tangular\n\t    .module('material.components.button', [ 'material.core' ])\n\t    .directive('mdButton', MdButtonDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdButton\n\t * @module material.components.button\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * `<md-button>` is a button directive with optional ink ripples (default enabled).\n\t *\n\t * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will\n\t * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n\t * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with\n\t * the `md-primary` class.\n\t *\n\t * @param {boolean=} md-no-ink If present, disable ripple ink effects.\n\t * @param {expression=} ng-disabled En/Disable based on the expression\n\t * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`\n\t * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.\n\t * If no default text is found, a warning will be logged.\n\t *\n\t * @usage\n\t *\n\t * Regular buttons:\n\t *\n\t * <hljs lang=\"html\">\n\t *  <md-button> Flat Button </md-button>\n\t *  <md-button href=\"http://google.com\"> Flat link </md-button>\n\t *  <md-button class=\"md-raised\"> Raised Button </md-button>\n\t *  <md-button ng-disabled=\"true\"> Disabled Button </md-button>\n\t *  <md-button>\n\t *    <md-icon md-svg-src=\"your/icon.svg\"></md-icon>\n\t *    Register Now\n\t *  </md-button>\n\t * </hljs>\n\t *\n\t * FAB buttons:\n\t *\n\t * <hljs lang=\"html\">\n\t *  <md-button class=\"md-fab\" aria-label=\"FAB\">\n\t *    <md-icon md-svg-src=\"your/icon.svg\"></md-icon>\n\t *  </md-button>\n\t *  <!-- mini-FAB -->\n\t *  <md-button class=\"md-fab md-mini\" aria-label=\"Mini FAB\">\n\t *    <md-icon md-svg-src=\"your/icon.svg\"></md-icon>\n\t *  </md-button>\n\t *  <!-- Button with SVG Icon -->\n\t *  <md-button class=\"md-icon-button\" aria-label=\"Custom Icon Button\">\n\t *    <md-icon md-svg-icon=\"path/to/your.svg\"></md-icon>\n\t *  </md-button>\n\t * </hljs>\n\t */\n\tfunction MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {\n\t\n\t  return {\n\t    restrict: 'EA',\n\t    replace: true,\n\t    transclude: true,\n\t    template: getTemplate,\n\t    link: postLink\n\t  };\n\t\n\t  function isAnchor(attr) {\n\t    return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);\n\t  }\n\t\n\t  function getTemplate(element, attr) {\n\t    return isAnchor(attr) ?\n\t           '<a class=\"md-button\" ng-transclude></a>' :\n\t           '<button class=\"md-button\" ng-transclude></button>';\n\t  }\n\t\n\t  function postLink(scope, element, attr) {\n\t    var node = element[0];\n\t    $mdTheming(element);\n\t    $mdButtonInkRipple.attach(scope, element);\n\t\n\t    var elementHasText = node.textContent.trim();\n\t    if (!elementHasText) {\n\t      $mdAria.expect(element, 'aria-label');\n\t    }\n\t\n\t    // For anchor elements, we have to set tabindex manually when the\n\t    // element is disabled\n\t    if (isAnchor(attr) && angular.isDefined(attr.ngDisabled) ) {\n\t      scope.$watch(attr.ngDisabled, function(isDisabled) {\n\t        element.attr('tabindex', isDisabled ? -1 : 0);\n\t      });\n\t    }\n\t\n\t    // disabling click event when disabled is true\n\t    element.on('click', function(e){\n\t      if (attr.disabled === true) {\n\t        e.preventDefault();\n\t        e.stopImmediatePropagation();\n\t      }\n\t    });\n\t\n\t    // restrict focus styles to the keyboard\n\t    scope.mouseActive = false;\n\t    element.on('mousedown', function() {\n\t        scope.mouseActive = true;\n\t        $timeout(function(){\n\t          scope.mouseActive = false;\n\t        }, 100);\n\t      })\n\t      .on('focus', function() {\n\t        if (scope.mouseActive === false) {\n\t          element.addClass('md-focused');\n\t        }\n\t      })\n\t      .on('blur', function(ev) {\n\t        element.removeClass('md-focused');\n\t      });\n\t  }\n\t\n\t}\n\tMdButtonDirective.$inject = [\"$mdButtonInkRipple\", \"$mdTheming\", \"$mdAria\", \"$timeout\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.card\n\t *\n\t * @description\n\t * Card components.\n\t */\n\tangular.module('material.components.card', [\n\t  'material.core'\n\t])\n\t  .directive('mdCard', mdCardDirective);\n\t\n\t\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdCard\n\t * @module material.components.card\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-card>` directive is a container element used within `<md-content>` containers.\n\t *\n\t * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`\n\t * container will wrap text content and provide padding. An `<md-card-footer>` element can be\n\t * optionally included to put content flush against the bottom edge of the card.\n\t *\n\t * Action buttons can be included in an element with the `.md-actions` class, also used in `md-dialog`.\n\t * You can then position buttons using layout attributes.\n\t *\n\t * Cards have constant width and variable heights; where the maximum height is limited to what can\n\t * fit within a single view on a platform, but it can temporarily expand as needed.\n\t *\n\t * @usage\n\t * ### Card with optional footer\n\t * <hljs lang=\"html\">\n\t * <md-card>\n\t *  <img src=\"card-image.png\" class=\"md-card-image\" alt=\"image caption\">\n\t *  <md-card-content>\n\t *    <h2>Card headline</h2>\n\t *    <p>Card content</p>\n\t *  </md-card-content>\n\t *  <md-card-footer>\n\t *    Card footer\n\t *  </md-card-footer>\n\t * </md-card>\n\t * </hljs>\n\t *\n\t * ### Card with actions\n\t * <hljs lang=\"html\">\n\t * <md-card>\n\t *  <img src=\"card-image.png\" class=\"md-card-image\" alt=\"image caption\">\n\t *  <md-card-content>\n\t *    <h2>Card headline</h2>\n\t *    <p>Card content</p>\n\t *  </md-card-content>\n\t *  <div class=\"md-actions\" layout=\"row\" layout-align=\"end center\">\n\t *    <md-button>Action 1</md-button>\n\t *    <md-button>Action 2</md-button>\n\t *  </div>\n\t * </md-card>\n\t * </hljs>\n\t *\n\t */\n\tfunction mdCardDirective($mdTheming) {\n\t  return {\n\t    restrict: 'E',\n\t    link: function($scope, $element, $attr) {\n\t      $mdTheming($element);\n\t    }\n\t  };\n\t}\n\tmdCardDirective.$inject = [\"$mdTheming\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.checkbox\n\t * @description Checkbox module!\n\t */\n\tangular\n\t  .module('material.components.checkbox', ['material.core'])\n\t  .directive('mdCheckbox', MdCheckboxDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdCheckbox\n\t * @module material.components.checkbox\n\t * @restrict E\n\t *\n\t * @description\n\t * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n\t *\n\t * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n\t * the checkbox is in the accent color by default. The primary color palette may be used with\n\t * the `md-primary` class.\n\t *\n\t * @param {string} ng-model Assignable angular expression to data-bind to.\n\t * @param {string=} name Property name of the form under which the control is published.\n\t * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n\t * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n\t * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n\t * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects\n\t * @param {string=} aria-label Adds label to checkbox for accessibility.\n\t * Defaults to checkbox's text. If no default text is found, a warning will be logged.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-checkbox ng-model=\"isChecked\" aria-label=\"Finished?\">\n\t *   Finished ?\n\t * </md-checkbox>\n\t *\n\t * <md-checkbox md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n\t *   No Ink Effects\n\t * </md-checkbox>\n\t *\n\t * <md-checkbox ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n\t *   Disabled\n\t * </md-checkbox>\n\t *\n\t * </hljs>\n\t *\n\t */\n\tfunction MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {\n\t  inputDirective = inputDirective[0];\n\t  var CHECKED_CSS = 'md-checked';\n\t\n\t  return {\n\t    restrict: 'E',\n\t    transclude: true,\n\t    require: '?ngModel',\n\t    priority: 210, // Run before ngAria\n\t    template: \n\t      '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n\t        '<div class=\"md-icon\"></div>' +\n\t      '</div>' +\n\t      '<div ng-transclude class=\"md-label\"></div>',\n\t    compile: compile\n\t  };\n\t\n\t  // **********************************************************\n\t  // Private Methods\n\t  // **********************************************************\n\t\n\t  function compile (tElement, tAttrs) {\n\t\n\t    tAttrs.type = 'checkbox';\n\t    tAttrs.tabindex = tAttrs.tabindex || '0';\n\t    tElement.attr('role', tAttrs.type);\n\t\n\t    // Attach a click handler in compile in order to immediately stop propagation\n\t    // (especially for ng-click) when the checkbox is disabled.\n\t    tElement.on('click', function(event) {\n\t      if (this.hasAttribute('disabled')) {\n\t        event.stopImmediatePropagation();\n\t      }\n\t    });\n\t\n\t    return function postLink(scope, element, attr, ngModelCtrl) {\n\t      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();\n\t      $mdTheming(element);\n\t\n\t      if (attr.ngChecked) {\n\t        scope.$watch(\n\t            scope.$eval.bind(scope, attr.ngChecked),\n\t            ngModelCtrl.$setViewValue.bind(ngModelCtrl)\n\t        );\n\t      }\n\t\n\t      $$watchExpr('ngDisabled', 'tabindex', {\n\t        true: '-1',\n\t        false: attr.tabindex\n\t      });\n\t\n\t      $mdAria.expectWithText(element, 'aria-label');\n\t\n\t      // Reuse the original input[type=checkbox] directive from Angular core.\n\t      // This is a bit hacky as we need our own event listener and own render\n\t      // function.\n\t      inputDirective.link.pre(scope, {\n\t        on: angular.noop,\n\t        0: {}\n\t      }, attr, [ngModelCtrl]);\n\t\n\t      scope.mouseActive = false;\n\t      element.on('click', listener)\n\t        .on('keypress', keypressHandler)\n\t        .on('mousedown', function() {\n\t          scope.mouseActive = true;\n\t          $timeout(function() {\n\t            scope.mouseActive = false;\n\t          }, 100);\n\t        })\n\t        .on('focus', function() {\n\t          if (scope.mouseActive === false) {\n\t            element.addClass('md-focused');\n\t          }\n\t        })\n\t        .on('blur', function() {\n\t          element.removeClass('md-focused');\n\t        });\n\t\n\t      ngModelCtrl.$render = render;\n\t\n\t      function $$watchExpr(expr, htmlAttr, valueOpts) {\n\t        if (attr[expr]) {\n\t          scope.$watch(attr[expr], function(val) {\n\t            if (valueOpts[val]) {\n\t              element.attr(htmlAttr, valueOpts[val]);\n\t            }\n\t          });\n\t        }\n\t      }\n\t\n\t      function keypressHandler(ev) {\n\t        var keyCode = ev.which || ev.keyCode;\n\t        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {\n\t          ev.preventDefault();\n\t\n\t          if (!element.hasClass('md-focused')) {\n\t            element.addClass('md-focused');\n\t          }\n\t\n\t          listener(ev);\n\t        }\n\t      }\n\t      function listener(ev) {\n\t        if (element[0].hasAttribute('disabled')) {\n\t          return;\n\t        }\n\t\n\t        scope.$apply(function() {\n\t          // Toggle the checkbox value...\n\t          var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;\n\t\n\t          ngModelCtrl.$setViewValue( viewValue, ev && ev.type);\n\t          ngModelCtrl.$render();\n\t        });\n\t      }\n\t\n\t      function render() {\n\t        if(ngModelCtrl.$viewValue) {\n\t          element.addClass(CHECKED_CSS);\n\t        } else {\n\t          element.removeClass(CHECKED_CSS);\n\t        }\n\t      }\n\t    };\n\t  }\n\t}\n\tMdCheckboxDirective.$inject = [\"inputDirective\", \"$mdAria\", \"$mdConstant\", \"$mdTheming\", \"$mdUtil\", \"$timeout\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.chips\n\t */\n\t/*\n\t * @see js folder for chips implementation\n\t */\n\tangular.module('material.components.chips', [\n\t  'material.core',\n\t  'material.components.autocomplete'\n\t]);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.content\n\t *\n\t * @description\n\t * Scrollable content\n\t */\n\tangular.module('material.components.content', [\n\t  'material.core'\n\t])\n\t  .directive('mdContent', mdContentDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdContent\n\t * @module material.components.content\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-content>` directive is a container element useful for scrollable content\n\t *\n\t * @usage\n\t *\n\t * - Add the `[layout-padding]` attribute to make the content padded.\n\t *\n\t * <hljs lang=\"html\">\n\t *  <md-content layout-padding>\n\t *      Lorem ipsum dolor sit amet, ne quod novum mei.\n\t *  </md-content>\n\t * </hljs>\n\t *\n\t */\n\t\n\tfunction mdContentDirective($mdTheming) {\n\t  return {\n\t    restrict: 'E',\n\t    controller: ['$scope', '$element', ContentController],\n\t    link: function(scope, element, attr) {\n\t      var node = element[0];\n\t\n\t      $mdTheming(element);\n\t      scope.$broadcast('$mdContentLoaded', element);\n\t\n\t      iosScrollFix(element[0]);\n\t    }\n\t  };\n\t\n\t  function ContentController($scope, $element) {\n\t    this.$scope = $scope;\n\t    this.$element = $element;\n\t  }\n\t}\n\tmdContentDirective.$inject = [\"$mdTheming\"];\n\t\n\tfunction iosScrollFix(node) {\n\t  // IOS FIX:\n\t  // If we scroll where there is no more room for the webview to scroll,\n\t  // by default the webview itself will scroll up and down, this looks really\n\t  // bad.  So if we are scrolling to the very top or bottom, add/subtract one\n\t  angular.element(node).on('$md.pressdown', function(ev) {\n\t    // Only touch events\n\t    if (ev.pointer.type !== 't') return;\n\t    // Don't let a child content's touchstart ruin it for us.\n\t    if (ev.$materialScrollFixed) return;\n\t    ev.$materialScrollFixed = true;\n\t\n\t    if (node.scrollTop === 0) {\n\t      node.scrollTop = 1;\n\t    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {\n\t      node.scrollTop -= 1;\n\t    }\n\t  });\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.dialog\n\t */\n\tangular\n\t  .module('material.components.dialog', [\n\t    'material.core',\n\t    'material.components.backdrop'\n\t  ])\n\t  .directive('mdDialog', MdDialogDirective)\n\t  .provider('$mdDialog', MdDialogProvider);\n\t\n\tfunction MdDialogDirective($$rAF, $mdTheming, $mdDialog) {\n\t  return {\n\t    restrict: 'E',\n\t    link: function(scope, element, attr) {\n\t      $mdTheming(element);\n\t      $$rAF(function() {\n\t        var images;\n\t        var content = element[0].querySelector('md-dialog-content');\n\t\n\t        if (content) {\n\t          images = content.getElementsByTagName('img');\n\t          addOverflowClass();\n\t          //-- delayed image loading may impact scroll height, check after images are loaded\n\t          angular.element(images).on('load', addOverflowClass);\n\t        }\n\t\n\t        scope.$on('$destroy', function() {\n\t          $mdDialog.destroy();\n\t        });\n\t\n\t        /**\n\t         *\n\t         */\n\t        function addOverflowClass() {\n\t          element.toggleClass('md-content-overflow', content.scrollHeight > content.clientHeight);\n\t        }\n\t\n\t\n\t      });\n\t    }\n\t  };\n\t}\n\tMdDialogDirective.$inject = [\"$$rAF\", \"$mdTheming\", \"$mdDialog\"];\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $mdDialog\n\t * @module material.components.dialog\n\t *\n\t * @description\n\t * `$mdDialog` opens a dialog over the app to inform users about critical information or require\n\t *  them to make decisions. There are two approaches for setup: a simple promise API\n\t *  and regular object syntax.\n\t *\n\t * ## Restrictions\n\t *\n\t * - The dialog is always given an isolate scope.\n\t * - The dialog's template must have an outer `<md-dialog>` element.\n\t *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use\n\t *   an element with class `md-actions` for the dialog's actions.\n\t * - Dialogs must cover the entire application to keep interactions inside of them.\n\t * Use the `parent` option to change where dialogs are appended.\n\t *\n\t * ## Sizing\n\t * - Complex dialogs can be sized with `flex=\"percentage\"`, i.e. `flex=\"66\"`.\n\t * - Default max-width is 80% of the `rootElement` or `parent`.\n\t *\n\t * ## Css\n\t * - `.md-dialog-content` - class that sets the padding on the content as the spec file\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <div  ng-app=\"demoApp\" ng-controller=\"EmployeeController\">\n\t *   <div>\n\t *     <md-button ng-click=\"showAlert()\" class=\"md-raised md-warn\">\n\t *       Employee Alert!\n\t *       </md-button>\n\t *   </div>\n\t *   <div>\n\t *     <md-button ng-click=\"showDialog($event)\" class=\"md-raised\">\n\t *       Custom Dialog\n\t *       </md-button>\n\t *   </div>\n\t *   <div>\n\t *     <md-button ng-click=\"closeAlert()\" ng-disabled=\"!hasAlert()\" class=\"md-raised\">\n\t *       Close Alert\n\t *     </md-button>\n\t *   </div>\n\t *   <div>\n\t *     <md-button ng-click=\"showGreeting($event)\" class=\"md-raised md-primary\" >\n\t *       Greet Employee\n\t *       </md-button>\n\t *   </div>\n\t * </div>\n\t * </hljs>\n\t *\n\t * ### JavaScript: object syntax\n\t * <hljs lang=\"js\">\n\t * (function(angular, undefined){\n\t *   \"use strict\";\n\t *\n\t *   angular\n\t *    .module('demoApp', ['ngMaterial'])\n\t *    .controller('AppCtrl', AppController);\n\t *\n\t *   function AppController($scope, $mdDialog) {\n\t *     var alert;\n\t *     $scope.showAlert = showAlert;\n\t *     $scope.showDialog = showDialog;\n\t *     $scope.items = [1, 2, 3];\n\t *\n\t *     // Internal method\n\t *     function showAlert() {\n\t *       alert = $mdDialog.alert({\n\t *         title: 'Attention',\n\t *         content: 'This is an example of how easy dialogs can be!',\n\t *         ok: 'Close'\n\t *       });\n\t *\n\t *       $mdDialog\n\t *         .show( alert )\n\t *         .finally(function() {\n\t *           alert = undefined;\n\t *         });\n\t *     }\n\t *\n\t *     function showDialog($event) {\n\t *        var parentEl = angular.element(document.body);\n\t *        $mdDialog.show({\n\t *          parent: parentEl,\n\t *          targetEvent: $event,\n\t *          template:\n\t *            '<md-dialog aria-label=\"List dialog\">' +\n\t *            '  <md-dialog-content>'+\n\t *            '    <md-list>'+\n\t *            '      <md-list-item ng-repeat=\"item in items\">'+\n\t *            '       <p>Number {{item}}</p>' +\n\t *            '      </md-item>'+\n\t *            '    </md-list>'+\n\t *            '  </md-dialog-content>' +\n\t *            '  <div class=\"md-actions\">' +\n\t *            '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n\t *            '      Close Dialog' +\n\t *            '    </md-button>' +\n\t *            '  </div>' +\n\t *            '</md-dialog>',\n\t *          locals: {\n\t *            items: $scope.items\n\t *          },\n\t *          controller: DialogController\n\t *       });\n\t *       function DialogController($scope, $mdDialog, items) {\n\t *         $scope.items = items;\n\t *         $scope.closeDialog = function() {\n\t *           $mdDialog.hide();\n\t *         }\n\t *       }\n\t *     }\n\t *   }\n\t * })(angular);\n\t * </hljs>\n\t *\n\t * ### JavaScript: promise API syntax, custom dialog template\n\t * <hljs lang=\"js\">\n\t * (function(angular, undefined){\n\t *   \"use strict\";\n\t *\n\t *   angular\n\t *     .module('demoApp', ['ngMaterial'])\n\t *     .controller('EmployeeController', EmployeeEditor)\n\t *     .controller('GreetingController', GreetingController);\n\t *\n\t *   // Fictitious Employee Editor to show how to use simple and complex dialogs.\n\t *\n\t *   function EmployeeEditor($scope, $mdDialog) {\n\t *     var alert;\n\t *\n\t *     $scope.showAlert = showAlert;\n\t *     $scope.closeAlert = closeAlert;\n\t *     $scope.showGreeting = showCustomGreeting;\n\t *\n\t *     $scope.hasAlert = function() { return !!alert };\n\t *     $scope.userName = $scope.userName || 'Bobby';\n\t *\n\t *     // Dialog #1 - Show simple alert dialog and cache\n\t *     // reference to dialog instance\n\t *\n\t *     function showAlert() {\n\t *       alert = $mdDialog.alert()\n\t *         .title('Attention, ' + $scope.userName)\n\t *         .content('This is an example of how easy dialogs can be!')\n\t *         .ok('Close');\n\t *\n\t *       $mdDialog\n\t *           .show( alert )\n\t *           .finally(function() {\n\t *             alert = undefined;\n\t *           });\n\t *     }\n\t *\n\t *     // Close the specified dialog instance and resolve with 'finished' flag\n\t *     // Normally this is not needed, just use '$mdDialog.hide()' to close\n\t *     // the most recent dialog popup.\n\t *\n\t *     function closeAlert() {\n\t *       $mdDialog.hide( alert, \"finished\" );\n\t *       alert = undefined;\n\t *     }\n\t *\n\t *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.\n\t *\n\t *     function showCustomGreeting($event) {\n\t *         $mdDialog.show({\n\t *           targetEvent: $event,\n\t *           template:\n\t *             '<md-dialog>' +\n\t *\n\t *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +\n\t *\n\t *             '  <div class=\"md-actions\">' +\n\t *             '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n\t *             '      Close Greeting' +\n\t *             '    </md-button>' +\n\t *             '  </div>' +\n\t *             '</md-dialog>',\n\t *           controller: 'GreetingController',\n\t *           onComplete: afterShowAnimation,\n\t *           locals: { employee: $scope.userName }\n\t *         });\n\t *\n\t *         // When the 'enter' animation finishes...\n\t *\n\t *         function afterShowAnimation(scope, element, options) {\n\t *            // post-show code here: DOM element focus, etc.\n\t *         }\n\t *     }\n\t *\n\t *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog\n\t *     //             Here we used ng-controller=\"GreetingController as vm\" and\n\t *     //             $scope.vm === <controller instance>\n\t *\n\t *     function showCustomGreeting() {\n\t *\n\t *        $mdDialog.show({\n\t *           clickOutsideToClose: true,\n\t *\n\t *           scope: $scope,        // use parent scope in template\n\t *           preserveScope: true,  // do not forget this if use parent scope\n\t\n\t *           // Since GreetingController is instantiated with ControllerAs syntax\n\t *           // AND we are passing the parent '$scope' to the dialog, we MUST\n\t *           // use 'vm.<xxx>' in the template markup\n\t *\n\t *           template: '<md-dialog>' +\n\t *                     '  <md-dialog-content>' +\n\t *                     '     Hi There {{vm.employee}}' +\n\t *                     '  </md-dialog-content>' +\n\t *                     '</md-dialog>',\n\t *\n\t *           controller: function DialogController($scope, $mdDialog) {\n\t *             $scope.closeDialog = function() {\n\t *               $mdDialog.hide();\n\t *             }\n\t *           }\n\t *        });\n\t *     }\n\t *\n\t *   }\n\t *\n\t *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog\n\t *\n\t *   function GreetingController($scope, $mdDialog, employee) {\n\t *     // Assigned from construction <code>locals</code> options...\n\t *     $scope.employee = employee;\n\t *\n\t *     $scope.closeDialog = function() {\n\t *       // Easily hides most recent dialog shown...\n\t *       // no specific instance reference is needed.\n\t *       $mdDialog.hide();\n\t *     };\n\t *   }\n\t *\n\t * })(angular);\n\t * </hljs>\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdDialog#alert\n\t *\n\t * @description\n\t * Builds a preconfigured dialog with the specified message.\n\t *\n\t * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n\t *\n\t * - $mdDialogPreset#title(string) - sets title to string\n\t * - $mdDialogPreset#content(string) - sets content / message to string\n\t * - $mdDialogPreset#ok(string) - sets okay button text to string\n\t * - $mdDialogPreset#theme(string) - sets the theme of the dialog\n\t *\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdDialog#confirm\n\t *\n\t * @description\n\t * Builds a preconfigured dialog with the specified message. You can call show and the promise returned\n\t * will be resolved only if the user clicks the confirm action on the dialog.\n\t *\n\t * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n\t *\n\t * Additionally, it supports the following methods:\n\t *\n\t * - $mdDialogPreset#title(string) - sets title to string\n\t * - $mdDialogPreset#content(string) - sets content / message to string\n\t * - $mdDialogPreset#ok(string) - sets okay button text to string\n\t * - $mdDialogPreset#cancel(string) - sets cancel button text to string\n\t * - $mdDialogPreset#theme(string) - sets the theme of the dialog\n\t *\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdDialog#show\n\t *\n\t * @description\n\t * Show a dialog with the specified options.\n\t *\n\t * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and\n\t * `confirm()`, or an options object with the following properties:\n\t *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content\n\t *   of the dialog.\n\t *   - `template` - `{string=}`: Same as templateUrl, except this is an actual template string.\n\t *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,\n\t *     the location of the click will be used as the starting point for the opening animation\n\t *     of the the dialog.\n\t *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,\n\t *     it will create a new isolate scope.\n\t *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.\n\t *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n\t *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.\n\t *     Default true.\n\t *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.\n\t *     Default true.\n\t *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to\n\t *     close it. Default false.\n\t *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.\n\t *     Default true.\n\t *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if\n\t *     focusing some other way, as focus management is required for dialogs to be accessible.\n\t *     Defaults to true.\n\t *   - `controller` - `{string=}`: The controller to associate with the dialog. The controller\n\t *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.\n\t *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names\n\t *     of values to inject into the controller. For example, `locals: {three: 3}` would inject\n\t *     `three` into the controller, with the value 3. If `bindToController` is true, they will be\n\t *     copied to the controller instead.\n\t *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n\t *     These values will not be available until after initialization.\n\t *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the\n\t *     dialog will not open until all of the promises resolve.\n\t *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n\t *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending\n\t *     to the root element of the application.\n\t *   - `onShowing` `{function=} Callback function used to announce the show() action is\n\t *     starting.\n\t *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is\n\t *     finished.\n\t *   - `onRemoving` `{function=} Callback function used to announce the close/hide() action is\n\t *     starting. This allows developers to run custom animations in parallel the close animations.\n\t *\n\t * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or\n\t * rejected with `$mdDialog.cancel()`.\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdDialog#hide\n\t *\n\t * @description\n\t * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.\n\t *\n\t * @param {*=} response An argument for the resolved promise.\n\t *\n\t * @returns {promise} A promise that is resolved when the dialog has been closed.\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdDialog#cancel\n\t *\n\t * @description\n\t * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.\n\t *\n\t * @param {*=} response An argument for the rejected promise.\n\t *\n\t * @returns {promise} A promise that is resolved when the dialog has been closed.\n\t */\n\t\n\tfunction MdDialogProvider($$interimElementProvider) {\n\t\n\t  advancedDialogOptions.$inject = [\"$mdDialog\", \"$mdTheming\"];\n\t  dialogDefaultOptions.$inject = [\"$mdDialog\", \"$mdAria\", \"$mdUtil\", \"$mdConstant\", \"$animate\", \"$document\", \"$window\", \"$rootElement\"];\n\t  return $$interimElementProvider('$mdDialog')\n\t    .setDefaults({\n\t      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent', 'parent'],\n\t      options: dialogDefaultOptions\n\t    })\n\t    .addPreset('alert', {\n\t      methods: ['title', 'content', 'ariaLabel', 'ok', 'theme', 'css'],\n\t      options: advancedDialogOptions\n\t    })\n\t    .addPreset('confirm', {\n\t      methods: ['title', 'content', 'ariaLabel', 'ok', 'cancel', 'theme', 'css'],\n\t      options: advancedDialogOptions\n\t    });\n\t\n\t  /* @ngInject */\n\t  function advancedDialogOptions($mdDialog, $mdTheming) {\n\t    return {\n\t      template: [\n\t        '<md-dialog md-theme=\"{{ dialog.theme }}\" aria-label=\"{{ dialog.ariaLabel }}\" ng-class=\"dialog.css\">',\n\t        ' <md-dialog-content class=\"md-dialog-content\" role=\"document\" tabIndex=\"-1\">',\n\t        '   <h2 class=\"md-title\">{{ dialog.title }}</h2>',\n\t        '   <div class=\"md-dialog-content-body\" md-template=\"::dialog.mdContent\"></div>',\n\t        ' </md-dialog-content>',\n\t        ' <div class=\"md-actions\">',\n\t        '   <md-button ng-if=\"dialog.$type == \\'confirm\\'\"' +\n\t        '     ng-click=\"dialog.abort()\" class=\"md-primary\">',\n\t        '     {{ dialog.cancel }}',\n\t        '   </md-button>',\n\t        '   <md-button ng-click=\"dialog.hide()\" class=\"md-primary\" md-autofocus=\"dialog.$type!=\\'confirm\\'\">',\n\t        '     {{ dialog.ok }}',\n\t        '   </md-button>',\n\t        ' </div>',\n\t        '</md-dialog>'\n\t      ].join('').replace(/\\s\\s+/g, ''),\n\t      controller: function mdDialogCtrl() {\n\t        this.hide = function() {\n\t          $mdDialog.hide(true);\n\t        };\n\t        this.abort = function() {\n\t          $mdDialog.cancel();\n\t        };\n\t      },\n\t      controllerAs: 'dialog',\n\t      bindToController: true,\n\t      theme: $mdTheming.defaultTheme()\n\t    };\n\t  }\n\t\n\t  /* @ngInject */\n\t  function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement) {\n\t    return {\n\t      hasBackdrop: true,\n\t      isolateScope: true,\n\t      onShow: onShow,\n\t      onRemove: onRemove,\n\t      clickOutsideToClose: false,\n\t      escapeToClose: true,\n\t      targetEvent: null,\n\t      focusOnOpen: true,\n\t      disableParentScroll: true,\n\t      transformTemplate: function(template) {\n\t        return '<div class=\"md-dialog-container\">' + validatedTemplate(template) + '</div>';\n\t\n\t        /**\n\t         * The specified template should contain a <md-dialog> wrapper element....\n\t         */\n\t        function validatedTemplate(template) {\n\t          template || \"\"\n\t          return /<\\/md-dialog>/g.test(template) ? template : \"<md-dialog>\" + template + \"</md-dialog>\";\n\t        }\n\t      }\n\t    };\n\t\n\t    /**\n\t     * Show method for dialogs\n\t     */\n\t    function onShow(scope, element, options, controller) {\n\t      angular.element($document[0].body).addClass('md-dialog-is-showing');\n\t\n\t      wrapSimpleContent();\n\t\n\t      captureSourceAndParent(element, options);\n\t      configureAria(element.find('md-dialog'), options);\n\t      showBackdrop(scope, element, options);\n\t\n\t      return dialogPopIn(element, options)\n\t        .then(function() {\n\t          activateListeners(element, options);\n\t          lockScreenReader(element, options);\n\t          focusOnOpen();\n\t        });\n\t\n\t      /**\n\t       * For alerts, focus on content... otherwise focus on\n\t       * the close button (or equivalent)\n\t       */\n\t      function focusOnOpen() {\n\t        if (options.focusOnOpen) {\n\t          var target = $mdUtil.findFocusTarget(element) || findCloseButton();\n\t          target.focus();\n\t        }\n\t\n\t        /**\n\t         *  If no element with class dialog-close, try to find the last\n\t         *  button child in md-actions and assume it is a close button\n\t         */\n\t        function findCloseButton() {\n\t          var closeButton = element[0].querySelector('.dialog-close');\n\t          if (!closeButton) {\n\t            var actionButtons = element[0].querySelectorAll('.md-actions button');\n\t            closeButton = actionButtons[actionButtons.length - 1];\n\t          }\n\t          return angular.element(closeButton);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Wrap any simple content [specified via .content(\"\")] in <p></p> tags.\n\t       * otherwise accept HTML content within the dialog content area...\n\t       * NOTE: Dialog uses the md-template directive to safely inject HTML content.\n\t       */\n\t      function wrapSimpleContent() {\n\t        if ( controller ) {\n\t          var HTML_END_TAG = /<\\/[\\w-]*>/gm;\n\t          var content = controller.content || options.content || \"\";\n\t\n\t          var hasHTML = HTML_END_TAG.test(content);\n\t          if (!hasHTML) {\n\t            content = $mdUtil.supplant(\"<p>{0}</p>\", [content]);\n\t          }\n\t\n\t          // Publish updated dialog content body... to be compiled by mdTemplate directive\n\t          controller.mdContent = content;\n\t        }\n\t      }\n\t\n\t    }\n\t\n\t    /**\n\t     * Remove function for all dialogs\n\t     */\n\t    function onRemove(scope, element, options) {\n\t      options.deactivateListeners();\n\t      options.unlockScreenReader();\n\t      options.hideBackdrop(options.$destroy);\n\t\n\t      // For navigation $destroy events, do a quick, non-animated removal,\n\t      // but for normal closes (from clicks, etc) animate the removal\n\t\n\t      return !!options.$destroy ? detachAndClean() : animateRemoval().then( detachAndClean );\n\t\n\t      /**\n\t       * For normal closes, animate the removal.\n\t       * For forced closes (like $destroy events), skip the animations\n\t       */\n\t      function animateRemoval() {\n\t        return dialogPopOut(element, options);\n\t      }\n\t\n\t      /**\n\t       * Detach the element\n\t       */\n\t      function detachAndClean() {\n\t        angular.element($document[0].body).removeClass('md-dialog-is-showing');\n\t        element.remove();\n\t\n\t        if (!options.$destroy) options.origin.focus();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Capture originator/trigger element information (if available)\n\t     * and the parent container for the dialog; defaults to the $rootElement\n\t     * unless overridden in the options.parent\n\t     */\n\t    function captureSourceAndParent(element, options) {\n\t      options.origin = angular.extend({\n\t        element: null,\n\t        bounds: null,\n\t        focus: angular.noop\n\t      }, options.origin || {});\n\t\n\t      var source = angular.element((options.targetEvent || {}).target);\n\t      if (source && source.length) {\n\t        // Compute and save the target element's bounding rect, so that if the\n\t        // element is hidden when the dialog closes, we can shrink the dialog\n\t        // back to the same position it expanded from.\n\t        options.origin.element = source;\n\t        options.origin.bounds = source[0].getBoundingClientRect();\n\t        options.origin.focus = function() {\n\t          source.focus();\n\t        }\n\t      }\n\t\n\t      // If the parent specifier is a simple string selector, then query for\n\t      // the DOM element.\n\t      if ( angular.isString(options.parent) ) {\n\t        var simpleSelector = options.parent,\n\t            container = $document[0].querySelectorAll(simpleSelector);\n\t        options.parent = container.length ? container[0] : null;\n\t      }\n\t      // If we have a reference to a raw dom element, always wrap it in jqLite\n\t      options.parent = angular.element(options.parent || $rootElement);\n\t\n\t    }\n\t\n\t    /**\n\t     * Listen for escape keys and outside clicks to auto close\n\t     */\n\t    function activateListeners(element, options) {\n\t      var window = angular.element($window);\n\t      var onWindowResize = $mdUtil.debounce(function(){\n\t        stretchDialogContainerToViewport(element, options);\n\t      }, 60);\n\t\n\t      var removeListeners = [];\n\t      var smartClose = function() {\n\t        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will\n\t        // cancel or fallback to hide.\n\t        var closeFn = ( options.$type == 'alert' ) ? $mdDialog.hide : $mdDialog.cancel;\n\t        $mdUtil.nextTick(closeFn, true);\n\t      };\n\t\n\t      if (options.escapeToClose) {\n\t        var target = options.parent;\n\t        var keyHandlerFn = function(ev) {\n\t          if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {\n\t            ev.stopPropagation();\n\t            ev.preventDefault();\n\t\n\t            smartClose();\n\t          }\n\t        };\n\t\n\t        // Add keydown listeners\n\t        element.on('keydown', keyHandlerFn);\n\t        target.on('keydown', keyHandlerFn);\n\t        window.on('resize', onWindowResize);\n\t\n\t        // Queue remove listeners function\n\t        removeListeners.push(function() {\n\t\n\t          element.off('keydown', keyHandlerFn);\n\t          target.off('keydown', keyHandlerFn);\n\t          window.off('resize', onWindowResize);\n\t\n\t        });\n\t      }\n\t      if (options.clickOutsideToClose) {\n\t        var target = element;\n\t        var sourceElem;\n\t\n\t        // Keep track of the element on which the mouse originally went down\n\t        // so that we can only close the backdrop when the 'click' started on it.\n\t        // A simple 'click' handler does not work,\n\t        // it sets the target object as the element the mouse went down on.\n\t        var mousedownHandler = function(ev) {\n\t          sourceElem = ev.target;\n\t        };\n\t\n\t        // We check if our original element and the target is the backdrop\n\t        // because if the original was the backdrop and the target was inside the dialog\n\t        // we don't want to dialog to close.\n\t        var mouseupHandler = function(ev) {\n\t          if (sourceElem === target[0] && ev.target === target[0]) {\n\t            ev.stopPropagation();\n\t            ev.preventDefault();\n\t\n\t            smartClose();\n\t          }\n\t        };\n\t\n\t        // Add listeners\n\t        target.on('mousedown', mousedownHandler);\n\t        target.on('mouseup', mouseupHandler);\n\t\n\t        // Queue remove listeners function\n\t        removeListeners.push(function() {\n\t          target.off('mousedown', mousedownHandler);\n\t          target.off('mouseup', mouseupHandler);\n\t        });\n\t      }\n\t\n\t      // Attach specific `remove` listener handler\n\t      options.deactivateListeners = function() {\n\t        removeListeners.forEach(function(removeFn) {\n\t          removeFn();\n\t        });\n\t        options.deactivateListeners = null;\n\t      };\n\t    }\n\t\n\t    /**\n\t     * Show modal backdrop element...\n\t     */\n\t    function showBackdrop(scope, element, options) {\n\t\n\t      if (options.disableParentScroll) {\n\t        // !! DO this before creating the backdrop; since disableScrollAround()\n\t        //    configures the scroll offset; which is used by mdBackDrop postLink()\n\t        options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent);\n\t      }\n\t\n\t      if (options.hasBackdrop) {\n\t        options.backdrop = $mdUtil.createBackdrop(scope, \"md-dialog-backdrop md-opaque\");\n\t        $animate.enter(options.backdrop, options.parent);\n\t      }\n\t\n\t      /**\n\t       * Hide modal backdrop element...\n\t       */\n\t      options.hideBackdrop = function hideBackdrop($destroy) {\n\t        if (options.backdrop) {\n\t          if ( !!$destroy ) options.backdrop.remove();\n\t          else              $animate.leave(options.backdrop);\n\t        }\n\t\n\t        if (options.disableParentScroll) {\n\t          options.restoreScroll();\n\t          delete options.restoreScroll;\n\t        }\n\t\n\t        options.hideBackdrop = null;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Inject ARIA-specific attributes appropriate for Dialogs\n\t     */\n\t    function configureAria(element, options) {\n\t\n\t      var role = (options.$type === 'alert') ? 'alertdialog' : 'dialog';\n\t      var dialogContent = element.find('md-dialog-content');\n\t      var dialogId = element.attr('id') || ('dialog_' + $mdUtil.nextUid());\n\t\n\t      element.attr({\n\t        'role': role,\n\t        'tabIndex': '-1'\n\t      });\n\t\n\t      if (dialogContent.length === 0) {\n\t        dialogContent = element;\n\t      }\n\t\n\t      dialogContent.attr('id', dialogId);\n\t      element.attr('aria-describedby', dialogId);\n\t\n\t      if (options.ariaLabel) {\n\t        $mdAria.expect(element, 'aria-label', options.ariaLabel);\n\t      }\n\t      else {\n\t        $mdAria.expectAsync(element, 'aria-label', function() {\n\t          var words = dialogContent.text().split(/\\s+/);\n\t          if (words.length > 3) words = words.slice(0, 3).concat('...');\n\t          return words.join(' ');\n\t        });\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Prevents screen reader interaction behind modal window\n\t     * on swipe interfaces\n\t     */\n\t    function lockScreenReader(element, options) {\n\t      var isHidden = true;\n\t\n\t      // get raw DOM node\n\t      walkDOM(element[0]);\n\t\n\t      options.unlockScreenReader = function() {\n\t        isHidden = false;\n\t        walkDOM(element[0]);\n\t\n\t        options.unlockScreenReader = null;\n\t      };\n\t\n\t      /**\n\t       * Walk DOM to apply or remove aria-hidden on sibling nodes\n\t       * and parent sibling nodes\n\t       *\n\t       */\n\t      function walkDOM(element) {\n\t        while (element.parentNode) {\n\t          if (element === document.body) {\n\t            return;\n\t          }\n\t          var children = element.parentNode.children;\n\t          for (var i = 0; i < children.length; i++) {\n\t            // skip over child if it is an ascendant of the dialog\n\t            // or a script or style tag\n\t            if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {\n\t              children[i].setAttribute('aria-hidden', isHidden);\n\t            }\n\t          }\n\t\n\t          walkDOM(element = element.parentNode);\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Ensure the dialog container fill-stretches to the viewport\n\t     */\n\t    function stretchDialogContainerToViewport(container, options) {\n\t\n\t      var isFixed = $window.getComputedStyle($document[0].body).position == 'fixed';\n\t      var backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null;\n\t      var height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;\n\t\n\t      container.css({\n\t        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + 'px',\n\t        height: height ? height + 'px' : '100%'\n\t      });\n\t\n\t      return container;\n\t    }\n\t\n\t    /**\n\t     *  Dialog open and pop-in animation\n\t     */\n\t    function dialogPopIn(container, options) {\n\t\n\t      // Add the `md-dialog-container` to the DOM\n\t      options.parent.append(container);\n\t      stretchDialogContainerToViewport(container, options);\n\t\n\t      var dialogEl = container.find('md-dialog');\n\t      var animator = $mdUtil.dom.animator;\n\t      var buildTranslateToOrigin = animator.calculateZoomToOrigin;\n\t      var translateOptions = {transitionInClass: 'md-transition-in', transitionOutClass: 'md-transition-out'};\n\t      var from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.origin));\n\t      var to = animator.toTransformCss(\"\");  // defaults to center display (or parent or $rootElement)\n\t\n\t      return animator\n\t        .translate3d(dialogEl, from, to, translateOptions)\n\t        .then(function(animateReversal) {\n\t\n\t\n\t\n\t          // Build a reversal translate function synched to this translation...\n\t          options.reverseAnimate = function() {\n\t\n\t            delete options.reverseAnimate;\n\t            return animateReversal(\n\t              animator.toTransformCss(\n\t                // in case the origin element has moved or is hidden,\n\t                // let's recalculate the translateCSS\n\t                buildTranslateToOrigin(dialogEl, options.origin)\n\t              )\n\t            );\n\t\n\t          };\n\t          return true;\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Dialog close and pop-out animation\n\t     */\n\t    function dialogPopOut(container, options) {\n\t      return options.reverseAnimate();\n\t    }\n\t\n\t    /**\n\t     * Utility function to filter out raw DOM nodes\n\t     */\n\t    function isNodeOneOf(elem, nodeTypeArray) {\n\t      if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {\n\t        return true;\n\t      }\n\t    }\n\t\n\t  }\n\t}\n\tMdDialogProvider.$inject = [\"$$interimElementProvider\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.divider\n\t * @description Divider module!\n\t */\n\tangular.module('material.components.divider', [\n\t  'material.core'\n\t])\n\t  .directive('mdDivider', MdDividerDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdDivider\n\t * @module material.components.divider\n\t * @restrict E\n\t *\n\t * @description\n\t * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.\n\t *\n\t * @param {boolean=} md-inset Add this attribute to activate the inset divider style.\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-divider></md-divider>\n\t *\n\t * <md-divider md-inset></md-divider>\n\t * </hljs>\n\t *\n\t */\n\tfunction MdDividerDirective($mdTheming) {\n\t  return {\n\t    restrict: 'E',\n\t    link: $mdTheming\n\t  };\n\t}\n\tMdDividerDirective.$inject = [\"$mdTheming\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc module\n\t   * @name material.components.datepicker\n\t   * @description Datepicker\n\t   */\n\t  angular.module('material.components.datepicker', [\n\t    'material.core',\n\t    'material.components.icon',\n\t    'material.components.virtualRepeat'\n\t  ]).directive('mdCalendar', calendarDirective);\n\t\n\t\n\t  // POST RELEASE\n\t  // TODO(jelbourn): Mac Cmd + left / right == Home / End\n\t  // TODO(jelbourn): Clicking on the month label opens the month-picker.\n\t  // TODO(jelbourn): Minimum and maximum date\n\t  // TODO(jelbourn): Refactor month element creation to use cloneNode (performance).\n\t  // TODO(jelbourn): Define virtual scrolling constants (compactness) users can override.\n\t  // TODO(jelbourn): Animated month transition on ng-model change (virtual-repeat)\n\t  // TODO(jelbourn): Scroll snapping (virtual repeat)\n\t  // TODO(jelbourn): Remove superfluous row from short months (virtual-repeat)\n\t  // TODO(jelbourn): Month headers stick to top when scrolling.\n\t  // TODO(jelbourn): Previous month opacity is lowered when partially scrolled out of view.\n\t  // TODO(jelbourn): Support md-calendar standalone on a page (as a tabstop w/ aria-live\n\t  //     announcement and key handling).\n\t  // Read-only calendar (not just date-picker).\n\t\n\t  /**\n\t   * Height of one calendar month tbody. This must be made known to the virtual-repeat and is\n\t   * subsequently used for scrolling to specific months.\n\t   */\n\t  var TBODY_HEIGHT = 265;\n\t\n\t  /**\n\t   * Height of a calendar month with a single row. This is needed to calculate the offset for\n\t   * rendering an extra month in virtual-repeat that only contains one row.\n\t   */\n\t  var TBODY_SINGLE_ROW_HEIGHT = 45;\n\t\n\t  function calendarDirective() {\n\t    return {\n\t      template:\n\t          '<table aria-hidden=\"true\" class=\"md-calendar-day-header\"><thead></thead></table>' +\n\t          '<div class=\"md-calendar-scroll-mask\">' +\n\t          '<md-virtual-repeat-container class=\"md-calendar-scroll-container\" ' +\n\t                'md-offset-size=\"' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '\">' +\n\t              '<table role=\"grid\" tabindex=\"0\" class=\"md-calendar\" aria-readonly=\"true\">' +\n\t                '<tbody role=\"rowgroup\" md-virtual-repeat=\"i in ctrl.items\" md-calendar-month ' +\n\t                    'md-month-offset=\"$index\" class=\"md-calendar-month\" ' +\n\t                    'md-start-index=\"ctrl.getSelectedMonthIndex()\" ' +\n\t                    'md-item-size=\"' + TBODY_HEIGHT + '\"></tbody>' +\n\t              '</table>' +\n\t            '</md-virtual-repeat-container>' +\n\t          '</div>',\n\t      scope: {\n\t        minDate: '=mdMinDate',\n\t        maxDate: '=mdMaxDate',\n\t      },\n\t      require: ['ngModel', 'mdCalendar'],\n\t      controller: CalendarCtrl,\n\t      controllerAs: 'ctrl',\n\t      bindToController: true,\n\t      link: function(scope, element, attrs, controllers) {\n\t        var ngModelCtrl = controllers[0];\n\t        var mdCalendarCtrl = controllers[1];\n\t        mdCalendarCtrl.configureNgModel(ngModelCtrl);\n\t      }\n\t    };\n\t  }\n\t\n\t  /** Class applied to the selected date cell/. */\n\t  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';\n\t\n\t  /** Class applied to the focused date cell/. */\n\t  var FOCUSED_DATE_CLASS = 'md-focus';\n\t\n\t  /** Next identifier for calendar instance. */\n\t  var nextUniqueId = 0;\n\t\n\t  /** The first renderable date in the virtual-scrolling calendar (for all instances). */\n\t  var firstRenderableDate = null;\n\t\n\t  /**\n\t   * Controller for the mdCalendar component.\n\t   * @ngInject @constructor\n\t   */\n\t  function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant,\n\t      $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {\n\t    $mdTheming($element);\n\t    /**\n\t     * Dummy array-like object for virtual-repeat to iterate over. The length is the total\n\t     * number of months that can be viewed. This is shorter than ideal because of (potential)\n\t     * Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1181658.\n\t     */\n\t    this.items = {length: 2000};\n\t\n\t    if (this.maxDate && this.minDate) {\n\t      // Limit the number of months if min and max dates are set.\n\t      var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;\n\t      numMonths = Math.max(numMonths, 1);\n\t      // Add an additional month as the final dummy month for rendering purposes.\n\t      numMonths += 1;\n\t      this.items.length = numMonths;\n\t    }\n\t\n\t    /** @final {!angular.$animate} */\n\t    this.$animate = $animate;\n\t\n\t    /** @final {!angular.$q} */\n\t    this.$q = $q;\n\t\n\t    /** @final */\n\t    this.$mdInkRipple = $mdInkRipple;\n\t\n\t    /** @final */\n\t    this.$mdUtil = $mdUtil;\n\t\n\t    /** @final */\n\t    this.keyCode = $mdConstant.KEY_CODE;\n\t\n\t    /** @final */\n\t    this.dateUtil = $$mdDateUtil;\n\t\n\t    /** @final */\n\t    this.dateLocale = $mdDateLocale;\n\t\n\t    /** @final {!angular.JQLite} */\n\t    this.$element = $element;\n\t\n\t    /** @final {!angular.Scope} */\n\t    this.$scope = $scope;\n\t\n\t    /** @final {HTMLElement} */\n\t    this.calendarElement = $element[0].querySelector('.md-calendar');\n\t\n\t    /** @final {HTMLElement} */\n\t    this.calendarScroller = $element[0].querySelector('.md-virtual-repeat-scroller');\n\t\n\t    /** @final {Date} */\n\t    this.today = this.dateUtil.createDateAtMidnight();\n\t\n\t    /** @type {Date} */\n\t    this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);\n\t\n\t    if (this.minDate && this.minDate > this.firstRenderableDate) {\n\t      this.firstRenderableDate = this.minDate;\n\t    } else if (this.maxDate) {\n\t      // Calculate the difference between the start date and max date.\n\t      // Subtract 1 because it's an inclusive difference and 1 for the final dummy month.\n\t      //\n\t      var monthDifference = this.items.length - 2;\n\t      this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));\n\t    }\n\t\n\t\n\t    /** @final {number} Unique ID for this calendar instance. */\n\t    this.id = nextUniqueId++;\n\t\n\t    /** @type {!angular.NgModelController} */\n\t    this.ngModelCtrl = null;\n\t\n\t    /**\n\t     * The selected date. Keep track of this separately from the ng-model value so that we\n\t     * can know, when the ng-model value changes, what the previous value was before its updated\n\t     * in the component's UI.\n\t     *\n\t     * @type {Date}\n\t     */\n\t    this.selectedDate = null;\n\t\n\t    /**\n\t     * The date that is currently focused or showing in the calendar. This will initially be set\n\t     * to the ng-model value if set, otherwise to today. It will be updated as the user navigates\n\t     * to other months. The cell corresponding to the displayDate does not necesarily always have\n\t     * focus in the document (such as for cases when the user is scrolling the calendar).\n\t     * @type {Date}\n\t     */\n\t    this.displayDate = null;\n\t\n\t    /**\n\t     * The date that has or should have focus.\n\t     * @type {Date}\n\t     */\n\t    this.focusDate = null;\n\t\n\t    /** @type {boolean} */\n\t    this.isInitialized = false;\n\t\n\t    /** @type {boolean} */\n\t    this.isMonthTransitionInProgress = false;\n\t\n\t    // Unless the user specifies so, the calendar should not be a tab stop.\n\t    // This is necessary because ngAria might add a tabindex to anything with an ng-model\n\t    // (based on whether or not the user has turned that particular feature on/off).\n\t    if (!$attrs['tabindex']) {\n\t      $element.attr('tabindex', '-1');\n\t    }\n\t\n\t    var self = this;\n\t\n\t    /**\n\t     * Handles a click event on a date cell.\n\t     * Created here so that every cell can use the same function instance.\n\t     * @this {HTMLTableCellElement} The cell that was clicked.\n\t     */\n\t    this.cellClickHandler = function() {\n\t      var cellElement = this;\n\t      if (this.hasAttribute('data-timestamp')) {\n\t        $scope.$apply(function() {\n\t          var timestamp = Number(cellElement.getAttribute('data-timestamp'));\n\t          self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));\n\t        });\n\t      }\n\t    };\n\t\n\t    this.attachCalendarEventListeners();\n\t  }\n\t  CalendarCtrl.$inject = [\"$element\", \"$attrs\", \"$scope\", \"$animate\", \"$q\", \"$mdConstant\", \"$mdTheming\", \"$$mdDateUtil\", \"$mdDateLocale\", \"$mdInkRipple\", \"$mdUtil\"];\n\t\n\t\n\t  /*** Initialization ***/\n\t\n\t  /**\n\t   * Sets up the controller's reference to ngModelController.\n\t   * @param {!angular.NgModelController} ngModelCtrl\n\t   */\n\t  CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {\n\t    this.ngModelCtrl = ngModelCtrl;\n\t\n\t    var self = this;\n\t    ngModelCtrl.$render = function() {\n\t      self.changeSelectedDate(self.ngModelCtrl.$viewValue);\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Initialize the calendar by building the months that are initially visible.\n\t   * Initialization should occur after the ngModel value is known.\n\t   */\n\t  CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {\n\t    this.buildWeekHeader();\n\t    this.hideVerticalScrollbar();\n\t\n\t    this.displayDate = this.selectedDate || this.today;\n\t    this.isInitialized = true;\n\t  };\n\t\n\t  /**\n\t   * Hides the vertical scrollbar on the calendar scroller by setting the width on the\n\t   * calendar scroller and the `overflow: hidden` wrapper around the scroller, and then setting\n\t   * a padding-right on the scroller equal to the width of the browser's scrollbar.\n\t   *\n\t   * This will cause a reflow.\n\t   */\n\t  CalendarCtrl.prototype.hideVerticalScrollbar = function() {\n\t    var element = this.$element[0];\n\t\n\t    var scrollMask = element.querySelector('.md-calendar-scroll-mask');\n\t    var scroller = this.calendarScroller;\n\t\n\t    var headerWidth = element.querySelector('.md-calendar-day-header').clientWidth;\n\t    var scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;\n\t\n\t    scrollMask.style.width = headerWidth + 'px';\n\t    scroller.style.width = (headerWidth + scrollbarWidth) + 'px';\n\t    scroller.style.paddingRight = scrollbarWidth + 'px';\n\t  };\n\t\n\t\n\t  /** Attach event listeners for the calendar. */\n\t  CalendarCtrl.prototype.attachCalendarEventListeners = function() {\n\t    // Keyboard interaction.\n\t    this.$element.on('keydown', angular.bind(this, this.handleKeyEvent));\n\t  };\n\t  \n\t  /*** User input handling ***/\n\t\n\t  /**\n\t   * Handles a key event in the calendar with the appropriate action. The action will either\n\t   * be to select the focused date or to navigate to focus a new date.\n\t   * @param {KeyboardEvent} event\n\t   */\n\t  CalendarCtrl.prototype.handleKeyEvent = function(event) {\n\t    var self = this;\n\t    this.$scope.$apply(function() {\n\t      // Capture escape and emit back up so that a wrapping component\n\t      // (such as a date-picker) can decide to close.\n\t      if (event.which == self.keyCode.ESCAPE || event.which == self.keyCode.TAB) {\n\t        self.$scope.$emit('md-calendar-close');\n\t\n\t        if (event.which == self.keyCode.TAB) {\n\t          event.preventDefault();\n\t        }\n\t\n\t        return;\n\t      }\n\t\n\t      // Remaining key events fall into two categories: selection and navigation.\n\t      // Start by checking if this is a selection event.\n\t      if (event.which === self.keyCode.ENTER) {\n\t        self.setNgModelValue(self.displayDate);\n\t        event.preventDefault();\n\t        return;\n\t      }\n\t\n\t      // Selection isn't occuring, so the key event is either navigation or nothing.\n\t      var date = self.getFocusDateFromKeyEvent(event);\n\t      if (date) {\n\t        date = self.boundDateByMinAndMax(date);\n\t        event.preventDefault();\n\t        event.stopPropagation();\n\t\n\t        // Since this is a keyboard interaction, actually give the newly focused date keyboard\n\t        // focus after the been brought into view.\n\t        self.changeDisplayDate(date).then(function () {\n\t          self.focus(date);\n\t        });\n\t      }\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Gets the date to focus as the result of a key event.\n\t   * @param {KeyboardEvent} event\n\t   * @returns {Date} Date to navigate to, or null if the key does not match a calendar shortcut.\n\t   */\n\t  CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {\n\t    var dateUtil = this.dateUtil;\n\t    var keyCode = this.keyCode;\n\t\n\t    switch (event.which) {\n\t      case keyCode.RIGHT_ARROW: return dateUtil.incrementDays(this.displayDate, 1);\n\t      case keyCode.LEFT_ARROW: return dateUtil.incrementDays(this.displayDate, -1);\n\t      case keyCode.DOWN_ARROW:\n\t        return event.metaKey ?\n\t          dateUtil.incrementMonths(this.displayDate, 1) :\n\t          dateUtil.incrementDays(this.displayDate, 7);\n\t      case keyCode.UP_ARROW:\n\t        return event.metaKey ?\n\t          dateUtil.incrementMonths(this.displayDate, -1) :\n\t          dateUtil.incrementDays(this.displayDate, -7);\n\t      case keyCode.PAGE_DOWN: return dateUtil.incrementMonths(this.displayDate, 1);\n\t      case keyCode.PAGE_UP: return dateUtil.incrementMonths(this.displayDate, -1);\n\t      case keyCode.HOME: return dateUtil.getFirstDateOfMonth(this.displayDate);\n\t      case keyCode.END: return dateUtil.getLastDateOfMonth(this.displayDate);\n\t      default: return null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Gets the \"index\" of the currently selected date as it would be in the virtual-repeat.\n\t   * @returns {number}\n\t   */\n\t  CalendarCtrl.prototype.getSelectedMonthIndex = function() {\n\t    return this.dateUtil.getMonthDistance(this.firstRenderableDate,\n\t        this.selectedDate || this.today);\n\t  };\n\t\n\t  /**\n\t   * Scrolls to the month of the given date.\n\t   * @param {Date} date\n\t   */\n\t  CalendarCtrl.prototype.scrollToMonth = function(date) {\n\t    if (!this.dateUtil.isValidDate(date)) {\n\t      return;\n\t    }\n\t\n\t    var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);\n\t    this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;\n\t  };\n\t\n\t  /**\n\t   * Sets the ng-model value for the calendar and emits a change event.\n\t   * @param {Date} date\n\t   */\n\t  CalendarCtrl.prototype.setNgModelValue = function(date) {\n\t    this.$scope.$emit('md-calendar-change', date);\n\t    this.ngModelCtrl.$setViewValue(date);\n\t    this.ngModelCtrl.$render();\n\t  };\n\t\n\t  /**\n\t   * Focus the cell corresponding to the given date.\n\t   * @param {Date=} opt_date\n\t   */\n\t  CalendarCtrl.prototype.focus = function(opt_date) {\n\t    var date = opt_date || this.selectedDate || this.today;\n\t\n\t    var previousFocus = this.calendarElement.querySelector('.md-focus');\n\t    if (previousFocus) {\n\t      previousFocus.classList.remove(FOCUSED_DATE_CLASS);\n\t    }\n\t\n\t    var cellId = this.getDateId(date);\n\t    var cell = document.getElementById(cellId);\n\t    if (cell) {\n\t      cell.classList.add(FOCUSED_DATE_CLASS);\n\t      cell.focus();\n\t    } else {\n\t      this.focusDate = date;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * If a date exceeds minDate or maxDate, returns date matching minDate or maxDate, respectively.\n\t   * Otherwise, returns the date.\n\t   * @param {Date} date\n\t   * @return {Date}\n\t   */\n\t  CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {\n\t    var boundDate = date;\n\t    if (this.minDate && date < this.minDate) {\n\t      boundDate = new Date(this.minDate.getTime());\n\t    }\n\t    if (this.maxDate && date > this.maxDate) {\n\t      boundDate = new Date(this.maxDate.getTime());\n\t    }\n\t    return boundDate;\n\t  };\n\t\n\t  /*** Updating the displayed / selected date ***/\n\t\n\t  /**\n\t   * Change the selected date in the calendar (ngModel value has already been changed).\n\t   * @param {Date} date\n\t   */\n\t  CalendarCtrl.prototype.changeSelectedDate = function(date) {\n\t    var self = this;\n\t    var previousSelectedDate = this.selectedDate;\n\t    this.selectedDate = date;\n\t    this.changeDisplayDate(date).then(function() {\n\t\n\t      // Remove the selected class from the previously selected date, if any.\n\t      if (previousSelectedDate) {\n\t        var prevDateCell =\n\t            document.getElementById(self.getDateId(previousSelectedDate));\n\t        if (prevDateCell) {\n\t          prevDateCell.classList.remove(SELECTED_DATE_CLASS);\n\t          prevDateCell.setAttribute('aria-selected', 'false');\n\t        }\n\t      }\n\t\n\t      // Apply the select class to the new selected date if it is set.\n\t      if (date) {\n\t        var dateCell = document.getElementById(self.getDateId(date));\n\t        if (dateCell) {\n\t          dateCell.classList.add(SELECTED_DATE_CLASS);\n\t          dateCell.setAttribute('aria-selected', 'true');\n\t        }\n\t      }\n\t    });\n\t  };\n\t\n\t\n\t  /**\n\t   * Change the date that is being shown in the calendar. If the given date is in a different\n\t   * month, the displayed month will be transitioned.\n\t   * @param {Date} date\n\t   */\n\t  CalendarCtrl.prototype.changeDisplayDate = function(date) {\n\t    // Initialization is deferred until this function is called because we want to reflect\n\t    // the starting value of ngModel.\n\t    if (!this.isInitialized) {\n\t      this.buildInitialCalendarDisplay();\n\t      return this.$q.when();\n\t    }\n\t\n\t    // If trying to show an invalid date or a transition is in progress, do nothing.\n\t    if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) {\n\t      return this.$q.when();\n\t    }\n\t\n\t    this.isMonthTransitionInProgress = true;\n\t    var animationPromise = this.animateDateChange(date);\n\t\n\t    this.displayDate = date;\n\t\n\t    var self = this;\n\t    animationPromise.then(function() {\n\t      self.isMonthTransitionInProgress = false;\n\t    });\n\t\n\t    return animationPromise;\n\t  };\n\t\n\t  /**\n\t   * Animates the transition from the calendar's current month to the given month.\n\t   * @param {Date} date\n\t   * @returns {angular.$q.Promise} The animation promise.\n\t   */\n\t  CalendarCtrl.prototype.animateDateChange = function(date) {\n\t    this.scrollToMonth(date);\n\t    return this.$q.when();\n\t  };\n\t\n\t  /*** Constructing the calendar table ***/\n\t\n\t  /**\n\t   * Builds and appends a day-of-the-week header to the calendar.\n\t   * This should only need to be called once during initialization.\n\t   */\n\t  CalendarCtrl.prototype.buildWeekHeader = function() {\n\t    var firstDayOfWeek = this.dateLocale.firstDayOfWeek;\n\t    var shortDays = this.dateLocale.shortDays;\n\t\n\t    var row = document.createElement('tr');\n\t    for (var i = 0; i < 7; i++) {\n\t      var th = document.createElement('th');\n\t      th.textContent = shortDays[(i + firstDayOfWeek) % 7];\n\t      row.appendChild(th);\n\t    }\n\t\n\t    this.$element.find('thead').append(row);\n\t  };\n\t\n\t    /**\n\t   * Gets an identifier for a date unique to the calendar instance for internal\n\t   * purposes. Not to be displayed.\n\t   * @param {Date} date\n\t   * @returns {string}\n\t   */\n\t  CalendarCtrl.prototype.getDateId = function(date) {\n\t    return [\n\t      'md',\n\t      this.id,\n\t      date.getFullYear(),\n\t      date.getMonth(),\n\t      date.getDate()\n\t    ].join('-');\n\t  };\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t\n\t  angular.module('material.components.datepicker')\n\t      .directive('mdCalendarMonth', mdCalendarMonthDirective);\n\t\n\t\n\t  /**\n\t   * Private directive consumed by md-calendar. Having this directive lets the calender use\n\t   * md-virtual-repeat and also cleanly separates the month DOM construction functions from\n\t   * the rest of the calendar controller logic.\n\t   */\n\t  function mdCalendarMonthDirective() {\n\t    return {\n\t      require: ['^^mdCalendar', 'mdCalendarMonth'],\n\t      scope: {offset: '=mdMonthOffset'},\n\t      controller: CalendarMonthCtrl,\n\t      controllerAs: 'mdMonthCtrl',\n\t      bindToController: true,\n\t      link: function(scope, element, attrs, controllers) {\n\t        var calendarCtrl = controllers[0];\n\t        var monthCtrl = controllers[1];\n\t\n\t        monthCtrl.calendarCtrl = calendarCtrl;\n\t        monthCtrl.generateContent();\n\t\n\t        // The virtual-repeat re-uses the same DOM elements, so there are only a limited number\n\t        // of repeated items that are linked, and then those elements have their bindings updataed.\n\t        // Since the months are not generated by bindings, we simply regenerate the entire thing\n\t        // when the binding (offset) changes.\n\t        scope.$watch(function() { return monthCtrl.offset; }, function(offset, oldOffset) {\n\t          if (offset != oldOffset) {\n\t            monthCtrl.generateContent();\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }\n\t\n\t  /** Class applied to the cell for today. */\n\t  var TODAY_CLASS = 'md-calendar-date-today';\n\t\n\t  /** Class applied to the selected date cell/. */\n\t  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';\n\t\n\t  /** Class applied to the focused date cell/. */\n\t  var FOCUSED_DATE_CLASS = 'md-focus';\n\t\n\t  /**\n\t   * Controller for a single calendar month.\n\t   * @ngInject @constructor\n\t   */\n\t  function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {\n\t    this.dateUtil = $$mdDateUtil;\n\t    this.dateLocale = $mdDateLocale;\n\t    this.$element = $element;\n\t    this.calendarCtrl = null;\n\t\n\t    /**\n\t     * Number of months from the start of the month \"items\" that the currently rendered month\n\t     * occurs. Set via angular data binding.\n\t     * @type {number}\n\t     */\n\t    this.offset;\n\t\n\t    /**\n\t     * Date cell to focus after appending the month to the document.\n\t     * @type {HTMLElement}\n\t     */\n\t    this.focusAfterAppend = null;\n\t  }\n\t  CalendarMonthCtrl.$inject = [\"$element\", \"$$mdDateUtil\", \"$mdDateLocale\"];\n\t\n\t  /** Generate and append the content for this month to the directive element. */\n\t  CalendarMonthCtrl.prototype.generateContent = function() {\n\t    var calendarCtrl = this.calendarCtrl;\n\t    var date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);\n\t\n\t    this.$element.empty();\n\t    this.$element.append(this.buildCalendarForMonth(date));\n\t\n\t    if (this.focusAfterAppend) {\n\t      this.focusAfterAppend.classList.add(FOCUSED_DATE_CLASS);\n\t      this.focusAfterAppend.focus();\n\t      this.focusAfterAppend = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Creates a single cell to contain a date in the calendar with all appropriate\n\t   * attributes and classes added. If a date is given, the cell content will be set\n\t   * based on the date.\n\t   * @param {Date=} opt_date\n\t   * @returns {HTMLElement}\n\t   */\n\t  CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {\n\t    var calendarCtrl = this.calendarCtrl;\n\t\n\t    // TODO(jelbourn): cloneNode is likely a faster way of doing this.\n\t    var cell = document.createElement('td');\n\t    cell.tabIndex = -1;\n\t    cell.classList.add('md-calendar-date');\n\t    cell.setAttribute('role', 'gridcell');\n\t\n\t    if (opt_date) {\n\t      cell.setAttribute('tabindex', '-1');\n\t      cell.setAttribute('aria-label', this.dateLocale.longDateFormatter(opt_date));\n\t      cell.id = calendarCtrl.getDateId(opt_date);\n\t\n\t      // Use `data-timestamp` attribute because IE10 does not support the `dataset` property.\n\t      cell.setAttribute('data-timestamp', opt_date.getTime());\n\t\n\t      // TODO(jelourn): Doing these comparisons for class addition during generation might be slow.\n\t      // It may be better to finish the construction and then query the node and add the class.\n\t      if (this.dateUtil.isSameDay(opt_date, calendarCtrl.today)) {\n\t        cell.classList.add(TODAY_CLASS);\n\t      }\n\t\n\t      if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) &&\n\t          this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {\n\t        cell.classList.add(SELECTED_DATE_CLASS);\n\t        cell.setAttribute('aria-selected', 'true');\n\t      }\n\t\n\t      var cellText = this.dateLocale.dates[opt_date.getDate()];\n\t\n\t      if (this.dateUtil.isDateWithinRange(opt_date,\n\t          this.calendarCtrl.minDate, this.calendarCtrl.maxDate)) {\n\t        // Add a indicator for select, hover, and focus states.\n\t        var selectionIndicator = document.createElement('span');\n\t        cell.appendChild(selectionIndicator);\n\t        selectionIndicator.classList.add('md-calendar-date-selection-indicator');\n\t        selectionIndicator.textContent = cellText;\n\t\n\t        cell.addEventListener('click', calendarCtrl.cellClickHandler);\n\t\n\t        if (calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate)) {\n\t          this.focusAfterAppend = cell;\n\t        }\n\t      } else {\n\t        cell.classList.add('md-calendar-date-disabled');\n\t        cell.textContent = cellText;\n\t      }\n\t    }\n\t\n\t    return cell;\n\t  };\n\t\n\t  /**\n\t   * Builds a `tr` element for the calendar grid.\n\t   * @param rowNumber The week number within the month.\n\t   * @returns {HTMLElement}\n\t   */\n\t  CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {\n\t    var row = document.createElement('tr');\n\t    row.setAttribute('role', 'row');\n\t\n\t    // Because of an NVDA bug (with Firefox), the row needs an aria-label in order\n\t    // to prevent the entire row being read aloud when the user moves between rows.\n\t    // See http://community.nvda-project.org/ticket/4643.\n\t    row.setAttribute('aria-label', this.dateLocale.weekNumberFormatter(rowNumber));\n\t\n\t    return row;\n\t  };\n\t\n\t  /**\n\t   * Builds the <tbody> content for the given date's month.\n\t   * @param {Date=} opt_dateInMonth\n\t   * @returns {DocumentFragment} A document fragment containing the <tr> elements.\n\t   */\n\t  CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {\n\t    var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date();\n\t\n\t    var firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date);\n\t    var firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth);\n\t    var numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date);\n\t\n\t    // Store rows for the month in a document fragment so that we can append them all at once.\n\t    var monthBody = document.createDocumentFragment();\n\t\n\t    var rowNumber = 1;\n\t    var row = this.buildDateRow(rowNumber);\n\t    monthBody.appendChild(row);\n\t\n\t    // If this is the final month in the list of items, only the first week should render,\n\t    // so we should return immediately after the first row is complete and has been\n\t    // attached to the body.\n\t    var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1;\n\t\n\t    // Add a label for the month. If the month starts on a Sun/Mon/Tues, the month label\n\t    // goes on a row above the first of the month. Otherwise, the month label takes up the first\n\t    // two cells of the first row.\n\t    var blankCellOffset = 0;\n\t    var monthLabelCell = document.createElement('td');\n\t    monthLabelCell.classList.add('md-calendar-month-label');\n\t    // If the entire month is after the max date, render the label as a disabled state.\n\t    if (this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate) {\n\t      monthLabelCell.classList.add('md-calendar-month-label-disabled');\n\t    }\n\t    monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);\n\t    if (firstDayOfTheWeek <= 2) {\n\t      monthLabelCell.setAttribute('colspan', '7');\n\t\n\t      var monthLabelRow = this.buildDateRow();\n\t      monthLabelRow.appendChild(monthLabelCell);\n\t      monthBody.insertBefore(monthLabelRow, row);\n\t\n\t      if (isFinalMonth) {\n\t        return monthBody;\n\t      }\n\t    } else {\n\t      blankCellOffset = 2;\n\t      monthLabelCell.setAttribute('colspan', '2');\n\t      row.appendChild(monthLabelCell);\n\t    }\n\t\n\t    // Add a blank cell for each day of the week that occurs before the first of the month.\n\t    // For example, if the first day of the month is a Tuesday, add blank cells for Sun and Mon.\n\t    // The blankCellOffset is needed in cases where the first N cells are used by the month label.\n\t    for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) {\n\t      row.appendChild(this.buildDateCell());\n\t    }\n\t\n\t    // Add a cell for each day of the month, keeping track of the day of the week so that\n\t    // we know when to start a new row.\n\t    var dayOfWeek = firstDayOfTheWeek;\n\t    var iterationDate = firstDayOfMonth;\n\t    for (var d = 1; d <= numberOfDaysInMonth; d++) {\n\t      // If we've reached the end of the week, start a new row.\n\t      if (dayOfWeek === 7) {\n\t        // We've finished the first row, so we're done if this is the final month.\n\t        if (isFinalMonth) {\n\t          return monthBody;\n\t        }\n\t        dayOfWeek = 0;\n\t        rowNumber++;\n\t        row = this.buildDateRow(rowNumber);\n\t        monthBody.appendChild(row);\n\t      }\n\t\n\t      iterationDate.setDate(d);\n\t      var cell = this.buildDateCell(iterationDate);\n\t      row.appendChild(cell);\n\t\n\t      dayOfWeek++;\n\t    }\n\t\n\t    // Ensure that the last row of the month has 7 cells.\n\t    while (row.childNodes.length < 7) {\n\t      row.appendChild(this.buildDateCell());\n\t    }\n\t\n\t    // Ensure that all months have 6 rows. This is necessary for now because the virtual-repeat\n\t    // requires that all items have exactly the same height.\n\t    while (monthBody.childNodes.length < 6) {\n\t      var whitespaceRow = this.buildDateRow();\n\t      for (var i = 0; i < 7; i++) {\n\t        whitespaceRow.appendChild(this.buildDateCell());\n\t      }\n\t      monthBody.appendChild(whitespaceRow);\n\t    }\n\t\n\t    return monthBody;\n\t  };\n\t\n\t  /**\n\t   * Gets the day-of-the-week index for a date for the current locale.\n\t   * @private\n\t   * @param {Date} date\n\t   * @returns {number} The column index of the date in the calendar.\n\t   */\n\t  CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {\n\t    return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7\n\t  };\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc service\n\t   * @name $mdDateLocaleProvider\n\t   * @module material.components.datepicker\n\t   *\n\t   * @description\n\t   * The `$mdDateLocaleProvider` is the provider that creates the `$mdDateLocale` service.\n\t   * This provider that allows the user to specify messages, formatters, and parsers for date\n\t   * internationalization. The `$mdDateLocale` service itself is consumed by Angular Material\n\t   * components that that deal with dates.\n\t   *\n\t   * @property {(Array<string>)=} months Array of month names (in order).\n\t   * @property {(Array<string>)=} shortMonths Array of abbreviated month names.\n\t   * @property {(Array<string>)=} days Array of the days of the week (in order).\n\t   * @property {(Array<string>)=} shortDays Array of abbreviated dayes of the week.\n\t   * @property {(Array<string>)=} dates Array of dates of the month. Only necessary for locales\n\t   *     using a numeral system other than [1, 2, 3...].\n\t   * @property {(Array<string>)=} firstDayOfWeek The first day of the week. Sunday = 0, Monday = 1,\n\t   *    etc.\n\t   * @property {(function(string): Date)=} parseDate Function to parse a date object from a string.\n\t   * @property {(function(Date): string)=} formatDate Function to format a date object to a string.\n\t   * @property {(function(Date): string)=} monthHeaderFormatter Function that returns the label for\n\t   *     a month given a date.\n\t   * @property {(function(number): string)=} weekNumberFormatter Function that returns a label for\n\t   *     a week given the week number.\n\t   * @property {(string)=} msgCalendar Translation of the label \"Calendar\" for the current locale.\n\t   * @property {(string)=} msgOpenCalendar Translation of the button label \"Open calendar\" for the\n\t   *     current locale.\n\t   *\n\t   * @usage\n\t   * <hljs lang=\"js\">\n\t   *   myAppModule.config(function($mdDateLocaleProvider) {\n\t   *\n\t   *     // Example of a French localization.\n\t   *     $mdDateLocaleProvider.months = ['janvier', 'février', 'mars', ...];\n\t   *     $mdDateLocaleProvider.shortMonths = ['janv', 'févr', 'mars', ...];\n\t   *     $mdDateLocaleProvider.days = ['dimanche', 'lundi', 'mardi', ...];\n\t   *     $mdDateLocaleProvider.shortDays = ['Di', 'Lu', 'Ma', ...];\n\t   *\n\t   *     // Can change week display to start on Monday.\n\t   *     $mdDateLocaleProvider.firstDayOfWeek = 1;\n\t   *\n\t   *     // Optional.\n\t   *     $mdDateLocaleProvider.dates = [1, 2, 3, 4, 5, 6, ...];\n\t   *\n\t   *     // Example uses moment.js to parse and format dates.\n\t   *     $mdDateLocaleProvider.parseDate = function(dateString) {\n\t   *       var m = moment(dateString, 'L', true);\n\t   *       return m.isValid() ? m.toDate() : new Date(NaN);\n\t   *     };\n\t   *\n\t   *     $mdDateLocaleProvider.formatDate = function(date) {\n\t   *       return moment(date).format('L');\n\t   *     };\n\t   *\n\t   *     $mdDateLocaleProvider.monthHeaderFormatter = function(date) {\n\t   *       return myShortMonths[date.getMonth()] + ' ' + date.getFullYear();\n\t   *     };\n\t   *\n\t   *     // In addition to date display, date components also need localized messages\n\t   *     // for aria-labels for screen-reader users.\n\t   *\n\t   *     $mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {\n\t   *       return 'Semaine ' + weekNumber;\n\t   *     };\n\t   *\n\t   *     $mdDateLocaleProvider.msgCalendar = 'Calendrier';\n\t   *     $mdDateLocaleProvider.msgOpenCalendar = 'Ouvrir le calendrier';\n\t   *\n\t   * });\n\t   * </hljs>\n\t   *\n\t   */\n\t\n\t  angular.module('material.components.datepicker').config([\"$provide\", function($provide) {\n\t    // TODO(jelbourn): Assert provided values are correctly formatted. Need assertions.\n\t\n\t    /** @constructor */\n\t    function DateLocaleProvider() {\n\t      /** Array of full month names. E.g., ['January', 'Febuary', ...] */\n\t      this.months = null;\n\t\n\t      /** Array of abbreviated month names. E.g., ['Jan', 'Feb', ...] */\n\t      this.shortMonths = null;\n\t\n\t      /** Array of full day of the week names. E.g., ['Monday', 'Tuesday', ...] */\n\t      this.days = null;\n\t\n\t      /** Array of abbreviated dat of the week names. E.g., ['M', 'T', ...] */\n\t      this.shortDays = null;\n\t\n\t      /** Array of dates of a month (1 - 31). Characters might be different in some locales. */\n\t      this.dates = null;\n\t\n\t      /** Index of the first day of the week. 0 = Sunday, 1 = Monday, etc. */\n\t      this.firstDayOfWeek = 0;\n\t\n\t      /**\n\t       * Function that converts the date portion of a Date to a string.\n\t       * @type {(function(Date): string)}\n\t       */\n\t      this.formatDate = null;\n\t\n\t      /**\n\t       * Function that converts a date string to a Date object (the date portion)\n\t       * @type {function(string): Date}\n\t       */\n\t      this.parseDate = null;\n\t\n\t      /**\n\t       * Function that formats a Date into a month header string.\n\t       * @type {function(Date): string}\n\t       */\n\t      this.monthHeaderFormatter = null;\n\t\n\t      /**\n\t       * Function that formats a week number into a label for the week.\n\t       * @type {function(number): string}\n\t       */\n\t      this.weekNumberFormatter = null;\n\t\n\t      /**\n\t       * Function that formats a date into a long aria-label that is read\n\t       * when the focused date changes.\n\t       * @type {function(Date): string}\n\t       */\n\t      this.longDateFormatter = null;\n\t\n\t      /**\n\t       * ARIA label for the calendar \"dialog\" used in the datepicker.\n\t       * @type {string}\n\t       */\n\t      this.msgCalendar = '';\n\t\n\t      /**\n\t       * ARIA label for the datepicker's \"Open calendar\" buttons.\n\t       * @type {string}\n\t       */\n\t      this.msgOpenCalendar = '';\n\t    }\n\t\n\t    /**\n\t     * Factory function that returns an instance of the dateLocale service.\n\t     * @ngInject\n\t     * @param $locale\n\t     * @returns {DateLocale}\n\t     */\n\t    DateLocaleProvider.prototype.$get = function($locale) {\n\t      /**\n\t       * Default date-to-string formatting function.\n\t       * @param {!Date} date\n\t       * @returns {string}\n\t       */\n\t      function defaultFormatDate(date) {\n\t        if (!date) {\n\t          return '';\n\t        }\n\t\n\t        // All of the dates created through ng-material *should* be set to midnight.\n\t        // If we encounter a date where the localeTime shows at 11pm instead of midnight,\n\t        // we have run into an issue with DST where we need to increment the hour by one:\n\t        // var d = new Date(1992, 9, 8, 0, 0, 0);\n\t        // d.toLocaleString(); // == \"10/7/1992, 11:00:00 PM\"\n\t        var localeTime = date.toLocaleTimeString();\n\t        var formatDate = date;\n\t        if (date.getHours() == 0 &&\n\t            (localeTime.indexOf('11:') !== -1 || localeTime.indexOf('23:') !== -1)) {\n\t          formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0);\n\t        }\n\t\n\t        return formatDate.toLocaleDateString();\n\t      }\n\t\n\t      /**\n\t       * Default string-to-date parsing function.\n\t       * @param {string} dateString\n\t       * @returns {!Date}\n\t       */\n\t      function defaultParseDate(dateString) {\n\t        return new Date(dateString);\n\t      }\n\t\n\t      /**\n\t       * Default function to determine whether a string makes sense to be\n\t       * parsed to a Date object.\n\t       *\n\t       * This is very permissive and is just a basic sanity check to ensure that\n\t       * things like single integers aren't able to be parsed into dates.\n\t       * @param {string} dateString\n\t       * @returns {boolean}\n\t       */\n\t      function defaultIsDateComplete(dateString) {\n\t        dateString = dateString.trim();\n\t\n\t        // Looks for three chunks of content (either numbers or text) separated\n\t        // by delimiters.\n\t        var re = /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \\.,]+|[\\/\\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/;\n\t        return re.test(dateString);\n\t      }\n\t\n\t      /**\n\t       * Default date-to-string formatter to get a month header.\n\t       * @param {!Date} date\n\t       * @returns {string}\n\t       */\n\t      function defaultMonthHeaderFormatter(date) {\n\t        return service.shortMonths[date.getMonth()] + ' ' + date.getFullYear();\n\t      }\n\t\n\t      /**\n\t       * Default week number formatter.\n\t       * @param number\n\t       * @returns {string}\n\t       */\n\t      function defaultWeekNumberFormatter(number) {\n\t        return 'Week ' + number;\n\t      }\n\t\n\t      /**\n\t       * Default formatter for date cell aria-labels.\n\t       * @param {!Date} date\n\t       * @returns {string}\n\t       */\n\t      function defaultLongDateFormatter(date) {\n\t        // Example: 'Thursday June 18 2015'\n\t        return [\n\t          service.days[date.getDay()],\n\t          service.months[date.getMonth()],\n\t          service.dates[date.getDate()],\n\t          date.getFullYear()\n\t        ].join(' ');\n\t      }\n\t\n\t      // The default \"short\" day strings are the first character of each day,\n\t      // e.g., \"Monday\" => \"M\".\n\t      var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {\n\t        return day[0];\n\t      });\n\t\n\t      // The default dates are simply the numbers 1 through 31.\n\t      var defaultDates = Array(32);\n\t      for (var i = 1; i <= 31; i++) {\n\t        defaultDates[i] = i;\n\t      }\n\t\n\t      // Default ARIA messages are in English (US).\n\t      var defaultMsgCalendar = 'Calendar';\n\t      var defaultMsgOpenCalendar = 'Open calendar';\n\t\n\t      var service = {\n\t        months: this.months || $locale.DATETIME_FORMATS.MONTH,\n\t        shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,\n\t        days: this.days || $locale.DATETIME_FORMATS.DAY,\n\t        shortDays: this.shortDays || defaultShortDays,\n\t        dates: this.dates || defaultDates,\n\t        firstDayOfWeek: this.firstDayOfWeek || 0,\n\t        formatDate: this.formatDate || defaultFormatDate,\n\t        parseDate: this.parseDate || defaultParseDate,\n\t        isDateComplete: this.isDateComplete || defaultIsDateComplete,\n\t        monthHeaderFormatter: this.monthHeaderFormatter || defaultMonthHeaderFormatter,\n\t        weekNumberFormatter: this.weekNumberFormatter || defaultWeekNumberFormatter,\n\t        longDateFormatter: this.longDateFormatter || defaultLongDateFormatter,\n\t        msgCalendar: this.msgCalendar || defaultMsgCalendar,\n\t        msgOpenCalendar: this.msgOpenCalendar || defaultMsgOpenCalendar\n\t      };\n\t\n\t      return service;\n\t    };\n\t    DateLocaleProvider.prototype.$get.$inject = [\"$locale\"];\n\t\n\t    $provide.provider('$mdDateLocale', new DateLocaleProvider());\n\t  }]);\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  // POST RELEASE\n\t  // TODO(jelbourn): Demo that uses moment.js\n\t  // TODO(jelbourn): make sure this plays well with validation and ngMessages.\n\t  // TODO(jelbourn): calendar pane doesn't open up outside of visible viewport.\n\t  // TODO(jelbourn): forward more attributes to the internal input (required, autofocus, etc.)\n\t  // TODO(jelbourn): something better for mobile (calendar panel takes up entire screen?)\n\t  // TODO(jelbourn): input behavior (masking? auto-complete?)\n\t  // TODO(jelbourn): UTC mode\n\t  // TODO(jelbourn): RTL\n\t\n\t\n\t  angular.module('material.components.datepicker')\n\t      .directive('mdDatepicker', datePickerDirective);\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name mdDatepicker\n\t   * @module material.components.datepicker\n\t   *\n\t   * @param {Date} ng-model The component's model. Expects a JavaScript Date object.\n\t   * @param {expression=} ng-change Expression evaluated when the model value changes.\n\t   * @param {Date=} md-min-date Expression representing a min date (inclusive).\n\t   * @param {Date=} md-max-date Expression representing a max date (inclusive).\n\t   * @param {boolean=} disabled Whether the datepicker is disabled.\n\t   * @param {boolean=} required Whether a value is required for the datepicker.\n\t   *\n\t   * @description\n\t   * `<md-datepicker>` is a component used to select a single date.\n\t   * For information on how to configure internationalization for the date picker,\n\t   * see `$mdDateLocaleProvider`.\n\t   *\n\t   * This component supports [ngMessages](https://docs.angularjs.org/api/ngMessages/directive/ngMessages).\n\t   * Supported attributes are:\n\t   * * `required`: whether a required date is not set.\n\t   * * `mindate`: whether the selected date is before the minimum allowed date.\n\t   * * `maxdate`: whether the selected date is after the maximum allowed date.\n\t   *\n\t   * @usage\n\t   * <hljs lang=\"html\">\n\t   *   <md-datepicker ng-model=\"birthday\"></md-datepicker>\n\t   * </hljs>\n\t   *\n\t   */\n\t  function datePickerDirective() {\n\t    return {\n\t      template:\n\t          // Buttons are not in the tab order because users can open the calendar via keyboard\n\t          // interaction on the text input, and multiple tab stops for one component (picker)\n\t          // may be confusing.\n\t          '<md-button class=\"md-datepicker-button md-icon-button\" type=\"button\" ' +\n\t              'tabindex=\"-1\" aria-hidden=\"true\" ' +\n\t              'ng-click=\"ctrl.openCalendarPane($event)\">' +\n\t            '<md-icon class=\"md-datepicker-calendar-icon\" md-svg-icon=\"md-calendar\"></md-icon>' +\n\t          '</md-button>' +\n\t          '<div class=\"md-datepicker-input-container\" ' +\n\t              'ng-class=\"{\\'md-datepicker-focused\\': ctrl.isFocused}\">' +\n\t            '<input class=\"md-datepicker-input\" aria-haspopup=\"true\" ' +\n\t                'ng-focus=\"ctrl.setFocused(true)\" ng-blur=\"ctrl.setFocused(false)\">' +\n\t            '<md-button type=\"button\" md-no-ink ' +\n\t                'class=\"md-datepicker-triangle-button md-icon-button\" ' +\n\t                'ng-click=\"ctrl.openCalendarPane($event)\" ' +\n\t                'aria-label=\"{{::ctrl.dateLocale.msgOpenCalendar}}\">' +\n\t              '<div class=\"md-datepicker-expand-triangle\"></div>' +\n\t            '</md-button>' +\n\t          '</div>' +\n\t\n\t          // This pane will be detached from here and re-attached to the document body.\n\t          '<div class=\"md-datepicker-calendar-pane md-whiteframe-z1\">' +\n\t            '<div class=\"md-datepicker-input-mask\">' +\n\t              '<div class=\"md-datepicker-input-mask-opaque\"></div>' +\n\t            '</div>' +\n\t            '<div class=\"md-datepicker-calendar\">' +\n\t              '<md-calendar role=\"dialog\" aria-label=\"{{::ctrl.dateLocale.msgCalendar}}\" ' +\n\t                  'md-min-date=\"ctrl.minDate\" md-max-date=\"ctrl.maxDate\"' +\n\t                  'ng-model=\"ctrl.date\" ng-if=\"ctrl.isCalendarOpen\">' +\n\t              '</md-calendar>' +\n\t            '</div>' +\n\t          '</div>',\n\t      require: ['ngModel', 'mdDatepicker'],\n\t      scope: {\n\t        minDate: '=mdMinDate',\n\t        maxDate: '=mdMaxDate',\n\t        placeholder: '@mdPlaceholder'\n\t      },\n\t      controller: DatePickerCtrl,\n\t      controllerAs: 'ctrl',\n\t      bindToController: true,\n\t      link: function(scope, element, attr, controllers) {\n\t        var ngModelCtrl = controllers[0];\n\t        var mdDatePickerCtrl = controllers[1];\n\t\n\t        mdDatePickerCtrl.configureNgModel(ngModelCtrl);\n\t      }\n\t    };\n\t  }\n\t\n\t  /** Additional offset for the input's `size` attribute, which is updated based on its content. */\n\t  var EXTRA_INPUT_SIZE = 3;\n\t\n\t  /** Class applied to the container if the date is invalid. */\n\t  var INVALID_CLASS = 'md-datepicker-invalid';\n\t\n\t  /** Default time in ms to debounce input event by. */\n\t  var DEFAULT_DEBOUNCE_INTERVAL = 500;\n\t\n\t  /**\n\t   * Height of the calendar pane used to check if the pane is going outside the boundary of\n\t   * the viewport. See calendar.scss for how $md-calendar-height is computed; an extra 20px is\n\t   * also added to space the pane away from the exact edge of the screen.\n\t   *\n\t   *  This is computed statically now, but can be changed to be measured if the circumstances\n\t   *  of calendar sizing are changed.\n\t   */\n\t  var CALENDAR_PANE_HEIGHT = 368;\n\t\n\t  /**\n\t   * Width of the calendar pane used to check if the pane is going outside the boundary of\n\t   * the viewport. See calendar.scss for how $md-calendar-width is computed; an extra 20px is\n\t   * also added to space the pane away from the exact edge of the screen.\n\t   *\n\t   *  This is computed statically now, but can be changed to be measured if the circumstances\n\t   *  of calendar sizing are changed.\n\t   */\n\t  var CALENDAR_PANE_WIDTH = 360;\n\t\n\t  /**\n\t   * Controller for md-datepicker.\n\t   *\n\t   * @ngInject @constructor\n\t   */\n\t  function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $window,\n\t      $mdConstant, $mdTheming, $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {\n\t    /** @final */\n\t    this.$compile = $compile;\n\t\n\t    /** @final */\n\t    this.$timeout = $timeout;\n\t\n\t    /** @final */\n\t    this.$window = $window;\n\t\n\t    /** @final */\n\t    this.dateLocale = $mdDateLocale;\n\t\n\t    /** @final */\n\t    this.dateUtil = $$mdDateUtil;\n\t\n\t    /** @final */\n\t    this.$mdConstant = $mdConstant;\n\t\n\t    /* @final */\n\t    this.$mdUtil = $mdUtil;\n\t\n\t    /** @final */\n\t    this.$$rAF = $$rAF;\n\t\n\t    /** @type {!angular.NgModelController} */\n\t    this.ngModelCtrl = null;\n\t\n\t    /** @type {HTMLInputElement} */\n\t    this.inputElement = $element[0].querySelector('input');\n\t\n\t    /** @final {!angular.JQLite} */\n\t    this.ngInputElement = angular.element(this.inputElement);\n\t\n\t    /** @type {HTMLElement} */\n\t    this.inputContainer = $element[0].querySelector('.md-datepicker-input-container');\n\t\n\t    /** @type {HTMLElement} Floating calendar pane. */\n\t    this.calendarPane = $element[0].querySelector('.md-datepicker-calendar-pane');\n\t\n\t    /** @type {HTMLElement} Calendar icon button. */\n\t    this.calendarButton = $element[0].querySelector('.md-datepicker-button');\n\t\n\t    /**\n\t     * Element covering everything but the input in the top of the floating calendar pane.\n\t     * @type {HTMLElement}\n\t     */\n\t    this.inputMask = $element[0].querySelector('.md-datepicker-input-mask-opaque');\n\t\n\t    /** @final {!angular.JQLite} */\n\t    this.$element = $element;\n\t\n\t    /** @final {!angular.Attributes} */\n\t    this.$attrs = $attrs;\n\t\n\t    /** @final {!angular.Scope} */\n\t    this.$scope = $scope;\n\t\n\t    /** @type {Date} */\n\t    this.date = null;\n\t\n\t    /** @type {boolean} */\n\t    this.isFocused = false;\n\t\n\t    /** @type {boolean} */\n\t    this.isDisabled;\n\t    this.setDisabled($element[0].disabled || angular.isString($attrs['disabled']));\n\t\n\t    /** @type {boolean} Whether the date-picker's calendar pane is open. */\n\t    this.isCalendarOpen = false;\n\t\n\t    /**\n\t     * Element from which the calendar pane was opened. Keep track of this so that we can return\n\t     * focus to it when the pane is closed.\n\t     * @type {HTMLElement}\n\t     */\n\t    this.calendarPaneOpenedFrom = null;\n\t\n\t    this.calendarPane.id = 'md-date-pane' + $mdUtil.nextUid();\n\t\n\t    $mdTheming($element);\n\t\n\t    /** Pre-bound click handler is saved so that the event listener can be removed. */\n\t    this.bodyClickHandler = angular.bind(this, this.handleBodyClick);\n\t\n\t    /** Pre-bound resize handler so that the event listener can be removed. */\n\t    this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);\n\t\n\t    // Unless the user specifies so, the datepicker should not be a tab stop.\n\t    // This is necessary because ngAria might add a tabindex to anything with an ng-model\n\t    // (based on whether or not the user has turned that particular feature on/off).\n\t    if (!$attrs['tabindex']) {\n\t      $element.attr('tabindex', '-1');\n\t    }\n\t\n\t    this.installPropertyInterceptors();\n\t    this.attachChangeListeners();\n\t    this.attachInteractionListeners();\n\t\n\t    var self = this;\n\t    $scope.$on('$destroy', function() {\n\t      self.detachCalendarPane();\n\t    });\n\t  }\n\t  DatePickerCtrl.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$compile\", \"$timeout\", \"$window\", \"$mdConstant\", \"$mdTheming\", \"$mdUtil\", \"$mdDateLocale\", \"$$mdDateUtil\", \"$$rAF\"];\n\t\n\t  /**\n\t   * Sets up the controller's reference to ngModelController.\n\t   * @param {!angular.NgModelController} ngModelCtrl\n\t   */\n\t  DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {\n\t    this.ngModelCtrl = ngModelCtrl;\n\t\n\t    var self = this;\n\t    ngModelCtrl.$render = function() {\n\t      self.date = self.ngModelCtrl.$viewValue;\n\t      self.inputElement.value = self.dateLocale.formatDate(self.date);\n\t      self.resizeInputElement();\n\t      self.setErrorFlags();\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Attach event listeners for both the text input and the md-calendar.\n\t   * Events are used instead of ng-model so that updates don't infinitely update the other\n\t   * on a change. This should also be more performant than using a $watch.\n\t   */\n\t  DatePickerCtrl.prototype.attachChangeListeners = function() {\n\t    var self = this;\n\t\n\t    self.$scope.$on('md-calendar-change', function(event, date) {\n\t      self.ngModelCtrl.$setViewValue(date);\n\t      self.date = date;\n\t      self.inputElement.value = self.dateLocale.formatDate(date);\n\t      self.closeCalendarPane();\n\t      self.resizeInputElement();\n\t      self.inputContainer.classList.remove(INVALID_CLASS);\n\t    });\n\t\n\t    self.ngInputElement.on('input', angular.bind(self, self.resizeInputElement));\n\t    // TODO(chenmike): Add ability for users to specify this interval.\n\t    self.ngInputElement.on('input', self.$mdUtil.debounce(self.handleInputEvent,\n\t        DEFAULT_DEBOUNCE_INTERVAL, self));\n\t  };\n\t\n\t  /** Attach event listeners for user interaction. */\n\t  DatePickerCtrl.prototype.attachInteractionListeners = function() {\n\t    var self = this;\n\t    var $scope = this.$scope;\n\t    var keyCodes = this.$mdConstant.KEY_CODE;\n\t\n\t    // Add event listener through angular so that we can triggerHandler in unit tests.\n\t    self.ngInputElement.on('keydown', function(event) {\n\t      if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {\n\t        self.openCalendarPane(event);\n\t        $scope.$digest();\n\t      }\n\t    });\n\t\n\t    $scope.$on('md-calendar-close', function() {\n\t      self.closeCalendarPane();\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Capture properties set to the date-picker and imperitively handle internal changes.\n\t   * This is done to avoid setting up additional $watches.\n\t   */\n\t  DatePickerCtrl.prototype.installPropertyInterceptors = function() {\n\t    var self = this;\n\t\n\t    if (this.$attrs['ngDisabled']) {\n\t      // The expression is to be evaluated against the directive element's scope and not\n\t      // the directive's isolate scope.\n\t      var scope = this.$mdUtil.validateScope(this.$element) ? this.$element.scope() : null;\n\t\n\t      if ( scope ) {\n\t        scope.$watch(this.$attrs['ngDisabled'], function(isDisabled) {\n\t          self.setDisabled(isDisabled);\n\t        });\n\t      }\n\t    }\n\t\n\t    Object.defineProperty(this, 'placeholder', {\n\t      get: function() { return self.inputElement.placeholder; },\n\t      set: function(value) { self.inputElement.placeholder = value || ''; }\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Sets whether the date-picker is disabled.\n\t   * @param {boolean} isDisabled\n\t   */\n\t  DatePickerCtrl.prototype.setDisabled = function(isDisabled) {\n\t    this.isDisabled = isDisabled;\n\t    this.inputElement.disabled = isDisabled;\n\t    this.calendarButton.disabled = isDisabled;\n\t  };\n\t\n\t  /**\n\t   * Sets the custom ngModel.$error flags to be consumed by ngMessages. Flags are:\n\t   *   - mindate: whether the selected date is before the minimum date.\n\t   *   - maxdate: whether the selected flag is after the maximum date.\n\t   */\n\t  DatePickerCtrl.prototype.setErrorFlags = function() {\n\t    if (this.dateUtil.isValidDate(this.date)) {\n\t      if (this.dateUtil.isValidDate(this.minDate)) {\n\t        this.ngModelCtrl.$error['mindate'] = this.date < this.minDate;\n\t      }\n\t\n\t      if (this.dateUtil.isValidDate(this.maxDate)) {\n\t        this.ngModelCtrl.$error['maxdate'] = this.date > this.maxDate;\n\t      }\n\t    }\n\t  };\n\t\n\t  /** Resizes the input element based on the size of its content. */\n\t  DatePickerCtrl.prototype.resizeInputElement = function() {\n\t    this.inputElement.size = this.inputElement.value.length + EXTRA_INPUT_SIZE;\n\t  };\n\t\n\t  /**\n\t   * Sets the model value if the user input is a valid date.\n\t   * Adds an invalid class to the input element if not.\n\t   */\n\t  DatePickerCtrl.prototype.handleInputEvent = function() {\n\t    var inputString = this.inputElement.value;\n\t    var parsedDate = this.dateLocale.parseDate(inputString);\n\t    this.dateUtil.setDateTimeToMidnight(parsedDate);\n\t    if (inputString === '') {\n\t      this.ngModelCtrl.$setViewValue(null);\n\t      this.date = null;\n\t      this.inputContainer.classList.remove(INVALID_CLASS);\n\t    } else if (this.dateUtil.isValidDate(parsedDate) &&\n\t        this.dateLocale.isDateComplete(inputString) &&\n\t        this.dateUtil.isDateWithinRange(parsedDate, this.minDate, this.maxDate)) {\n\t      this.ngModelCtrl.$setViewValue(parsedDate);\n\t      this.date = parsedDate;\n\t      this.inputContainer.classList.remove(INVALID_CLASS);\n\t    } else {\n\t      // If there's an input string, it's an invalid date.\n\t      this.inputContainer.classList.toggle(INVALID_CLASS, inputString);\n\t    }\n\t  };\n\t\n\t  /** Position and attach the floating calendar to the document. */\n\t  DatePickerCtrl.prototype.attachCalendarPane = function() {\n\t    var calendarPane = this.calendarPane;\n\t    calendarPane.style.transform = '';\n\t    this.$element.addClass('md-datepicker-open');\n\t\n\t    var elementRect = this.inputContainer.getBoundingClientRect();\n\t    var bodyRect = document.body.getBoundingClientRect();\n\t\n\t    // Check to see if the calendar pane would go off the screen. If so, adjust position\n\t    // accordingly to keep it within the viewport.\n\t    var paneTop = elementRect.top - bodyRect.top;\n\t    var paneLeft = elementRect.left - bodyRect.left;\n\t\n\t    var viewportTop = document.body.scrollTop;\n\t    var viewportBottom = viewportTop + this.$window.innerHeight;\n\t\n\t    var viewportLeft = document.body.scrollLeft;\n\t    var viewportRight = document.body.scrollLeft + this.$window.innerWidth;\n\t\n\t    // If the right edge of the pane would be off the screen and shifting it left by the\n\t    // difference would not go past the left edge of the screen. If the calendar pane is too\n\t    // big to fit on the screen at all, move it to the left of the screen and scale the entire\n\t    // element down to fit.\n\t    if (paneLeft + CALENDAR_PANE_WIDTH > viewportRight) {\n\t      if (viewportRight - CALENDAR_PANE_WIDTH > 0) {\n\t        paneLeft = viewportRight - CALENDAR_PANE_WIDTH;\n\t      } else {\n\t        paneLeft = viewportLeft;\n\t        var scale = this.$window.innerWidth / CALENDAR_PANE_WIDTH;\n\t        calendarPane.style.transform = 'scale(' + scale + ')';\n\t      }\n\t\n\t      calendarPane.classList.add('md-datepicker-pos-adjusted');\n\t    }\n\t\n\t    // If the bottom edge of the pane would be off the screen and shifting it up by the\n\t    // difference would not go past the top edge of the screen.\n\t    if (paneTop + CALENDAR_PANE_HEIGHT > viewportBottom &&\n\t        viewportBottom - CALENDAR_PANE_HEIGHT > viewportTop) {\n\t      paneTop = viewportBottom - CALENDAR_PANE_HEIGHT;\n\t      calendarPane.classList.add('md-datepicker-pos-adjusted');\n\t    }\n\t\n\t    calendarPane.style.left = paneLeft + 'px';\n\t    calendarPane.style.top = paneTop + 'px';\n\t    document.body.appendChild(calendarPane);\n\t\n\t    // The top of the calendar pane is a transparent box that shows the text input underneath.\n\t    // Since the pane is floating, though, the page underneath the pane *adjacent* to the input is\n\t    // also shown unless we cover it up. The inputMask does this by filling up the remaining space\n\t    // based on the width of the input.\n\t    this.inputMask.style.left = elementRect.width + 'px';\n\t\n\t    // Add CSS class after one frame to trigger open animation.\n\t    this.$$rAF(function() {\n\t      calendarPane.classList.add('md-pane-open');\n\t    });\n\t  };\n\t\n\t  /** Detach the floating calendar pane from the document. */\n\t  DatePickerCtrl.prototype.detachCalendarPane = function() {\n\t    this.$element.removeClass('md-datepicker-open');\n\t    this.calendarPane.classList.remove('md-pane-open');\n\t    this.calendarPane.classList.remove('md-datepicker-pos-adjusted');\n\t\n\t    if (this.calendarPane.parentNode) {\n\t      // Use native DOM removal because we do not want any of the angular state of this element\n\t      // to be disposed.\n\t      this.calendarPane.parentNode.removeChild(this.calendarPane);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Open the floating calendar pane.\n\t   * @param {Event} event\n\t   */\n\t  DatePickerCtrl.prototype.openCalendarPane = function(event) {\n\t    if (!this.isCalendarOpen && !this.isDisabled) {\n\t      this.isCalendarOpen = true;\n\t      this.calendarPaneOpenedFrom = event.target;\n\t      this.attachCalendarPane();\n\t      this.focusCalendar();\n\t\n\t      // Because the calendar pane is attached directly to the body, it is possible that the\n\t      // rest of the component (input, etc) is in a different scrolling container, such as\n\t      // an md-content. This means that, if the container is scrolled, the pane would remain\n\t      // stationary. To remedy this, we disable scrolling while the calendar pane is open, which\n\t      // also matches the native behavior for things like `<select>` on Mac and Windows.\n\t      this.$mdUtil.disableScrollAround(this.calendarPane);\n\t\n\t      // Attach click listener inside of a timeout because, if this open call was triggered by a\n\t      // click, we don't want it to be immediately propogated up to the body and handled.\n\t      var self = this;\n\t      this.$mdUtil.nextTick(function() {\n\t        document.body.addEventListener('click', self.bodyClickHandler);\n\t      }, false);\n\t\n\t      window.addEventListener('resize', this.windowResizeHandler);\n\t    }\n\t  };\n\t\n\t  /** Close the floating calendar pane. */\n\t  DatePickerCtrl.prototype.closeCalendarPane = function() {\n\t    if (this.isCalendarOpen) {\n\t      this.isCalendarOpen = false;\n\t      this.detachCalendarPane();\n\t      this.calendarPaneOpenedFrom.focus();\n\t      this.calendarPaneOpenedFrom = null;\n\t      this.$mdUtil.enableScrolling();\n\t\n\t      document.body.removeEventListener('click', this.bodyClickHandler);\n\t      window.removeEventListener('resize', this.windowResizeHandler);\n\t    }\n\t  };\n\t\n\t  /** Gets the controller instance for the calendar in the floating pane. */\n\t  DatePickerCtrl.prototype.getCalendarCtrl = function() {\n\t    return angular.element(this.calendarPane.querySelector('md-calendar')).controller('mdCalendar');\n\t  };\n\t\n\t  /** Focus the calendar in the floating pane. */\n\t  DatePickerCtrl.prototype.focusCalendar = function() {\n\t    // Use a timeout in order to allow the calendar to be rendered, as it is gated behind an ng-if.\n\t    var self = this;\n\t    this.$mdUtil.nextTick(function() {\n\t      self.getCalendarCtrl().focus();\n\t    }, false);\n\t  };\n\t\n\t  /**\n\t   * Sets whether the input is currently focused.\n\t   * @param {boolean} isFocused\n\t   */\n\t  DatePickerCtrl.prototype.setFocused = function(isFocused) {\n\t    this.isFocused = isFocused;\n\t  };\n\t\n\t  /**\n\t   * Handles a click on the document body when the floating calendar pane is open.\n\t   * Closes the floating calendar pane if the click is not inside of it.\n\t   * @param {MouseEvent} event\n\t   */\n\t  DatePickerCtrl.prototype.handleBodyClick = function(event) {\n\t    if (this.isCalendarOpen) {\n\t      // TODO(jelbourn): way want to also include the md-datepicker itself in this check.\n\t      var isInCalendar = this.$mdUtil.getClosest(event.target, 'md-calendar');\n\t      if (!isInCalendar) {\n\t        this.closeCalendarPane();\n\t      }\n\t\n\t      this.$scope.$digest();\n\t    }\n\t  };\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * Utility for performing date calculations to facilitate operation of the calendar and\n\t   * datepicker.\n\t   */\n\t  angular.module('material.components.datepicker').factory('$$mdDateUtil', function() {\n\t    return {\n\t      getFirstDateOfMonth: getFirstDateOfMonth,\n\t      getNumberOfDaysInMonth: getNumberOfDaysInMonth,\n\t      getDateInNextMonth: getDateInNextMonth,\n\t      getDateInPreviousMonth: getDateInPreviousMonth,\n\t      isInNextMonth: isInNextMonth,\n\t      isInPreviousMonth: isInPreviousMonth,\n\t      getDateMidpoint: getDateMidpoint,\n\t      isSameMonthAndYear: isSameMonthAndYear,\n\t      getWeekOfMonth: getWeekOfMonth,\n\t      incrementDays: incrementDays,\n\t      incrementMonths: incrementMonths,\n\t      getLastDateOfMonth: getLastDateOfMonth,\n\t      isSameDay: isSameDay,\n\t      getMonthDistance: getMonthDistance,\n\t      isValidDate: isValidDate,\n\t      setDateTimeToMidnight: setDateTimeToMidnight,\n\t      createDateAtMidnight: createDateAtMidnight,\n\t      isDateWithinRange: isDateWithinRange\n\t    };\n\t\n\t    /**\n\t     * Gets the first day of the month for the given date's month.\n\t     * @param {Date} date\n\t     * @returns {Date}\n\t     */\n\t    function getFirstDateOfMonth(date) {\n\t      return new Date(date.getFullYear(), date.getMonth(), 1);\n\t    }\n\t\n\t    /**\n\t     * Gets the number of days in the month for the given date's month.\n\t     * @param date\n\t     * @returns {number}\n\t     */\n\t    function getNumberOfDaysInMonth(date) {\n\t      return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t    }\n\t\n\t    /**\n\t     * Get an arbitrary date in the month after the given date's month.\n\t     * @param date\n\t     * @returns {Date}\n\t     */\n\t    function getDateInNextMonth(date) {\n\t      return new Date(date.getFullYear(), date.getMonth() + 1, 1);\n\t    }\n\t\n\t    /**\n\t     * Get an arbitrary date in the month before the given date's month.\n\t     * @param date\n\t     * @returns {Date}\n\t     */\n\t    function getDateInPreviousMonth(date) {\n\t      return new Date(date.getFullYear(), date.getMonth() - 1, 1);\n\t    }\n\t\n\t    /**\n\t     * Gets whether two dates have the same month and year.\n\t     * @param {Date} d1\n\t     * @param {Date} d2\n\t     * @returns {boolean}\n\t     */\n\t    function isSameMonthAndYear(d1, d2) {\n\t      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();\n\t    }\n\t\n\t    /**\n\t     * Gets whether two dates are the same day (not not necesarily the same time).\n\t     * @param {Date} d1\n\t     * @param {Date} d2\n\t     * @returns {boolean}\n\t     */\n\t    function isSameDay(d1, d2) {\n\t      return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);\n\t    }\n\t\n\t    /**\n\t     * Gets whether a date is in the month immediately after some date.\n\t     * @param {Date} startDate The date from which to compare.\n\t     * @param {Date} endDate The date to check.\n\t     * @returns {boolean}\n\t     */\n\t    function isInNextMonth(startDate, endDate) {\n\t      var nextMonth = getDateInNextMonth(startDate);\n\t      return isSameMonthAndYear(nextMonth, endDate);\n\t    }\n\t\n\t    /**\n\t     * Gets whether a date is in the month immediately before some date.\n\t     * @param {Date} startDate The date from which to compare.\n\t     * @param {Date} endDate The date to check.\n\t     * @returns {boolean}\n\t     */\n\t    function isInPreviousMonth(startDate, endDate) {\n\t      var previousMonth = getDateInPreviousMonth(startDate);\n\t      return isSameMonthAndYear(endDate, previousMonth);\n\t    }\n\t\n\t    /**\n\t     * Gets the midpoint between two dates.\n\t     * @param {Date} d1\n\t     * @param {Date} d2\n\t     * @returns {Date}\n\t     */\n\t    function getDateMidpoint(d1, d2) {\n\t      return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);\n\t    }\n\t\n\t    /**\n\t     * Gets the week of the month that a given date occurs in.\n\t     * @param {Date} date\n\t     * @returns {number} Index of the week of the month (zero-based).\n\t     */\n\t    function getWeekOfMonth(date) {\n\t      var firstDayOfMonth = getFirstDateOfMonth(date);\n\t      return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);\n\t    }\n\t\n\t    /**\n\t     * Gets a new date incremented by the given number of days. Number of days can be negative.\n\t     * @param {Date} date\n\t     * @param {number} numberOfDays\n\t     * @returns {Date}\n\t     */\n\t    function incrementDays(date, numberOfDays) {\n\t      return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);\n\t    }\n\t\n\t    /**\n\t     * Gets a new date incremented by the given number of months. Number of months can be negative.\n\t     * If the date of the given month does not match the target month, the date will be set to the\n\t     * last day of the month.\n\t     * @param {Date} date\n\t     * @param {number} numberOfMonths\n\t     * @returns {Date}\n\t     */\n\t    function incrementMonths(date, numberOfMonths) {\n\t      // If the same date in the target month does not actually exist, the Date object will\n\t      // automatically advance *another* month by the number of missing days.\n\t      // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.\n\t      // So, we check if the month overflowed and go to the last day of the target month instead.\n\t      var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1);\n\t      var numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);\n\t      if (numberOfDaysInMonth < date.getDate()) {\n\t        dateInTargetMonth.setDate(numberOfDaysInMonth);\n\t      } else {\n\t        dateInTargetMonth.setDate(date.getDate());\n\t      }\n\t\n\t      return dateInTargetMonth;\n\t    }\n\t\n\t    /**\n\t     * Get the integer distance between two months. This *only* considers the month and year\n\t     * portion of the Date instances.\n\t     *\n\t     * @param {Date} start\n\t     * @param {Date} end\n\t     * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\n\t     *     chronologically, this number will be negative.\n\t     */\n\t    function getMonthDistance(start, end) {\n\t      return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());\n\t    }\n\t\n\t    /**\n\t     * Gets the last day of the month for the given date.\n\t     * @param {Date} date\n\t     * @returns {Date}\n\t     */\n\t    function getLastDateOfMonth(date) {\n\t      return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));\n\t    }\n\t\n\t    /**\n\t     * Checks whether a date is valid.\n\t     * @param {Date} date\n\t     * @return {boolean} Whether the date is a valid Date.\n\t     */\n\t    function isValidDate(date) {\n\t      return date != null && date.getTime && !isNaN(date.getTime());\n\t    }\n\t\n\t    /**\n\t     * Sets a date's time to midnight.\n\t     * @param {Date} date\n\t     */\n\t    function setDateTimeToMidnight(date) {\n\t      if (isValidDate(date)) {\n\t        date.setHours(0, 0, 0, 0);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Creates a date with the time set to midnight.\n\t     * Drop-in replacement for two forms of the Date constructor:\n\t     * 1. No argument for Date representing now.\n\t     * 2. Single-argument value representing number of seconds since Unix Epoch.\n\t     * @param {number=} opt_value\n\t     * @return {Date} New date with time set to midnight.\n\t     */\n\t    function createDateAtMidnight(opt_value) {\n\t      var date;\n\t      if (angular.isUndefined(opt_value)) {\n\t        date = new Date();\n\t      } else {\n\t        date = new Date(opt_value);\n\t      }\n\t      setDateTimeToMidnight(date);\n\t      return date;\n\t    }\n\t\n\t     /**\n\t      * Checks if a date is within a min and max range.\n\t      * If minDate or maxDate are not dates, they are ignored.\n\t      * @param {Date} date\n\t      * @param {Date} minDate\n\t      * @param {Date} maxDate\n\t      */\n\t     function isDateWithinRange(date, minDate, maxDate) {\n\t       return (!angular.isDate(minDate) || minDate <= date) &&\n\t           (!angular.isDate(maxDate) || maxDate >= date);\n\t     }\n\t  });\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc module\n\t   * @name material.components.fabActions\n\t   */\n\t  angular\n\t    .module('material.components.fabActions', ['material.core'])\n\t    .directive('mdFabActions', MdFabActionsDirective);\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name mdFabActions\n\t   * @module material.components.fabActions\n\t   *\n\t   * @restrict E\n\t   *\n\t   * @description\n\t   * The `<md-fab-actions>` directive is used inside of a `<md-fab-speed-dial>` or\n\t   * `<md-fab-toolbar>` directive to mark an element (or elements) as the actions and setup the\n\t   * proper event listeners.\n\t   *\n\t   * @usage\n\t   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.\n\t   */\n\t  function MdFabActionsDirective() {\n\t    return {\n\t      restrict: 'E',\n\t\n\t      require: ['^?mdFabSpeedDial', '^?mdFabToolbar'],\n\t\n\t      compile: function(element, attributes) {\n\t        var children = element.children();\n\t\n\t        var hasNgRepeat = false;\n\t\n\t        angular.forEach(['', 'data-', 'x-'], function(prefix) {\n\t          hasNgRepeat = hasNgRepeat || (children.attr(prefix + 'ng-repeat') ? true : false);\n\t        });\n\t\n\t        // Support both ng-repeat and static content\n\t        if (hasNgRepeat) {\n\t          children.addClass('md-fab-action-item');\n\t        } else {\n\t          // Wrap every child in a new div and add a class that we can scale/fling independently\n\t          children.wrap('<div class=\"md-fab-action-item\">');\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  angular.module('material.components.fabShared', ['material.core'])\n\t    .controller('FabController', FabController);\n\t\n\t  function FabController($scope, $element, $animate, $mdUtil, $mdConstant) {\n\t    var vm = this;\n\t\n\t    // NOTE: We use async evals below to avoid conflicts with any existing digest loops\n\t\n\t    vm.open = function() {\n\t      $scope.$evalAsync(\"vm.isOpen = true\");\n\t    };\n\t\n\t    vm.close = function() {\n\t      // Async eval to avoid conflicts with existing digest loops\n\t      $scope.$evalAsync(\"vm.isOpen = false\");\n\t\n\t      // Focus the trigger when the element closes so users can still tab to the next item\n\t      $element.find('md-fab-trigger')[0].focus();\n\t    };\n\t\n\t    // Toggle the open/close state when the trigger is clicked\n\t    vm.toggle = function() {\n\t      $scope.$evalAsync(\"vm.isOpen = !vm.isOpen\");\n\t    };\n\t\n\t    setupDefaults();\n\t    setupListeners();\n\t    setupWatchers();\n\t    fireInitialAnimations();\n\t\n\t    function setupDefaults() {\n\t      // Set the default direction to 'down' if none is specified\n\t      vm.direction = vm.direction || 'down';\n\t\n\t      // Set the default to be closed\n\t      vm.isOpen = vm.isOpen || false;\n\t\n\t      // Start the keyboard interaction at the first action\n\t      resetActionIndex();\n\t    }\n\t\n\t    var events = [];\n\t\n\t    function setupListeners() {\n\t      var eventTypes = [\n\t        'mousedown', 'mouseup', 'click', 'touchstart', 'touchend', 'focusin', 'focusout'\n\t      ];\n\t\n\t      // Add our listeners\n\t      angular.forEach(eventTypes, function(eventType) {\n\t        $element.on(eventType, parseEvents);\n\t      });\n\t\n\t      // Remove our listeners when destroyed\n\t      $scope.$on('$destroy', function() {\n\t        angular.forEach(eventTypes, function(eventType) {\n\t          $element.off(eventType, parseEvents);\n\t        });\n\t        // remove any attached keyboard handlers in case element is removed while\n\t        // speed dial is open\n\t        disableKeyboard();\n\t      });\n\t    }\n\t\n\t    function resetEvents() {\n\t      events = [];\n\t    }\n\t\n\t    function equalsEvents(toCheck) {\n\t      var isEqual, strippedCheck, moreToCheck;\n\t\n\t      // Quick check to make sure we don't get stuck in an infinite loop\n\t      var numTests = 0;\n\t\n\t      do {\n\t        // Strip out the question mark\n\t        strippedCheck = toCheck.map(function(event) {\n\t          return event.replace('?', '')\n\t        });\n\t\n\t        // Check if they are equal\n\t        isEqual = angular.equals(events, strippedCheck);\n\t\n\t        // If not, check to see if removing an optional event makes them equal\n\t        if (!isEqual) {\n\t          toCheck = removeOptionalEvent(toCheck);\n\t          moreToCheck = (toCheck.length >= events.length && toCheck.length !== strippedCheck.length);\n\t        }\n\t      }\n\t      while (numTests < 10 && !isEqual && moreToCheck);\n\t\n\t      return isEqual;\n\t    }\n\t\n\t    function removeOptionalEvent(events) {\n\t      var foundOptional = false;\n\t\n\t      return events.filter(function(event) {\n\t        // If we have not found an optional one, keep searching\n\t        if (!foundOptional && event.indexOf('?') !== -1) {\n\t          foundOptional = true;\n\t\n\t          // If we find an optional one, remove only that one and keep going\n\t          return false;\n\t        }\n\t\n\t        return true;\n\t      });\n\t    }\n\t\n\t    function parseEvents(latestEvent) {\n\t      events.push(latestEvent.type);\n\t\n\t      // Handle desktop click\n\t      if (equalsEvents(['mousedown', 'focusout?', 'focusin?', 'mouseup', 'click'])) {\n\t        handleItemClick(latestEvent);\n\t        resetEvents();\n\t        return;\n\t      }\n\t\n\t      // Handle mobile click/tap (and keyboard enter)\n\t      if (equalsEvents(['touchstart?', 'touchend?', 'click'])) {\n\t        handleItemClick(latestEvent);\n\t        resetEvents();\n\t        return;\n\t      }\n\t\n\t      // Handle tab keys (focusin)\n\t      if (equalsEvents(['focusin'])) {\n\t        vm.open();\n\t        resetEvents();\n\t        return;\n\t      }\n\t\n\t      // Handle tab keys (focusout)\n\t      if (equalsEvents(['focusout'])) {\n\t        vm.close();\n\t        resetEvents();\n\t        return;\n\t      }\n\t\n\t      eventUnhandled();\n\t    }\n\t\n\t    /*\n\t     * No event was handled, so setup a timeout to clear the events\n\t     *\n\t     * TODO: Use $mdUtil.debounce()?\n\t     */\n\t    var resetEventsTimeout;\n\t\n\t    function eventUnhandled() {\n\t      if (resetEventsTimeout) {\n\t        window.clearTimeout(resetEventsTimeout);\n\t      }\n\t\n\t      resetEventsTimeout = window.setTimeout(function() {\n\t        resetEvents();\n\t      }, 250);\n\t    }\n\t\n\t    function resetActionIndex() {\n\t      vm.currentActionIndex = -1;\n\t    }\n\t\n\t    function setupWatchers() {\n\t      // Watch for changes to the direction and update classes/attributes\n\t      $scope.$watch('vm.direction', function(newDir, oldDir) {\n\t        // Add the appropriate classes so we can target the direction in the CSS\n\t        $animate.removeClass($element, 'md-' + oldDir);\n\t        $animate.addClass($element, 'md-' + newDir);\n\t\n\t        // Reset the action index since it may have changed\n\t        resetActionIndex();\n\t      });\n\t\n\t      var trigger, actions;\n\t\n\t      // Watch for changes to md-open\n\t      $scope.$watch('vm.isOpen', function(isOpen) {\n\t        // Reset the action index since it may have changed\n\t        resetActionIndex();\n\t\n\t        // We can't get the trigger/actions outside of the watch because the component hasn't been\n\t        // linked yet, so we wait until the first watch fires to cache them.\n\t        if (!trigger || !actions) {\n\t          trigger = getTriggerElement();\n\t          actions = getActionsElement();\n\t        }\n\t\n\t        if (isOpen) {\n\t          enableKeyboard();\n\t        } else {\n\t          disableKeyboard();\n\t        }\n\t\n\t        var toAdd = isOpen ? 'md-is-open' : '';\n\t        var toRemove = isOpen ? '' : 'md-is-open';\n\t\n\t        // Set the proper ARIA attributes\n\t        trigger.attr('aria-haspopup', true);\n\t        trigger.attr('aria-expanded', isOpen);\n\t        actions.attr('aria-hidden', !isOpen);\n\t\n\t        // Animate the CSS classes\n\t        $animate.setClass($element, toAdd, toRemove);\n\t      });\n\t    }\n\t\n\t    // Fire the animations once in a separate digest loop to initialize them\n\t    function fireInitialAnimations() {\n\t      $mdUtil.nextTick(function() {\n\t        $animate.addClass($element, 'md-noop');\n\t      });\n\t    }\n\t\n\t    function enableKeyboard() {\n\t      angular.element(document).on('keydown', keyPressed);\n\t    }\n\t\n\t    function disableKeyboard() {\n\t      angular.element(document).off('keydown', keyPressed);\n\t    }\n\t\n\t    function keyPressed(event) {\n\t      switch (event.which) {\n\t        case $mdConstant.KEY_CODE.SPACE: event.preventDefault(); return false;\n\t        case $mdConstant.KEY_CODE.ESCAPE: vm.close(); event.preventDefault(); return false;\n\t        case $mdConstant.KEY_CODE.LEFT_ARROW: doKeyLeft(event); return false;\n\t        case $mdConstant.KEY_CODE.UP_ARROW: doKeyUp(event); return false;\n\t        case $mdConstant.KEY_CODE.RIGHT_ARROW: doKeyRight(event); return false;\n\t        case $mdConstant.KEY_CODE.DOWN_ARROW: doKeyDown(event); return false;\n\t      }\n\t    }\n\t\n\t    function doActionPrev(event) {\n\t      focusAction(event, -1);\n\t    }\n\t\n\t    function doActionNext(event) {\n\t      focusAction(event, 1);\n\t    }\n\t\n\t    function focusAction(event, direction) {\n\t      // Grab all of the actions\n\t      var actions = getActionsElement()[0].querySelectorAll('.md-fab-action-item');\n\t\n\t      // Disable all other actions for tabbing\n\t      angular.forEach(actions, function(action) {\n\t        angular.element(angular.element(action).children()[0]).attr('tabindex', -1);\n\t      });\n\t\n\t      // Increment/decrement the counter with restrictions\n\t      vm.currentActionIndex = vm.currentActionIndex + direction;\n\t      vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);\n\t      vm.currentActionIndex = Math.max(0, vm.currentActionIndex);\n\t\n\t      // Focus the element\n\t      var focusElement =  angular.element(actions[vm.currentActionIndex]).children()[0];\n\t      angular.element(focusElement).attr('tabindex', 0);\n\t      focusElement.focus();\n\t\n\t      // Make sure the event doesn't bubble and cause something else\n\t      event.preventDefault();\n\t      event.stopImmediatePropagation();\n\t    }\n\t\n\t    function doKeyLeft(event) {\n\t      if (vm.direction === 'left') {\n\t        doActionNext(event);\n\t      } else {\n\t        doActionPrev(event);\n\t      }\n\t    }\n\t\n\t    function doKeyUp(event) {\n\t      if (vm.direction === 'down') {\n\t        doActionPrev(event);\n\t      } else {\n\t        doActionNext(event);\n\t      }\n\t    }\n\t\n\t    function doKeyRight(event) {\n\t      if (vm.direction === 'left') {\n\t        doActionPrev(event);\n\t      } else {\n\t        doActionNext(event);\n\t      }\n\t    }\n\t\n\t    function doKeyDown(event) {\n\t      if (vm.direction === 'up') {\n\t        doActionPrev(event);\n\t      } else {\n\t        doActionNext(event);\n\t      }\n\t    }\n\t\n\t    function isTrigger(element) {\n\t      return $mdUtil.getClosest(element, 'md-fab-trigger');\n\t    }\n\t\n\t    function isAction(element) {\n\t      return $mdUtil.getClosest(element, 'md-fab-actions');\n\t    }\n\t\n\t    function handleItemClick(event) {\n\t      if (isTrigger(event.target)) {\n\t        vm.toggle();\n\t      }\n\t\n\t      if (isAction(event.target)) {\n\t        vm.close();\n\t      }\n\t    }\n\t\n\t    function getTriggerElement() {\n\t      return $element.find('md-fab-trigger');\n\t    }\n\t\n\t    function getActionsElement() {\n\t      return $element.find('md-fab-actions');\n\t    }\n\t  }\n\t  FabController.$inject = [\"$scope\", \"$element\", \"$animate\", \"$mdUtil\", \"$mdConstant\"];\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc module\n\t   * @name material.components.fabSpeedDial\n\t   */\n\t  angular\n\t    // Declare our module\n\t    .module('material.components.fabSpeedDial', [\n\t      'material.core',\n\t      'material.components.fabShared',\n\t      'material.components.fabTrigger',\n\t      'material.components.fabActions'\n\t    ])\n\t\n\t    // Register our directive\n\t    .directive('mdFabSpeedDial', MdFabSpeedDialDirective)\n\t\n\t    // Register our custom animations\n\t    .animation('.md-fling', MdFabSpeedDialFlingAnimation)\n\t    .animation('.md-scale', MdFabSpeedDialScaleAnimation)\n\t\n\t    // Register a service for each animation so that we can easily inject them into unit tests\n\t    .service('mdFabSpeedDialFlingAnimation', MdFabSpeedDialFlingAnimation)\n\t    .service('mdFabSpeedDialScaleAnimation', MdFabSpeedDialScaleAnimation);\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name mdFabSpeedDial\n\t   * @module material.components.fabSpeedDial\n\t   *\n\t   * @restrict E\n\t   *\n\t   * @description\n\t   * The `<md-fab-speed-dial>` directive is used to present a series of popup elements (usually\n\t   * `<md-button>`s) for quick access to common actions.\n\t   *\n\t   * There are currently two animations available by applying one of the following classes to\n\t   * the component:\n\t   *\n\t   *  - `md-fling` - The speed dial items appear from underneath the trigger and move into their\n\t   *    appropriate positions.\n\t   *  - `md-scale` - The speed dial items appear in their proper places by scaling from 0% to 100%.\n\t   *\n\t   * You may also easily position the trigger by applying one one of the following classes to the\n\t   * `<md-fab-speed-dial>` element:\n\t   *  - `md-fab-top-left`\n\t   *  - `md-fab-top-right`\n\t   *  - `md-fab-bottom-left`\n\t   *  - `md-fab-bottom-right`\n\t   *\n\t   * These CSS classes use `position: absolute`, so you need to ensure that the container element\n\t   * also uses `position: absolute` or `position: relative` in order for them to work.\n\t   *\n\t   * Additionally, you may use the standard `ng-mouseenter` and `ng-mouseleave` directives to\n\t   * open or close the speed dial. However, if you wish to allow users to hover over the empty\n\t   * space where the actions will appear, you must also add the `md-hover-full` class to the speed\n\t   * dial element. Without this, the hover effect will only occur on top of the trigger.\n\t   *\n\t   * @usage\n\t   * <hljs lang=\"html\">\n\t   * <md-fab-speed-dial md-direction=\"up\" class=\"md-fling\">\n\t   *   <md-fab-trigger>\n\t   *     <md-button aria-label=\"Add...\"><md-icon icon=\"/img/icons/plus.svg\"></md-icon></md-button>\n\t   *   </md-fab-trigger>\n\t   *\n\t   *   <md-fab-actions>\n\t   *     <md-button aria-label=\"Add User\">\n\t   *       <md-icon icon=\"/img/icons/user.svg\"></md-icon>\n\t   *     </md-button>\n\t   *\n\t   *     <md-button aria-label=\"Add Group\">\n\t   *       <md-icon icon=\"/img/icons/group.svg\"></md-icon>\n\t   *     </md-button>\n\t   *   </md-fab-actions>\n\t   * </md-fab-speed-dial>\n\t   * </hljs>\n\t   *\n\t   * @param {string} md-direction From which direction you would like the speed dial to appear\n\t   * relative to the trigger element.\n\t   * @param {expression=} md-open Programmatically control whether or not the speed-dial is visible.\n\t   */\n\t  function MdFabSpeedDialDirective() {\n\t    return {\n\t      restrict: 'E',\n\t\n\t      scope: {\n\t        direction: '@?mdDirection',\n\t        isOpen: '=?mdOpen'\n\t      },\n\t\n\t      bindToController: true,\n\t      controller: 'FabController',\n\t      controllerAs: 'vm',\n\t\n\t      link: FabSpeedDialLink\n\t    };\n\t\n\t    function FabSpeedDialLink(scope, element) {\n\t      // Prepend an element to hold our CSS variables so we can use them in the animations below\n\t      element.prepend('<div class=\"md-css-variables\"></div>');\n\t    }\n\t  }\n\t\n\t  function MdFabSpeedDialFlingAnimation() {\n\t    function runAnimation(element) {\n\t      var el = element[0];\n\t      var ctrl = element.controller('mdFabSpeedDial');\n\t      var items = el.querySelectorAll('.md-fab-action-item');\n\t\n\t      // Grab our trigger element\n\t      var triggerElement = el.querySelector('md-fab-trigger');\n\t\n\t      // Grab our element which stores CSS variables\n\t      var variablesElement = el.querySelector('.md-css-variables');\n\t\n\t      // Setup JS variables based on our CSS variables\n\t      var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);\n\t\n\t      // Always reset the items to their natural position/state\n\t      angular.forEach(items, function(item, index) {\n\t        var styles = item.style;\n\t\n\t        styles.transform = styles.webkitTransform = '';\n\t        styles.transitionDelay = '';\n\t        styles.opacity = 1;\n\t\n\t        // Make the items closest to the trigger have the highest z-index\n\t        styles.zIndex = (items.length - index) + startZIndex;\n\t      });\n\t\n\t      // Set the trigger to be above all of the actions so they disappear behind it.\n\t      triggerElement.style.zIndex = startZIndex + items.length + 1;\n\t\n\t      // If the control is closed, hide the items behind the trigger\n\t      if (!ctrl.isOpen) {\n\t        angular.forEach(items, function(item, index) {\n\t          var newPosition, axis;\n\t          var styles = item.style;\n\t\n\t          switch (ctrl.direction) {\n\t            case 'up':\n\t              newPosition = item.scrollHeight * (index + 1);\n\t              axis = 'Y';\n\t              break;\n\t            case 'down':\n\t              newPosition = -item.scrollHeight * (index + 1);\n\t              axis = 'Y';\n\t              break;\n\t            case 'left':\n\t              newPosition = item.scrollWidth * (index + 1);\n\t              axis = 'X';\n\t              break;\n\t            case 'right':\n\t              newPosition = -item.scrollWidth * (index + 1);\n\t              axis = 'X';\n\t              break;\n\t          }\n\t\n\t          var newTranslate = 'translate' + axis + '(' + newPosition + 'px)';\n\t\n\t          styles.transform = styles.webkitTransform = newTranslate;\n\t        });\n\t      }\n\t    }\n\t\n\t    return {\n\t      addClass: function(element, className, done) {\n\t        if (element.hasClass('md-fling')) {\n\t          runAnimation(element);\n\t          done();\n\t        }\n\t      },\n\t      removeClass: function(element, className, done) {\n\t        runAnimation(element);\n\t        done();\n\t      }\n\t    }\n\t  }\n\t\n\t  function MdFabSpeedDialScaleAnimation() {\n\t    var delay = 65;\n\t\n\t    function runAnimation(element) {\n\t      var el = element[0];\n\t      var ctrl = element.controller('mdFabSpeedDial');\n\t      var items = el.querySelectorAll('.md-fab-action-item');\n\t\n\t      // Grab our element which stores CSS variables\n\t      var variablesElement = el.querySelector('.md-css-variables');\n\t\n\t      // Setup JS variables based on our CSS variables\n\t      var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);\n\t\n\t      // Always reset the items to their natural position/state\n\t      angular.forEach(items, function(item, index) {\n\t        var styles = item.style,\n\t          offsetDelay = index * delay;\n\t\n\t        styles.opacity = ctrl.isOpen ? 1 : 0;\n\t        styles.transform = styles.webkitTransform = ctrl.isOpen ? 'scale(1)' : 'scale(0)';\n\t        styles.transitionDelay = (ctrl.isOpen ? offsetDelay : (items.length - offsetDelay)) + 'ms';\n\t\n\t        // Make the items closest to the trigger have the highest z-index\n\t        styles.zIndex = (items.length - index) + startZIndex;\n\t      });\n\t    }\n\t\n\t    return {\n\t      addClass: function(element, className, done) {\n\t        runAnimation(element);\n\t        done();\n\t      },\n\t\n\t      removeClass: function(element, className, done) {\n\t        runAnimation(element);\n\t        done();\n\t      }\n\t    }\n\t  }\n\t})();\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc module\n\t   * @name material.components.fabToolbar\n\t   */\n\t  angular\n\t    // Declare our module\n\t    .module('material.components.fabToolbar', [\n\t      'material.core',\n\t      'material.components.fabShared',\n\t      'material.components.fabTrigger',\n\t      'material.components.fabActions'\n\t    ])\n\t\n\t    // Register our directive\n\t    .directive('mdFabToolbar', MdFabToolbarDirective)\n\t\n\t    // Register our custom animations\n\t    .animation('.md-fab-toolbar', MdFabToolbarAnimation)\n\t\n\t    // Register a service for the animation so that we can easily inject it into unit tests\n\t    .service('mdFabToolbarAnimation', MdFabToolbarAnimation);\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name mdFabToolbar\n\t   * @module material.components.fabToolbar\n\t   *\n\t   * @restrict E\n\t   *\n\t   * @description\n\t   *\n\t   * The `<md-fab-toolbar>` directive is used present a toolbar of elements (usually `<md-button>`s)\n\t   * for quick access to common actions when a floating action button is activated (via click or\n\t   * keyboard navigation).\n\t   *\n\t   * You may also easily position the trigger by applying one one of the following classes to the\n\t   * `<md-fab-toolbar>` element:\n\t   *  - `md-fab-top-left`\n\t   *  - `md-fab-top-right`\n\t   *  - `md-fab-bottom-left`\n\t   *  - `md-fab-bottom-right`\n\t   *\n\t   * These CSS classes use `position: absolute`, so you need to ensure that the container element\n\t   * also uses `position: absolute` or `position: relative` in order for them to work.\n\t   *\n\t   * @usage\n\t   *\n\t   * <hljs lang=\"html\">\n\t   * <md-fab-toolbar md-direction='left'>\n\t   *   <md-fab-trigger>\n\t   *     <md-button aria-label=\"Add...\"><md-icon icon=\"/img/icons/plus.svg\"></md-icon></md-button>\n\t   *   </md-fab-trigger>\n\t   *\n\t   *   <md-fab-actions>\n\t   *     <md-button aria-label=\"Add User\">\n\t   *       <md-icon icon=\"/img/icons/user.svg\"></md-icon>\n\t   *     </md-button>\n\t   *\n\t   *     <md-button aria-label=\"Add Group\">\n\t   *       <md-icon icon=\"/img/icons/group.svg\"></md-icon>\n\t   *     </md-button>\n\t   *   </md-fab-actions>\n\t   * </md-fab-toolbar>\n\t   * </hljs>\n\t   *\n\t   * @param {string} md-direction From which direction you would like the toolbar items to appear\n\t   * relative to the trigger element. Supports `left` and `right` directions.\n\t   * @param {expression=} md-open Programmatically control whether or not the toolbar is visible.\n\t   */\n\t  function MdFabToolbarDirective() {\n\t    return {\n\t      restrict: 'E',\n\t      transclude: true,\n\t      template: '<div class=\"md-fab-toolbar-wrapper\">' +\n\t      '  <div class=\"md-fab-toolbar-content\" ng-transclude></div>' +\n\t      '</div>',\n\t\n\t      scope: {\n\t        direction: '@?mdDirection',\n\t        isOpen: '=?mdOpen'\n\t      },\n\t\n\t      bindToController: true,\n\t      controller: 'FabController',\n\t      controllerAs: 'vm',\n\t\n\t      link: link\n\t    };\n\t\n\t    function link(scope, element, attributes) {\n\t      // Add the base class for animations\n\t      element.addClass('md-fab-toolbar');\n\t\n\t      // Prepend the background element to the trigger's button\n\t      element.find('md-fab-trigger').find('button')\n\t        .prepend('<div class=\"md-fab-toolbar-background\"></div>');\n\t    }\n\t  }\n\t\n\t  function MdFabToolbarAnimation() {\n\t\n\t    function runAnimation(element, className, done) {\n\t      // If no className was specified, don't do anything\n\t      if (!className) {\n\t        return;\n\t      }\n\t\n\t      var el = element[0];\n\t      var ctrl = element.controller('mdFabToolbar');\n\t\n\t      // Grab the relevant child elements\n\t      var backgroundElement = el.querySelector('.md-fab-toolbar-background');\n\t      var triggerElement = el.querySelector('md-fab-trigger button');\n\t      var toolbarElement = el.querySelector('md-toolbar');\n\t      var iconElement = el.querySelector('md-fab-trigger button md-icon');\n\t      var actions = element.find('md-fab-actions').children();\n\t\n\t      // If we have both elements, use them to position the new background\n\t      if (triggerElement && backgroundElement) {\n\t        // Get our variables\n\t        var color = window.getComputedStyle(triggerElement).getPropertyValue('background-color');\n\t        var width = el.offsetWidth;\n\t        var height = el.offsetHeight;\n\t\n\t        // Make it twice as big as it should be since we scale from the center\n\t        var scale = 2 * (width / triggerElement.offsetWidth);\n\t\n\t        // Set some basic styles no matter what animation we're doing\n\t        backgroundElement.style.backgroundColor = color;\n\t        backgroundElement.style.borderRadius = width + 'px';\n\t\n\t        // If we're open\n\t        if (ctrl.isOpen) {\n\t          // Turn on toolbar pointer events when closed\n\t          toolbarElement.style.pointerEvents = 'initial';\n\t\n\t          backgroundElement.style.width = triggerElement.offsetWidth + 'px';\n\t          backgroundElement.style.height = triggerElement.offsetHeight + 'px';\n\t          backgroundElement.style.transform = 'scale(' + scale + ')';\n\t\n\t          // Set the next close animation to have the proper delays\n\t          backgroundElement.style.transitionDelay = '0ms';\n\t          iconElement && (iconElement.style.transitionDelay = '.3s');\n\t\n\t          // Apply a transition delay to actions\n\t          angular.forEach(actions, function(action, index) {\n\t            action.style.transitionDelay = (actions.length - index) * 25 + 'ms';\n\t          });\n\t        } else {\n\t          // Turn off toolbar pointer events when closed\n\t          toolbarElement.style.pointerEvents = 'none';\n\t\n\t          // Scale it back down to the trigger's size\n\t          backgroundElement.style.transform = 'scale(1)';\n\t\n\t          // Reset the position\n\t          backgroundElement.style.top = '0';\n\t\n\t          if (element.hasClass('md-right')) {\n\t            backgroundElement.style.left = '0';\n\t            backgroundElement.style.right = null;\n\t          }\n\t\n\t          if (element.hasClass('md-left')) {\n\t            backgroundElement.style.right = '0';\n\t            backgroundElement.style.left = null;\n\t          }\n\t\n\t          // Set the next open animation to have the proper delays\n\t          backgroundElement.style.transitionDelay = '200ms';\n\t          iconElement && (iconElement.style.transitionDelay = '0ms');\n\t\n\t          // Apply a transition delay to actions\n\t          angular.forEach(actions, function(action, index) {\n\t            action.style.transitionDelay = 200 + (index * 25) + 'ms';\n\t          });\n\t        }\n\t      }\n\t    }\n\t\n\t    return {\n\t      addClass: function(element, className, done) {\n\t        runAnimation(element, className, done);\n\t        done();\n\t      },\n\t\n\t      removeClass: function(element, className, done) {\n\t        runAnimation(element, className, done);\n\t        done();\n\t      }\n\t    }\n\t  }\n\t})();\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t(function() {\n\t  'use strict';\n\t\n\t  /**\n\t   * @ngdoc module\n\t   * @name material.components.fabTrigger\n\t   */\n\t  angular\n\t    .module('material.components.fabTrigger', ['material.core'])\n\t    .directive('mdFabTrigger', MdFabTriggerDirective);\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name mdFabTrigger\n\t   * @module material.components.fabSpeedDial\n\t   *\n\t   * @restrict E\n\t   *\n\t   * @description\n\t   * The `<md-fab-trigger>` directive is used inside of a `<md-fab-speed-dial>` or\n\t   * `<md-fab-toolbar>` directive to mark an element (or elements) as the trigger and setup the\n\t   * proper event listeners.\n\t   *\n\t   * @usage\n\t   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.\n\t   */\n\t  function MdFabTriggerDirective() {\n\t    // TODO: Remove this completely?\n\t    return {\n\t      restrict: 'E',\n\t\n\t      require: ['^?mdFabSpeedDial', '^?mdFabToolbar']\n\t    };\n\t  }\n\t})();\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.gridList\n\t */\n\tangular.module('material.components.gridList', ['material.core'])\n\t       .directive('mdGridList', GridListDirective)\n\t       .directive('mdGridTile', GridTileDirective)\n\t       .directive('mdGridTileFooter', GridTileCaptionDirective)\n\t       .directive('mdGridTileHeader', GridTileCaptionDirective)\n\t       .factory('$mdGridLayout', GridLayoutFactory);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdGridList\n\t * @module material.components.gridList\n\t * @restrict E\n\t * @description\n\t * Grid lists are an alternative to standard list views. Grid lists are distinct\n\t * from grids used for layouts and other visual presentations.\n\t *\n\t * A grid list is best suited to presenting a homogenous data type, typically\n\t * images, and is optimized for visual comprehension and differentiating between\n\t * like data types.\n\t *\n\t * A grid list is a continuous element consisting of tessellated, regular\n\t * subdivisions called cells that contain tiles (`md-grid-tile`).\n\t *\n\t * <img src=\"//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png\"\n\t *    style=\"width: 300px; height: auto; margin-right: 16px;\" alt=\"Concept of grid explained visually\">\n\t * <img src=\"//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png\"\n\t *    style=\"width: 300px; height: auto;\" alt=\"Grid concepts legend\">\n\t *\n\t * Cells are arrayed vertically and horizontally within the grid.\n\t *\n\t * Tiles hold content and can span one or more cells vertically or horizontally.\n\t *\n\t * ### Responsive Attributes\n\t *\n\t * The `md-grid-list` directive supports \"responsive\" attributes, which allow\n\t * different `md-cols`, `md-gutter` and `md-row-height` values depending on the\n\t * currently matching media query (as defined in `$mdConstant.MEDIA`).\n\t *\n\t * In order to set a responsive attribute, first define the fallback value with\n\t * the standard attribute name, then add additional attributes with the\n\t * following convention: `{base-attribute-name}-{media-query-name}=\"{value}\"`\n\t * (ie. `md-cols-lg=\"8\"`)\n\t *\n\t * @param {number} md-cols Number of columns in the grid.\n\t * @param {string} md-row-height One of\n\t * <ul>\n\t *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>\n\t *   <li>`{width}:{height}` - Ratio of width to height (eg.\n\t *   `md-row-height=\"16:9\"`)</li>\n\t *   <li>`\"fit\"` - Height will be determined by subdividing the available\n\t *   height by the number of rows</li>\n\t * </ul>\n\t * @param {string=} md-gutter The amount of space between tiles in CSS units\n\t *     (default 1px)\n\t * @param {expression=} md-on-layout Expression to evaluate after layout. Event\n\t *     object is available as `$event`, and contains performance information.\n\t *\n\t * @usage\n\t * Basic:\n\t * <hljs lang=\"html\">\n\t * <md-grid-list md-cols=\"5\" md-gutter=\"1em\" md-row-height=\"4:3\">\n\t *   <md-grid-tile></md-grid-tile>\n\t * </md-grid-list>\n\t * </hljs>\n\t *\n\t * Fixed-height rows:\n\t * <hljs lang=\"html\">\n\t * <md-grid-list md-cols=\"4\" md-row-height=\"200px\" ...>\n\t *   <md-grid-tile></md-grid-tile>\n\t * </md-grid-list>\n\t * </hljs>\n\t *\n\t * Fit rows:\n\t * <hljs lang=\"html\">\n\t * <md-grid-list md-cols=\"4\" md-row-height=\"fit\" style=\"height: 400px;\" ...>\n\t *   <md-grid-tile></md-grid-tile>\n\t * </md-grid-list>\n\t * </hljs>\n\t *\n\t * Using responsive attributes:\n\t * <hljs lang=\"html\">\n\t * <md-grid-list\n\t *     md-cols-sm=\"2\"\n\t *     md-cols-md=\"4\"\n\t *     md-cols-lg=\"8\"\n\t *     md-cols-gt-lg=\"12\"\n\t *     ...>\n\t *   <md-grid-tile></md-grid-tile>\n\t * </md-grid-list>\n\t * </hljs>\n\t */\n\tfunction GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {\n\t  return {\n\t    restrict: 'E',\n\t    controller: GridListController,\n\t    scope: {\n\t      mdOnLayout: '&'\n\t    },\n\t    link: postLink\n\t  };\n\t\n\t  function postLink(scope, element, attrs, ctrl) {\n\t    // Apply semantics\n\t    element.attr('role', 'list');\n\t\n\t    // Provide the controller with a way to trigger layouts.\n\t    ctrl.layoutDelegate = layoutDelegate;\n\t\n\t    var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),\n\t        unwatchAttrs = watchMedia();\n\t      scope.$on('$destroy', unwatchMedia);\n\t\n\t    /**\n\t     * Watches for changes in media, invalidating layout as necessary.\n\t     */\n\t    function watchMedia() {\n\t      for (var mediaName in $mdConstant.MEDIA) {\n\t        $mdMedia(mediaName); // initialize\n\t        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])\n\t            .addListener(invalidateLayout);\n\t      }\n\t      return $mdMedia.watchResponsiveAttributes(\n\t          ['md-cols', 'md-row-height', 'md-gutter'], attrs, layoutIfMediaMatch);\n\t    }\n\t\n\t    function unwatchMedia() {\n\t      ctrl.layoutDelegate = angular.noop;\n\t\n\t      unwatchAttrs();\n\t      for (var mediaName in $mdConstant.MEDIA) {\n\t        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])\n\t            .removeListener(invalidateLayout);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Performs grid layout if the provided mediaName matches the currently\n\t     * active media type.\n\t     */\n\t    function layoutIfMediaMatch(mediaName) {\n\t      if (mediaName == null) {\n\t        // TODO(shyndman): It would be nice to only layout if we have\n\t        // instances of attributes using this media type\n\t        ctrl.invalidateLayout();\n\t      } else if ($mdMedia(mediaName)) {\n\t        ctrl.invalidateLayout();\n\t      }\n\t    }\n\t\n\t    var lastLayoutProps;\n\t\n\t    /**\n\t     * Invokes the layout engine, and uses its results to lay out our\n\t     * tile elements.\n\t     *\n\t     * @param {boolean} tilesInvalidated Whether tiles have been\n\t     *    added/removed/moved since the last layout. This is to avoid situations\n\t     *    where tiles are replaced with properties identical to their removed\n\t     *    counterparts.\n\t     */\n\t    function layoutDelegate(tilesInvalidated) {\n\t      var tiles = getTileElements();\n\t      var props = {\n\t        tileSpans: getTileSpans(tiles),\n\t        colCount: getColumnCount(),\n\t        rowMode: getRowMode(),\n\t        rowHeight: getRowHeight(),\n\t        gutter: getGutter()\n\t      };\n\t\n\t      if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) {\n\t        return;\n\t      }\n\t\n\t      var performance =\n\t        $mdGridLayout(props.colCount, props.tileSpans, tiles)\n\t          .map(function(tilePositions, rowCount) {\n\t            return {\n\t              grid: {\n\t                element: element,\n\t                style: getGridStyle(props.colCount, rowCount,\n\t                    props.gutter, props.rowMode, props.rowHeight)\n\t              },\n\t              tiles: tilePositions.map(function(ps, i) {\n\t                return {\n\t                  element: angular.element(tiles[i]),\n\t                  style: getTileStyle(ps.position, ps.spans,\n\t                      props.colCount, rowCount,\n\t                      props.gutter, props.rowMode, props.rowHeight)\n\t                }\n\t              })\n\t            }\n\t          })\n\t          .reflow()\n\t          .performance();\n\t\n\t      // Report layout\n\t      scope.mdOnLayout({\n\t        $event: {\n\t          performance: performance\n\t        }\n\t      });\n\t\n\t      lastLayoutProps = props;\n\t    }\n\t\n\t    // Use $interpolate to do some simple string interpolation as a convenience.\n\t\n\t    var startSymbol = $interpolate.startSymbol();\n\t    var endSymbol = $interpolate.endSymbol();\n\t\n\t    // Returns an expression wrapped in the interpolator's start and end symbols.\n\t    function expr(exprStr) {\n\t      return startSymbol + exprStr + endSymbol;\n\t    }\n\t\n\t    // The amount of space a single 1x1 tile would take up (either width or height), used as\n\t    // a basis for other calculations. This consists of taking the base size percent (as would be\n\t    // if evenly dividing the size between cells), and then subtracting the size of one gutter.\n\t    // However, since there are no gutters on the edges, each tile only uses a fration\n\t    // (gutterShare = numGutters / numCells) of the gutter size. (Imagine having one gutter per\n\t    // tile, and then breaking up the extra gutter on the edge evenly among the cells).\n\t    var UNIT = $interpolate(expr('share') + '% - (' + expr('gutter') + ' * ' + expr('gutterShare') + ')');\n\t\n\t    // The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n\t    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n\t    // row/column (offset).\n\t    var POSITION  = $interpolate('calc((' + expr('unit') + ' + ' + expr('gutter') + ') * ' + expr('offset') + ')');\n\t\n\t    // The actual size of a tile, e.g., width or height, taking rowSpan or colSpan into account.\n\t    // This is computed by multiplying the base unit by the rowSpan/colSpan, and then adding back\n\t    // in the space that the gutter would normally have used (which was already accounted for in\n\t    // the base unit calculation).\n\t    var DIMENSION = $interpolate('calc((' + expr('unit') + ') * ' + expr('span') + ' + (' + expr('span') + ' - 1) * ' + expr('gutter') + ')');\n\t\n\t    /**\n\t     * Gets the styles applied to a tile element described by the given parameters.\n\t     * @param {{row: number, col: number}} position The row and column indices of the tile.\n\t     * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.\n\t     * @param {number} colCount The number of columns.\n\t     * @param {number} rowCount The number of rows.\n\t     * @param {string} gutter The amount of space between tiles. This will be something like\n\t     *     '5px' or '2em'.\n\t     * @param {string} rowMode The row height mode. Can be one of:\n\t     *     'fixed': all rows have a fixed size, given by rowHeight,\n\t     *     'ratio': row height defined as a ratio to width, or\n\t     *     'fit': fit to the grid-list element height, divinding evenly among rows.\n\t     * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and\n\t     *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).\n\t     * @returns {Object} Map of CSS properties to be applied to the style element. Will define\n\t     *     values for top, left, width, height, marginTop, and paddingTop.\n\t     */\n\t    function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {\n\t      // TODO(shyndman): There are style caching opportunities here.\n\t\n\t      // Percent of the available horizontal space that one column takes up.\n\t      var hShare = (1 / colCount) * 100;\n\t\n\t      // Fraction of the gutter size that each column takes up.\n\t      var hGutterShare = (colCount - 1) / colCount;\n\t\n\t      // Base horizontal size of a column.\n\t      var hUnit = UNIT({share: hShare, gutterShare: hGutterShare, gutter: gutter});\n\t\n\t      // The width and horizontal position of each tile is always calculated the same way, but the\n\t      // height and vertical position depends on the rowMode.\n\t      var style = {\n\t        left: POSITION({ unit: hUnit, offset: position.col, gutter: gutter }),\n\t        width: DIMENSION({ unit: hUnit, span: spans.col, gutter: gutter }),\n\t        // resets\n\t        paddingTop: '',\n\t        marginTop: '',\n\t        top: '',\n\t        height: ''\n\t      };\n\t\n\t      switch (rowMode) {\n\t        case 'fixed':\n\t          // In fixed mode, simply use the given rowHeight.\n\t          style.top = POSITION({ unit: rowHeight, offset: position.row, gutter: gutter });\n\t          style.height = DIMENSION({ unit: rowHeight, span: spans.row, gutter: gutter });\n\t          break;\n\t\n\t        case 'ratio':\n\t          // Percent of the available vertical space that one row takes up. Here, rowHeight holds\n\t          // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.\n\t          var vShare = hShare / rowHeight;\n\t\n\t          // Base veritcal size of a row.\n\t          var vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });\n\t\n\t          // padidngTop and marginTop are used to maintain the given aspect ratio, as\n\t          // a percentage-based value for these properties is applied to the *width* of the\n\t          // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\t          style.paddingTop = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter});\n\t          style.marginTop = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });\n\t          break;\n\t\n\t        case 'fit':\n\t          // Fraction of the gutter size that each column takes up.\n\t          var vGutterShare = (rowCount - 1) / rowCount;\n\t\n\t          // Percent of the available vertical space that one row takes up.\n\t          var vShare = (1 / rowCount) * 100;\n\t\n\t          // Base vertical size of a row.\n\t          var vUnit = UNIT({share: vShare, gutterShare: vGutterShare, gutter: gutter});\n\t\n\t          style.top = POSITION({unit: vUnit, offset: position.row, gutter: gutter});\n\t          style.height = DIMENSION({unit: vUnit, span: spans.row, gutter: gutter});\n\t          break;\n\t      }\n\t\n\t      return style;\n\t    }\n\t\n\t    function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {\n\t      var style = {};\n\t\n\t      switch(rowMode) {\n\t        case 'fixed':\n\t          style.height = DIMENSION({ unit: rowHeight, span: rowCount, gutter: gutter });\n\t          style.paddingBottom = '';\n\t          break;\n\t\n\t        case 'ratio':\n\t          // rowHeight is width / height\n\t          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,\n\t              hShare = (1 / colCount) * 100,\n\t              vShare = hShare * (1 / rowHeight),\n\t              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });\n\t\n\t          style.height = '';\n\t          style.paddingBottom = DIMENSION({ unit: vUnit, span: rowCount, gutter: gutter});\n\t          break;\n\t\n\t        case 'fit':\n\t          // noop, as the height is user set\n\t          break;\n\t      }\n\t\n\t      return style;\n\t    }\n\t\n\t    function getTileElements() {\n\t      return [].filter.call(element.children(), function(ele) {\n\t        return ele.tagName == 'MD-GRID-TILE' && !ele.$$mdDestroyed;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Gets an array of objects containing the rowspan and colspan for each tile.\n\t     * @returns {Array<{row: number, col: number}>}\n\t     */\n\t    function getTileSpans(tileElements) {\n\t      return [].map.call(tileElements, function(ele) {\n\t        var ctrl = angular.element(ele).controller('mdGridTile');\n\t        return {\n\t          row: parseInt(\n\t              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-rowspan'), 10) || 1,\n\t          col: parseInt(\n\t              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-colspan'), 10) || 1\n\t        };\n\t      });\n\t    }\n\t\n\t    function getColumnCount() {\n\t      var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);\n\t      if (isNaN(colCount)) {\n\t        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';\n\t      }\n\t      return colCount;\n\t    }\n\t\n\t    function getGutter() {\n\t      return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);\n\t    }\n\t\n\t    function getRowHeight() {\n\t      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');\n\t      switch (getRowMode()) {\n\t        case 'fixed':\n\t          return applyDefaultUnit(rowHeight);\n\t        case 'ratio':\n\t          var whRatio = rowHeight.split(':');\n\t          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);\n\t        case 'fit':\n\t          return 0; // N/A\n\t      }\n\t    }\n\t\n\t    function getRowMode() {\n\t      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');\n\t      if (rowHeight == 'fit') {\n\t        return 'fit';\n\t      } else if (rowHeight.indexOf(':') !== -1) {\n\t        return 'ratio';\n\t      } else {\n\t        return 'fixed';\n\t      }\n\t    }\n\t\n\t    function applyDefaultUnit(val) {\n\t      return /\\D$/.test(val) ? val : val + 'px';\n\t    }\n\t  }\n\t}\n\tGridListDirective.$inject = [\"$interpolate\", \"$mdConstant\", \"$mdGridLayout\", \"$mdMedia\"];\n\t\n\t/* @ngInject */\n\tfunction GridListController($mdUtil) {\n\t  this.layoutInvalidated = false;\n\t  this.tilesInvalidated = false;\n\t  this.$timeout_ = $mdUtil.nextTick;\n\t  this.layoutDelegate = angular.noop;\n\t}\n\tGridListController.$inject = [\"$mdUtil\"];\n\t\n\tGridListController.prototype = {\n\t  invalidateTiles: function() {\n\t    this.tilesInvalidated = true;\n\t    this.invalidateLayout();\n\t  },\n\t\n\t  invalidateLayout: function() {\n\t    if (this.layoutInvalidated) {\n\t      return;\n\t    }\n\t    this.layoutInvalidated = true;\n\t    this.$timeout_(angular.bind(this, this.layout));\n\t  },\n\t\n\t  layout: function() {\n\t    try {\n\t      this.layoutDelegate(this.tilesInvalidated);\n\t    } finally {\n\t      this.layoutInvalidated = false;\n\t      this.tilesInvalidated = false;\n\t    }\n\t  }\n\t};\n\t\n\t\n\t/* @ngInject */\n\tfunction GridLayoutFactory($mdUtil) {\n\t  var defaultAnimator = GridTileAnimator;\n\t\n\t  /**\n\t   * Set the reflow animator callback\n\t   */\n\t  GridLayout.animateWith = function(customAnimator) {\n\t    defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;\n\t  };\n\t\n\t  return GridLayout;\n\t\n\t  /**\n\t   * Publish layout function\n\t   */\n\t  function GridLayout(colCount, tileSpans) {\n\t      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;\n\t\n\t      layoutTime = $mdUtil.time(function() {\n\t        layoutInfo = calculateGridFor(colCount, tileSpans);\n\t      });\n\t\n\t      return self = {\n\t\n\t        /**\n\t         * An array of objects describing each tile's position in the grid.\n\t         */\n\t        layoutInfo: function() {\n\t          return layoutInfo;\n\t        },\n\t\n\t        /**\n\t         * Maps grid positioning to an element and a set of styles using the\n\t         * provided updateFn.\n\t         */\n\t        map: function(updateFn) {\n\t          mapTime = $mdUtil.time(function() {\n\t            var info = self.layoutInfo();\n\t            gridStyles = updateFn(info.positioning, info.rowCount);\n\t          });\n\t          return self;\n\t        },\n\t\n\t        /**\n\t         * Default animator simply sets the element.css( <styles> ). An alternate\n\t         * animator can be provided as an argument. The function has the following\n\t         * signature:\n\t         *\n\t         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)\n\t         */\n\t        reflow: function(animatorFn) {\n\t          reflowTime = $mdUtil.time(function() {\n\t            var animator = animatorFn || defaultAnimator;\n\t            animator(gridStyles.grid, gridStyles.tiles);\n\t          });\n\t          return self;\n\t        },\n\t\n\t        /**\n\t         * Timing for the most recent layout run.\n\t         */\n\t        performance: function() {\n\t          return {\n\t            tileCount: tileSpans.length,\n\t            layoutTime: layoutTime,\n\t            mapTime: mapTime,\n\t            reflowTime: reflowTime,\n\t            totalTime: layoutTime + mapTime + reflowTime\n\t          };\n\t        }\n\t      };\n\t    }\n\t\n\t  /**\n\t   * Default Gridlist animator simple sets the css for each element;\n\t   * NOTE: any transitions effects must be manually set in the CSS.\n\t   * e.g.\n\t   *\n\t   *  md-grid-tile {\n\t   *    transition: all 700ms ease-out 50ms;\n\t   *  }\n\t   *\n\t   */\n\t  function GridTileAnimator(grid, tiles) {\n\t    grid.element.css(grid.style);\n\t    tiles.forEach(function(t) {\n\t      t.element.css(t.style);\n\t    })\n\t  }\n\t\n\t  /**\n\t   * Calculates the positions of tiles.\n\t   *\n\t   * The algorithm works as follows:\n\t   *    An Array<Number> with length colCount (spaceTracker) keeps track of\n\t   *    available tiling positions, where elements of value 0 represents an\n\t   *    empty position. Space for a tile is reserved by finding a sequence of\n\t   *    0s with length <= than the tile's colspan. When such a space has been\n\t   *    found, the occupied tile positions are incremented by the tile's\n\t   *    rowspan value, as these positions have become unavailable for that\n\t   *    many rows.\n\t   *\n\t   *    If the end of a row has been reached without finding space for the\n\t   *    tile, spaceTracker's elements are each decremented by 1 to a minimum\n\t   *    of 0. Rows are searched in this fashion until space is found.\n\t   */\n\t  function calculateGridFor(colCount, tileSpans) {\n\t    var curCol = 0,\n\t        curRow = 0,\n\t        spaceTracker = newSpaceTracker();\n\t\n\t    return {\n\t      positioning: tileSpans.map(function(spans, i) {\n\t        return {\n\t          spans: spans,\n\t          position: reserveSpace(spans, i)\n\t        };\n\t      }),\n\t      rowCount: curRow + Math.max.apply(Math, spaceTracker)\n\t    };\n\t\n\t    function reserveSpace(spans, i) {\n\t      if (spans.col > colCount) {\n\t        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +\n\t            '(' + spans.col + ') that exceeds the column count ' +\n\t            '(' + colCount + ')';\n\t      }\n\t\n\t      var start = 0,\n\t          end = 0;\n\t\n\t      // TODO(shyndman): This loop isn't strictly necessary if you can\n\t      // determine the minimum number of rows before a space opens up. To do\n\t      // this, recognize that you've iterated across an entire row looking for\n\t      // space, and if so fast-forward by the minimum rowSpan count. Repeat\n\t      // until the required space opens up.\n\t      while (end - start < spans.col) {\n\t        if (curCol >= colCount) {\n\t          nextRow();\n\t          continue;\n\t        }\n\t\n\t        start = spaceTracker.indexOf(0, curCol);\n\t        if (start === -1 || (end = findEnd(start + 1)) === -1) {\n\t          start = end = 0;\n\t          nextRow();\n\t          continue;\n\t        }\n\t\n\t        curCol = end + 1;\n\t      }\n\t\n\t      adjustRow(start, spans.col, spans.row);\n\t      curCol = start + spans.col;\n\t\n\t      return {\n\t        col: start,\n\t        row: curRow\n\t      };\n\t    }\n\t\n\t    function nextRow() {\n\t      curCol = 0;\n\t      curRow++;\n\t      adjustRow(0, colCount, -1); // Decrement row spans by one\n\t    }\n\t\n\t    function adjustRow(from, cols, by) {\n\t      for (var i = from; i < from + cols; i++) {\n\t        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);\n\t      }\n\t    }\n\t\n\t    function findEnd(start) {\n\t      var i;\n\t      for (i = start; i < spaceTracker.length; i++) {\n\t        if (spaceTracker[i] !== 0) {\n\t          return i;\n\t        }\n\t      }\n\t\n\t      if (i === spaceTracker.length) {\n\t        return i;\n\t      }\n\t    }\n\t\n\t    function newSpaceTracker() {\n\t      var tracker = [];\n\t      for (var i = 0; i < colCount; i++) {\n\t        tracker.push(0);\n\t      }\n\t      return tracker;\n\t    }\n\t  }\n\t}\n\tGridLayoutFactory.$inject = [\"$mdUtil\"];\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdGridTile\n\t * @module material.components.gridList\n\t * @restrict E\n\t * @description\n\t * Tiles contain the content of an `md-grid-list`. They span one or more grid\n\t * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to\n\t * display secondary content.\n\t *\n\t * ### Responsive Attributes\n\t *\n\t * The `md-grid-tile` directive supports \"responsive\" attributes, which allow\n\t * different `md-rowspan` and `md-colspan` values depending on the currently\n\t * matching media query (as defined in `$mdConstant.MEDIA`).\n\t *\n\t * In order to set a responsive attribute, first define the fallback value with\n\t * the standard attribute name, then add additional attributes with the\n\t * following convention: `{base-attribute-name}-{media-query-name}=\"{value}\"`\n\t * (ie. `md-colspan-sm=\"4\"`)\n\t *\n\t * @param {number=} md-colspan The number of columns to span (default 1). Cannot\n\t *    exceed the number of columns in the grid. Supports interpolation.\n\t * @param {number=} md-rowspan The number of rows to span (default 1). Supports\n\t *     interpolation.\n\t *\n\t * @usage\n\t * With header:\n\t * <hljs lang=\"html\">\n\t * <md-grid-tile>\n\t *   <md-grid-tile-header>\n\t *     <h3>This is a header</h3>\n\t *   </md-grid-tile-header>\n\t * </md-grid-tile>\n\t * </hljs>\n\t *\n\t * With footer:\n\t * <hljs lang=\"html\">\n\t * <md-grid-tile>\n\t *   <md-grid-tile-footer>\n\t *     <h3>This is a footer</h3>\n\t *   </md-grid-tile-footer>\n\t * </md-grid-tile>\n\t * </hljs>\n\t *\n\t * Spanning multiple rows/columns:\n\t * <hljs lang=\"html\">\n\t * <md-grid-tile md-colspan=\"2\" md-rowspan=\"3\">\n\t * </md-grid-tile>\n\t * </hljs>\n\t *\n\t * Responsive attributes:\n\t * <hljs lang=\"html\">\n\t * <md-grid-tile md-colspan=\"1\" md-colspan-sm=\"3\" md-colspan-md=\"5\">\n\t * </md-grid-tile>\n\t * </hljs>\n\t */\n\tfunction GridTileDirective($mdMedia) {\n\t  return {\n\t    restrict: 'E',\n\t    require: '^mdGridList',\n\t    template: '<figure ng-transclude></figure>',\n\t    transclude: true,\n\t    scope: {},\n\t    // Simple controller that exposes attributes to the grid directive\n\t    controller: [\"$attrs\", function($attrs) {\n\t      this.$attrs = $attrs;\n\t    }],\n\t    link: postLink\n\t  };\n\t\n\t  function postLink(scope, element, attrs, gridCtrl) {\n\t    // Apply semantics\n\t    element.attr('role', 'listitem');\n\t\n\t    // If our colspan or rowspan changes, trigger a layout\n\t    var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],\n\t        attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));\n\t\n\t    // Tile registration/deregistration\n\t    gridCtrl.invalidateTiles();\n\t    scope.$on('$destroy', function() {\n\t      // Mark the tile as destroyed so it is no longer considered in layout,\n\t      // even if the DOM element sticks around (like during a leave animation)\n\t      element[0].$$mdDestroyed = true;\n\t      unwatchAttrs();\n\t      gridCtrl.invalidateLayout();\n\t    });\n\t\n\t    if (angular.isDefined(scope.$parent.$index)) {\n\t      scope.$watch(function() { return scope.$parent.$index; },\n\t        function indexChanged(newIdx, oldIdx) {\n\t          if (newIdx === oldIdx) {\n\t            return;\n\t          }\n\t          gridCtrl.invalidateTiles();\n\t        });\n\t    }\n\t  }\n\t}\n\tGridTileDirective.$inject = [\"$mdMedia\"];\n\t\n\t\n\tfunction GridTileCaptionDirective() {\n\t  return {\n\t    template: '<figcaption ng-transclude></figcaption>',\n\t    transclude: true\n\t  };\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.icon\n\t * @description\n\t * Icon\n\t */\n\tangular.module('material.components.icon', [\n\t    'material.core'\n\t  ]);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.input\n\t */\n\t\n\tangular.module('material.components.input', [\n\t  'material.core'\n\t])\n\t  .directive('mdInputContainer', mdInputContainerDirective)\n\t  .directive('label', labelDirective)\n\t  .directive('input', inputTextareaDirective)\n\t  .directive('textarea', inputTextareaDirective)\n\t  .directive('mdMaxlength', mdMaxlengthDirective)\n\t  .directive('placeholder', placeholderDirective)\n\t  .directive('ngMessages', ngMessagesDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdInputContainer\n\t * @module material.components.input\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * `<md-input-container>` is the parent of any input or textarea element.\n\t *\n\t * Input and textarea elements will not behave properly unless the md-input-container\n\t * parent is provided.\n\t *\n\t * @param md-is-error {expression=} When the given expression evaluates to true, the input container\n\t *   will go into error state. Defaults to erroring if the input has been touched and is invalid.\n\t * @param md-no-float {boolean=} When present, placeholders will not be converted to floating\n\t *   labels.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *\n\t * <md-input-container>\n\t *   <label>Username</label>\n\t *   <input type=\"text\" ng-model=\"user.name\">\n\t * </md-input-container>\n\t *\n\t * <md-input-container>\n\t *   <label>Description</label>\n\t *   <textarea ng-model=\"user.description\"></textarea>\n\t * </md-input-container>\n\t *\n\t * </hljs>\n\t */\n\tfunction mdInputContainerDirective($mdTheming, $parse) {\n\t  ContainerCtrl.$inject = [\"$scope\", \"$element\", \"$attrs\"];\n\t  return {\n\t    restrict: 'E',\n\t    link: postLink,\n\t    controller: ContainerCtrl\n\t  };\n\t\n\t  function postLink(scope, element, attr) {\n\t    $mdTheming(element);\n\t  }\n\t\n\t  function ContainerCtrl($scope, $element, $attrs) {\n\t    var self = this;\n\t\n\t    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);\n\t\n\t    self.delegateClick = function() {\n\t      self.input.focus();\n\t    };\n\t    self.element = $element;\n\t    self.setFocused = function(isFocused) {\n\t      $element.toggleClass('md-input-focused', !!isFocused);\n\t    };\n\t    self.setHasValue = function(hasValue) {\n\t      $element.toggleClass('md-input-has-value', !!hasValue);\n\t    };\n\t    self.setHasMessages = function(hasMessages) {\n\t      $element.toggleClass('md-input-has-messages', !!hasMessages);\n\t    };\n\t    self.setHasPlaceholder = function(hasPlaceholder) {\n\t      $element.toggleClass('md-input-has-placeholder', !!hasPlaceholder);\n\t    };\n\t    self.setInvalid = function(isInvalid) {\n\t      $element.toggleClass('md-input-invalid', !!isInvalid);\n\t    };\n\t    $scope.$watch(function() {\n\t      return self.label && self.input;\n\t    }, function(hasLabelAndInput) {\n\t      if (hasLabelAndInput && !self.label.attr('for')) {\n\t        self.label.attr('for', self.input.attr('id'));\n\t      }\n\t    });\n\t  }\n\t}\n\tmdInputContainerDirective.$inject = [\"$mdTheming\", \"$parse\"];\n\t\n\tfunction labelDirective() {\n\t  return {\n\t    restrict: 'E',\n\t    require: '^?mdInputContainer',\n\t    link: function(scope, element, attr, containerCtrl) {\n\t      if (!containerCtrl || attr.mdNoFloat) return;\n\t\n\t      containerCtrl.label = element;\n\t      scope.$on('$destroy', function() {\n\t        containerCtrl.label = null;\n\t      });\n\t    }\n\t  };\n\t}\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdInput\n\t * @restrict E\n\t * @module material.components.input\n\t *\n\t * @description\n\t * Use the `<input>` or the  `<textarea>` as a child of an `<md-input-container>`.\n\t *\n\t * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is\n\t *   specified, a character counter will be shown underneath the input.<br/><br/>\n\t *   The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't\n\t *   want the counter text and only need \"plain\" validation, you can use the \"simple\" `ng-maxlength`\n\t *   or maxlength attributes.\n\t * @param {string=} aria-label Aria-label is required when no label is present.  A warning message\n\t *   will be logged in the console if not present.\n\t * @param {string=} placeholder An alternative approach to using aria-label when the label is not\n\t *   PRESENT. The placeholder text is copied to the aria-label attribute.\n\t * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.\n\t * @param md-detect-hidden {boolean=} When present, textareas will be sized properly when they are revealed after being hidden. This is off by default for performance reasons because it guarantees a reflow every digest cycle.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-input-container>\n\t *   <label>Color</label>\n\t *   <input type=\"text\" ng-model=\"color\" required md-maxlength=\"10\">\n\t * </md-input-container>\n\t * </hljs>\n\t * <h3>With Errors</h3>\n\t *\n\t * <hljs lang=\"html\">\n\t * <form name=\"userForm\">\n\t *   <md-input-container>\n\t *     <label>Last Name</label>\n\t *     <input name=\"lastName\" ng-model=\"lastName\" required md-maxlength=\"10\" minlength=\"4\">\n\t *     <div ng-messages=\"userForm.lastName.$error\" ng-show=\"userForm.lastName.$dirty\">\n\t *       <div ng-message=\"required\">This is required!</div>\n\t *       <div ng-message=\"md-maxlength\">That's too long!</div>\n\t *       <div ng-message=\"minlength\">That's too short!</div>\n\t *     </div>\n\t *   </md-input-container>\n\t *   <md-input-container>\n\t *     <label>Biography</label>\n\t *     <textarea name=\"bio\" ng-model=\"biography\" required md-maxlength=\"150\"></textarea>\n\t *     <div ng-messages=\"userForm.bio.$error\" ng-show=\"userForm.bio.$dirty\">\n\t *       <div ng-message=\"required\">This is required!</div>\n\t *       <div ng-message=\"md-maxlength\">That's too long!</div>\n\t *     </div>\n\t *   </md-input-container>\n\t *   <md-input-container>\n\t *     <input aria-label='title' ng-model='title'>\n\t *   </md-input-container>\n\t *   <md-input-container>\n\t *     <input placeholder='title' ng-model='title'>\n\t *   </md-input-container>\n\t * </form>\n\t * </hljs>\n\t *\n\t * Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).\n\t * Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).\n\t *\n\t */\n\t\n\tfunction inputTextareaDirective($mdUtil, $window, $mdAria) {\n\t  return {\n\t    restrict: 'E',\n\t    require: ['^?mdInputContainer', '?ngModel'],\n\t    link: postLink\n\t  };\n\t\n\t  function postLink(scope, element, attr, ctrls) {\n\t\n\t    var containerCtrl = ctrls[0];\n\t    var hasNgModel = !!ctrls[1];\n\t    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n\t    var isReadonly = angular.isDefined(attr.readonly);\n\t\n\t    if (!containerCtrl) return;\n\t    if (containerCtrl.input) {\n\t      throw new Error(\"<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!\");\n\t    }\n\t    containerCtrl.input = element;\n\t\n\t    if (!containerCtrl.label) {\n\t      $mdAria.expect(element, 'aria-label', element.attr('placeholder'));\n\t    }\n\t\n\t    element.addClass('md-input');\n\t    if (!element.attr('id')) {\n\t      element.attr('id', 'input_' + $mdUtil.nextUid());\n\t    }\n\t\n\t    if (element[0].tagName.toLowerCase() === 'textarea') {\n\t      setupTextarea();\n\t    }\n\t\n\t    // If the input doesn't have an ngModel, it may have a static value. For that case,\n\t    // we have to do one initial check to determine if the container should be in the\n\t    // \"has a value\" state.\n\t    if (!hasNgModel) {\n\t      inputCheckValue();\n\t    }\n\t\n\t    var isErrorGetter = containerCtrl.isErrorGetter || function() {\n\t        return ngModelCtrl.$invalid && ngModelCtrl.$touched;\n\t      };\n\t    scope.$watch(isErrorGetter, containerCtrl.setInvalid);\n\t\n\t    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);\n\t    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);\n\t\n\t    element.on('input', inputCheckValue);\n\t\n\t    if (!isReadonly) {\n\t      element\n\t        .on('focus', function(ev) {\n\t          containerCtrl.setFocused(true);\n\t        })\n\t        .on('blur', function(ev) {\n\t          containerCtrl.setFocused(false);\n\t          inputCheckValue();\n\t        });\n\t\n\t    }\n\t\n\t    //ngModelCtrl.$setTouched();\n\t    //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();\n\t\n\t    scope.$on('$destroy', function() {\n\t      containerCtrl.setFocused(false);\n\t      containerCtrl.setHasValue(false);\n\t      containerCtrl.input = null;\n\t    });\n\t\n\t    /**\n\t     *\n\t     */\n\t    function ngModelPipelineCheckValue(arg) {\n\t      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));\n\t      return arg;\n\t    }\n\t\n\t    function inputCheckValue() {\n\t      // An input's value counts if its length > 0,\n\t      // or if the input's validity state says it has bad input (eg string in a number input)\n\t      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);\n\t    }\n\t\n\t    function setupTextarea() {\n\t      if (angular.isDefined(element.attr('md-no-autogrow'))) {\n\t        return;\n\t      }\n\t\n\t      var node = element[0];\n\t      var container = containerCtrl.element[0];\n\t\n\t      var min_rows = NaN;\n\t      var lineHeight = null;\n\t      // can't check if height was or not explicity set,\n\t      // so rows attribute will take precedence if present\n\t      if (node.hasAttribute('rows')) {\n\t        min_rows = parseInt(node.getAttribute('rows'));\n\t      }\n\t\n\t      var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);\n\t\n\t      function pipelineListener(value) {\n\t        onChangeTextarea();\n\t        return value;\n\t      }\n\t\n\t      if (ngModelCtrl) {\n\t        ngModelCtrl.$formatters.push(pipelineListener);\n\t        ngModelCtrl.$viewChangeListeners.push(pipelineListener);\n\t      } else {\n\t        onChangeTextarea();\n\t      }\n\t      element.on('keydown input', onChangeTextarea);\n\t\n\t      if (isNaN(min_rows)) {\n\t        element.attr('rows', '1');\n\t\n\t        element.on('scroll', onScroll);\n\t      }\n\t\n\t      angular.element($window).on('resize', onChangeTextarea);\n\t\n\t      scope.$on('$destroy', function() {\n\t        angular.element($window).off('resize', onChangeTextarea);\n\t      });\n\t\n\t      function growTextarea() {\n\t        // sets the md-input-container height to avoid jumping around\n\t        container.style.height = container.offsetHeight + 'px';\n\t\n\t        // temporarily disables element's flex so its height 'runs free'\n\t        element.addClass('md-no-flex');\n\t\n\t        if (isNaN(min_rows)) {\n\t          node.style.height = \"auto\";\n\t          node.scrollTop = 0;\n\t          var height = getHeight();\n\t          if (height) node.style.height = height + 'px';\n\t        } else {\n\t          node.setAttribute(\"rows\", 1);\n\t\n\t          if (!lineHeight) {\n\t            node.style.minHeight = '0';\n\t\n\t            lineHeight = element.prop('clientHeight');\n\t\n\t            node.style.minHeight = null;\n\t          }\n\t\n\t          var rows = Math.max(min_rows, Math.round(node.scrollHeight / lineHeight));\n\t          node.setAttribute(\"rows\", rows);\n\t        }\n\t\n\t        // reset everything back to normal\n\t        element.removeClass('md-no-flex');\n\t        container.style.height = 'auto';\n\t      }\n\t\n\t      function getHeight() {\n\t        var line = node.scrollHeight - node.offsetHeight;\n\t        return node.offsetHeight + (line > 0 ? line : 0);\n\t      }\n\t\n\t      function onScroll(e) {\n\t        node.scrollTop = 0;\n\t        // for smooth new line adding\n\t        var line = node.scrollHeight - node.offsetHeight;\n\t        var height = node.offsetHeight + line;\n\t        node.style.height = height + 'px';\n\t      }\n\t\n\t      // Attach a watcher to detect when the textarea gets shown.\n\t      if (angular.isDefined(element.attr('md-detect-hidden'))) {\n\t\n\t        var handleHiddenChange = function() {\n\t          var wasHidden = false;\n\t\n\t          return function() {\n\t            var isHidden = node.offsetHeight === 0;\n\t\n\t            if (isHidden === false && wasHidden === true) {\n\t              growTextarea();\n\t            }\n\t\n\t            wasHidden = isHidden;\n\t          };\n\t        }();\n\t\n\t        // Check every digest cycle whether the visibility of the textarea has changed.\n\t        // Queue up to run after the digest cycle is complete.\n\t        scope.$watch(function() {\n\t          $mdUtil.nextTick(handleHiddenChange, false);\n\t          return true;\n\t        });\n\t      }\n\t    }\n\t  }\n\t}\n\tinputTextareaDirective.$inject = [\"$mdUtil\", \"$window\", \"$mdAria\"];\n\t\n\tfunction mdMaxlengthDirective($animate) {\n\t  return {\n\t    restrict: 'A',\n\t    require: ['ngModel', '^mdInputContainer'],\n\t    link: postLink\n\t  };\n\t\n\t  function postLink(scope, element, attr, ctrls) {\n\t    var maxlength;\n\t    var ngModelCtrl = ctrls[0];\n\t    var containerCtrl = ctrls[1];\n\t    var charCountEl = angular.element('<div class=\"md-char-counter\">');\n\t    var input = angular.element(containerCtrl.element[0].querySelector('[md-maxlength]'));\n\t\n\t    // Stop model from trimming. This makes it so whitespace\n\t    // over the maxlength still counts as invalid.\n\t    attr.$set('ngTrim', 'false');\n\t\n\t    var ngMessagesSelectors = [\n\t      'ng-messages',\n\t      'data-ng-messages',\n\t      'x-ng-messages',\n\t      '[ng-messages]',\n\t      '[data-ng-messages]',\n\t      '[x-ng-messages]'\n\t    ];\n\t\n\t    var ngMessages = containerCtrl.element[0].querySelector(ngMessagesSelectors.join(','));\n\t\n\t    // If we have an ngMessages container, put the counter at the top; otherwise, put it after the\n\t    // input so it will be positioned properly in the SCSS\n\t    if (ngMessages) {\n\t      angular.element(ngMessages).prepend(charCountEl);\n\t    } else {\n\t      input.after(charCountEl);\n\t    }\n\t\n\t    ngModelCtrl.$formatters.push(renderCharCount);\n\t    ngModelCtrl.$viewChangeListeners.push(renderCharCount);\n\t    element.on('input keydown keyup', function() {\n\t      renderCharCount(); //make sure it's called with no args\n\t    });\n\t\n\t    scope.$watch(attr.mdMaxlength, function(value) {\n\t      maxlength = value;\n\t      if (angular.isNumber(value) && value > 0) {\n\t        if (!charCountEl.parent().length) {\n\t          $animate.enter(charCountEl, containerCtrl.element, input);\n\t        }\n\t        renderCharCount();\n\t      } else {\n\t        $animate.leave(charCountEl);\n\t      }\n\t    });\n\t\n\t    ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {\n\t      if (!angular.isNumber(maxlength) || maxlength < 0) {\n\t        return true;\n\t      }\n\t      return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;\n\t    };\n\t\n\t    function renderCharCount(value) {\n\t      // Force the value into a string since it may be a number,\n\t      // which does not have a length property.\n\t      charCountEl.text(String(element.val() || value || '').length + '/' + maxlength);\n\t      return value;\n\t    }\n\t  }\n\t}\n\tmdMaxlengthDirective.$inject = [\"$animate\"];\n\t\n\tfunction placeholderDirective($log) {\n\t  return {\n\t    restrict: 'A',\n\t    require: '^^?mdInputContainer',\n\t    priority: 200,\n\t    link: postLink\n\t  };\n\t\n\t  function postLink(scope, element, attr, inputContainer) {\n\t    // If there is no input container, just return\n\t    if (!inputContainer) return;\n\t\n\t    var label = inputContainer.element.find('label');\n\t    var hasNoFloat = angular.isDefined(inputContainer.element.attr('md-no-float'));\n\t\n\t    // If we have a label, or they specify the md-no-float attribute, just return\n\t    if ((label && label.length) || hasNoFloat) {\n\t      // Add a placeholder class so we can target it in the CSS\n\t      inputContainer.setHasPlaceholder(true);\n\t      return;\n\t    }\n\t\n\t    // Otherwise, grab/remove the placeholder\n\t    var placeholderText = attr.placeholder;\n\t    element.removeAttr('placeholder');\n\t\n\t    // And add the placeholder text as a separate label\n\t    if (inputContainer.input && inputContainer.input[0].nodeName != 'MD-SELECT') {\n\t      var placeholder = '<label ng-click=\"delegateClick()\">' + placeholderText + '</label>';\n\t\n\t      inputContainer.element.addClass('md-icon-float');\n\t      inputContainer.element.prepend(placeholder);\n\t    }\n\t  }\n\t}\n\tplaceholderDirective.$inject = [\"$log\"];\n\t\n\tfunction ngMessagesDirective() {\n\t  return {\n\t    restrict: 'EA',\n\t    link: postLink,\n\t\n\t    // This is optional because we don't want target *all* ngMessage instances, just those inside of\n\t    // mdInputContainer.\n\t    require: '^^?mdInputContainer'\n\t  };\n\t\n\t  function postLink(scope, element, attr, inputContainer) {\n\t    // If we are not a child of an input container, don't do anything\n\t    if (!inputContainer) return;\n\t\n\t    // Tell our parent input container we have messages so we can set the proper classes\n\t    inputContainer.setHasMessages(true);\n\t\n\t    // When destroyed, inform our input container\n\t    scope.$on('$destroy', function() {\n\t      inputContainer.setHasMessages(false);\n\t    });\n\t  }\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.list\n\t * @description\n\t * List module\n\t */\n\tangular.module('material.components.list', [\n\t  'material.core'\n\t])\n\t  .controller('MdListController', MdListController)\n\t  .directive('mdList', mdListDirective)\n\t  .directive('mdListItem', mdListItemDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdList\n\t * @module material.components.list\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-list>\n\t *   <md-list-item class=\"md-2-line\" ng-repeat=\"item in todos\">\n\t *     <md-checkbox ng-model=\"item.done\"></md-checkbox>\n\t *     <div class=\"md-list-item-text\">\n\t *       <h3>{{item.title}}</h3>\n\t *       <p>{{item.description}}</p>\n\t *     </div>\n\t *   </md-list-item>\n\t * </md-list>\n\t * </hljs>\n\t */\n\t\n\tfunction mdListDirective($mdTheming) {\n\t  return {\n\t    restrict: 'E',\n\t    compile: function(tEl) {\n\t      tEl[0].setAttribute('role', 'list');\n\t      return $mdTheming;\n\t    }\n\t  };\n\t}\n\tmdListDirective.$inject = [\"$mdTheming\"];\n\t/**\n\t * @ngdoc directive\n\t * @name mdListItem\n\t * @module material.components.list\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.\n\t *\n\t * ## CSS\n\t * `.md-avatar` - class for image avatars\n\t *\n\t * `.md-avatar-icon` - class for icon avatars\n\t *\n\t * `.md-offset` - on content without an avatar\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *  <md-list>\n\t *    <md-list-item>\n\t *      <img class=\"md-avatar\" ng-src=\"path/to/img\"/>\n\t *      <span>Item content in list</span>\n\t *    </md-list-item>\n\t *    <md-list-item>\n\t *      <md-icon class=\"md-avatar-icon\" md-svg-icon=\"communication:phone\"></md-icon>\n\t *      <span>Item content in list</span>\n\t *    </md-list-item>\n\t *  </md-list>\n\t * </hljs>\n\t *\n\t */\n\tfunction mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {\n\t  var proxiedTypes = ['md-checkbox', 'md-switch'];\n\t  return {\n\t    restrict: 'E',\n\t    controller: 'MdListController',\n\t    compile: function(tEl, tAttrs) {\n\t      // Check for proxy controls (no ng-click on parent, and a control inside)\n\t      var secondaryItem = tEl[0].querySelector('.md-secondary');\n\t      var hasProxiedElement;\n\t      var proxyElement;\n\t\n\t      tEl[0].setAttribute('role', 'listitem');\n\t\n\t      if (!tAttrs.ngClick) {\n\t        for (var i = 0, type; type = proxiedTypes[i]; ++i) {\n\t          if (proxyElement = tEl[0].querySelector(type)) {\n\t            hasProxiedElement = true;\n\t            break;\n\t          }\n\t        }\n\t        if (hasProxiedElement) {\n\t          wrapIn('div');\n\t        } else if (!tEl[0].querySelector('md-button')) {\n\t          tEl.addClass('md-no-proxy');\n\t        }\n\t      } else {\n\t        wrapIn('button');\n\t      }\n\t      setupToggleAria();\n\t\n\t\n\t      function setupToggleAria() {\n\t        var toggleTypes = ['md-switch', 'md-checkbox'];\n\t        var toggle;\n\t\n\t        for (var i = 0, toggleType; toggleType = toggleTypes[i]; ++i) {\n\t          if (toggle = tEl.find(toggleType)[0]) {\n\t            if (!toggle.hasAttribute('aria-label')) {\n\t              var p = tEl.find('p')[0];\n\t              if (!p) return;\n\t              toggle.setAttribute('aria-label', 'Toggle ' + p.textContent);\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      function wrapIn(type) {\n\t        var container;\n\t        if (type == 'div') {\n\t          container = angular.element('<div class=\"md-no-style md-list-item-inner\">');\n\t          container.append(tEl.contents());\n\t          tEl.addClass('md-proxy-focus');\n\t        } else {\n\t          container = angular.element('<md-button class=\"md-no-style\"><div class=\"md-list-item-inner\"></div></md-button>');\n\t          var copiedAttrs = ['ng-click', 'aria-label', 'ng-disabled'];\n\t          angular.forEach(copiedAttrs, function(attr) {\n\t            if (tEl[0].hasAttribute(attr)) {\n\t              container[0].setAttribute(attr, tEl[0].getAttribute(attr));\n\t              tEl[0].removeAttribute(attr);\n\t            }\n\t          });\n\t          container.children().eq(0).append(tEl.contents());\n\t        }\n\t\n\t        tEl[0].setAttribute('tabindex', '-1');\n\t        tEl.append(container);\n\t\n\t        if (secondaryItem && secondaryItem.hasAttribute('ng-click')) {\n\t          $mdAria.expect(secondaryItem, 'aria-label');\n\t          var buttonWrapper = angular.element('<md-button class=\"md-secondary-container md-icon-button\">');\n\t          buttonWrapper.attr('ng-click', secondaryItem.getAttribute('ng-click'));\n\t          secondaryItem.removeAttribute('ng-click');\n\t          secondaryItem.setAttribute('tabindex', '-1');\n\t          secondaryItem.classList.remove('md-secondary');\n\t          buttonWrapper.append(secondaryItem);\n\t          secondaryItem = buttonWrapper[0];\n\t        }\n\t\n\t        // Check for a secondary item and move it outside\n\t        if ( secondaryItem && (\n\t          secondaryItem.hasAttribute('ng-click') ||\n\t            ( tAttrs.ngClick &&\n\t             isProxiedElement(secondaryItem) )\n\t        )) {\n\t          tEl.addClass('md-with-secondary');\n\t          tEl.append(secondaryItem);\n\t        }\n\t      }\n\t\n\t      function isProxiedElement(el) {\n\t        return proxiedTypes.indexOf(el.nodeName.toLowerCase()) != -1;\n\t      }\n\t\n\t      return postLink;\n\t\n\t      function postLink($scope, $element, $attr, ctrl) {\n\t\n\t        var proxies    = [],\n\t            firstChild = $element[0].firstElementChild,\n\t            hasClick   = firstChild && firstChild.hasAttribute('ng-click');\n\t\n\t        computeProxies();\n\t        computeClickable();\n\t\n\t        if ($element.hasClass('md-proxy-focus') && proxies.length) {\n\t          angular.forEach(proxies, function(proxy) {\n\t            proxy = angular.element(proxy);\n\t\n\t            $scope.mouseActive = false;\n\t            proxy.on('mousedown', function() {\n\t              $scope.mouseActive = true;\n\t              $timeout(function(){\n\t                $scope.mouseActive = false;\n\t              }, 100);\n\t            })\n\t            .on('focus', function() {\n\t              if ($scope.mouseActive === false) { $element.addClass('md-focused'); }\n\t              proxy.on('blur', function proxyOnBlur() {\n\t                $element.removeClass('md-focused');\n\t                proxy.off('blur', proxyOnBlur);\n\t              });\n\t            });\n\t          });\n\t        }\n\t\n\t        function computeProxies() {\n\t          var children = $element.children();\n\t          if (children.length && !children[0].hasAttribute('ng-click')) {\n\t            angular.forEach(proxiedTypes, function(type) {\n\t              angular.forEach(firstChild.querySelectorAll(type), function(child) {\n\t                proxies.push(child);\n\t              });\n\t            });\n\t          }\n\t        }\n\t        function computeClickable() {\n\t          if (proxies.length || hasClick) {\n\t            $element.addClass('md-clickable');\n\t\n\t            ctrl.attachRipple($scope, angular.element($element[0].querySelector('.md-no-style')));\n\t          }\n\t        }\n\t\n\t        if (!hasClick && !proxies.length) {\n\t          firstChild && firstChild.addEventListener('keypress', function(e) {\n\t            if (e.target.nodeName != 'INPUT' && e.target.nodeName != 'TEXTAREA') {\n\t              var keyCode = e.which || e.keyCode;\n\t              if (keyCode == $mdConstant.KEY_CODE.SPACE) {\n\t                if (firstChild) {\n\t                  firstChild.click();\n\t                  e.preventDefault();\n\t                  e.stopPropagation();\n\t                }\n\t              }\n\t            }\n\t          });\n\t        }\n\t\n\t        $element.off('click');\n\t        $element.off('keypress');\n\t\n\t        if (proxies.length && firstChild) {\n\t          $element.children().eq(0).on('click', function(e) {\n\t            var parentButton = $mdUtil.getClosest(e.target, 'BUTTON');\n\t            if (!parentButton && firstChild.contains(e.target)) {\n\t              angular.forEach(proxies, function(proxy) {\n\t                if (e.target !== proxy && !proxy.contains(e.target)) {\n\t                  angular.element(proxy).triggerHandler('click');\n\t                }\n\t              });\n\t            }\n\t          });\n\t        }\n\t      }\n\t    }\n\t  };\n\t}\n\tmdListItemDirective.$inject = [\"$mdAria\", \"$mdConstant\", \"$mdUtil\", \"$timeout\"];\n\t\n\t/*\n\t * @private\n\t * @ngdoc controller\n\t * @name MdListController\n\t * @module material.components.list\n\t *\n\t */\n\tfunction MdListController($scope, $element, $mdListInkRipple) {\n\t  var ctrl = this;\n\t  ctrl.attachRipple = attachRipple;\n\t\n\t  function attachRipple (scope, element) {\n\t    var options = {};\n\t    $mdListInkRipple.attach(scope, element, options);\n\t  }\n\t}\n\tMdListController.$inject = [\"$scope\", \"$element\", \"$mdListInkRipple\"];\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.menu\n\t */\n\t\n\tangular.module('material.components.menu', [\n\t  'material.core',\n\t  'material.components.backdrop'\n\t]);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.menu-bar\n\t */\n\t\n\tangular.module('material.components.menuBar', [\n\t  'material.core',\n\t  'material.components.menu'\n\t]);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.progressCircular\n\t * @description Circular Progress module!\n\t */\n\tangular.module('material.components.progressCircular', [\n\t  'material.core'\n\t])\n\t  .directive('mdProgressCircular', MdProgressCircularDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdProgressCircular\n\t * @module material.components.progressCircular\n\t * @restrict E\n\t *\n\t* @description\n\t * The circular progress directive is used to make loading content in your app as delightful and\n\t * painless as possible by minimizing the amount of visual change a user sees before they can view\n\t * and interact with content.\n\t *\n\t * For operations where the percentage of the operation completed can be determined, use a\n\t * determinate indicator. They give users a quick sense of how long an operation will take.\n\t *\n\t * For operations where the user is asked to wait a moment while something finishes up, and it’s\n\t * not necessary to expose what's happening behind the scenes and how long it will take, use an\n\t * indeterminate indicator.\n\t *\n\t * @param {string} md-mode Select from one of two modes: **'determinate'** and **'indeterminate'**.\n\t *\n\t * Note: if the `md-mode` value is set as undefined or specified as not 1 of the two (2) valid modes, then `.ng-hide`\n\t * will be auto-applied as a style to the component.\n\t *\n\t * Note: if not configured, the `md-mode=\"indeterminate\"` will be auto injected as an attribute.\n\t * If `value=\"\"` is also specified, however, then `md-mode=\"determinate\"` would be auto-injected instead.\n\t * @param {number=} value In determinate mode, this number represents the percentage of the\n\t *     circular progress. Default: 0\n\t * @param {number=} md-diameter This specifies the diamter of the circular progress. The value\n\t * may be a percentage (eg '25%') or a pixel-size value (eg '48'). If this attribute is\n\t * not present then a default value of '48px' is assumed.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-progress-circular md-mode=\"determinate\" value=\"...\"></md-progress-circular>\n\t *\n\t * <md-progress-circular md-mode=\"determinate\" ng-value=\"...\"></md-progress-circular>\n\t *\n\t * <md-progress-circular md-mode=\"determinate\" value=\"...\" md-diameter=\"100\"></md-progress-circular>\n\t *\n\t * <md-progress-circular md-mode=\"indeterminate\"></md-progress-circular>\n\t * </hljs>\n\t */\n\tfunction MdProgressCircularDirective($mdTheming, $mdUtil, $log) {\n\t  var DEFAULT_PROGRESS_SIZE = 100;\n\t  var DEFAULT_SCALING = 0.5;\n\t\n\t  var MODE_DETERMINATE = \"determinate\",\n\t      MODE_INDETERMINATE = \"indeterminate\";\n\t\n\t\n\t  return {\n\t    restrict: 'E',\n\t    scope : true,\n\t    template:\n\t        // The progress 'circle' is composed of two half-circles: the left side and the right\n\t        // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.\n\t        '<div class=\"md-spinner-wrapper\">' +\n\t          '<div class=\"md-inner\">' +\n\t            '<div class=\"md-gap\"></div>' +\n\t            '<div class=\"md-left\">' +\n\t              '<div class=\"md-half-circle\"></div>' +\n\t            '</div>' +\n\t            '<div class=\"md-right\">' +\n\t              '<div class=\"md-half-circle\"></div>' +\n\t            '</div>' +\n\t          '</div>' +\n\t        '</div>',\n\t    compile: compile\n\t  };\n\t\n\t  function compile(tElement) {\n\t    // The javascript in this file is mainly responsible for setting the correct aria attributes.\n\t    // The animation of the progress spinner is done entirely with just CSS.\n\t    tElement.attr('aria-valuemin', 0);\n\t    tElement.attr('aria-valuemax', 100);\n\t    tElement.attr('role', 'progressbar');\n\t\n\t    return postLink;\n\t  }\n\t\n\t  function postLink(scope, element, attr) {\n\t    $mdTheming(element);\n\t\n\t    var circle = element;\n\t    var spinnerWrapper =  angular.element(element.children()[0]);\n\t    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;\n\t\n\t    element.attr('md-mode', mode());\n\t\n\t    updateScale();\n\t    validateMode();\n\t    watchAttributes();\n\t\n\t    /**\n\t     * Watch the value and md-mode attributes\n\t     */\n\t    function watchAttributes() {\n\t     attr.$observe('value', function(value) {\n\t           var percentValue = clamp(value);\n\t           element.attr('aria-valuenow', percentValue);\n\t\n\t           if (mode() == MODE_DETERMINATE) {\n\t             animateIndicator(percentValue);\n\t           }\n\t         });\n\t     attr.$observe('mdMode',function(mode){\n\t       switch( mode ) {\n\t         case MODE_DETERMINATE:\n\t         case MODE_INDETERMINATE:\n\t           spinnerWrapper.removeClass('ng-hide');\n\t           spinnerWrapper.removeClass( lastMode );\n\t           spinnerWrapper.addClass( lastMode = \"md-mode-\" + mode );\n\t           break;\n\t         default:\n\t           spinnerWrapper.removeClass( lastMode );\n\t           spinnerWrapper.addClass('ng-hide');\n\t           lastMode = undefined;\n\t           break;\n\t       }\n\t     });\n\t    }\n\t\n\t    /**\n\t     * Update size/scaling of the progress indicator\n\t     * Watch the \"value\" and \"md-mode\" attributes\n\t     */\n\t    function updateScale() {\n\t      circle.css(toVendorCSS({\n\t        transform : $mdUtil.supplant('scale( {0} )',[getDiameterRatio()])\n\t      }));\n\t    }\n\t\n\t    /**\n\t     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified\n\t     */\n\t    function validateMode() {\n\t      if ( angular.isUndefined(attr.mdMode) ) {\n\t        var hasValue = angular.isDefined(attr.value);\n\t        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;\n\t        var info = \"Auto-adding the missing md-mode='{0}' to the ProgressCircular element\";\n\t\n\t        $log.debug( $mdUtil.supplant(info, [mode]) );\n\t\n\t        element.attr(\"md-mode\",mode);\n\t        attr['mdMode'] = mode;\n\t      }\n\t    }\n\t\n\t    var leftC, rightC, gap;\n\t\n\t    /**\n\t     * Manually animate the Determinate indicator based on the specified\n\t     * percentage value (0-100).\n\t     *\n\t     * Note: this animation was previously done using SCSS.\n\t     * - generated 54K of styles\n\t     * - use attribute selectors which had poor performances in IE\n\t     */\n\t    function animateIndicator(value) {\n\t      if ( !mode() ) return;\n\t\n\t      leftC  = leftC  || angular.element(element[0].querySelector('.md-left > .md-half-circle'));\n\t      rightC = rightC || angular.element(element[0].querySelector('.md-right > .md-half-circle'));\n\t      gap    = gap    || angular.element(element[0].querySelector('.md-gap'));\n\t\n\t      var gapStyles = removeEmptyValues({\n\t          borderBottomColor: (value <= 50) ? \"transparent !important\" : \"\",\n\t          transition: (value <= 50) ? \"\" : \"borderBottomColor 0.1s linear\"\n\t        }),\n\t        leftStyles = removeEmptyValues({\n\t          transition: (value <= 50) ? \"transform 0.1s linear\" : \"\",\n\t          transform: $mdUtil.supplant(\"rotate({0}deg)\", [value <= 50 ? 135 : (((value - 50) / 50 * 180) + 135)])\n\t        }),\n\t        rightStyles = removeEmptyValues({\n\t          transition: (value >= 50) ? \"transform 0.1s linear\" : \"\",\n\t          transform: $mdUtil.supplant(\"rotate({0}deg)\", [value >= 50 ? 45 : (value / 50 * 180 - 135)])\n\t        });\n\t\n\t      leftC.css(toVendorCSS(leftStyles));\n\t      rightC.css(toVendorCSS(rightStyles));\n\t      gap.css(toVendorCSS(gapStyles));\n\t\n\t    }\n\t\n\t    /**\n\t     * We will scale the progress circle based on the default diameter.\n\t     *\n\t     * Determine the diameter percentage (defaults to 100%)\n\t     * May be express as float, percentage, or integer\n\t     */\n\t    function getDiameterRatio() {\n\t      if ( !attr.mdDiameter ) return DEFAULT_SCALING;\n\t\n\t      var match = /([0-9]*)%/.exec(attr.mdDiameter);\n\t      var value = Math.max(0, (match && match[1]/100) || parseFloat(attr.mdDiameter));\n\t\n\t      // should return ratio; DEFAULT_PROGRESS_SIZE === 100px is default size\n\t      return  (value > 1) ? value / DEFAULT_PROGRESS_SIZE : value;\n\t    }\n\t\n\t    /**\n\t     * Is the md-mode a valid option?\n\t     */\n\t    function mode() {\n\t      var value = (attr.mdMode || \"\").trim();\n\t      if ( value ) {\n\t        switch(value) {\n\t          case MODE_DETERMINATE :\n\t          case MODE_INDETERMINATE :\n\t            break;\n\t          default:\n\t            value = undefined;\n\t            break;\n\t        }\n\t      }\n\t      return value;\n\t    }\n\t\n\t  }\n\t\n\t  /**\n\t   * Clamps the value to be between 0 and 100.\n\t   * @param {number} value The value to clamp.\n\t   * @returns {number}\n\t   */\n\t  function clamp(value) {\n\t    return Math.max(0, Math.min(value || 0, 100));\n\t  }\n\t\n\t  function removeEmptyValues(target) {\n\t    for (var key in target) {\n\t      if (target.hasOwnProperty(key)) {\n\t        if ( target[key] == \"\" ) delete target[key];\n\t      }\n\t    }\n\t\n\t    return target;\n\t  }\n\t}\n\tMdProgressCircularDirective.$inject = [\"$mdTheming\", \"$mdUtil\", \"$log\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.radioButton\n\t * @description radioButton module!\n\t */\n\tangular.module('material.components.radioButton', [\n\t  'material.core'\n\t])\n\t  .directive('mdRadioGroup', mdRadioGroupDirective)\n\t  .directive('mdRadioButton', mdRadioButtonDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @module material.components.radioButton\n\t * @name mdRadioGroup\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-radio-group>` directive identifies a grouping\n\t * container for the 1..n grouped radio buttons; specified using nested\n\t * `<md-radio-button>` tags.\n\t *\n\t * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n\t * the radio button is in the accent color by default. The primary color palette may be used with\n\t * the `md-primary` class.\n\t *\n\t * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently\n\t * than the native `<input type='radio'>` controls. Whereas the native controls\n\t * force the user to tab through all the radio buttons, `<md-radio-group>`\n\t * is focusable, and by default the `<md-radio-button>`s are not.\n\t *\n\t * @param {string} ng-model Assignable angular expression to data-bind to.\n\t * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-radio-group ng-model=\"selected\">\n\t *\n\t *   <md-radio-button\n\t *        ng-repeat=\"d in colorOptions\"\n\t *        ng-value=\"d.value\" aria-label=\"{{ d.label }}\">\n\t *\n\t *          {{ d.label }}\n\t *\n\t *   </md-radio-button>\n\t *\n\t * </md-radio-group>\n\t * </hljs>\n\t *\n\t */\n\tfunction mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {\n\t  RadioGroupController.prototype = createRadioGroupControllerProto();\n\t\n\t  return {\n\t    restrict: 'E',\n\t    controller: ['$element', RadioGroupController],\n\t    require: ['mdRadioGroup', '?ngModel'],\n\t    link: { pre: linkRadioGroup }\n\t  };\n\t\n\t  function linkRadioGroup(scope, element, attr, ctrls) {\n\t    $mdTheming(element);\n\t    var rgCtrl = ctrls[0];\n\t    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n\t\n\t    rgCtrl.init(ngModelCtrl);\n\t\n\t    scope.mouseActive = false;\n\t    element.attr({\n\t              'role': 'radiogroup',\n\t              'tabIndex': element.attr('tabindex') || '0'\n\t            })\n\t            .on('keydown', keydownListener)\n\t            .on('mousedown', function(event) {\n\t              scope.mouseActive = true;\n\t              $timeout(function() {\n\t                scope.mouseActive = false;\n\t              }, 100);\n\t            })\n\t            .on('focus', function() {\n\t              if(scope.mouseActive === false) { rgCtrl.$element.addClass('md-focused'); }\n\t            })\n\t            .on('blur', function() { rgCtrl.$element.removeClass('md-focused'); });\n\t\n\t    /**\n\t     *\n\t     */\n\t    function setFocus() {\n\t      if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }\n\t    }\n\t\n\t    /**\n\t     *\n\t     */\n\t    function keydownListener(ev) {\n\t      var keyCode = ev.which || ev.keyCode;\n\t      switch(keyCode) {\n\t        case $mdConstant.KEY_CODE.LEFT_ARROW:\n\t        case $mdConstant.KEY_CODE.UP_ARROW:\n\t          ev.preventDefault();\n\t          rgCtrl.selectPrevious();\n\t          setFocus();\n\t          break;\n\t\n\t        case $mdConstant.KEY_CODE.RIGHT_ARROW:\n\t        case $mdConstant.KEY_CODE.DOWN_ARROW:\n\t          ev.preventDefault();\n\t          rgCtrl.selectNext();\n\t          setFocus();\n\t          break;\n\t\n\t        case $mdConstant.KEY_CODE.ENTER:\n\t          var form = angular.element($mdUtil.getClosest(element[0], 'form'));\n\t          if (form.length > 0) {\n\t            form.triggerHandler('submit');\n\t          }\n\t          break;\n\t      }\n\t    }\n\t  }\n\t\n\t  function RadioGroupController($element) {\n\t    this._radioButtonRenderFns = [];\n\t    this.$element = $element;\n\t  }\n\t\n\t  function createRadioGroupControllerProto() {\n\t    return {\n\t      init: function(ngModelCtrl) {\n\t        this._ngModelCtrl = ngModelCtrl;\n\t        this._ngModelCtrl.$render = angular.bind(this, this.render);\n\t      },\n\t      add: function(rbRender) {\n\t        this._radioButtonRenderFns.push(rbRender);\n\t      },\n\t      remove: function(rbRender) {\n\t        var index = this._radioButtonRenderFns.indexOf(rbRender);\n\t        if (index !== -1) {\n\t          this._radioButtonRenderFns.splice(index, 1);\n\t        }\n\t      },\n\t      render: function() {\n\t        this._radioButtonRenderFns.forEach(function(rbRender) {\n\t          rbRender();\n\t        });\n\t      },\n\t      setViewValue: function(value, eventType) {\n\t        this._ngModelCtrl.$setViewValue(value, eventType);\n\t        // update the other radio buttons as well\n\t        this.render();\n\t      },\n\t      getViewValue: function() {\n\t        return this._ngModelCtrl.$viewValue;\n\t      },\n\t      selectNext: function() {\n\t        return changeSelectedButton(this.$element, 1);\n\t      },\n\t      selectPrevious: function() {\n\t        return changeSelectedButton(this.$element, -1);\n\t      },\n\t      setActiveDescendant: function (radioId) {\n\t        this.$element.attr('aria-activedescendant', radioId);\n\t      }\n\t    };\n\t  }\n\t  /**\n\t   * Change the radio group's selected button by a given increment.\n\t   * If no button is selected, select the first button.\n\t   */\n\t  function changeSelectedButton(parent, increment) {\n\t    // Coerce all child radio buttons into an array, then wrap then in an iterator\n\t    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);\n\t\n\t    if (buttons.count()) {\n\t      var validate = function (button) {\n\t        // If disabled, then NOT valid\n\t        return !angular.element(button).attr(\"disabled\");\n\t      };\n\t\n\t      var selected = parent[0].querySelector('md-radio-button.md-checked');\n\t      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();\n\t\n\t      // Activate radioButton's click listener (triggerHandler won't create a real click event)\n\t      angular.element(target).triggerHandler('click');\n\t\n\t\n\t    }\n\t  }\n\t\n\t}\n\tmdRadioGroupDirective.$inject = [\"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$timeout\"];\n\t\n\t/**\n\t * @ngdoc directive\n\t * @module material.components.radioButton\n\t * @name mdRadioButton\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.\n\t *\n\t * While similar to the `<input type=\"radio\" ng-model=\"\" value=\"\">` directive,\n\t * the `<md-radio-button>` directive provides ink effects, ARIA support, and\n\t * supports use within named radio groups.\n\t *\n\t * @param {string} ngModel Assignable angular expression to data-bind to.\n\t * @param {string=} ngChange Angular expression to be executed when input changes due to user\n\t *    interaction with the input element.\n\t * @param {string} ngValue Angular expression which sets the value to which the expression should\n\t *    be set when selected.\n\t * @param {string} value The value to which the expression should be set when selected.\n\t * @param {string=} name Property name of the form under which the control is published.\n\t * @param {string=} aria-label Adds label to radio button for accessibility.\n\t * Defaults to radio button's text. If no text content is available, a warning will be logged.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *\n\t * <md-radio-button value=\"1\" aria-label=\"Label 1\">\n\t *   Label 1\n\t * </md-radio-button>\n\t *\n\t * <md-radio-button ng-model=\"color\" ng-value=\"specialValue\" aria-label=\"Green\">\n\t *   Green\n\t * </md-radio-button>\n\t *\n\t * </hljs>\n\t *\n\t */\n\tfunction mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {\n\t\n\t  var CHECKED_CSS = 'md-checked';\n\t\n\t  return {\n\t    restrict: 'E',\n\t    require: '^mdRadioGroup',\n\t    transclude: true,\n\t    template: '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n\t                '<div class=\"md-off\"></div>' +\n\t                '<div class=\"md-on\"></div>' +\n\t              '</div>' +\n\t              '<div ng-transclude class=\"md-label\"></div>',\n\t    link: link\n\t  };\n\t\n\t  function link(scope, element, attr, rgCtrl) {\n\t    var lastChecked;\n\t\n\t    $mdTheming(element);\n\t    configureAria(element, scope);\n\t\n\t    initialize();\n\t\n\t    /**\n\t     *\n\t     */\n\t    function initialize(controller) {\n\t      if ( !rgCtrl ) {\n\t        throw 'RadioGroupController not found.';\n\t      }\n\t\n\t      rgCtrl.add(render);\n\t      attr.$observe('value', render);\n\t\n\t      element\n\t        .on('click', listener)\n\t        .on('$destroy', function() {\n\t          rgCtrl.remove(render);\n\t        });\n\t    }\n\t\n\t    /**\n\t     *\n\t     */\n\t    function listener(ev) {\n\t      if (element[0].hasAttribute('disabled')) return;\n\t\n\t      scope.$apply(function() {\n\t        rgCtrl.setViewValue(attr.value, ev && ev.type);\n\t      });\n\t    }\n\t\n\t    /**\n\t     *  Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).\n\t     *  Update the `aria-activedescendant` attribute.\n\t     */\n\t    function render() {\n\t      var checked = (rgCtrl.getViewValue() == attr.value);\n\t      if (checked === lastChecked) {\n\t        return;\n\t      }\n\t\n\t      lastChecked = checked;\n\t      element.attr('aria-checked', checked);\n\t\n\t      if (checked) {\n\t        markParentAsChecked(true);\n\t        element.addClass(CHECKED_CSS);\n\t\n\t        rgCtrl.setActiveDescendant(element.attr('id'));\n\t\n\t      } else {\n\t        markParentAsChecked(false);\n\t        element.removeClass(CHECKED_CSS);\n\t      }\n\t\n\t      /**\n\t       * If the radioButton is inside a div, then add class so highlighting will work...\n\t       */\n\t      function markParentAsChecked(addClass ) {\n\t        if ( element.parent()[0].nodeName != \"MD-RADIO-GROUP\") {\n\t          element.parent()[ !!addClass ? 'addClass' : 'removeClass'](CHECKED_CSS);\n\t        }\n\t\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Inject ARIA-specific attributes appropriate for each radio button\n\t     */\n\t    function configureAria( element, scope ){\n\t      scope.ariaId = buildAriaID();\n\t\n\t      element.attr({\n\t        'id' :  scope.ariaId,\n\t        'role' : 'radio',\n\t        'aria-checked' : 'false'\n\t      });\n\t\n\t      $mdAria.expectWithText(element, 'aria-label');\n\t\n\t      /**\n\t       * Build a unique ID for each radio button that will be used with aria-activedescendant.\n\t       * Preserve existing ID if already specified.\n\t       * @returns {*|string}\n\t       */\n\t      function buildAriaID() {\n\t        return attr.id || ( 'radio' + \"_\" + $mdUtil.nextUid() );\n\t      }\n\t    }\n\t  }\n\t}\n\tmdRadioButtonDirective.$inject = [\"$mdAria\", \"$mdUtil\", \"$mdTheming\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.progressLinear\n\t * @description Linear Progress module!\n\t */\n\tangular.module('material.components.progressLinear', [\n\t  'material.core'\n\t])\n\t  .directive('mdProgressLinear', MdProgressLinearDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdProgressLinear\n\t * @module material.components.progressLinear\n\t * @restrict E\n\t *\n\t * @description\n\t * The linear progress directive is used to make loading content\n\t * in your app as delightful and painless as possible by minimizing\n\t * the amount of visual change a user sees before they can view\n\t * and interact with content.\n\t *\n\t * Each operation should only be represented by one activity indicator\n\t * For example: one refresh operation should not display both a\n\t * refresh bar and an activity circle.\n\t *\n\t * For operations where the percentage of the operation completed\n\t * can be determined, use a determinate indicator. They give users\n\t * a quick sense of how long an operation will take.\n\t *\n\t * For operations where the user is asked to wait a moment while\n\t * something finishes up, and it’s not necessary to expose what's\n\t * happening behind the scenes and how long it will take, use an\n\t * indeterminate indicator.\n\t *\n\t * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.\n\t *\n\t * Note: if the `md-mode` value is set as undefined or specified as 1 of the four (4) valid modes, then `.ng-hide`\n\t * will be auto-applied as a style to the component.\n\t *\n\t * Note: if not configured, the `md-mode=\"indeterminate\"` will be auto injected as an attribute. If `value=\"\"` is also specified, however,\n\t * then `md-mode=\"determinate\"` would be auto-injected instead.\n\t * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0\n\t * @param {number=} md-buffer-value In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-progress-linear md-mode=\"determinate\" value=\"...\"></md-progress-linear>\n\t *\n\t * <md-progress-linear md-mode=\"determinate\" ng-value=\"...\"></md-progress-linear>\n\t *\n\t * <md-progress-linear md-mode=\"indeterminate\"></md-progress-linear>\n\t *\n\t * <md-progress-linear md-mode=\"buffer\" value=\"...\" md-buffer-value=\"...\"></md-progress-linear>\n\t *\n\t * <md-progress-linear md-mode=\"query\"></md-progress-linear>\n\t * </hljs>\n\t */\n\tfunction MdProgressLinearDirective($mdTheming, $mdUtil, $log) {\n\t  var MODE_DETERMINATE = \"determinate\",\n\t      MODE_INDETERMINATE = \"indeterminate\",\n\t      MODE_BUFFER = \"buffer\",\n\t      MODE_QUERY = \"query\";\n\t\n\t  return {\n\t    restrict: 'E',\n\t    template: '<div class=\"md-container\">' +\n\t      '<div class=\"md-dashed\"></div>' +\n\t      '<div class=\"md-bar md-bar1\"></div>' +\n\t      '<div class=\"md-bar md-bar2\"></div>' +\n\t      '</div>',\n\t    compile: compile\n\t  };\n\t  \n\t  function compile(tElement, tAttrs, transclude) {\n\t    tElement.attr('aria-valuemin', 0);\n\t    tElement.attr('aria-valuemax', 100);\n\t    tElement.attr('role', 'progressbar');\n\t\n\t    return postLink;\n\t  }\n\t  function postLink(scope, element, attr) {\n\t    $mdTheming(element);\n\t\n\t    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;\n\t    var bar1 = angular.element(element[0].querySelector('.md-bar1')),\n\t        bar2 = angular.element(element[0].querySelector('.md-bar2')),\n\t        container = angular.element(element[0].querySelector('.md-container'));\n\t\n\t    element.attr('md-mode', mode());\n\t\n\t    validateMode();\n\t    watchAttributes();\n\t\n\t    /**\n\t     * Watch the value, md-buffer-value, and md-mode attributes\n\t     */\n\t    function watchAttributes() {\n\t      attr.$observe('value', function(value) {\n\t        var percentValue = clamp(value);\n\t        element.attr('aria-valuenow', percentValue);\n\t\n\t        if (mode() != MODE_QUERY) animateIndicator(bar2, percentValue);\n\t      });\n\t\n\t      attr.$observe('mdBufferValue', function(value) {\n\t        animateIndicator(bar1, clamp(value));\n\t      });\n\t\n\t      attr.$observe('mdMode',function(mode){\n\t        switch( mode ) {\n\t          case MODE_QUERY:\n\t          case MODE_BUFFER:\n\t          case MODE_DETERMINATE:\n\t          case MODE_INDETERMINATE:\n\t            container.removeClass( 'ng-hide' + ' ' + lastMode );\n\t            container.addClass( lastMode = \"md-mode-\" + mode );\n\t            break;\n\t          default:\n\t            container.removeClass( lastMode );\n\t            container.addClass('ng-hide');\n\t            lastMode = undefined;\n\t            break;\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified\n\t     */\n\t    function validateMode() {\n\t      if ( angular.isUndefined(attr.mdMode) ) {\n\t        var hasValue = angular.isDefined(attr.value);\n\t        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;\n\t        var info = \"Auto-adding the missing md-mode='{0}' to the ProgressLinear element\";\n\t\n\t        $log.debug( $mdUtil.supplant(info, [mode]) );\n\t\n\t        element.attr(\"md-mode\",mode);\n\t        attr['mdMode'] = mode;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Is the md-mode a valid option?\n\t     */\n\t    function mode() {\n\t      var value = (attr.mdMode || \"\").trim();\n\t      if ( value ) {\n\t        switch(value) {\n\t          case MODE_DETERMINATE:\n\t          case MODE_INDETERMINATE:\n\t          case MODE_BUFFER:\n\t          case MODE_QUERY:\n\t            break;\n\t          default:\n\t            value = undefined;\n\t            break;\n\t        }\n\t      }\n\t      return value;\n\t    }\n\t\n\t    /**\n\t     * Manually set CSS to animate the Determinate indicator based on the specified\n\t     * percentage value (0-100).\n\t     */\n\t    function animateIndicator(target, value) {\n\t      if ( !mode() ) return;\n\t\n\t      var to = $mdUtil.supplant(\"translateX({0}%) scale({1},1)\", [ (value-100)/2, value/100 ]);\n\t      var styles = toVendorCSS({ transform : to });\n\t      angular.element(target).css( styles );\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Clamps the value to be between 0 and 100.\n\t   * @param {number} value The value to clamp.\n\t   * @returns {number}\n\t   */\n\t  function clamp(value) {\n\t    return Math.max(0, Math.min(value || 0, 100));\n\t  }\n\t}\n\tMdProgressLinearDirective.$inject = [\"$mdTheming\", \"$mdUtil\", \"$log\"];\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.select\n\t */\n\t\n\t/***************************************************\n\t\n\t ### TODO ###\n\t **DOCUMENTATION AND DEMOS**\n\t\n\t - [ ] ng-model with child mdOptions (basic)\n\t - [ ] ng-model=\"foo\" ng-model-options=\"{ trackBy: '$value.id' }\" for objects\n\t - [ ] mdOption with value\n\t - [ ] Usage with input inside\n\t\n\t ### TODO - POST RC1 ###\n\t - [ ] Abstract placement logic in $mdSelect service to $mdMenu service\n\t\n\t ***************************************************/\n\t\n\tvar SELECT_EDGE_MARGIN = 8;\n\tvar selectNextId = 0;\n\t\n\tangular.module('material.components.select', [\n\t    'material.core',\n\t    'material.components.backdrop'\n\t  ])\n\t  .directive('mdSelect', SelectDirective)\n\t  .directive('mdSelectMenu', SelectMenuDirective)\n\t  .directive('mdOption', OptionDirective)\n\t  .directive('mdOptgroup', OptgroupDirective)\n\t  .provider('$mdSelect', SelectProvider);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdSelect\n\t * @restrict E\n\t * @module material.components.select\n\t *\n\t * @description Displays a select box, bound to an ng-model.\n\t *\n\t * @param {expression} ng-model The model!\n\t * @param {boolean=} multiple Whether it's multiple.\n\t * @param {expression=} md-on-close Expression to be evaluated when the select is closed.\n\t * @param {string=} placeholder Placeholder hint text.\n\t * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or\n\t * explicit label is present.\n\t * @param {string=} md-container-class Class list to get applied to the `.md-select-menu-container`\n\t * element (for custom styling).\n\t *\n\t * @usage\n\t * With a placeholder (label and aria-label are added dynamically)\n\t * <hljs lang=\"html\">\n\t *   <md-input-container>\n\t *     <md-select\n\t *       ng-model=\"someModel\"\n\t *       placeholder=\"Select a state\">\n\t *       <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods2\">{{ opt }}</md-option>\n\t *     </md-select>\n\t *   </md-input-container>\n\t * </hljs>\n\t *\n\t * With an explicit label\n\t * <hljs lang=\"html\">\n\t *   <md-input-container>\n\t *     <label>State</label>\n\t *     <md-select\n\t *       ng-model=\"someModel\">\n\t *       <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods2\">{{ opt }}</md-option>\n\t *     </md-select>\n\t *   </md-input-container>\n\t * </hljs>\n\t */\n\tfunction SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {\n\t  return {\n\t    restrict: 'E',\n\t    require: ['^?mdInputContainer', 'mdSelect', 'ngModel', '?^form'],\n\t    compile: compile,\n\t    controller: function() {\n\t    } // empty placeholder controller to be initialized in link\n\t  };\n\t\n\t  function compile(element, attr) {\n\t    // add the select value that will hold our placeholder or selected option value\n\t    var valueEl = angular.element('<md-select-value><span></span></md-select-value>');\n\t    valueEl.append('<span class=\"md-select-icon\" aria-hidden=\"true\"></span>');\n\t    valueEl.addClass('md-select-value');\n\t    if (!valueEl[0].hasAttribute('id')) {\n\t      valueEl.attr('id', 'select_value_label_' + $mdUtil.nextUid());\n\t    }\n\t\n\t    // There's got to be an md-content inside. If there's not one, let's add it.\n\t    if (!element.find('md-content').length) {\n\t      element.append(angular.element('<md-content>').append(element.contents()));\n\t    }\n\t\n\t    // Add progress spinner for md-options-loading\n\t    if (attr.mdOnOpen) {\n\t\n\t      // Show progress indicator while loading async\n\t      // Use ng-hide for `display:none` so the indicator does not interfere with the options list\n\t      element\n\t        .find('md-content')\n\t        .prepend(angular.element(\n\t          '<div>' +\n\t          ' <md-progress-circular md-mode=\"{{progressMode}}\" ng-hide=\"$$loadingAsyncDone\"></md-progress-circular>' +\n\t          '</div>'\n\t        ));\n\t\n\t      // Hide list [of item options] while loading async\n\t      element\n\t        .find('md-option')\n\t        .attr('ng-show', '$$loadingAsyncDone');\n\t    }\n\t\n\t    if (attr.name) {\n\t      var autofillClone = angular.element('<select class=\"md-visually-hidden\">');\n\t      autofillClone.attr({\n\t        'name': '.' + attr.name,\n\t        'ng-model': attr.ngModel,\n\t        'aria-hidden': 'true',\n\t        'tabindex': '-1'\n\t      });\n\t      var opts = element.find('md-option');\n\t      angular.forEach(opts, function(el) {\n\t        var newEl = angular.element('<option>' + el.innerHTML + '</option>');\n\t        if (el.hasAttribute('ng-value')) newEl.attr('ng-value', el.getAttribute('ng-value'));\n\t        else if (el.hasAttribute('value')) newEl.attr('value', el.getAttribute('value'));\n\t        autofillClone.append(newEl);\n\t      });\n\t\n\t      element.parent().append(autofillClone);\n\t    }\n\t\n\t    // Use everything that's left inside element.contents() as the contents of the menu\n\t    var multiple = angular.isDefined(attr.multiple) ? 'multiple' : '';\n\t    var selectTemplate = '' +\n\t      '<div class=\"md-select-menu-container\">' +\n\t      '<md-select-menu {0}>{1}</md-select-menu>' +\n\t      '</div>';\n\t\n\t    selectTemplate = $mdUtil.supplant(selectTemplate, [multiple, element.html()]);\n\t    element.empty().append(valueEl);\n\t\n\t    attr.tabindex = attr.tabindex || '0';\n\t\n\t    return function postLink(scope, element, attr, ctrls) {\n\t      var isDisabled;\n\t\n\t      var containerCtrl = ctrls[0];\n\t      var mdSelectCtrl = ctrls[1];\n\t      var ngModelCtrl = ctrls[2];\n\t      var formCtrl = ctrls[3];\n\t      // grab a reference to the select menu value label\n\t      var valueEl = element.find('md-select-value');\n\t      var isReadonly = angular.isDefined(attr.readonly);\n\t\n\t      if (containerCtrl) {\n\t        var isErrorGetter = containerCtrl.isErrorGetter || function() {\n\t            return ngModelCtrl.$invalid && ngModelCtrl.$touched;\n\t          };\n\t\n\t        if (containerCtrl.input) {\n\t          throw new Error(\"<md-input-container> can only have *one* child <input>, <textarea> or <select> element!\");\n\t        }\n\t\n\t        containerCtrl.input = element;\n\t        if (!containerCtrl.label) {\n\t          $mdAria.expect(element, 'aria-label', element.attr('placeholder'));\n\t        }\n\t\n\t        scope.$watch(isErrorGetter, containerCtrl.setInvalid);\n\t      }\n\t\n\t      var selectContainer, selectScope, selectMenuCtrl;\n\t\n\t      createSelect();\n\t      $mdTheming(element);\n\t\n\t      if (attr.name && formCtrl) {\n\t        var selectEl = element.parent()[0].querySelector('select[name=\".' + attr.name + '\"]');\n\t        var controller = angular.element(selectEl).controller();\n\t        if (controller) {\n\t          formCtrl.$removeControl(controller);\n\t        }\n\t      }\n\t\n\t      if (formCtrl) {\n\t        $mdUtil.nextTick(function() {\n\t          formCtrl.$setPristine();\n\t        });\n\t      }\n\t\n\t      var originalRender = ngModelCtrl.$render;\n\t      ngModelCtrl.$render = function() {\n\t        originalRender();\n\t        syncLabelText();\n\t        inputCheckValue();\n\t      };\n\t\n\t      attr.$observe('placeholder', ngModelCtrl.$render);\n\t\n\t      mdSelectCtrl.setLabelText = function(text) {\n\t        mdSelectCtrl.setIsPlaceholder(!text);\n\t        // Use placeholder attribute, otherwise fallback to the md-input-container label\n\t        var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : '');\n\t        text = text || tmpPlaceholder || '';\n\t        var target = valueEl.children().eq(0);\n\t        target.text(text);\n\t      };\n\t\n\t      mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {\n\t        if (isPlaceholder) {\n\t          valueEl.addClass('md-select-placeholder');\n\t          if (containerCtrl && containerCtrl.label) {\n\t            containerCtrl.label.addClass('md-placeholder md-static');\n\t          }\n\t        } else {\n\t          valueEl.removeClass('md-select-placeholder');\n\t          if (containerCtrl && containerCtrl.label) {\n\t            containerCtrl.label.removeClass('md-placeholder');\n\t          }\n\t        }\n\t      };\n\t\n\t      if (!isReadonly) {\n\t        element\n\t          .on('focus', function(ev) {\n\t            // only set focus on if we don't currently have a selected value. This avoids the \"bounce\"\n\t            // on the label transition because the focus will immediately switch to the open menu.\n\t            if (containerCtrl && containerCtrl.element.hasClass('md-input-has-value')) {\n\t              containerCtrl.setFocused(true);\n\t            }\n\t          })\n\t          .on('blur', function(ev) {\n\t            containerCtrl && containerCtrl.setFocused(false);\n\t            inputCheckValue();\n\t          });\n\t      }\n\t\n\t      mdSelectCtrl.triggerClose = function() {\n\t        $parse(attr.mdOnClose)(scope);\n\t      };\n\t\n\t      scope.$$postDigest(function() {\n\t        setAriaLabel();\n\t        syncLabelText();\n\t      });\n\t\n\t      function setAriaLabel() {\n\t        var labelText = element.attr('placeholder');\n\t        if (!labelText && containerCtrl && containerCtrl.label) {\n\t          labelText = containerCtrl.label.text();\n\t        }\n\t        $mdAria.expect(element, 'aria-label', labelText);\n\t      }\n\t\n\t      function syncLabelText() {\n\t        if (selectContainer) {\n\t          selectMenuCtrl = selectMenuCtrl || selectContainer.find('md-select-menu').controller('mdSelectMenu');\n\t          mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());\n\t        }\n\t      }\n\t\n\t      var deregisterWatcher;\n\t      attr.$observe('ngMultiple', function(val) {\n\t        if (deregisterWatcher) deregisterWatcher();\n\t        var parser = $parse(val);\n\t        deregisterWatcher = scope.$watch(function() {\n\t          return parser(scope);\n\t        }, function(multiple, prevVal) {\n\t          if (multiple === undefined && prevVal === undefined) return; // assume compiler did a good job\n\t          if (multiple) {\n\t            element.attr('multiple', 'multiple');\n\t          } else {\n\t            element.removeAttr('multiple');\n\t          }\n\t          if (selectContainer) {\n\t            selectMenuCtrl.setMultiple(multiple);\n\t            originalRender = ngModelCtrl.$render;\n\t            ngModelCtrl.$render = function() {\n\t              originalRender();\n\t              syncLabelText();\n\t            };\n\t            selectMenuCtrl.refreshViewValue();\n\t            ngModelCtrl.$render();\n\t          }\n\t        });\n\t      });\n\t\n\t      attr.$observe('disabled', function(disabled) {\n\t        if (angular.isString(disabled)) {\n\t          disabled = true;\n\t        }\n\t        // Prevent click event being registered twice\n\t        if (isDisabled !== undefined && isDisabled === disabled) {\n\t          return;\n\t        }\n\t        isDisabled = disabled;\n\t        if (disabled) {\n\t          element.attr({'tabindex': -1, 'aria-disabled': 'true'});\n\t          element.off('click', openSelect);\n\t          element.off('keydown', handleKeypress);\n\t        } else {\n\t          element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});\n\t          element.on('click', openSelect);\n\t          element.on('keydown', handleKeypress);\n\t        }\n\t      });\n\t\n\t      if (!attr.disabled && !attr.ngDisabled) {\n\t        element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});\n\t        element.on('click', openSelect);\n\t        element.on('keydown', handleKeypress);\n\t      }\n\t\n\t      var ariaAttrs = {\n\t        role: 'combobox',\n\t        'aria-expanded': 'false'\n\t      };\n\t      if (!element[0].hasAttribute('id')) {\n\t        ariaAttrs.id = 'select_' + $mdUtil.nextUid();\n\t      }\n\t      element.attr(ariaAttrs);\n\t\n\t      scope.$on('$destroy', function() {\n\t        $mdSelect\n\t          .destroy()\n\t          .finally(function() {\n\t            if ( selectContainer ) {\n\t              selectContainer.remove();\n\t            }\n\t\n\t            if (containerCtrl) {\n\t              containerCtrl.setFocused(false);\n\t              containerCtrl.setHasValue(false);\n\t              containerCtrl.input = null;\n\t            }\n\t          });\n\t      });\n\t\n\t\n\t\n\t      function inputCheckValue() {\n\t        // The select counts as having a value if one or more options are selected,\n\t        // or if the input's validity state says it has bad input (eg string in a number input)\n\t        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);\n\t      }\n\t\n\t      // Create a fake select to find out the label value\n\t      function createSelect() {\n\t        selectContainer = angular.element(selectTemplate);\n\t        var selectEl = selectContainer.find('md-select-menu');\n\t        selectEl.data('$ngModelController', ngModelCtrl);\n\t        selectEl.data('$mdSelectController', mdSelectCtrl);\n\t        selectScope = scope.$new();\n\t        $mdTheming.inherit(selectContainer, element);\n\t        if (element.attr('md-container-class')) {\n\t          var value = selectContainer[0].getAttribute('class') + ' ' + element.attr('md-container-class');\n\t          selectContainer[0].setAttribute('class', value);\n\t        }\n\t        selectContainer = $compile(selectContainer)(selectScope);\n\t        selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');\n\t      }\n\t\n\t      function handleKeypress(e) {\n\t        var allowedCodes = [32, 13, 38, 40];\n\t        if (allowedCodes.indexOf(e.keyCode) != -1) {\n\t          // prevent page scrolling on interaction\n\t          e.preventDefault();\n\t          openSelect(e);\n\t        } else {\n\t          if (e.keyCode <= 90 && e.keyCode >= 31) {\n\t            e.preventDefault();\n\t            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);\n\t            if (!node) return;\n\t            var optionCtrl = angular.element(node).controller('mdOption');\n\t            if (!selectMenuCtrl.isMultiple) {\n\t              selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);\n\t            }\n\t            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);\n\t            selectMenuCtrl.refreshViewValue();\n\t            ngModelCtrl.$render();\n\t          }\n\t        }\n\t      }\n\t\n\t      function openSelect() {\n\t        selectScope.isOpen = true;\n\t\n\t        $mdSelect.show({\n\t          scope: selectScope,\n\t          preserveScope: true,\n\t          skipCompile: true,\n\t          element: selectContainer,\n\t          target: element[0],\n\t          hasBackdrop: true,\n\t          loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) || true : false\n\t        }).then(function() {\n\t          selectScope.isOpen = false;\n\t        });\n\t      }\n\t    };\n\t  }\n\t}\n\tSelectDirective.$inject = [\"$mdSelect\", \"$mdUtil\", \"$mdTheming\", \"$mdAria\", \"$compile\", \"$parse\"];\n\t\n\tfunction SelectMenuDirective($parse, $mdUtil, $mdTheming) {\n\t\n\t  SelectMenuController.$inject = [\"$scope\", \"$attrs\", \"$element\"];\n\t  return {\n\t    restrict: 'E',\n\t    require: ['mdSelectMenu', '?ngModel'],\n\t    controller: SelectMenuController,\n\t    link: {pre: preLink}\n\t  };\n\t\n\t  // We use preLink instead of postLink to ensure that the select is initialized before\n\t  // its child options run postLink.\n\t  function preLink(scope, element, attr, ctrls) {\n\t    var selectCtrl = ctrls[0];\n\t    var ngModel = ctrls[1];\n\t\n\t    $mdTheming(element);\n\t    element.on('click', clickListener);\n\t    element.on('keypress', keyListener);\n\t    if (ngModel) selectCtrl.init(ngModel);\n\t    configureAria();\n\t\n\t    function configureAria() {\n\t      element.attr({\n\t        'id': 'select_menu_' + $mdUtil.nextUid(),\n\t        'role': 'listbox',\n\t        'aria-multiselectable': (selectCtrl.isMultiple ? 'true' : 'false')\n\t      });\n\t    }\n\t\n\t    function keyListener(e) {\n\t      if (e.keyCode == 13 || e.keyCode == 32) {\n\t        clickListener(e);\n\t      }\n\t    }\n\t\n\t    function clickListener(ev) {\n\t      var option = $mdUtil.getClosest(ev.target, 'md-option');\n\t      var optionCtrl = option && angular.element(option).data('$mdOptionController');\n\t      if (!option || !optionCtrl) return;\n\t      if (option.hasAttribute('disabled')) {\n\t        ev.stopImmediatePropagation();\n\t        return false;\n\t      }\n\t\n\t      var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);\n\t      var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);\n\t\n\t      scope.$apply(function() {\n\t        if (selectCtrl.isMultiple) {\n\t          if (isSelected) {\n\t            selectCtrl.deselect(optionHashKey);\n\t          } else {\n\t            selectCtrl.select(optionHashKey, optionCtrl.value);\n\t          }\n\t        } else {\n\t          if (!isSelected) {\n\t            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);\n\t            selectCtrl.select(optionHashKey, optionCtrl.value);\n\t          }\n\t        }\n\t        selectCtrl.refreshViewValue();\n\t      });\n\t    }\n\t  }\n\t\n\t  function SelectMenuController($scope, $attrs, $element) {\n\t    var self = this;\n\t    self.isMultiple = angular.isDefined($attrs.multiple);\n\t    // selected is an object with keys matching all of the selected options' hashed values\n\t    self.selected = {};\n\t    // options is an object with keys matching every option's hash value,\n\t    // and values matching every option's controller.\n\t    self.options = {};\n\t\n\t    $scope.$watch(function() {\n\t      return self.options;\n\t    }, function() {\n\t      self.ngModel.$render();\n\t    }, true);\n\t\n\t    var deregisterCollectionWatch;\n\t    self.setMultiple = function(isMultiple) {\n\t      var ngModel = self.ngModel;\n\t      self.isMultiple = isMultiple;\n\t      if (deregisterCollectionWatch) deregisterCollectionWatch();\n\t\n\t      if (self.isMultiple) {\n\t        ngModel.$validators['md-multiple'] = validateArray;\n\t        ngModel.$render = renderMultiple;\n\t\n\t        // watchCollection on the model because by default ngModel only watches the model's\n\t        // reference. This allowed the developer to also push and pop from their array.\n\t        $scope.$watchCollection($attrs.ngModel, function(value) {\n\t          if (validateArray(value)) renderMultiple(value);\n\t          self.ngModel.$setPristine();\n\t        });\n\t      } else {\n\t        delete ngModel.$validators['md-multiple'];\n\t        ngModel.$render = renderSingular;\n\t      }\n\t\n\t      function validateArray(modelValue, viewValue) {\n\t        // If a value is truthy but not an array, reject it.\n\t        // If value is undefined/falsy, accept that it's an empty array.\n\t        return angular.isArray(modelValue || viewValue || []);\n\t      }\n\t    };\n\t\n\t    var searchStr = '';\n\t    var clearSearchTimeout, optNodes, optText;\n\t    var CLEAR_SEARCH_AFTER = 300;\n\t    self.optNodeForKeyboardSearch = function(e) {\n\t      clearSearchTimeout && clearTimeout(clearSearchTimeout);\n\t      clearSearchTimeout = setTimeout(function() {\n\t        clearSearchTimeout = undefined;\n\t        searchStr = '';\n\t        optText = undefined;\n\t        optNodes = undefined;\n\t      }, CLEAR_SEARCH_AFTER);\n\t      searchStr += String.fromCharCode(e.keyCode);\n\t      var search = new RegExp('^' + searchStr, 'i');\n\t      if (!optNodes) {\n\t        optNodes = $element.find('md-option');\n\t        optText = new Array(optNodes.length);\n\t        angular.forEach(optNodes, function(el, i) {\n\t          optText[i] = el.textContent.trim();\n\t        });\n\t      }\n\t      for (var i = 0; i < optText.length; ++i) {\n\t        if (search.test(optText[i])) {\n\t          return optNodes[i];\n\t        }\n\t      }\n\t    };\n\t\n\t    self.init = function(ngModel) {\n\t      self.ngModel = ngModel;\n\t\n\t      // Allow users to provide `ng-model=\"foo\" ng-model-options=\"{trackBy: 'foo.id'}\"` so\n\t      // that we can properly compare objects set on the model to the available options\n\t      if (ngModel.$options && ngModel.$options.trackBy) {\n\t        var trackByLocals = {};\n\t        var trackByParsed = $parse(ngModel.$options.trackBy);\n\t        self.hashGetter = function(value, valueScope) {\n\t          trackByLocals.$value = value;\n\t          return trackByParsed(valueScope || $scope, trackByLocals);\n\t        };\n\t        // If the user doesn't provide a trackBy, we automatically generate an id for every\n\t        // value passed in\n\t      } else {\n\t        self.hashGetter = function getHashValue(value) {\n\t          if (angular.isObject(value)) {\n\t            return 'object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));\n\t          }\n\t          return value;\n\t        };\n\t      }\n\t      self.setMultiple(self.isMultiple);\n\t    };\n\t\n\t    self.selectedLabels = function() {\n\t      var selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll('md-option[selected]'));\n\t      if (selectedOptionEls.length) {\n\t        return selectedOptionEls.map(function(el) {\n\t          return el.textContent;\n\t        }).join(', ');\n\t      } else {\n\t        return '';\n\t      }\n\t    };\n\t\n\t    self.select = function(hashKey, hashedValue) {\n\t      var option = self.options[hashKey];\n\t      option && option.setSelected(true);\n\t      self.selected[hashKey] = hashedValue;\n\t    };\n\t    self.deselect = function(hashKey) {\n\t      var option = self.options[hashKey];\n\t      option && option.setSelected(false);\n\t      delete self.selected[hashKey];\n\t    };\n\t\n\t    self.addOption = function(hashKey, optionCtrl) {\n\t      if (angular.isDefined(self.options[hashKey])) {\n\t        throw new Error('Duplicate md-option values are not allowed in a select. ' +\n\t          'Duplicate value \"' + optionCtrl.value + '\" found.');\n\t      }\n\t      self.options[hashKey] = optionCtrl;\n\t\n\t      // If this option's value was already in our ngModel, go ahead and select it.\n\t      if (angular.isDefined(self.selected[hashKey])) {\n\t        self.select(hashKey, optionCtrl.value);\n\t        self.refreshViewValue();\n\t      }\n\t    };\n\t    self.removeOption = function(hashKey) {\n\t      delete self.options[hashKey];\n\t      // Don't deselect an option when it's removed - the user's ngModel should be allowed\n\t      // to have values that do not match a currently available option.\n\t    };\n\t\n\t    self.refreshViewValue = function() {\n\t      var values = [];\n\t      var option;\n\t      for (var hashKey in self.selected) {\n\t        // If this hashKey has an associated option, push that option's value to the model.\n\t        if ((option = self.options[hashKey])) {\n\t          values.push(option.value);\n\t        } else {\n\t          // Otherwise, the given hashKey has no associated option, and we got it\n\t          // from an ngModel value at an earlier time. Push the unhashed value of\n\t          // this hashKey to the model.\n\t          // This allows the developer to put a value in the model that doesn't yet have\n\t          // an associated option.\n\t          values.push(self.selected[hashKey]);\n\t        }\n\t      }\n\t      self.ngModel.$setViewValue(self.isMultiple ? values : values[0]);\n\t    };\n\t\n\t    function renderMultiple() {\n\t      var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];\n\t      if (!angular.isArray(newSelectedValues)) return;\n\t\n\t      var oldSelected = Object.keys(self.selected);\n\t\n\t      var newSelectedHashes = newSelectedValues.map(self.hashGetter);\n\t      var deselected = oldSelected.filter(function(hash) {\n\t        return newSelectedHashes.indexOf(hash) === -1;\n\t      });\n\t\n\t      deselected.forEach(self.deselect);\n\t      newSelectedHashes.forEach(function(hashKey, i) {\n\t        self.select(hashKey, newSelectedValues[i]);\n\t      });\n\t    }\n\t\n\t    function renderSingular() {\n\t      var value = self.ngModel.$viewValue || self.ngModel.$modelValue;\n\t      Object.keys(self.selected).forEach(self.deselect);\n\t      self.select(self.hashGetter(value), value);\n\t    }\n\t  }\n\t\n\t}\n\tSelectMenuDirective.$inject = [\"$parse\", \"$mdUtil\", \"$mdTheming\"];\n\t\n\tfunction OptionDirective($mdButtonInkRipple, $mdUtil) {\n\t\n\t  OptionController.$inject = [\"$element\"];\n\t  return {\n\t    restrict: 'E',\n\t    require: ['mdOption', '^^mdSelectMenu'],\n\t    controller: OptionController,\n\t    compile: compile\n\t  };\n\t\n\t  function compile(element, attr) {\n\t    // Manual transclusion to avoid the extra inner <span> that ng-transclude generates\n\t    element.append(angular.element('<div class=\"md-text\">').append(element.contents()));\n\t\n\t    element.attr('tabindex', attr.tabindex || '0');\n\t    return postLink;\n\t  }\n\t\n\t  function postLink(scope, element, attr, ctrls) {\n\t    var optionCtrl = ctrls[0];\n\t    var selectCtrl = ctrls[1];\n\t\n\t    if (angular.isDefined(attr.ngValue)) {\n\t      scope.$watch(attr.ngValue, setOptionValue);\n\t    } else if (angular.isDefined(attr.value)) {\n\t      setOptionValue(attr.value);\n\t    } else {\n\t      scope.$watch(function() {\n\t        return element.text();\n\t      }, setOptionValue);\n\t    }\n\t\n\t    attr.$observe('disabled', function(disabled) {\n\t      if (disabled) {\n\t        element.attr('tabindex', '-1');\n\t      } else {\n\t        element.attr('tabindex', '0');\n\t      }\n\t    });\n\t\n\t    scope.$$postDigest(function() {\n\t      attr.$observe('selected', function(selected) {\n\t        if (!angular.isDefined(selected)) return;\n\t        if (typeof selected == 'string') selected = true;\n\t        if (selected) {\n\t          if (!selectCtrl.isMultiple) {\n\t            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);\n\t          }\n\t          selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);\n\t        } else {\n\t          selectCtrl.deselect(optionCtrl.hashKey);\n\t        }\n\t        selectCtrl.refreshViewValue();\n\t        selectCtrl.ngModel.$render();\n\t      });\n\t    });\n\t\n\t    $mdButtonInkRipple.attach(scope, element);\n\t    configureAria();\n\t\n\t    function setOptionValue(newValue, oldValue) {\n\t      var oldHashKey = selectCtrl.hashGetter(oldValue, scope);\n\t      var newHashKey = selectCtrl.hashGetter(newValue, scope);\n\t\n\t      optionCtrl.hashKey = newHashKey;\n\t      optionCtrl.value = newValue;\n\t\n\t      selectCtrl.removeOption(oldHashKey, optionCtrl);\n\t      selectCtrl.addOption(newHashKey, optionCtrl);\n\t    }\n\t\n\t    scope.$on('$destroy', function() {\n\t      selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);\n\t    });\n\t\n\t    function configureAria() {\n\t      var ariaAttrs = {\n\t        'role': 'option',\n\t        'aria-selected': 'false'\n\t      };\n\t\n\t      if (!element[0].hasAttribute('id')) {\n\t        ariaAttrs.id = 'select_option_' + $mdUtil.nextUid();\n\t      }\n\t      element.attr(ariaAttrs);\n\t    }\n\t  }\n\t\n\t  function OptionController($element) {\n\t    this.selected = false;\n\t    this.setSelected = function(isSelected) {\n\t      if (isSelected && !this.selected) {\n\t        $element.attr({\n\t          'selected': 'selected',\n\t          'aria-selected': 'true'\n\t        });\n\t      } else if (!isSelected && this.selected) {\n\t        $element.removeAttr('selected');\n\t        $element.attr('aria-selected', 'false');\n\t      }\n\t      this.selected = isSelected;\n\t    };\n\t  }\n\t\n\t}\n\tOptionDirective.$inject = [\"$mdButtonInkRipple\", \"$mdUtil\"];\n\t\n\tfunction OptgroupDirective() {\n\t  return {\n\t    restrict: 'E',\n\t    compile: compile\n\t  };\n\t  function compile(el, attrs) {\n\t    var labelElement = el.find('label');\n\t    if (!labelElement.length) {\n\t      labelElement = angular.element('<label>');\n\t      el.prepend(labelElement);\n\t    }\n\t    if (attrs.label) labelElement.text(attrs.label);\n\t  }\n\t}\n\t\n\tfunction SelectProvider($$interimElementProvider) {\n\t  selectDefaultOptions.$inject = [\"$mdSelect\", \"$mdConstant\", \"$mdUtil\", \"$window\", \"$q\", \"$$rAF\", \"$animateCss\", \"$animate\"];\n\t  return $$interimElementProvider('$mdSelect')\n\t    .setDefaults({\n\t      methods: ['target'],\n\t      options: selectDefaultOptions\n\t    });\n\t\n\t  /* @ngInject */\n\t  function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate) {\n\t    var ERRROR_TARGET_EXPECTED = \"$mdSelect.show() expected a target element in options.target but got '{0}'!\";\n\t    var animator = $mdUtil.dom.animator;\n\t\n\t    return {\n\t      parent: 'body',\n\t      themable: true,\n\t      onShow: onShow,\n\t      onRemove: onRemove,\n\t      hasBackdrop: true,\n\t      disableParentScroll: true\n\t    };\n\t\n\t    /**\n\t     * Interim-element onRemove logic....\n\t     */\n\t    function onRemove(scope, element, opts) {\n\t      opts = opts || { };\n\t      opts.cleanupInteraction();\n\t      opts.cleanupResizing();\n\t      opts.hideBackdrop();\n\t\n\t      // For navigation $destroy events, do a quick, non-animated removal,\n\t      // but for normal closes (from clicks, etc) animate the removal\n\t\n\t      return  (opts.$destroy === true) ? detachAndClean() : animateRemoval().then( detachAndClean );\n\t\n\t      /**\n\t       * For normal closes (eg clicks), animate the removal.\n\t       * For forced closes (like $destroy events from navigation),\n\t       * skip the animations\n\t       */\n\t      function animateRemoval() {\n\t        return $animateCss(element, {addClass: 'md-leave'}).start();\n\t      }\n\t\n\t      /**\n\t       * Detach the element and cleanup prior changes\n\t       */\n\t      function detachAndClean() {\n\t        configureAria(opts.target, false);\n\t\n\t        element.attr('opacity', 0);\n\t        element.removeClass('md-active');\n\t        detachElement(element, opts);\n\t\n\t        announceClosed(opts);\n\t\n\t        if (!opts.$destroy && opts.restoreFocus) {\n\t          opts.target.focus();\n\t        }\n\t      }\n\t\n\t    }\n\t\n\t    /**\n\t     * Interim-element onShow logic....\n\t     */\n\t    function onShow(scope, element, opts) {\n\t\n\t      watchAsyncLoad();\n\t      sanitizeAndConfigure(scope, opts);\n\t      configureAria(opts.target);\n\t\n\t      opts.hideBackdrop = showBackdrop(scope, element, opts);\n\t\n\t      return showDropDown(scope, element, opts)\n\t        .then(function(response) {\n\t          opts.alreadyOpen = true;\n\t          opts.cleanupInteraction = activateInteraction();\n\t          opts.cleanupResizing = activateResizing();\n\t\n\t          return response;\n\t        }, opts.hideBackdrop);\n\t\n\t      // ************************************\n\t      // Closure Functions\n\t      // ************************************\n\t\n\t      /**\n\t       *  Attach the select DOM element(s) and animate to the correct positions\n\t       *  and scalings...\n\t       */\n\t      function showDropDown(scope, element, opts) {\n\t        opts.parent.append(element);\n\t\n\t        return $q(function(resolve, reject) {\n\t\n\t          try {\n\t\n\t            $animateCss(element, {removeClass: 'md-leave', duration: 0})\n\t              .start()\n\t              .then(positionAndFocusMenu)\n\t              .then(resolve);\n\t\n\t          } catch (e) {\n\t            reject(e);\n\t          }\n\t\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Initialize container and dropDown menu positions/scale, then animate\n\t       * to show... and autoFocus.\n\t       */\n\t      function positionAndFocusMenu() {\n\t        return $q(function(resolve) {\n\t          if (opts.isRemoved) return $q.reject(false);\n\t\n\t          var info = calculateMenuPositions(scope, element, opts);\n\t\n\t          info.container.element.css(animator.toCss(info.container.styles));\n\t          info.dropDown.element.css(animator.toCss(info.dropDown.styles));\n\t\n\t          $$rAF(function() {\n\t            element.addClass('md-active');\n\t            info.dropDown.element.css(animator.toCss({transform: ''}));\n\t\n\t            autoFocus(opts.focusedNode);\n\t            resolve();\n\t          });\n\t\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Show modal backdrop element...\n\t       */\n\t      function showBackdrop(scope, element, options) {\n\t\n\t        // If we are not within a dialog...\n\t        if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {\n\t          // !! DO this before creating the backdrop; since disableScrollAround()\n\t          //    configures the scroll offset; which is used by mdBackDrop postLink()\n\t          options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);\n\t        } else {\n\t          options.disableParentScroll = false;\n\t        }\n\t\n\t        if (options.hasBackdrop) {\n\t          // Override duration to immediately show invisible backdrop\n\t          options.backdrop = $mdUtil.createBackdrop(scope, \"md-select-backdrop md-click-catcher\");\n\t          $animate.enter(options.backdrop, options.parent, null, {duration: 0});\n\t        }\n\t\n\t        /**\n\t         * Hide modal backdrop element...\n\t         */\n\t        return function hideBackdrop() {\n\t          if (options.backdrop) options.backdrop.remove();\n\t          if (options.disableParentScroll) options.restoreScroll();\n\t\n\t          delete options.restoreScroll;\n\t        }\n\t      }\n\t\n\t      /**\n\t       *\n\t       */\n\t      function autoFocus(focusedNode) {\n\t        if (focusedNode && !focusedNode.hasAttribute('disabled')) {\n\t          focusedNode.focus();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Check for valid opts and set some sane defaults\n\t       */\n\t      function sanitizeAndConfigure(scope, options) {\n\t        var selectEl = element.find('md-select-menu');\n\t\n\t        if (!options.target) {\n\t          throw new Error($mdUtil.supplant(ERRROR_TARGET_EXPECTED, [options.target]));\n\t        }\n\t\n\t        angular.extend(options, {\n\t          isRemoved: false,\n\t          target: angular.element(options.target), //make sure it's not a naked dom node\n\t          parent: angular.element(options.parent),\n\t          selectEl: selectEl,\n\t          contentEl: element.find('md-content'),\n\t          optionNodes: selectEl[0].getElementsByTagName('md-option')\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Configure various resize listeners for screen changes\n\t       */\n\t      function activateResizing() {\n\t        var debouncedOnResize = (function(scope, target, options) {\n\t\n\t          return function() {\n\t            if (options.isRemoved) return;\n\t\n\t            var updates = calculateMenuPositions(scope, target, options);\n\t            var container = updates.container;\n\t            var dropDown = updates.dropDown;\n\t\n\t            container.element.css(animator.toCss(container.styles));\n\t            dropDown.element.css(animator.toCss(dropDown.styles));\n\t          };\n\t\n\t        })(scope, element, opts);\n\t\n\t        var window = angular.element($window);\n\t        window.on('resize', debouncedOnResize);\n\t        window.on('orientationchange', debouncedOnResize);\n\t\n\t        // Publish deactivation closure...\n\t        return function deactivateResizing() {\n\t\n\t          // Disable resizing handlers\n\t          window.off('resize', debouncedOnResize);\n\t          window.off('orientationchange', debouncedOnResize);\n\t        }\n\t      }\n\t\n\t      /**\n\t       *  If asynchronously loading, watch and update internal\n\t       *  '$$loadingAsyncDone' flag\n\t       */\n\t      function watchAsyncLoad() {\n\t        if (opts.loadingAsync && !opts.isRemoved) {\n\t          scope.$$loadingAsyncDone = false;\n\t          scope.progressMode = 'indeterminate';\n\t\n\t          $q.when(opts.loadingAsync)\n\t            .then(function() {\n\t              scope.$$loadingAsyncDone = true;\n\t              scope.progressMode = '';\n\t              delete opts.loadingAsync;\n\t            }).then(function() {\n\t              $$rAF(positionAndFocusMenu);\n\t            })\n\t        }\n\t      }\n\t\n\t      /**\n\t       *\n\t       */\n\t      function activateInteraction() {\n\t        if (opts.isRemoved) return;\n\t\n\t        var dropDown = opts.selectEl;\n\t        var selectCtrl = dropDown.controller('mdSelectMenu') || {};\n\t\n\t        element.addClass('md-clickable');\n\t\n\t        // Close on backdrop click\n\t        opts.backdrop && opts.backdrop.on('click', onBackdropClick);\n\t\n\t        // Escape to close\n\t        // Cycling of options, and closing on enter\n\t        dropDown.on('keydown', onMenuKeyDown);\n\t        dropDown.on('mouseup', checkCloseMenu);\n\t\n\t        return function cleanupInteraction() {\n\t          opts.backdrop && opts.backdrop.off('click', onBackdropClick);\n\t          dropDown.off('keydown', onMenuKeyDown);\n\t          dropDown.off('mouseup', checkCloseMenu);\n\t\n\t          element.removeClass('md-clickable');\n\t          opts.isRemoved = true;\n\t        };\n\t\n\t        // ************************************\n\t        // Closure Functions\n\t        // ************************************\n\t\n\t        function onBackdropClick(e) {\n\t          e.preventDefault();\n\t          e.stopPropagation();\n\t          opts.restoreFocus = false;\n\t          $mdUtil.nextTick($mdSelect.hide, true);\n\t        }\n\t\n\t        function onMenuKeyDown(ev) {\n\t          var keyCodes = $mdConstant.KEY_CODE;\n\t\n\t          switch (ev.keyCode) {\n\t            case keyCodes.UP_ARROW:\n\t              return focusPrevOption();\n\t              break;\n\t            case keyCodes.DOWN_ARROW:\n\t              return focusNextOption();\n\t              break;\n\t            case keyCodes.SPACE:\n\t            case keyCodes.ENTER:\n\t              var option = $mdUtil.getClosest(ev.target, 'md-option');\n\t              if (option) {\n\t                dropDown.triggerHandler({\n\t                  type: 'click',\n\t                  target: option\n\t                });\n\t                ev.preventDefault();\n\t              }\n\t              checkCloseMenu(ev);\n\t              break;\n\t            case keyCodes.TAB:\n\t            case keyCodes.ESCAPE:\n\t              ev.preventDefault();\n\t              opts.restoreFocus = true;\n\t              $mdUtil.nextTick($mdSelect.hide, true);\n\t              break;\n\t            default:\n\t              if (ev.keyCode >= 31 && ev.keyCode <= 90) {\n\t                var optNode = dropDown.controller('mdSelectMenu').optNodeForKeyboardSearch(ev);\n\t                opts.focusedNode = optNode || opts.focusedNode;\n\t                optNode && optNode.focus();\n\t              }\n\t          }\n\t        }\n\t\n\t        function focusOption(direction) {\n\t          var optionsArray = $mdUtil.nodesToArray(opts.optionNodes);\n\t          var index = optionsArray.indexOf(opts.focusedNode);\n\t\n\t          var newOption;\n\t\n\t          do {\n\t            if (index === -1) {\n\t              // We lost the previously focused element, reset to first option\n\t              index = 0;\n\t            } else if (direction === 'next' && index < optionsArray.length - 1) {\n\t              index++;\n\t            } else if (direction === 'prev' && index > 0) {\n\t              index--;\n\t            }\n\t            newOption = optionsArray[index];\n\t            if (newOption.hasAttribute('disabled')) newOption = undefined;\n\t          } while (!newOption && index < optionsArray.length - 1 && index > 0)\n\t          newOption && newOption.focus();\n\t          opts.focusedNode = newOption;\n\t        }\n\t\n\t        function focusNextOption() {\n\t          focusOption('next');\n\t        }\n\t\n\t        function focusPrevOption() {\n\t          focusOption('prev');\n\t        }\n\t\n\t        function checkCloseMenu(ev) {\n\t          if (ev && ( ev.type == 'mouseup') && (ev.currentTarget != dropDown[0])) return;\n\t          if ( mouseOnScrollbar() ) return;\n\t\n\t          if (!selectCtrl.isMultiple) {\n\t            opts.restoreFocus = true;\n\t\n\t            $mdUtil.nextTick(function() {\n\t              $mdSelect.hide(selectCtrl.ngModel.$viewValue);\n\t            }, true);\n\t          }\n\t\n\t          /**\n\t           * check if the mouseup event was on a scrollbar\n\t           */\n\t          function mouseOnScrollbar() {\n\t            var clickOnScrollbar = false;\n\t            if (ev && (ev.currentTarget.children.length > 0)) {\n\t              var child = ev.currentTarget.children[0];\n\t              var hasScrollbar = child.scrollHeight > child.clientHeight;\n\t              if (hasScrollbar && child.children.length > 0) {\n\t                var relPosX = ev.pageX - ev.currentTarget.getBoundingClientRect().left;\n\t                if (relPosX > child.querySelector('md-option').offsetWidth)\n\t                  clickOnScrollbar = true;\n\t              }\n\t            }\n\t            return clickOnScrollbar;\n\t          }\n\t        }\n\t      }\n\t\n\t    }\n\t\n\t    /**\n\t     *\n\t     */\n\t    function configureAria(element, isExpanded) {\n\t      isExpanded = angular.isUndefined(isExpanded) ? 'true' : 'false';\n\t      element && element.attr('aria-expanded', isExpanded);\n\t    }\n\t\n\t    /**\n\t     * To notify listeners that the Select menu has closed,\n\t     * trigger the [optional] user-defined expression\n\t     */\n\t    function announceClosed(opts) {\n\t      var mdSelect = opts.selectEl.controller('mdSelect');\n\t      if (mdSelect) {\n\t        var menuController = opts.selectEl.controller('mdSelectMenu');\n\t        mdSelect.setLabelText(menuController.selectedLabels());\n\t        mdSelect.triggerClose();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Use browser to remove this element without triggering a $destroy event\n\t     */\n\t    function detachElement(element, opts) {\n\t      if (element[0].parentNode === opts.parent[0]) {\n\t        opts.parent[0].removeChild(element[0]);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Calculate the\n\t     */\n\t    function calculateMenuPositions(scope, element, opts) {\n\t      var optionNodes,\n\t        containerNode = element[0],\n\t        targetNode = opts.target[0].firstElementChild, // target the label\n\t        parentNode = opts.parent[0],\n\t        selectNode = opts.selectEl[0],\n\t        contentNode = opts.contentEl[0],\n\t        parentRect = parentNode.getBoundingClientRect(),\n\t        targetRect = targetNode.getBoundingClientRect(),\n\t        shouldOpenAroundTarget = false,\n\t        bounds = {\n\t          left: parentRect.left + SELECT_EDGE_MARGIN,\n\t          top: SELECT_EDGE_MARGIN,\n\t          bottom: parentRect.height - SELECT_EDGE_MARGIN,\n\t          right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)\n\t        },\n\t        spaceAvailable = {\n\t          top: targetRect.top - bounds.top,\n\t          left: targetRect.left - bounds.left,\n\t          right: bounds.right - (targetRect.left + targetRect.width),\n\t          bottom: bounds.bottom - (targetRect.top + targetRect.height)\n\t        },\n\t        maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,\n\t        isScrollable = contentNode.scrollHeight > contentNode.offsetHeight,\n\t        selectedNode = selectNode.querySelector('md-option[selected]'),\n\t        optionNodes = selectNode.getElementsByTagName('md-option'),\n\t        optgroupNodes = selectNode.getElementsByTagName('md-optgroup');\n\t\n\t      var loading = isPromiseLike(opts.loadingAsync);\n\t      var centeredNode;\n\t      if (!loading) {\n\t        // If a selected node, center around that\n\t        if (selectedNode) {\n\t          centeredNode = selectedNode;\n\t          // If there are option groups, center around the first option group\n\t        } else if (optgroupNodes.length) {\n\t          centeredNode = optgroupNodes[0];\n\t          // Otherwise - if we are not loading async - center around the first optionNode\n\t        } else if (optionNodes.length) {\n\t          centeredNode = optionNodes[0];\n\t          // In case there are no options, center on whatever's in there... (eg progress indicator)\n\t        } else {\n\t          centeredNode = contentNode.firstElementChild || contentNode;\n\t        }\n\t      } else {\n\t        // If loading, center on progress indicator\n\t        centeredNode = contentNode.firstElementChild || contentNode;\n\t      }\n\t\n\t      if (contentNode.offsetWidth > maxWidth) {\n\t        contentNode.style['max-width'] = maxWidth + 'px';\n\t      }\n\t      if (shouldOpenAroundTarget) {\n\t        contentNode.style['min-width'] = targetRect.width + 'px';\n\t      }\n\t\n\t      // Remove padding before we compute the position of the menu\n\t      if (isScrollable) {\n\t        selectNode.classList.add('md-overflow');\n\t      }\n\t\n\t      var focusedNode = centeredNode;\n\t      if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {\n\t        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;\n\t        centeredNode = focusedNode;\n\t      }\n\t      // Cache for autoFocus()\n\t      opts.focusedNode = focusedNode;\n\t\n\t      // Get the selectMenuRect *after* max-width is possibly set above\n\t      var selectMenuRect = selectNode.getBoundingClientRect();\n\t      var centeredRect = getOffsetRect(centeredNode);\n\t\n\t      if (centeredNode) {\n\t        var centeredStyle = $window.getComputedStyle(centeredNode);\n\t        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;\n\t        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;\n\t      }\n\t\n\t      if (isScrollable) {\n\t        var scrollBuffer = contentNode.offsetHeight / 2;\n\t        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;\n\t\n\t        if (spaceAvailable.top < scrollBuffer) {\n\t          contentNode.scrollTop = Math.min(\n\t            centeredRect.top,\n\t            contentNode.scrollTop + scrollBuffer - spaceAvailable.top\n\t          );\n\t        } else if (spaceAvailable.bottom < scrollBuffer) {\n\t          contentNode.scrollTop = Math.max(\n\t            centeredRect.top + centeredRect.height - selectMenuRect.height,\n\t            contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom\n\t          );\n\t        }\n\t      }\n\t\n\t      var left, top, transformOrigin, minWidth;\n\t      if (shouldOpenAroundTarget) {\n\t        left = targetRect.left;\n\t        top = targetRect.top + targetRect.height;\n\t        transformOrigin = '50% 0';\n\t        if (top + selectMenuRect.height > bounds.bottom) {\n\t          top = targetRect.top - selectMenuRect.height;\n\t          transformOrigin = '50% 100%';\n\t        }\n\t      } else {\n\t        left = (targetRect.left + centeredRect.left - centeredRect.paddingLeft) + 2;\n\t        top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -\n\t            centeredRect.top + contentNode.scrollTop) + 2;\n\t\n\t        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +\n\t          (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';\n\t\n\t        minWidth = targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight;\n\t      }\n\t\n\t      // Keep left and top within the window\n\t      var containerRect = containerNode.getBoundingClientRect();\n\t      var scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1.0)) / 100;\n\t      var scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1.0)) / 100;\n\t\n\t      return {\n\t        container: {\n\t          element: angular.element(containerNode),\n\t          styles: {\n\t            left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),\n\t            top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),\n\t            'min-width': minWidth\n\t          }\n\t        },\n\t        dropDown: {\n\t          element: angular.element(selectNode),\n\t          styles: {\n\t            transformOrigin: transformOrigin,\n\t            transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : \"\"\n\t          }\n\t        }\n\t      };\n\t\n\t    }\n\t\n\t  }\n\t\n\t  function isPromiseLike(obj) {\n\t    return obj && angular.isFunction(obj.then);\n\t  }\n\t\n\t  function clamp(min, n, max) {\n\t    return Math.max(min, Math.min(n, max));\n\t  }\n\t\n\t  function getOffsetRect(node) {\n\t    return node ? {\n\t      left: node.offsetLeft,\n\t      top: node.offsetTop,\n\t      width: node.offsetWidth,\n\t      height: node.offsetHeight\n\t    } : {left: 0, top: 0, width: 0, height: 0};\n\t  }\n\t}\n\tSelectProvider.$inject = [\"$$interimElementProvider\"];\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.sidenav\n\t *\n\t * @description\n\t * A Sidenav QP component.\n\t */\n\tangular\n\t  .module('material.components.sidenav', [\n\t    'material.core',\n\t    'material.components.backdrop'\n\t  ])\n\t  .factory('$mdSidenav', SidenavService )\n\t  .directive('mdSidenav', SidenavDirective)\n\t  .directive('mdSidenavFocus', SidenavFocusDirective)\n\t  .controller('$mdSidenavController', SidenavController);\n\t\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $mdSidenav\n\t * @module material.components.sidenav\n\t *\n\t * @description\n\t * `$mdSidenav` makes it easy to interact with multiple sidenavs\n\t * in an app.\n\t *\n\t * @usage\n\t * <hljs lang=\"js\">\n\t * // Async lookup for sidenav instance; will resolve when the instance is available\n\t * $mdSidenav(componentId).then(function(instance) {\n\t *   $log.debug( componentId + \"is now ready\" );\n\t * });\n\t * // Async toggle the given sidenav;\n\t * // when instance is known ready and lazy lookup is not needed.\n\t * $mdSidenav(componentId)\n\t *    .toggle()\n\t *    .then(function(){\n\t *      $log.debug('toggled');\n\t *    });\n\t * // Async open the given sidenav\n\t * $mdSidenav(componentId)\n\t *    .open()\n\t *    .then(function(){\n\t *      $log.debug('opened');\n\t *    });\n\t * // Async close the given sidenav\n\t * $mdSidenav(componentId)\n\t *    .close()\n\t *    .then(function(){\n\t *      $log.debug('closed');\n\t *    });\n\t * // Sync check to see if the specified sidenav is set to be open\n\t * $mdSidenav(componentId).isOpen();\n\t * // Sync check to whether given sidenav is locked open\n\t * // If this is true, the sidenav will be open regardless of close()\n\t * $mdSidenav(componentId).isLockedOpen();\n\t * </hljs>\n\t */\n\tfunction SidenavService($mdComponentRegistry, $q) {\n\t  return function(handle) {\n\t\n\t    // Lookup the controller instance for the specified sidNav instance\n\t    var self;\n\t    var errorMsg = \"SideNav '\" + handle + \"' is not available!\";\n\t    var instance = $mdComponentRegistry.get(handle);\n\t\n\t    if(!instance) {\n\t      $mdComponentRegistry.notFoundError(handle);\n\t    }\n\t\n\t    return self = {\n\t      // -----------------\n\t      // Sync methods\n\t      // -----------------\n\t      isOpen: function() {\n\t        return instance && instance.isOpen();\n\t      },\n\t      isLockedOpen: function() {\n\t        return instance && instance.isLockedOpen();\n\t      },\n\t      // -----------------\n\t      // Async methods\n\t      // -----------------\n\t      toggle: function() {\n\t        return instance ? instance.toggle() : $q.reject(errorMsg);\n\t      },\n\t      open: function() {\n\t        return instance ? instance.open() : $q.reject(errorMsg);\n\t      },\n\t      close: function() {\n\t        return instance ? instance.close() : $q.reject(errorMsg);\n\t      },\n\t      then : function( callbackFn ) {\n\t        var promise = instance ? $q.when(instance) : waitForInstance();\n\t        return promise.then( callbackFn || angular.noop );\n\t      }\n\t    };\n\t\n\t    /**\n\t     * Deferred lookup of component instance using $component registry\n\t     */\n\t    function waitForInstance() {\n\t      return $mdComponentRegistry\n\t                .when(handle)\n\t                .then(function( it ){\n\t                  instance = it;\n\t                  return it;\n\t                });\n\t    }\n\t  };\n\t}\n\tSidenavService.$inject = [\"$mdComponentRegistry\", \"$q\"];\n\t/**\n\t * @ngdoc directive\n\t * @name mdSidenavFocus\n\t * @module material.components.sidenav\n\t *\n\t * @restrict A\n\t *\n\t * @description\n\t * `mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.\n\t * This is completely optional, as the sidenav itself is focused by default.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-sidenav>\n\t *   <form>\n\t *     <md-input-container>\n\t *       <label for=\"testInput\">Label</label>\n\t *       <input id=\"testInput\" type=\"text\" md-sidenav-focus>\n\t *     </md-input-container>\n\t *   </form>\n\t * </md-sidenav>\n\t * </hljs>\n\t **/\n\tfunction SidenavFocusDirective() {\n\t  return {\n\t    restrict: 'A',\n\t    require: '^mdSidenav',\n\t    link: function(scope, element, attr, sidenavCtrl) {\n\t      // @see $mdUtil.findFocusTarget(...)\n\t    }\n\t  };\n\t}\n\t/**\n\t * @ngdoc directive\n\t * @name mdSidenav\n\t * @module material.components.sidenav\n\t * @restrict E\n\t *\n\t * @description\n\t *\n\t * A Sidenav component that can be opened and closed programatically.\n\t *\n\t * By default, upon opening it will slide out on top of the main content area.\n\t *\n\t * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.\n\t * It can be overridden with the `md-autofocus` directive on the child element you want focused.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <div layout=\"row\" ng-controller=\"MyController\">\n\t *   <md-sidenav md-component-id=\"left\" class=\"md-sidenav-left\">\n\t *     Left Nav!\n\t *   </md-sidenav>\n\t *\n\t *   <md-content>\n\t *     Center Content\n\t *     <md-button ng-click=\"openLeftMenu()\">\n\t *       Open Left Menu\n\t *     </md-button>\n\t *   </md-content>\n\t *\n\t *   <md-sidenav md-component-id=\"right\"\n\t *     md-is-locked-open=\"$mdMedia('min-width: 333px')\"\n\t *     class=\"md-sidenav-right\">\n\t *     <form>\n\t *       <md-input-container>\n\t *         <label for=\"testInput\">Test input</label>\n\t *         <input id=\"testInput\" type=\"text\"\n\t *                ng-model=\"data\" md-autofocus>\n\t *       </md-input-container>\n\t *     </form>\n\t *   </md-sidenav>\n\t * </div>\n\t * </hljs>\n\t *\n\t * <hljs lang=\"js\">\n\t * var app = angular.module('myApp', ['ngMaterial']);\n\t * app.controller('MyController', function($scope, $mdSidenav) {\n\t *   $scope.openLeftMenu = function() {\n\t *     $mdSidenav('left').toggle();\n\t *   };\n\t * });\n\t * </hljs>\n\t *\n\t * @param {expression=} md-is-open A model bound to whether the sidenav is opened.\n\t * @param {string=} md-component-id componentId to use with $mdSidenav service.\n\t * @param {expression=} md-is-locked-open When this expression evalutes to true,\n\t * the sidenav 'locks open': it falls into the content's flow instead\n\t * of appearing over it. This overrides the `is-open` attribute.\n\t *\n\t * The $mdMedia() service is exposed to the is-locked-open attribute, which\n\t * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.\n\t * Examples:\n\t *\n\t *   - `<md-sidenav md-is-locked-open=\"shouldLockOpen\"></md-sidenav>`\n\t *   - `<md-sidenav md-is-locked-open=\"$mdMedia('min-width: 1000px')\"></md-sidenav>`\n\t *   - `<md-sidenav md-is-locked-open=\"$mdMedia('sm')\"></md-sidenav>` (locks open on small screens)\n\t */\n\tfunction SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {\n\t  return {\n\t    restrict: 'E',\n\t    scope: {\n\t      isOpen: '=?mdIsOpen'\n\t    },\n\t    controller: '$mdSidenavController',\n\t    compile: function(element) {\n\t      element.addClass('md-closed');\n\t      element.attr('tabIndex', '-1');\n\t      return postLink;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Directive Post Link function...\n\t   */\n\t  function postLink(scope, element, attr, sidenavCtrl) {\n\t    var lastParentOverFlow;\n\t    var triggeringElement = null;\n\t    var promise = $q.when(true);\n\t\n\t    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);\n\t    var isLocked = function() {\n\t      return isLockedOpenParsed(scope.$parent, {\n\t        $media: function(arg) {\n\t          $log.warn(\"$media is deprecated for is-locked-open. Use $mdMedia instead.\");\n\t          return $mdMedia(arg);\n\t        },\n\t        $mdMedia: $mdMedia\n\t      });\n\t    };\n\t    var backdrop = $mdUtil.createBackdrop(scope, \"md-sidenav-backdrop md-opaque ng-enter\");\n\t\n\t    $mdTheming.inherit(backdrop, element);\n\t\n\t    element.on('$destroy', function() {\n\t      backdrop.remove();\n\t      sidenavCtrl.destroy();\n\t    });\n\t\n\t    scope.$on('$destroy', function(){\n\t      backdrop.remove()\n\t    });\n\t\n\t    scope.$watch(isLocked, updateIsLocked);\n\t    scope.$watch('isOpen', updateIsOpen);\n\t\n\t\n\t    // Publish special accessor for the Controller instance\n\t    sidenavCtrl.$toggleOpen = toggleOpen;\n\t\n\t    /**\n\t     * Toggle the DOM classes to indicate `locked`\n\t     * @param isLocked\n\t     */\n\t    function updateIsLocked(isLocked, oldValue) {\n\t      scope.isLockedOpen = isLocked;\n\t      if (isLocked === oldValue) {\n\t        element.toggleClass('md-locked-open', !!isLocked);\n\t      } else {\n\t        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');\n\t      }\n\t      backdrop.toggleClass('md-locked-open', !!isLocked);\n\t    }\n\t\n\t    /**\n\t     * Toggle the SideNav view and attach/detach listeners\n\t     * @param isOpen\n\t     */\n\t    function updateIsOpen(isOpen) {\n\t      // Support deprecated md-sidenav-focus attribute as fallback\n\t      var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element,'[md-sidenav-focus]') || element;\n\t      var parent = element.parent();\n\t\n\t      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);\n\t      backdrop[isOpen ? 'on' : 'off']('click', close);\n\t\n\t      if ( isOpen ) {\n\t        // Capture upon opening..\n\t        triggeringElement = $document[0].activeElement;\n\t      }\n\t\n\t      disableParentScroll(isOpen);\n\t\n\t      return promise = $q.all([\n\t                isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop),\n\t                $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')\n\t              ])\n\t              .then(function() {\n\t                // Perform focus when animations are ALL done...\n\t                if (scope.isOpen) {\n\t                  focusEl && focusEl.focus();\n\t                }\n\t              });\n\t    }\n\t\n\t    /**\n\t     * Prevent parent scrolling (when the SideNav is open)\n\t     */\n\t    function disableParentScroll(disabled) {\n\t      var parent = element.parent();\n\t      if ( disabled && !lastParentOverFlow ) {\n\t\n\t        lastParentOverFlow = parent.css('overflow');\n\t        parent.css('overflow', 'hidden');\n\t\n\t      } else if (angular.isDefined(lastParentOverFlow)) {\n\t\n\t        parent.css('overflow', lastParentOverFlow);\n\t        lastParentOverFlow = undefined;\n\t\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Toggle the sideNav view and publish a promise to be resolved when\n\t     * the view animation finishes.\n\t     *\n\t     * @param isOpen\n\t     * @returns {*}\n\t     */\n\t    function toggleOpen( isOpen ) {\n\t      if (scope.isOpen == isOpen ) {\n\t\n\t        return $q.when(true);\n\t\n\t      } else {\n\t        return $q(function(resolve){\n\t          // Toggle value to force an async `updateIsOpen()` to run\n\t          scope.isOpen = isOpen;\n\t\n\t          $mdUtil.nextTick(function() {\n\t            // When the current `updateIsOpen()` animation finishes\n\t            promise.then(function(result) {\n\t\n\t              if ( !scope.isOpen ) {\n\t                // reset focus to originating element (if available) upon close\n\t                triggeringElement && triggeringElement.focus();\n\t                triggeringElement = null;\n\t              }\n\t\n\t              resolve(result);\n\t            });\n\t          });\n\t\n\t        });\n\t\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Auto-close sideNav when the `escape` key is pressed.\n\t     * @param evt\n\t     */\n\t    function onKeyDown(ev) {\n\t      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);\n\t      return isEscape ? close(ev) : $q.when(true);\n\t    }\n\t\n\t    /**\n\t     * With backdrop `clicks` or `escape` key-press, immediately\n\t     * apply the CSS close transition... Then notify the controller\n\t     * to close() and perform its own actions.\n\t     */\n\t    function close(ev) {\n\t      ev.preventDefault();\n\t      ev.stopPropagation();\n\t\n\t      return sidenavCtrl.close();\n\t    }\n\t\n\t  }\n\t}\n\tSidenavDirective.$inject = [\"$mdMedia\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$animate\", \"$compile\", \"$parse\", \"$log\", \"$q\", \"$document\"];\n\t\n\t/*\n\t * @private\n\t * @ngdoc controller\n\t * @name SidenavController\n\t * @module material.components.sidenav\n\t *\n\t */\n\tfunction SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {\n\t\n\t  var self = this;\n\t\n\t  // Use Default internal method until overridden by directive postLink\n\t\n\t  // Synchronous getters\n\t  self.isOpen = function() { return !!$scope.isOpen; };\n\t  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };\n\t\n\t  // Async actions\n\t  self.open   = function() { return self.$toggleOpen( true );  };\n\t  self.close  = function() { return self.$toggleOpen( false ); };\n\t  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };\n\t  self.$toggleOpen = function(value) { return $q.when($scope.isOpen = value); };\n\t\n\t  self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);\n\t}\n\tSidenavController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$mdComponentRegistry\", \"$q\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t  /**\n\t   * @ngdoc module\n\t   * @name material.components.slider\n\t   */\n\t  angular.module('material.components.slider', [\n\t    'material.core'\n\t  ])\n\t  .directive('mdSlider', SliderDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdSlider\n\t * @module material.components.slider\n\t * @restrict E\n\t * @description\n\t * The `<md-slider>` component allows the user to choose from a range of\n\t * values.\n\t *\n\t * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n\t * the slider is in the accent color by default. The primary color palette may be used with\n\t * the `md-primary` class.\n\t *\n\t * It has two modes: 'normal' mode, where the user slides between a wide range\n\t * of values, and 'discrete' mode, where the user slides between only a few\n\t * select values.\n\t *\n\t * To enable discrete mode, add the `md-discrete` attribute to a slider,\n\t * and use the `step` attribute to change the distance between\n\t * values the user is allowed to pick.\n\t *\n\t * @usage\n\t * <h4>Normal Mode</h4>\n\t * <hljs lang=\"html\">\n\t * <md-slider ng-model=\"myValue\" min=\"5\" max=\"500\">\n\t * </md-slider>\n\t * </hljs>\n\t * <h4>Discrete Mode</h4>\n\t * <hljs lang=\"html\">\n\t * <md-slider md-discrete ng-model=\"myDiscreteValue\" step=\"10\" min=\"10\" max=\"130\">\n\t * </md-slider>\n\t * </hljs>\n\t *\n\t * @param {boolean=} md-discrete Whether to enable discrete mode.\n\t * @param {number=} step The distance between values the user is allowed to pick. Default 1.\n\t * @param {number=} min The minimum value the user is allowed to pick. Default 0.\n\t * @param {number=} max The maximum value the user is allowed to pick. Default 100.\n\t */\n\tfunction SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {\n\t  return {\n\t    scope: {},\n\t    require: '?ngModel',\n\t    template:\n\t      '<div class=\"md-slider-wrapper\">' +\n\t        '<div class=\"md-track-container\">' +\n\t          '<div class=\"md-track\"></div>' +\n\t          '<div class=\"md-track md-track-fill\"></div>' +\n\t          '<div class=\"md-track-ticks\"></div>' +\n\t        '</div>' +\n\t        '<div class=\"md-thumb-container\">' +\n\t          '<div class=\"md-thumb\"></div>' +\n\t          '<div class=\"md-focus-thumb\"></div>' +\n\t          '<div class=\"md-focus-ring\"></div>' +\n\t          '<div class=\"md-sign\">' +\n\t            '<span class=\"md-thumb-text\"></span>' +\n\t          '</div>' +\n\t          '<div class=\"md-disabled-thumb\"></div>' +\n\t        '</div>' +\n\t      '</div>',\n\t    compile: compile\n\t  };\n\t\n\t  // **********************************************************\n\t  // Private Methods\n\t  // **********************************************************\n\t\n\t  function compile (tElement, tAttrs) {\n\t    tElement.attr({\n\t      tabIndex: 0,\n\t      role: 'slider'\n\t    });\n\t\n\t    $mdAria.expect(tElement, 'aria-label');\n\t\n\t    return postLink;\n\t  }\n\t\n\t  function postLink(scope, element, attr, ngModelCtrl) {\n\t    $mdTheming(element);\n\t    ngModelCtrl = ngModelCtrl || {\n\t      // Mock ngModelController if it doesn't exist to give us\n\t      // the minimum functionality needed\n\t      $setViewValue: function(val) {\n\t        this.$viewValue = val;\n\t        this.$viewChangeListeners.forEach(function(cb) { cb(); });\n\t      },\n\t      $parsers: [],\n\t      $formatters: [],\n\t      $viewChangeListeners: []\n\t    };\n\t\n\t    var isDisabledGetter = angular.noop;\n\t    if (attr.disabled != null) {\n\t      isDisabledGetter = function() { return true; };\n\t    } else if (attr.ngDisabled) {\n\t      isDisabledGetter = angular.bind(null, $parse(attr.ngDisabled), scope.$parent);\n\t    }\n\t\n\t    var thumb = angular.element(element[0].querySelector('.md-thumb'));\n\t    var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));\n\t    var thumbContainer = thumb.parent();\n\t    var trackContainer = angular.element(element[0].querySelector('.md-track-container'));\n\t    var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));\n\t    var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));\n\t    var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);\n\t\n\t    // Default values, overridable by attrs\n\t    angular.isDefined(attr.min) ? attr.$observe('min', updateMin) : updateMin(0);\n\t    angular.isDefined(attr.max) ? attr.$observe('max', updateMax) : updateMax(100);\n\t    angular.isDefined(attr.step)? attr.$observe('step', updateStep) : updateStep(1);\n\t\n\t    // We have to manually stop the $watch on ngDisabled because it exists\n\t    // on the parent scope, and won't be automatically destroyed when\n\t    // the component is destroyed.\n\t    var stopDisabledWatch = angular.noop;\n\t    if (attr.ngDisabled) {\n\t      stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);\n\t    }\n\t\n\t    $mdGesture.register(element, 'drag');\n\t\n\t    element\n\t      .on('keydown', keydownListener)\n\t      .on('$md.pressdown', onPressDown)\n\t      .on('$md.pressup', onPressUp)\n\t      .on('$md.dragstart', onDragStart)\n\t      .on('$md.drag', onDrag)\n\t      .on('$md.dragend', onDragEnd);\n\t\n\t    // On resize, recalculate the slider's dimensions and re-render\n\t    function updateAll() {\n\t      refreshSliderDimensions();\n\t      ngModelRender();\n\t      redrawTicks();\n\t    }\n\t    setTimeout(updateAll, 0);\n\t\n\t    var debouncedUpdateAll = $$rAF.throttle(updateAll);\n\t    angular.element($window).on('resize', debouncedUpdateAll);\n\t\n\t    scope.$on('$destroy', function() {\n\t      angular.element($window).off('resize', debouncedUpdateAll);\n\t      stopDisabledWatch();\n\t    });\n\t\n\t    ngModelCtrl.$render = ngModelRender;\n\t    ngModelCtrl.$viewChangeListeners.push(ngModelRender);\n\t    ngModelCtrl.$formatters.push(minMaxValidator);\n\t    ngModelCtrl.$formatters.push(stepValidator);\n\t\n\t    /**\n\t     * Attributes\n\t     */\n\t    var min;\n\t    var max;\n\t    var step;\n\t    function updateMin(value) {\n\t      min = parseFloat(value);\n\t      element.attr('aria-valuemin', value);\n\t      updateAll();\n\t    }\n\t    function updateMax(value) {\n\t      max = parseFloat(value);\n\t      element.attr('aria-valuemax', value);\n\t      updateAll();\n\t    }\n\t    function updateStep(value) {\n\t      step = parseFloat(value);\n\t      redrawTicks();\n\t    }\n\t    function updateAriaDisabled(isDisabled) {\n\t      element.attr('aria-disabled', !!isDisabled);\n\t    }\n\t\n\t    // Draw the ticks with canvas.\n\t    // The alternative to drawing ticks with canvas is to draw one element for each tick,\n\t    // which could quickly become a performance bottleneck.\n\t    var tickCanvas, tickCtx;\n\t    function redrawTicks() {\n\t      if (!angular.isDefined(attr.mdDiscrete)) return;\n\t      if ( angular.isUndefined(step) )         return;\n\t\n\t      if ( step <= 0 ) {\n\t        var msg = 'Slider step value must be greater than zero when in discrete mode';\n\t        $log.error(msg);\n\t        throw new Error(msg);\n\t      }\n\t\n\t      var numSteps = Math.floor( (max - min) / step );\n\t      if (!tickCanvas) {\n\t        tickCanvas = angular.element('<canvas style=\"position:absolute;\">');\n\t        tickContainer.append(tickCanvas);\n\t\n\t        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);\n\t        tickCtx = tickCanvas[0].getContext('2d');\n\t        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';\n\t      }\n\t\n\t      var dimensions = getSliderDimensions();\n\t      tickCanvas[0].width = dimensions.width;\n\t      tickCanvas[0].height = dimensions.height;\n\t\n\t      var distance;\n\t      for (var i = 0; i <= numSteps; i++) {\n\t        distance = Math.floor(dimensions.width * (i / numSteps));\n\t        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);\n\t      }\n\t    }\n\t\n\t\n\t    /**\n\t     * Refreshing Dimensions\n\t     */\n\t    var sliderDimensions = {};\n\t    refreshSliderDimensions();\n\t    function refreshSliderDimensions() {\n\t      sliderDimensions = trackContainer[0].getBoundingClientRect();\n\t    }\n\t    function getSliderDimensions() {\n\t      throttledRefreshDimensions();\n\t      return sliderDimensions;\n\t    }\n\t\n\t    /**\n\t     * left/right arrow listener\n\t     */\n\t    function keydownListener(ev) {\n\t      if(element[0].hasAttribute('disabled')) {\n\t        return;\n\t      }\n\t\n\t      var changeAmount;\n\t      if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {\n\t        changeAmount = -step;\n\t      } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {\n\t        changeAmount = step;\n\t      }\n\t      if (changeAmount) {\n\t        if (ev.metaKey || ev.ctrlKey || ev.altKey) {\n\t          changeAmount *= 4;\n\t        }\n\t        ev.preventDefault();\n\t        ev.stopPropagation();\n\t        scope.$evalAsync(function() {\n\t          setModelValue(ngModelCtrl.$viewValue + changeAmount);\n\t        });\n\t      }\n\t    }\n\t\n\t    /**\n\t     * ngModel setters and validators\n\t     */\n\t    function setModelValue(value) {\n\t      ngModelCtrl.$setViewValue( minMaxValidator(stepValidator(value)) );\n\t    }\n\t    function ngModelRender() {\n\t      if (isNaN(ngModelCtrl.$viewValue)) {\n\t        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;\n\t      }\n\t\n\t      var percent = (ngModelCtrl.$viewValue - min) / (max - min);\n\t      scope.modelValue = ngModelCtrl.$viewValue;\n\t      element.attr('aria-valuenow', ngModelCtrl.$viewValue);\n\t      setSliderPercent(percent);\n\t      thumbText.text( ngModelCtrl.$viewValue );\n\t    }\n\t\n\t    function minMaxValidator(value) {\n\t      if (angular.isNumber(value)) {\n\t        return Math.max(min, Math.min(max, value));\n\t      }\n\t    }\n\t    function stepValidator(value) {\n\t      if (angular.isNumber(value)) {\n\t        var formattedValue = (Math.round(value / step) * step);\n\t        // Format to 3 digits after the decimal point - fixes #2015.\n\t        return (Math.round(formattedValue * 1000) / 1000);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * @param percent 0-1\n\t     */\n\t    function setSliderPercent(percent) {\n\t        var percentStr = (percent * 100) + '%';\n\t\n\t        activeTrack.css('width', percentStr);\n\t        thumbContainer.css('left',percentStr);\n\t\n\t        element.toggleClass('md-min', percent === 0);\n\t        element.toggleClass('md-max', percent === 1);\n\t    }\n\t\n\t\n\t    /**\n\t     * Slide listeners\n\t     */\n\t    var isDragging = false;\n\t    var isDiscrete = angular.isDefined(attr.mdDiscrete);\n\t\n\t    function onPressDown(ev) {\n\t      if (isDisabledGetter()) return;\n\t\n\t      element.addClass('md-active');\n\t      element[0].focus();\n\t      refreshSliderDimensions();\n\t\n\t      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));\n\t      var closestVal = minMaxValidator( stepValidator(exactVal) );\n\t      scope.$apply(function() {\n\t        setModelValue( closestVal );\n\t        setSliderPercent( valueToPercent(closestVal));\n\t      });\n\t    }\n\t    function onPressUp(ev) {\n\t      if (isDisabledGetter()) return;\n\t\n\t      element.removeClass('md-dragging md-active');\n\t\n\t      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));\n\t      var closestVal = minMaxValidator( stepValidator(exactVal) );\n\t      scope.$apply(function() {\n\t        setModelValue(closestVal);\n\t        ngModelRender();\n\t      });\n\t    }\n\t    function onDragStart(ev) {\n\t      if (isDisabledGetter()) return;\n\t      isDragging = true;\n\t      ev.stopPropagation();\n\t\n\t      element.addClass('md-dragging');\n\t      setSliderFromEvent(ev);\n\t    }\n\t    function onDrag(ev) {\n\t      if (!isDragging) return;\n\t      ev.stopPropagation();\n\t      setSliderFromEvent(ev);\n\t    }\n\t    function onDragEnd(ev) {\n\t      if (!isDragging) return;\n\t      ev.stopPropagation();\n\t      isDragging = false;\n\t    }\n\t\n\t    function setSliderFromEvent(ev) {\n\t      // While panning discrete, update only the\n\t      // visual positioning but not the model value.\n\t      if ( isDiscrete ) adjustThumbPosition( ev.pointer.x );\n\t      else              doSlide( ev.pointer.x );\n\t    }\n\t\n\t    /**\n\t     * Slide the UI by changing the model value\n\t     * @param x\n\t     */\n\t    function doSlide( x ) {\n\t      scope.$evalAsync( function() {\n\t        setModelValue( percentToValue( positionToPercent(x) ));\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Slide the UI without changing the model (while dragging/panning)\n\t     * @param x\n\t     */\n\t    function adjustThumbPosition( x ) {\n\t      var exactVal = percentToValue( positionToPercent( x ));\n\t      var closestVal = minMaxValidator( stepValidator(exactVal) );\n\t      setSliderPercent( positionToPercent(x) );\n\t      thumbText.text( closestVal );\n\t    }\n\t\n\t    /**\n\t     * Convert horizontal position on slider to percentage value of offset from beginning...\n\t     * @param x\n\t     * @returns {number}\n\t     */\n\t    function positionToPercent( x ) {\n\t      return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));\n\t    }\n\t\n\t    /**\n\t     * Convert percentage offset on slide to equivalent model value\n\t     * @param percent\n\t     * @returns {*}\n\t     */\n\t    function percentToValue( percent ) {\n\t      return (min + percent * (max - min));\n\t    }\n\t\n\t    function valueToPercent( val ) {\n\t      return (val - min)/(max - min);\n\t    }\n\t  }\n\t}\n\tSliderDirective.$inject = [\"$$rAF\", \"$window\", \"$mdAria\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$mdGesture\", \"$parse\", \"$log\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.sticky\n\t * @description\n\t * Sticky effects for md\n\t *\n\t */\n\tangular\n\t  .module('material.components.sticky', [\n\t    'material.core',\n\t    'material.components.content'\n\t  ])\n\t  .factory('$mdSticky', MdSticky);\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $mdSticky\n\t * @module material.components.sticky\n\t *\n\t * @description\n\t * The `$mdSticky`service provides a mixin to make elements sticky.\n\t *\n\t * @returns A `$mdSticky` function that takes three arguments:\n\t *   - `scope`\n\t *   - `element`: The element that will be 'sticky'\n\t *   - `elementClone`: A clone of the element, that will be shown\n\t *     when the user starts scrolling past the original element.\n\t *     If not provided, it will use the result of `element.clone()`.\n\t */\n\tfunction MdSticky($document, $mdConstant, $$rAF, $mdUtil) {\n\t\n\t  var browserStickySupport = checkStickySupport();\n\t\n\t  /**\n\t   * Registers an element as sticky, used internally by directives to register themselves\n\t   */\n\t  return function registerStickyElement(scope, element, stickyClone) {\n\t    var contentCtrl = element.controller('mdContent');\n\t    if (!contentCtrl) return;\n\t\n\t    if (browserStickySupport) {\n\t      element.css({\n\t        position: browserStickySupport,\n\t        top: 0,\n\t        'z-index': 2\n\t      });\n\t    } else {\n\t      var $$sticky = contentCtrl.$element.data('$$sticky');\n\t      if (!$$sticky) {\n\t        $$sticky = setupSticky(contentCtrl);\n\t        contentCtrl.$element.data('$$sticky', $$sticky);\n\t      }\n\t\n\t      var deregister = $$sticky.add(element, stickyClone || element.clone());\n\t      scope.$on('$destroy', deregister);\n\t    }\n\t  };\n\t\n\t  function setupSticky(contentCtrl) {\n\t    var contentEl = contentCtrl.$element;\n\t\n\t    // Refresh elements is very expensive, so we use the debounced\n\t    // version when possible.\n\t    var debouncedRefreshElements = $$rAF.throttle(refreshElements);\n\t\n\t    // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,\n\t    // more reliable than `scroll` on android.\n\t    setupAugmentedScrollEvents(contentEl);\n\t    contentEl.on('$scrollstart', debouncedRefreshElements);\n\t    contentEl.on('$scroll', onScroll);\n\t\n\t    var self;\n\t    return self = {\n\t      prev: null,\n\t      current: null, //the currently stickied item\n\t      next: null,\n\t      items: [],\n\t      add: add,\n\t      refreshElements: refreshElements\n\t    };\n\t\n\t    /***************\n\t     * Public\n\t     ***************/\n\t    // Add an element and its sticky clone to this content's sticky collection\n\t    function add(element, stickyClone) {\n\t      stickyClone.addClass('md-sticky-clone');\n\t\n\t      var item = {\n\t        element: element,\n\t        clone: stickyClone\n\t      };\n\t      self.items.push(item);\n\t\n\t      $mdUtil.nextTick(function() {\n\t        contentEl.prepend(item.clone);\n\t      });\n\t\n\t      debouncedRefreshElements();\n\t\n\t      return function remove() {\n\t        self.items.forEach(function(item, index) {\n\t          if (item.element[0] === element[0]) {\n\t            self.items.splice(index, 1);\n\t            item.clone.remove();\n\t          }\n\t        });\n\t        debouncedRefreshElements();\n\t      };\n\t    }\n\t\n\t    function refreshElements() {\n\t      // Sort our collection of elements by their current position in the DOM.\n\t      // We need to do this because our elements' order of being added may not\n\t      // be the same as their order of display.\n\t      self.items.forEach(refreshPosition);\n\t      self.items = self.items.sort(function(a, b) {\n\t        return a.top < b.top ? -1 : 1;\n\t      });\n\t\n\t      // Find which item in the list should be active, \n\t      // based upon the content's current scroll position\n\t      var item;\n\t      var currentScrollTop = contentEl.prop('scrollTop');\n\t      for (var i = self.items.length - 1; i >= 0; i--) {\n\t        if (currentScrollTop > self.items[i].top) {\n\t          item = self.items[i];\n\t          break;\n\t        }\n\t      }\n\t      setCurrentItem(item);\n\t    }\n\t\n\t    /***************\n\t     * Private\n\t     ***************/\n\t\n\t    // Find the `top` of an item relative to the content element,\n\t    // and also the height.\n\t    function refreshPosition(item) {\n\t      // Find the top of an item by adding to the offsetHeight until we reach the \n\t      // content element.\n\t      var current = item.element[0];\n\t      item.top = 0;\n\t      item.left = 0;\n\t      while (current && current !== contentEl[0]) {\n\t        item.top += current.offsetTop;\n\t        item.left += current.offsetLeft;\n\t        current = current.offsetParent;\n\t      }\n\t      item.height = item.element.prop('offsetHeight');\n\t      item.clone.css('margin-left', item.left + 'px');\n\t      if ($mdUtil.floatingScrollbars()) {\n\t        item.clone.css('margin-right', '0');\n\t      }\n\t    }\n\t\n\t    // As we scroll, push in and select the correct sticky element.\n\t    function onScroll() {\n\t      var scrollTop = contentEl.prop('scrollTop');\n\t      var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);\n\t\n\t      // Store the previous scroll so we know which direction we are scrolling\n\t      onScroll.prevScrollTop = scrollTop;\n\t\n\t      //\n\t      // AT TOP (not scrolling)\n\t      //\n\t      if (scrollTop === 0) {\n\t        // If we're at the top, just clear the current item and return\n\t        setCurrentItem(null);\n\t        return;\n\t      }\n\t\n\t      //\n\t      // SCROLLING DOWN (going towards the next item)\n\t      //\n\t      if (isScrollingDown) {\n\t\n\t        // If we've scrolled down past the next item's position, sticky it and return\n\t        if (self.next && self.next.top <= scrollTop) {\n\t          setCurrentItem(self.next);\n\t          return;\n\t        }\n\t\n\t        // If the next item is close to the current one, push the current one up out of the way\n\t        if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {\n\t          translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));\n\t          return;\n\t        }\n\t      }\n\t\n\t      //\n\t      // SCROLLING UP (not at the top & not scrolling down; must be scrolling up)\n\t      //\n\t      if (!isScrollingDown) {\n\t\n\t        // If we've scrolled up past the previous item's position, sticky it and return\n\t        if (self.current && self.prev && scrollTop < self.current.top) {\n\t          setCurrentItem(self.prev);\n\t          return;\n\t        }\n\t\n\t        // If the next item is close to the current one, pull the current one down into view\n\t        if (self.next && self.current && (scrollTop >= (self.next.top - self.current.height))) {\n\t          translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));\n\t          return;\n\t        }\n\t      }\n\t\n\t      //\n\t      // Otherwise, just move the current item to the proper place (scrolling up or down)\n\t      //\n\t      if (self.current) {\n\t        translate(self.current, scrollTop);\n\t      }\n\t    }\n\t\n\t    function setCurrentItem(item) {\n\t      if (self.current === item) return;\n\t      // Deactivate currently active item\n\t      if (self.current) {\n\t        translate(self.current, null);\n\t        setStickyState(self.current, null);\n\t      }\n\t\n\t      // Activate new item if given\n\t      if (item) {\n\t        setStickyState(item, 'active');\n\t      }\n\t\n\t      self.current = item;\n\t      var index = self.items.indexOf(item);\n\t      // If index === -1, index + 1 = 0. It works out.\n\t      self.next = self.items[index + 1];\n\t      self.prev = self.items[index - 1];\n\t      setStickyState(self.next, 'next');\n\t      setStickyState(self.prev, 'prev');\n\t    }\n\t\n\t    function setStickyState(item, state) {\n\t      if (!item || item.state === state) return;\n\t      if (item.state) {\n\t        item.clone.attr('sticky-prev-state', item.state);\n\t        item.element.attr('sticky-prev-state', item.state);\n\t      }\n\t      item.clone.attr('sticky-state', state);\n\t      item.element.attr('sticky-state', state);\n\t      item.state = state;\n\t    }\n\t\n\t    function translate(item, amount) {\n\t      if (!item) return;\n\t      if (amount === null || amount === undefined) {\n\t        if (item.translateY) {\n\t          item.translateY = null;\n\t          item.clone.css($mdConstant.CSS.TRANSFORM, '');\n\t        }\n\t      } else {\n\t        item.translateY = amount;\n\t        item.clone.css(\n\t          $mdConstant.CSS.TRANSFORM,\n\t          'translate3d(' + item.left + 'px,' + amount + 'px,0)'\n\t        );\n\t      }\n\t    }\n\t  }\n\t\n\t  // Function to check for browser sticky support\n\t  function checkStickySupport($el) {\n\t    var stickyProp;\n\t    var testEl = angular.element('<div>');\n\t    $document[0].body.appendChild(testEl[0]);\n\t\n\t    var stickyProps = ['sticky', '-webkit-sticky'];\n\t    for (var i = 0; i < stickyProps.length; ++i) {\n\t      testEl.css({position: stickyProps[i], top: 0, 'z-index': 2});\n\t      if (testEl.css('position') == stickyProps[i]) {\n\t        stickyProp = stickyProps[i];\n\t        break;\n\t      }\n\t    }\n\t    testEl.remove();\n\t    return stickyProp;\n\t  }\n\t\n\t  // Android 4.4 don't accurately give scroll events.\n\t  // To fix this problem, we setup a fake scroll event. We say:\n\t  // > If a scroll or touchmove event has happened in the last DELAY milliseconds, \n\t  //   then send a `$scroll` event every animationFrame.\n\t  // Additionally, we add $scrollstart and $scrollend events.\n\t  function setupAugmentedScrollEvents(element) {\n\t    var SCROLL_END_DELAY = 200;\n\t    var isScrolling;\n\t    var lastScrollTime;\n\t    element.on('scroll touchmove', function() {\n\t      if (!isScrolling) {\n\t        isScrolling = true;\n\t        $$rAF.throttle(loopScrollEvent);\n\t        element.triggerHandler('$scrollstart');\n\t      }\n\t      element.triggerHandler('$scroll');\n\t      lastScrollTime = +$mdUtil.now();\n\t    });\n\t\n\t    function loopScrollEvent() {\n\t      if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {\n\t        isScrolling = false;\n\t        element.triggerHandler('$scrollend');\n\t      } else {\n\t        element.triggerHandler('$scroll');\n\t        $$rAF.throttle(loopScrollEvent);\n\t      }\n\t    }\n\t  }\n\t\n\t}\n\tMdSticky.$inject = [\"$document\", \"$mdConstant\", \"$$rAF\", \"$mdUtil\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.subheader\n\t * @description\n\t * SubHeader module\n\t *\n\t *  Subheaders are special list tiles that delineate distinct sections of a\n\t *  list or grid list and are typically related to the current filtering or\n\t *  sorting criteria. Subheader tiles are either displayed inline with tiles or\n\t *  can be associated with content, for example, in an adjacent column.\n\t *\n\t *  Upon scrolling, subheaders remain pinned to the top of the screen and remain\n\t *  pinned until pushed on or off screen by the next subheader. @see [Material\n\t *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)\n\t *\n\t *  > To improve the visual grouping of content, use the system color for your subheaders.\n\t *\n\t */\n\tangular\n\t  .module('material.components.subheader', [\n\t    'material.core',\n\t    'material.components.sticky'\n\t  ])\n\t  .directive('mdSubheader', MdSubheaderDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdSubheader\n\t * @module material.components.subheader\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.\n\t * You can make it not sticky by applying the `md-no-sticky` class to the subheader.\n\t *\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-subheader>Online Friends</md-subheader>\n\t * </hljs>\n\t */\n\t\n\tfunction MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {\n\t  return {\n\t    restrict: 'E',\n\t    replace: true,\n\t    transclude: true,\n\t    template: (\n\t    '<div class=\"md-subheader\">' +\n\t    '  <div class=\"md-subheader-inner\">' +\n\t    '    <span class=\"md-subheader-content\"></span>' +\n\t    '  </div>' +\n\t    '</div>'\n\t    ),\n\t    link: function postLink(scope, element, attr, controllers, transclude) {\n\t      $mdTheming(element);\n\t      var outerHTML = element[0].outerHTML;\n\t\n\t      function getContent(el) {\n\t        return angular.element(el[0].querySelector('.md-subheader-content'));\n\t      }\n\t\n\t      // Transclude the user-given contents of the subheader\n\t      // the conventional way.\n\t      transclude(scope, function(clone) {\n\t        getContent(element).append(clone);\n\t      });\n\t\n\t      // Create another clone, that uses the outer and inner contents\n\t      // of the element, that will be 'stickied' as the user scrolls.\n\t      if (!element.hasClass('md-no-sticky')) {\n\t        transclude(scope, function(clone) {\n\t          // If the user adds an ng-if or ng-repeat directly to the md-subheader element, the\n\t          // compiled clone below will only be a comment tag (since they replace their elements with\n\t          // a comment) which cannot be properly passed to the $mdSticky; so we wrap it in our own\n\t          // DIV to ensure we have something $mdSticky can use\n\t          var wrapperHtml = '<div class=\"md-subheader-wrapper\">' + outerHTML + '</div>';\n\t          var stickyClone = $compile(wrapperHtml)(scope);\n\t\n\t          // Append the sticky\n\t          $mdSticky(scope, element, stickyClone);\n\t\n\t          // Delay initialization until after any `ng-if`/`ng-repeat`/etc has finished before\n\t          // attempting to create the clone\n\t          $mdUtil.nextTick(function() {\n\t            getContent(stickyClone).append(clone);\n\t          });\n\t        });\n\t      }\n\t    }\n\t  }\n\t}\n\tMdSubheaderDirective.$inject = [\"$mdSticky\", \"$compile\", \"$mdTheming\", \"$mdUtil\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.swipe\n\t * @description Swipe module!\n\t */\n\t/**\n\t * @ngdoc directive\n\t * @module material.components.swipe\n\t * @name mdSwipeLeft\n\t *\n\t * @restrict A\n\t *\n\t * @description\n\t * The md-swipe-left directives allows you to specify custom behavior when an element is swiped\n\t * left.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <div md-swipe-left=\"onSwipeLeft()\">Swipe me left!</div>\n\t * </hljs>\n\t */\n\t/**\n\t * @ngdoc directive\n\t * @module material.components.swipe\n\t * @name mdSwipeRight\n\t *\n\t * @restrict A\n\t *\n\t * @description\n\t * The md-swipe-right directives allows you to specify custom behavior when an element is swiped\n\t * right.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <div md-swipe-right=\"onSwipeRight()\">Swipe me right!</div>\n\t * </hljs>\n\t */\n\t\n\tangular.module('material.components.swipe', ['material.core'])\n\t    .directive('mdSwipeLeft', getDirective('SwipeLeft'))\n\t    .directive('mdSwipeRight', getDirective('SwipeRight'));\n\t\n\tfunction getDirective(name) {\n\t  var directiveName = 'md' + name;\n\t  var eventName = '$md.' + name.toLowerCase();\n\t\n\t    DirectiveFactory.$inject = [\"$parse\"];\n\t  return DirectiveFactory;\n\t\n\t  /* @ngInject */\n\t  function DirectiveFactory($parse) {\n\t      return { restrict: 'A', link: postLink };\n\t      function postLink(scope, element, attr) {\n\t        var fn = $parse(attr[directiveName]);\n\t        element.on(eventName, function(ev) {\n\t          scope.$apply(function() { fn(scope, { $event: ev }); });\n\t        });\n\t      }\n\t    }\n\t}\n\t\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @private\n\t * @ngdoc module\n\t * @name material.components.switch\n\t */\n\t\n\tangular.module('material.components.switch', [\n\t  'material.core',\n\t  'material.components.checkbox'\n\t])\n\t  .directive('mdSwitch', MdSwitch);\n\t\n\t/**\n\t * @private\n\t * @ngdoc directive\n\t * @module material.components.switch\n\t * @name mdSwitch\n\t * @restrict E\n\t *\n\t * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n\t *\n\t * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n\t * the switch is in the accent color by default. The primary color palette may be used with\n\t * the `md-primary` class.\n\t *\n\t * @param {string} ng-model Assignable angular expression to data-bind to.\n\t * @param {string=} name Property name of the form under which the control is published.\n\t * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n\t * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n\t * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n\t * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.\n\t * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-switch ng-model=\"isActive\" aria-label=\"Finished?\">\n\t *   Finished ?\n\t * </md-switch>\n\t *\n\t * <md-switch md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n\t *   No Ink Effects\n\t * </md-switch>\n\t *\n\t * <md-switch ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n\t *   Disabled\n\t * </md-switch>\n\t *\n\t * </hljs>\n\t */\n\tfunction MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {\n\t  var checkboxDirective = mdCheckboxDirective[0];\n\t\n\t  return {\n\t    restrict: 'E',\n\t    priority: 210, // Run before ngAria\n\t    transclude: true,\n\t    template:\n\t      '<div class=\"md-container\">' +\n\t        '<div class=\"md-bar\"></div>' +\n\t        '<div class=\"md-thumb-container\">' +\n\t          '<div class=\"md-thumb\" md-ink-ripple md-ink-ripple-checkbox></div>' +\n\t        '</div>'+\n\t      '</div>' +\n\t      '<div ng-transclude class=\"md-label\"></div>',\n\t    require: '?ngModel',\n\t    compile: mdSwitchCompile\n\t  };\n\t\n\t  function mdSwitchCompile(element, attr) {\n\t    var checkboxLink = checkboxDirective.compile(element, attr);\n\t    // No transition on initial load.\n\t    element.addClass('md-dragging');\n\t\n\t    return function (scope, element, attr, ngModel) {\n\t      ngModel = ngModel || $mdUtil.fakeNgModel();\n\t\n\t      var disabledGetter = null;\n\t      if (attr.disabled != null) {\n\t        disabledGetter = function() { return true; };\n\t      } else if (attr.ngDisabled) {\n\t        disabledGetter = $parse(attr.ngDisabled);\n\t      }\n\t\n\t      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));\n\t      var switchContainer = angular.element(element[0].querySelector('.md-container'));\n\t\n\t      // no transition on initial load\n\t      $$rAF(function() {\n\t        element.removeClass('md-dragging');\n\t      });\n\t\n\t      checkboxLink(scope, element, attr, ngModel);\n\t\n\t      if (disabledGetter) {\n\t        scope.$watch(disabledGetter, function(isDisabled) {\n\t          element.attr('tabindex', isDisabled ? -1 : 0);\n\t        });\n\t      }\n\t\n\t      // These events are triggered by setup drag\n\t      $mdGesture.register(switchContainer, 'drag');\n\t      switchContainer\n\t        .on('$md.dragstart', onDragStart)\n\t        .on('$md.drag', onDrag)\n\t        .on('$md.dragend', onDragEnd);\n\t\n\t      var drag;\n\t      function onDragStart(ev) {\n\t        // Don't go if the switch is disabled.\n\t        if (disabledGetter && disabledGetter(scope)) return;\n\t        ev.stopPropagation();\n\t\n\t        element.addClass('md-dragging');\n\t        drag = {width: thumbContainer.prop('offsetWidth')};\n\t        element.removeClass('transition');\n\t      }\n\t\n\t      function onDrag(ev) {\n\t        if (!drag) return;\n\t        ev.stopPropagation();\n\t        ev.srcEvent && ev.srcEvent.preventDefault();\n\t\n\t        var percent = ev.pointer.distanceX / drag.width;\n\t\n\t        //if checked, start from right. else, start from left\n\t        var translate = ngModel.$viewValue ?  1 + percent : percent;\n\t        // Make sure the switch stays inside its bounds, 0-1%\n\t        translate = Math.max(0, Math.min(1, translate));\n\t\n\t        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');\n\t        drag.translate = translate;\n\t      }\n\t\n\t      function onDragEnd(ev) {\n\t        if (!drag) return;\n\t        ev.stopPropagation();\n\t\n\t        element.removeClass('md-dragging');\n\t        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');\n\t\n\t        // We changed if there is no distance (this is a click a click),\n\t        // or if the drag distance is >50% of the total.\n\t        var isChanged = ngModel.$viewValue ? drag.translate > 0.5 : drag.translate < 0.5;\n\t        if (isChanged) {\n\t          applyModelValue(!ngModel.$viewValue);\n\t        }\n\t        drag = null;\n\t      }\n\t\n\t      function applyModelValue(newValue) {\n\t        scope.$apply(function() {\n\t          ngModel.$setViewValue(newValue);\n\t          ngModel.$render();\n\t        });\n\t      }\n\t\n\t    };\n\t  }\n\t\n\t\n\t}\n\tMdSwitch.$inject = [\"mdCheckboxDirective\", \"$mdUtil\", \"$mdConstant\", \"$parse\", \"$$rAF\", \"$mdGesture\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.toast\n\t * @description\n\t * Toast\n\t */\n\tangular.module('material.components.toast', [\n\t  'material.core',\n\t  'material.components.button'\n\t])\n\t  .directive('mdToast', MdToastDirective)\n\t  .provider('$mdToast', MdToastProvider);\n\t\n\t/* @ngInject */\n\tfunction MdToastDirective($mdToast) {\n\t  return {\n\t    restrict: 'E',\n\t    link: function postLink(scope, element, attr) {\n\t      // When navigation force destroys an interimElement, then\n\t      // listen and $destroy() that interim instance...\n\t      scope.$on('$destroy', function() {\n\t        $mdToast.destroy();\n\t      });\n\t    }\n\t  };\n\t}\n\tMdToastDirective.$inject = [\"$mdToast\"];\n\t\n\t/**\n\t * @ngdoc service\n\t * @name $mdToast\n\t * @module material.components.toast\n\t *\n\t * @description\n\t * `$mdToast` is a service to build a toast notification on any position\n\t * on the screen with an optional duration, and provides a simple promise API.\n\t *\n\t *\n\t * ## Restrictions on custom toasts\n\t * - The toast's template must have an outer `<md-toast>` element.\n\t * - For a toast action, use element with class `md-action`.\n\t * - Add the class `md-capsule` for curved corners.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <div ng-controller=\"MyController\">\n\t *   <md-button ng-click=\"openToast()\">\n\t *     Open a Toast!\n\t *   </md-button>\n\t * </div>\n\t * </hljs>\n\t *\n\t * <hljs lang=\"js\">\n\t * var app = angular.module('app', ['ngMaterial']);\n\t * app.controller('MyController', function($scope, $mdToast) {\n\t *   $scope.openToast = function($event) {\n\t *     $mdToast.show($mdToast.simple().content('Hello!'));\n\t *     // Could also do $mdToast.showSimple('Hello');\n\t *   };\n\t * });\n\t * </hljs>\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdToast#showSimple\n\t * \n\t * @description\n\t * Convenience method which builds and shows a simple toast.\n\t *\n\t * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n\t * rejected with `$mdToast.cancel()`.\n\t *\n\t */\n\t\n\t /**\n\t * @ngdoc method\n\t * @name $mdToast#simple\n\t *\n\t * @description\n\t * Builds a preconfigured toast.\n\t *\n\t * @returns {obj} a `$mdToastPreset` with the chainable configuration methods:\n\t *\n\t * - $mdToastPreset#content(string) - sets toast content to string\n\t * - $mdToastPreset#action(string) - adds an action button. If clicked the promise (returned from `show()`) will resolve\n\t *   with value 'ok'; otherwise it promise is resolved with 'true' after a hideDelay timeout.\n\t * - $mdToastPreset#highlightAction(boolean) - sets action button to be highlighted\n\t * - $mdToastPreset#capsule(boolean) - adds 'md-capsule' class to the toast (curved corners)\n\t * - $mdToastPreset#theme(string) - sets the theme on the toast to theme (default is `$mdThemingProvider`'s default theme)\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdToast#updateContent\n\t * \n\t * @description\n\t * Updates the content of an existing toast. Useful for updating things like counts, etc.\n\t *\n\t */\n\t\n\t /**\n\t * @ngdoc method\n\t * @name $mdToast#build\n\t *\n\t * @description\n\t * Creates a custom `$mdToastPreset` that you can configure.\n\t *\n\t * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).\n\t */\n\t\n\t /**\n\t * @ngdoc method\n\t * @name $mdToast#show\n\t *\n\t * @description Shows the toast.\n\t *\n\t * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`\n\t * and `build()`, or an options object with the following properties:\n\t *\n\t *   - `templateUrl` - `{string=}`: The url of an html template file that will\n\t *     be used as the content of the toast. Restrictions: the template must\n\t *     have an outer `md-toast` element.\n\t *   - `template` - `{string=}`: Same as templateUrl, except this is an actual\n\t *     template string.\n\t *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.\n\t *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.\n\t *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n\t *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay\n\t *     active before automatically closing.  Set to 0 or false to have the toast stay open until\n\t *     closed manually. Default: 3000.\n\t *   - `position` - `{string=}`: Where to place the toast. Available: any combination\n\t *     of 'bottom', 'left', 'top', 'right', 'fit'. Default: 'bottom left'.\n\t *   - `controller` - `{string=}`: The controller to associate with this toast.\n\t *     The controller will be injected the local `$mdToast.hide( )`, which is a function\n\t *     used to hide the toast.\n\t *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will\n\t *     be used as names of values to inject into the controller. For example,\n\t *     `locals: {three: 3}` would inject `three` into the controller with the value\n\t *     of 3.\n\t *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.\n\t *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values\n\t *     and the toast will not open until the promises resolve.\n\t *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n\t *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending\n\t *     to the root element of the application.\n\t *\n\t * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n\t * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean\n\t * value == 'true' or the value passed as an argument to `$mdToast.hide()`.\n\t * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdToast#hide\n\t *\n\t * @description\n\t * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.\n\t *\n\t * @param {*=} response An argument for the resolved promise.\n\t *\n\t * @returns {promise} a promise that is called when the existing element is removed from the DOM.\n\t * The promise is resolved with either a Boolean value == 'true' or the value passed as the\n\t * argument to `.hide()`.\n\t *\n\t */\n\t\n\t/**\n\t * @ngdoc method\n\t * @name $mdToast#cancel\n\t *\n\t * @description\n\t * Hide the existing toast and reject the promise returned from\n\t * `$mdToast.show()`.\n\t *\n\t * @param {*=} response An argument for the rejected promise.\n\t *\n\t * @returns {promise} a promise that is called when the existing element is removed from the DOM\n\t * The promise is resolved with a Boolean value == 'false'.\n\t *\n\t */\n\t\n\tfunction MdToastProvider($$interimElementProvider) {\n\t  // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).\n\t  var ACTION_RESOLVE = 'ok';\n\t\n\t  var activeToastContent;\n\t  var $mdToast = $$interimElementProvider('$mdToast')\n\t    .setDefaults({\n\t      methods: ['position', 'hideDelay', 'capsule', 'parent' ],\n\t      options: toastDefaultOptions\n\t    })\n\t    .addPreset('simple', {\n\t      argOption: 'content',\n\t      methods: ['content', 'action', 'highlightAction', 'theme', 'parent'],\n\t      options: /* @ngInject */ [\"$mdToast\", \"$mdTheming\", function($mdToast, $mdTheming) {\n\t        var opts = {\n\t          template: [\n\t            '<md-toast md-theme=\"{{ toast.theme }}\" ng-class=\"{\\'md-capsule\\': toast.capsule}\">',\n\t              '<span flex>{{ toast.content }}</span>',\n\t              '<md-button class=\"md-action\" ng-if=\"toast.action\" ng-click=\"toast.resolve()\" ng-class=\"{\\'md-highlight\\': toast.highlightAction}\">',\n\t                '{{ toast.action }}',\n\t              '</md-button>',\n\t            '</md-toast>'\n\t          ].join(''),\n\t          controller: /* @ngInject */ [\"$scope\", function mdToastCtrl($scope) {\n\t            var self = this;\n\t            $scope.$watch(function() { return activeToastContent; }, function() {\n\t              self.content = activeToastContent;\n\t            });\n\t            this.resolve = function() {\n\t              $mdToast.hide( ACTION_RESOLVE );\n\t            };\n\t          }],\n\t          theme: $mdTheming.defaultTheme(),\n\t          controllerAs: 'toast',\n\t          bindToController: true\n\t        };\n\t        return opts;\n\t      }]\n\t    })\n\t    .addMethod('updateContent', function(newContent) {\n\t      activeToastContent = newContent;\n\t    });\n\t\n\t  toastDefaultOptions.$inject = [\"$animate\", \"$mdToast\", \"$mdUtil\"];\n\t    return $mdToast;\n\t\n\t  /* @ngInject */\n\t  function toastDefaultOptions($animate, $mdToast, $mdUtil) {\n\t    var SWIPE_EVENTS = '$md.swipeleft $md.swiperight';\n\t    return {\n\t      onShow: onShow,\n\t      onRemove: onRemove,\n\t      position: 'bottom left',\n\t      themable: true,\n\t      hideDelay: 3000\n\t    };\n\t\n\t    function onShow(scope, element, options) {\n\t      activeToastContent = options.content;\n\t\n\t      element = $mdUtil.extractElementByName(element, 'md-toast', true);\n\t      options.onSwipe = function(ev, gesture) {\n\t        //Add swipeleft/swiperight class to element so it can animate correctly\n\t        element.addClass('md-' + ev.type.replace('$md.',''));\n\t        $mdUtil.nextTick($mdToast.cancel);\n\t      };\n\t      options.openClass = toastOpenClass(options.position);\n\t\n\t\n\t      // 'top left' -> 'md-top md-left'\n\t      options.parent.addClass(options.openClass);\n\t      element.on(SWIPE_EVENTS, options.onSwipe);\n\t      element.addClass(options.position.split(' ').map(function(pos) {\n\t        return 'md-' + pos;\n\t      }).join(' '));\n\t\n\t      return $animate.enter(element, options.parent);\n\t    }\n\t\n\t    function onRemove(scope, element, options) {\n\t      element.off(SWIPE_EVENTS, options.onSwipe);\n\t      options.parent.removeClass(options.openClass);\n\t\n\t      return (options.$destroy == true) ? element.remove() : $animate.leave(element);\n\t    }\n\t\n\t    function toastOpenClass(position) {\n\t      return 'md-toast-open-' +\n\t        (position.indexOf('top') > -1 ? 'top' : 'bottom');\n\t    }\n\t  }\n\t\n\t}\n\tMdToastProvider.$inject = [\"$$interimElementProvider\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.tabs\n\t * @description\n\t *\n\t *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.\n\t *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.\n\t *\n\t *  Features include support for:\n\t *\n\t *  - static or dynamic tabs,\n\t *  - responsive designs,\n\t *  - accessibility support (ARIA),\n\t *  - tab pagination,\n\t *  - external or internal tab content,\n\t *  - focus indicators and arrow-key navigations,\n\t *  - programmatic lookup and access to tab controllers, and\n\t *  - dynamic transitions through different tab contents.\n\t *\n\t */\n\t/*\n\t * @see js folder for tabs implementation\n\t */\n\tangular.module('material.components.tabs', [\n\t  'material.core',\n\t  'material.components.icon'\n\t]);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.toolbar\n\t */\n\tangular.module('material.components.toolbar', [\n\t  'material.core',\n\t  'material.components.content'\n\t])\n\t  .directive('mdToolbar', mdToolbarDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdToolbar\n\t * @module material.components.toolbar\n\t * @restrict E\n\t * @description\n\t * `md-toolbar` is used to place a toolbar in your app.\n\t *\n\t * Toolbars are usually used above a content area to display the title of the\n\t * current page, and show relevant action buttons for that page.\n\t *\n\t * You can change the height of the toolbar by adding either the\n\t * `md-medium-tall` or `md-tall` class to the toolbar.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <div layout=\"column\" layout-fill>\n\t *   <md-toolbar>\n\t *\n\t *     <div class=\"md-toolbar-tools\">\n\t *       <span>My App's Title</span>\n\t *\n\t *       <!-- fill up the space between left and right area -->\n\t *       <span flex></span>\n\t *\n\t *       <md-button>\n\t *         Right Bar Button\n\t *       </md-button>\n\t *     </div>\n\t *\n\t *   </md-toolbar>\n\t *   <md-content>\n\t *     Hello!\n\t *   </md-content>\n\t * </div>\n\t * </hljs>\n\t *\n\t * @param {boolean=} md-scroll-shrink Whether the header should shrink away as\n\t * the user scrolls down, and reveal itself as the user scrolls up.\n\t *\n\t * _**Note (1):** for scrollShrink to work, the toolbar must be a sibling of a\n\t * `md-content` element, placed before it. See the scroll shrink demo._\n\t *\n\t * _**Note (2):** The `md-scroll-shrink` attribute is only parsed on component\n\t * initialization, it does not watch for scope changes._\n\t *\n\t *\n\t * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's\n\t * shrinking by. For example, if 0.25 is given then the toolbar will shrink\n\t * at one fourth the rate at which the user scrolls down. Default 0.5.\n\t */\n\t\n\tfunction mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {\n\t  var translateY = angular.bind(null, $mdUtil.supplant, 'translate3d(0,{0}px,0)');\n\t\n\t  return {\n\t    restrict: 'E',\n\t\n\t    link: function(scope, element, attr) {\n\t\n\t      $mdTheming(element);\n\t\n\t      if (angular.isDefined(attr.mdScrollShrink)) {\n\t        setupScrollShrink();\n\t      }\n\t\n\t      function setupScrollShrink() {\n\t\n\t        var toolbarHeight;\n\t        var contentElement;\n\t        var disableScrollShrink = angular.noop;\n\t\n\t        // Current \"y\" position of scroll\n\t        // Store the last scroll top position\n\t        var y = 0;\n\t        var prevScrollTop = 0;\n\t        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;\n\t\n\t        var debouncedContentScroll = $$rAF.throttle(onContentScroll);\n\t        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);\n\t\n\t        // Wait for $mdContentLoaded event from mdContent directive.\n\t        // If the mdContent element is a sibling of our toolbar, hook it up\n\t        // to scroll events.\n\t\n\t        scope.$on('$mdContentLoaded', onMdContentLoad);\n\t\n\t        // If the toolbar is used inside an ng-if statement, we may miss the\n\t        // $mdContentLoaded event, so we attempt to fake it if we have a\n\t        // md-content close enough.\n\t\n\t        attr.$observe('mdScrollShrink', onChangeScrollShrink);\n\t\n\t        // If the scope is destroyed (which could happen with ng-if), make sure\n\t        // to disable scroll shrinking again\n\t\n\t        scope.$on('$destroy', disableScrollShrink);\n\t\n\t        /**\n\t         *\n\t         */\n\t        function onChangeScrollShrink(shrinkWithScroll) {\n\t          var closestContent = element.parent().find('md-content');\n\t\n\t          // If we have a content element, fake the call; this might still fail\n\t          // if the content element isn't a sibling of the toolbar\n\t\n\t          if (!contentElement && closestContent.length) {\n\t            onMdContentLoad(null, closestContent);\n\t          }\n\t\n\t          // Evaluate the expression\n\t          shrinkWithScroll = scope.$eval(shrinkWithScroll);\n\t\n\t          // Disable only if the attribute's expression evaluates to false\n\t          if (shrinkWithScroll === false) {\n\t            disableScrollShrink();\n\t          } else {\n\t            disableScrollShrink = enableScrollShrink();\n\t          }\n\t        }\n\t\n\t        /**\n\t         *\n\t         */\n\t        function onMdContentLoad($event, newContentEl) {\n\t          // Toolbar and content must be siblings\n\t          if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {\n\t            // unhook old content event listener if exists\n\t            if (contentElement) {\n\t              contentElement.off('scroll', debouncedContentScroll);\n\t            }\n\t\n\t            contentElement = newContentEl;\n\t            disableScrollShrink = enableScrollShrink();\n\t          }\n\t        }\n\t\n\t        /**\n\t         *\n\t         */\n\t        function onContentScroll(e) {\n\t          var scrollTop = e ? e.target.scrollTop : prevScrollTop;\n\t\n\t          debouncedUpdateHeight();\n\t\n\t          y = Math.min(\n\t            toolbarHeight / shrinkSpeedFactor,\n\t            Math.max(0, y + scrollTop - prevScrollTop)\n\t          );\n\t\n\t          element.css($mdConstant.CSS.TRANSFORM, translateY([-y * shrinkSpeedFactor]));\n\t          contentElement.css($mdConstant.CSS.TRANSFORM, translateY([(toolbarHeight - y) * shrinkSpeedFactor]));\n\t\n\t          prevScrollTop = scrollTop;\n\t\n\t          $mdUtil.nextTick(function() {\n\t            var hasWhiteFrame = element.hasClass('md-whiteframe-z1');\n\t\n\t            if (hasWhiteFrame && !y) {\n\t              $animate.removeClass(element, 'md-whiteframe-z1');\n\t            } else if (!hasWhiteFrame && y) {\n\t              $animate.addClass(element, 'md-whiteframe-z1');\n\t            }\n\t          });\n\t\n\t        }\n\t\n\t        /**\n\t         *\n\t         */\n\t        function enableScrollShrink() {\n\t          if (!contentElement)     return angular.noop;           // no md-content\n\t\n\t          contentElement.on('scroll', debouncedContentScroll);\n\t          contentElement.attr('scroll-shrink', 'true');\n\t\n\t          $$rAF(updateToolbarHeight);\n\t\n\t          return function disableScrollShrink() {\n\t            contentElement.off('scroll', debouncedContentScroll);\n\t            contentElement.attr('scroll-shrink', 'false');\n\t\n\t            $$rAF(updateToolbarHeight);\n\t          }\n\t        }\n\t\n\t        /**\n\t         *\n\t         */\n\t        function updateToolbarHeight() {\n\t          toolbarHeight = element.prop('offsetHeight');\n\t          // Add a negative margin-top the size of the toolbar to the content el.\n\t          // The content will start transformed down the toolbarHeight amount,\n\t          // so everything looks normal.\n\t          //\n\t          // As the user scrolls down, the content will be transformed up slowly\n\t          // to put the content underneath where the toolbar was.\n\t          var margin = (-toolbarHeight * shrinkSpeedFactor) + 'px';\n\t\n\t          contentElement.css({\n\t            \"margin-top\": margin,\n\t            \"margin-bottom\": margin\n\t          });\n\t\n\t          onContentScroll();\n\t        }\n\t\n\t      }\n\t\n\t    }\n\t  };\n\t\n\t}\n\tmdToolbarDirective.$inject = [\"$$rAF\", \"$mdConstant\", \"$mdUtil\", \"$mdTheming\", \"$animate\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.tooltip\n\t */\n\tangular\n\t    .module('material.components.tooltip', [ 'material.core' ])\n\t    .directive('mdTooltip', MdTooltipDirective);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdTooltip\n\t * @module material.components.tooltip\n\t * @description\n\t * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).\n\t *\n\t * Place a `<md-tooltip>` as a child of the element it describes.\n\t *\n\t * A tooltip will activate when the user focuses, hovers over, or touches the parent.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-button class=\"md-fab md-accent\" aria-label=\"Play\">\n\t *   <md-tooltip>\n\t *     Play Music\n\t *   </md-tooltip>\n\t *   <md-icon icon=\"img/icons/ic_play_arrow_24px.svg\"></md-icon>\n\t * </md-button>\n\t * </hljs>\n\t *\n\t * @param {expression=} md-visible Boolean bound to whether the tooltip is\n\t * currently visible.\n\t * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 300ms.\n\t * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.\n\t * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus\n\t */\n\tfunction MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement,\n\t                            $animate, $q) {\n\t\n\t  var TOOLTIP_SHOW_DELAY = 300;\n\t  var TOOLTIP_WINDOW_EDGE_SPACE = 8;\n\t\n\t  return {\n\t    restrict: 'E',\n\t    transclude: true,\n\t    priority:210, // Before ngAria\n\t    template: '<div class=\"md-background\"></div>' +\n\t              '<div class=\"md-content\" ng-transclude></div>',\n\t    scope: {\n\t      visible: '=?mdVisible',\n\t      delay: '=?mdDelay',\n\t      autohide: '=?mdAutohide'\n\t    },\n\t    link: postLink\n\t  };\n\t\n\t  function postLink(scope, element, attr) {\n\t\n\t    $mdTheming(element);\n\t\n\t    var parent        = getParentWithPointerEvents(),\n\t        background    = angular.element(element[0].getElementsByClassName('md-background')[0]),\n\t        content       = angular.element(element[0].getElementsByClassName('md-content')[0]),\n\t        direction     = attr.mdDirection,\n\t        current       = getNearestContentElement(),\n\t        tooltipParent = angular.element(current || document.body),\n\t        debouncedOnResize = $$rAF.throttle(function () { if (scope.visible) positionTooltip(); });\n\t\n\t    // Initialize element\n\t\n\t    setDefaults();\n\t    manipulateElement();\n\t    bindEvents();\n\t    configureWatchers();\n\t    addAriaLabel();\n\t\n\t\n\t    function setDefaults () {\n\t      if (!angular.isDefined(attr.mdDelay)) scope.delay = TOOLTIP_SHOW_DELAY;\n\t    }\n\t\n\t    function configureWatchers () {\n\t      scope.$on('$destroy', function() {\n\t        scope.visible = false;\n\t        element.remove();\n\t        angular.element($window).off('resize', debouncedOnResize);\n\t      });\n\t      scope.$watch('visible', function (isVisible) {\n\t        if (isVisible) showTooltip();\n\t        else hideTooltip();\n\t      });\n\t    }\n\t\n\t    function addAriaLabel () {\n\t      if (!parent.attr('aria-label') && !parent.text().trim()) {\n\t        parent.attr('aria-label', element.text().trim());\n\t      }\n\t    }\n\t\n\t    function manipulateElement () {\n\t      element.detach();\n\t      element.attr('role', 'tooltip');\n\t    }\n\t\n\t    /**\n\t     * Scan up dom hierarchy for enabled parent;\n\t     */\n\t    function getParentWithPointerEvents () {\n\t      var parent = element.parent();\n\t\n\t      // jqLite might return a non-null, but still empty, parent; so check for parent and length\n\t      while (hasComputedStyleValue('pointer-events','none', parent)) {\n\t        parent = parent.parent();\n\t      }\n\t\n\t      return parent;\n\t    }\n\t\n\t     function getNearestContentElement () {\n\t       var current = element.parent()[0];\n\t       // Look for the nearest parent md-content, stopping at the rootElement.\n\t       while (current && current !== $rootElement[0] && current !== document.body) {\n\t         current = current.parentNode;\n\t       }\n\t       return current;\n\t     }\n\t\n\t\n\t    function hasComputedStyleValue(key, value, target) {\n\t      var hasValue = false;\n\t\n\t      if ( target && target.length  ) {\n\t        key    = attr.$normalize(key);\n\t        target = target[0] || element[0];\n\t\n\t        var computedStyles = $window.getComputedStyle(target);\n\t        hasValue = angular.isDefined(computedStyles[key]) && (computedStyles[key] == value);\n\t      }\n\t\n\t      return hasValue;\n\t    }\n\t\n\t    function bindEvents () {\n\t      var mouseActive = false;\n\t\n\t      var ngWindow = angular.element($window);\n\t\n\t      // Store whether the element was focused when the window loses focus.\n\t      var windowBlurHandler = function() {\n\t        elementFocusedOnWindowBlur = document.activeElement === parent[0];\n\t      };\n\t      var elementFocusedOnWindowBlur = false;\n\t      ngWindow.on('blur', windowBlurHandler);\n\t      scope.$on('$destroy', function() {\n\t        ngWindow.off('blur', windowBlurHandler);\n\t      });\n\t\n\t      var enterHandler = function(e) {\n\t        // Prevent the tooltip from showing when the window is receiving focus.\n\t        if (e.type === 'focus' && elementFocusedOnWindowBlur) {\n\t          elementFocusedOnWindowBlur = false;\n\t          return;\n\t        }\n\t        parent.on('blur mouseleave touchend touchcancel', leaveHandler );\n\t        setVisible(true);\n\t      };\n\t      var leaveHandler = function () {\n\t        var autohide = scope.hasOwnProperty('autohide') ? scope.autohide : attr.hasOwnProperty('mdAutohide');\n\t        if (autohide || mouseActive || ($document[0].activeElement !== parent[0]) ) {\n\t          parent.off('blur mouseleave touchend touchcancel', leaveHandler );\n\t          parent.triggerHandler(\"blur\");\n\t          setVisible(false);\n\t        }\n\t        mouseActive = false;\n\t      };\n\t\n\t      // to avoid `synthetic clicks` we listen to mousedown instead of `click`\n\t      parent.on('mousedown', function() { mouseActive = true; });\n\t      parent.on('focus mouseenter touchstart', enterHandler );\n\t\n\t\n\t      angular.element($window).on('resize', debouncedOnResize);\n\t    }\n\t\n\t    function setVisible (value) {\n\t      setVisible.value = !!value;\n\t      if (!setVisible.queued) {\n\t        if (value) {\n\t          setVisible.queued = true;\n\t          $timeout(function() {\n\t            scope.visible = setVisible.value;\n\t            setVisible.queued = false;\n\t          }, scope.delay);\n\t        } else {\n\t          $mdUtil.nextTick(function() { scope.visible = false; });\n\t        }\n\t      }\n\t    }\n\t\n\t    function showTooltip() {\n\t      // Insert the element before positioning it, so we can get the position\n\t      // and check if we should display it\n\t      tooltipParent.append(element);\n\t\n\t      // Check if we should display it or not.\n\t      // This handles hide-* and show-* along with any user defined css\n\t      if ( hasComputedStyleValue('display','none') ) {\n\t        scope.visible = false;\n\t        element.detach();\n\t        return;\n\t      }\n\t\n\t      positionTooltip();\n\t      angular.forEach([element, background, content], function (element) {\n\t        $animate.addClass(element, 'md-show');\n\t      });\n\t    }\n\t\n\t    function hideTooltip() {\n\t        var promises = [];\n\t        angular.forEach([element, background, content], function (it) {\n\t          if (it.parent() && it.hasClass('md-show')) {\n\t            promises.push($animate.removeClass(it, 'md-show'));\n\t          }\n\t        });\n\t\n\t        $q.all(promises)\n\t          .then(function () {\n\t            if (!scope.visible) element.detach();\n\t          });\n\t    }\n\t\n\t    function positionTooltip() {\n\t      var tipRect = $mdUtil.offsetRect(element, tooltipParent);\n\t      var parentRect = $mdUtil.offsetRect(parent, tooltipParent);\n\t      var newPosition = getPosition(direction);\n\t\n\t      // If the user provided a direction, just nudge the tooltip onto the screen\n\t      // Otherwise, recalculate based on 'top' since default is 'bottom'\n\t      if (direction) {\n\t        newPosition = fitInParent(newPosition);\n\t      } else if (newPosition.top > element.prop('offsetParent').scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {\n\t        newPosition = fitInParent(getPosition('top'));\n\t      }\n\t\n\t      element.css({top: newPosition.top + 'px', left: newPosition.left + 'px'});\n\t\n\t      positionBackground();\n\t\n\t      function positionBackground () {\n\t        var size = direction === 'left' || direction === 'right'\n\t              ? Math.sqrt(Math.pow(tipRect.width, 2) + Math.pow(tipRect.height / 2, 2)) * 2\n\t              : Math.sqrt(Math.pow(tipRect.width / 2, 2) + Math.pow(tipRect.height, 2)) * 2,\n\t            position = direction === 'left' ? { left: 100, top: 50 }\n\t              : direction === 'right' ? { left: 0, top: 50 }\n\t              : direction === 'top' ? { left: 50, top: 100 }\n\t              : { left: 50, top: 0 };\n\t        background.css({\n\t          width: size + 'px',\n\t          height: size + 'px',\n\t          left: position.left + '%',\n\t          top: position.top + '%'\n\t        });\n\t      }\n\t\n\t      function fitInParent (pos) {\n\t        var newPosition = { left: pos.left, top: pos.top };\n\t        newPosition.left = Math.min( newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE );\n\t        newPosition.left = Math.max( newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE );\n\t        newPosition.top  = Math.min( newPosition.top,  tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE );\n\t        newPosition.top  = Math.max( newPosition.top,  TOOLTIP_WINDOW_EDGE_SPACE );\n\t        return newPosition;\n\t      }\n\t\n\t      function getPosition (dir) {\n\t        return dir === 'left'\n\t          ? { left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,\n\t              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }\n\t          : dir === 'right'\n\t          ? { left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,\n\t              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }\n\t          : dir === 'top'\n\t          ? { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,\n\t              top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE }\n\t          : { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,\n\t              top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE };\n\t      }\n\t    }\n\t\n\t  }\n\t\n\t}\n\tMdTooltipDirective.$inject = [\"$timeout\", \"$window\", \"$$rAF\", \"$document\", \"$mdUtil\", \"$mdTheming\", \"$rootElement\", \"$animate\", \"$q\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.virtualRepeat\n\t */\n\tangular.module('material.components.virtualRepeat', [\n\t  'material.core'\n\t])\n\t.directive('mdVirtualRepeatContainer', VirtualRepeatContainerDirective)\n\t.directive('mdVirtualRepeat', VirtualRepeatDirective);\n\t\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdVirtualRepeatContainer\n\t * @module material.components.virtualRepeat\n\t * @restrict E\n\t * @description\n\t * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.\n\t *\n\t * Virtual repeat is a limited substitute for ng-repeat that renders only\n\t * enough dom nodes to fill the container and recycling them as the user scrolls.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *\n\t * <md-virtual-repeat-container md-top-index=\"topIndex\">\n\t *   <div md-virtual-repeat=\"i in items\" md-item-size=\"20\">Hello {{i}}!</div>\n\t * </md-virtual-repeat-container>\n\t * </hljs>\n\t *\n\t * @param {number=} md-top-index Binds the index of the item that is at the top of the scroll\n\t *     container to $scope. It can both read and set the scroll position.\n\t * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally\n\t *     (defaults to orientation and scrolling vertically).\n\t * @param {boolean=} md-auto-shrink When present, the container will shrink to fit\n\t *     the number of items when that number is less than its original size.\n\t * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink\n\t *     will shrink to (default: 0).\n\t */\n\tfunction VirtualRepeatContainerDirective() {\n\t  return {\n\t    controller: VirtualRepeatContainerController,\n\t    template: virtualRepeatContainerTemplate,\n\t    compile: function virtualRepeatContainerCompile($element, $attrs) {\n\t      $element\n\t          .addClass('md-virtual-repeat-container')\n\t          .addClass($attrs.hasOwnProperty('mdOrientHorizontal')\n\t              ? 'md-orient-horizontal'\n\t              : 'md-orient-vertical');\n\t    }\n\t  };\n\t}\n\t\n\t\n\tfunction virtualRepeatContainerTemplate($element) {\n\t  return '<div class=\"md-virtual-repeat-scroller\">' +\n\t    '<div class=\"md-virtual-repeat-sizer\"></div>' +\n\t    '<div class=\"md-virtual-repeat-offsetter\">' +\n\t      $element[0].innerHTML +\n\t    '</div></div>';\n\t}\n\t\n\t/**\n\t * Maximum size, in pixels, that can be explicitly set to an element. The actual value varies\n\t * between browsers, but IE11 has the very lowest size at a mere 1,533,917px. Ideally we could\n\t * *compute* this value, but Firefox always reports an element to have a size of zero if it\n\t * goes over the max, meaning that we'd have to binary search for the value.\n\t * @const {number}\n\t */\n\tvar MAX_ELEMENT_SIZE = 1533917;\n\t\n\t/**\n\t * Number of additional elements to render above and below the visible area inside\n\t * of the virtual repeat container. A higher number results in less flicker when scrolling\n\t * very quickly in Safari, but comes with a higher rendering and dirty-checking cost.\n\t * @const {number}\n\t */\n\tvar NUM_EXTRA = 3;\n\t\n\t/** @ngInject */\n\tfunction VirtualRepeatContainerController($$rAF, $parse, $scope, $element, $attrs) {\n\t  this.$scope = $scope;\n\t  this.$element = $element;\n\t  this.$attrs = $attrs;\n\t\n\t  /** @type {number} The width or height of the container */\n\t  this.size = 0;\n\t  /** @type {number} The scroll width or height of the scroller */\n\t  this.scrollSize = 0;\n\t  /** @type {number} The scrollLeft or scrollTop of the scroller */\n\t  this.scrollOffset = 0;\n\t  /** @type {boolean} Whether the scroller is oriented horizontally */\n\t  this.horizontal = this.$attrs.hasOwnProperty('mdOrientHorizontal');\n\t  /** @type {!VirtualRepeatController} The repeater inside of this container */\n\t  this.repeater = null;\n\t  /** @type {boolean} Whether auto-shrink is enabled */\n\t  this.autoShrink = this.$attrs.hasOwnProperty('mdAutoShrink');\n\t  /** @type {number} Minimum number of items to auto-shrink to */\n\t  this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;\n\t  /** @type {?number} Original container size when shrank */\n\t  this.originalSize = null;\n\t  /** @type {number} Amount to offset the total scroll size by. */\n\t  this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;\n\t\n\t  if (this.$attrs.mdTopIndex) {\n\t    /** @type {function(angular.Scope): number} Binds to topIndex on Angular scope */\n\t    this.bindTopIndex = $parse(this.$attrs.mdTopIndex);\n\t    /** @type {number} The index of the item that is at the top of the scroll container */\n\t    this.topIndex = this.bindTopIndex(this.$scope);\n\t\n\t    if (!angular.isDefined(this.topIndex)) {\n\t      this.topIndex = 0;\n\t      this.bindTopIndex.assign(this.$scope, 0);\n\t    }\n\t\n\t    this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {\n\t      if (newIndex !== this.topIndex) {\n\t        this.scrollToIndex(newIndex);\n\t      }\n\t    }));\n\t  } else {\n\t    this.topIndex = 0;\n\t  }\n\t\n\t  this.scroller = $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0];\n\t  this.sizer = this.scroller.getElementsByClassName('md-virtual-repeat-sizer')[0];\n\t  this.offsetter = this.scroller.getElementsByClassName('md-virtual-repeat-offsetter')[0];\n\t\n\t  $$rAF(angular.bind(this, this.updateSize));\n\t\n\t  // TODO: Come up with a more robust (But hopefully also quick!) way of\n\t  // detecting that we're not visible.\n\t  if ($attrs.ngHide) {\n\t    $scope.$watch($attrs.ngHide, angular.bind(this, function(hidden) {\n\t      if (!hidden) {\n\t        $$rAF(angular.bind(this, this.updateSize));\n\t      }\n\t    }));\n\t  }\n\t}\n\tVirtualRepeatContainerController.$inject = [\"$$rAF\", \"$parse\", \"$scope\", \"$element\", \"$attrs\"];\n\t\n\t\n\t/** Called by the md-virtual-repeat inside of the container at startup. */\n\tVirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {\n\t  this.repeater = repeaterCtrl;\n\t\n\t  angular.element(this.scroller)\n\t      .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));\n\t};\n\t\n\t\n\t/** @return {boolean} Whether the container is configured for horizontal scrolling. */\n\tVirtualRepeatContainerController.prototype.isHorizontal = function() {\n\t  return this.horizontal;\n\t};\n\t\n\t\n\t/** @return {number} The size (width or height) of the container. */\n\tVirtualRepeatContainerController.prototype.getSize = function() {\n\t  return this.size;\n\t};\n\t\n\t\n\t/**\n\t * Resizes the container.\n\t * @private\n\t * @param {number} The new size to set.\n\t */\n\tVirtualRepeatContainerController.prototype.setSize_ = function(size) {\n\t  this.size = size;\n\t  this.$element[0].style[this.isHorizontal() ? 'width' : 'height'] = size + 'px';\n\t};\n\t\n\t\n\t/** Instructs the container to re-measure its size. */\n\tVirtualRepeatContainerController.prototype.updateSize = function() {\n\t  if (this.originalSize) return;\n\t\n\t  this.size = this.isHorizontal()\n\t      ? this.$element[0].clientWidth\n\t      : this.$element[0].clientHeight;\n\t  this.repeater && this.repeater.containerUpdated();\n\t};\n\t\n\t\n\t/** @return {number} The container's scrollHeight or scrollWidth. */\n\tVirtualRepeatContainerController.prototype.getScrollSize = function() {\n\t  return this.scrollSize;\n\t};\n\t\n\t\n\t/**\n\t * Sets the scroller element to the specified size.\n\t * @private\n\t * @param {number} size The new size.\n\t */\n\tVirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {\n\t  var dimension =  this.isHorizontal() ? 'width' : 'height';\n\t  var crossDimension = this.isHorizontal() ? 'height' : 'width';\n\t\n\t  // If the size falls within the browser's maximum explicit size for a single element, we can\n\t  // set the size and be done. Otherwise, we have to create children that add up the the desired\n\t  // size.\n\t  if (size < MAX_ELEMENT_SIZE) {\n\t    this.sizer.style[dimension] = size + 'px';\n\t  } else {\n\t    // Clear any existing dimensions.\n\t    this.sizer.innerHTML = '';\n\t    this.sizer.style[dimension] = 'auto';\n\t    this.sizer.style[crossDimension] = 'auto';\n\t\n\t    // Divide the total size we have to render into N max-size pieces.\n\t    var numChildren = Math.floor(size / MAX_ELEMENT_SIZE);\n\t\n\t    // Element template to clone for each max-size piece.\n\t    var sizerChild = document.createElement('div');\n\t    sizerChild.style[dimension] = MAX_ELEMENT_SIZE + 'px';\n\t    sizerChild.style[crossDimension] = '1px';\n\t\n\t    for (var i = 0; i < numChildren; i++) {\n\t      this.sizer.appendChild(sizerChild.cloneNode(false));\n\t    }\n\t\n\t    // Re-use the element template for the remainder.\n\t    sizerChild.style[dimension] = (size - (numChildren * MAX_ELEMENT_SIZE)) + 'px';\n\t    this.sizer.appendChild(sizerChild);\n\t  }\n\t};\n\t\n\t\n\t/**\n\t * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.\n\t * @private\n\t * @param {number} size The new size.\n\t */\n\tVirtualRepeatContainerController.prototype.autoShrink_ = function(size) {\n\t  var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());\n\t  if (this.autoShrink && shrinkSize !== this.size) {\n\t    if (shrinkSize < (this.originalSize || this.size)) {\n\t      if (!this.originalSize) {\n\t        this.originalSize = this.size;\n\t      }\n\t\n\t      this.setSize_(shrinkSize);\n\t    } else if (this.originalSize) {\n\t      this.setSize_(this.originalSize);\n\t      this.originalSize = null;\n\t    }\n\t  }\n\t};\n\t\n\t\n\t/**\n\t * Sets the scrollHeight or scrollWidth. Called by the repeater based on\n\t * its item count and item size.\n\t * @param {number} itemsSize The total size of the items.\n\t */\n\tVirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {\n\t  var size = itemsSize + this.offsetSize;\n\t  if (this.scrollSize === size) return;\n\t\n\t  this.sizeScroller_(size);\n\t  this.autoShrink_(size);\n\t  this.scrollSize = size;\n\t};\n\t\n\t\n\t/** @return {number} The container's current scroll offset. */\n\tVirtualRepeatContainerController.prototype.getScrollOffset = function() {\n\t  return this.scrollOffset;\n\t};\n\t\n\t/**\n\t * Scrolls to a given scrollTop position.\n\t * @param {number} position\n\t */\n\tVirtualRepeatContainerController.prototype.scrollTo = function(position) {\n\t  this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;\n\t  this.handleScroll_();\n\t};\n\t\n\t/**\n\t * Scrolls the item with the given index to the top of the scroll container.\n\t * @param {number} index\n\t */\n\tVirtualRepeatContainerController.prototype.scrollToIndex = function(index) {\n\t  var itemSize = this.repeater.getItemSize();\n\t  var itemsLength = this.repeater.itemsLength;\n\t  if(index > itemsLength) {\n\t    index = itemsLength - 1;\n\t  }\n\t  this.scrollTo(itemSize * index);\n\t};\n\t\n\tVirtualRepeatContainerController.prototype.resetScroll = function() {\n\t  this.scrollTo(0);\n\t};\n\t\n\t\n\tVirtualRepeatContainerController.prototype.handleScroll_ = function() {\n\t  var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;\n\t  if (offset === this.scrollOffset) return;\n\t\n\t  var itemSize = this.repeater.getItemSize();\n\t  if (!itemSize) return;\n\t\n\t  var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);\n\t\n\t  var transform = this.isHorizontal() ? 'translateX(' : 'translateY(';\n\t      transform +=  (numItems * itemSize) + 'px)';\n\t\n\t  this.scrollOffset = offset;\n\t  this.offsetter.style.webkitTransform = transform;\n\t  this.offsetter.style.transform = transform;\n\t\n\t  if (this.bindTopIndex) {\n\t    var topIndex = Math.floor(offset / itemSize);\n\t    if (topIndex !== this.topIndex && topIndex < this.repeater.itemsLength) {\n\t      this.topIndex = topIndex;\n\t      this.bindTopIndex.assign(this.$scope, topIndex);\n\t      if (!this.$scope.$root.$$phase) this.$scope.$digest();\n\t    }\n\t  }\n\t\n\t  this.repeater.containerUpdated();\n\t};\n\t\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdVirtualRepeat\n\t * @module material.components.virtualRepeat\n\t * @restrict A\n\t * @priority 1000\n\t * @description\n\t * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.\n\t *\n\t * Virtual repeat is a limited substitute for ng-repeat that renders only\n\t * enough dom nodes to fill the container and recycling them as the user scrolls.\n\t * Arrays, but not objects are supported for iteration.\n\t * Track by, as alias, and (key, value) syntax are not supported.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-virtual-repeat-container>\n\t *   <div md-virtual-repeat=\"i in items\">Hello {{i}}!</div>\n\t * </md-virtual-repeat-container>\n\t *\n\t * <md-virtual-repeat-container md-orient-horizontal>\n\t *   <div md-virtual-repeat=\"i in items\" md-item-size=\"20\">Hello {{i}}!</div>\n\t * </md-virtual-repeat-container>\n\t * </hljs>\n\t *\n\t * @param {number=} md-item-size The height or width of the repeated elements (which must be\n\t *   identical for each element). Optional. Will attempt to read the size from the dom if missing,\n\t *   but still assumes that all repeated nodes have same height or width.\n\t * @param {string=} md-extra-name Evaluates to an additional name to which the current iterated item\n\t *   can be assigned on the repeated scope (needed for use in `md-autocomplete`).\n\t * @param {boolean=} md-on-demand When present, treats the md-virtual-repeat argument as an object\n\t *   that can fetch rows rather than an array.\n\t *\n\t *   **NOTE:** This object must implement the following interface with two (2) methods:\n\t *\n\t *   - `getItemAtIndex: function(index) [object]` The item at that index or null if it is not yet\n\t *     loaded (it should start downloading the item in that case).\n\t *   - `getLength: function() [number]` The data length to which the repeater container\n\t *     should be sized. Ideally, when the count is known, this method should return it.\n\t *     Otherwise, return a higher number than the currently loaded items to produce an\n\t *     infinite-scroll behavior.\n\t */\n\tfunction VirtualRepeatDirective($parse) {\n\t  return {\n\t    controller: VirtualRepeatController,\n\t    priority: 1000,\n\t    require: ['mdVirtualRepeat', '^^mdVirtualRepeatContainer'],\n\t    restrict: 'A',\n\t    terminal: true,\n\t    transclude: 'element',\n\t    compile: function VirtualRepeatCompile($element, $attrs) {\n\t      var expression = $attrs.mdVirtualRepeat;\n\t      var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\n\t      var repeatName = match[1];\n\t      var repeatListExpression = $parse(match[2]);\n\t      var extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);\n\t\n\t      return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {\n\t        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);\n\t      };\n\t    }\n\t  };\n\t}\n\tVirtualRepeatDirective.$inject = [\"$parse\"];\n\t\n\t\n\t/** @ngInject */\n\tfunction VirtualRepeatController($scope, $element, $attrs, $browser, $document, $$rAF) {\n\t  this.$scope = $scope;\n\t  this.$element = $element;\n\t  this.$attrs = $attrs;\n\t  this.$browser = $browser;\n\t  this.$document = $document;\n\t  this.$$rAF = $$rAF;\n\t\n\t  /** @type {boolean} Whether we are in on-demand mode. */\n\t  this.onDemand = $attrs.hasOwnProperty('mdOnDemand');\n\t  /** @type {!Function} Backup reference to $browser.$$checkUrlChange */\n\t  this.browserCheckUrlChange = $browser.$$checkUrlChange;\n\t  /** @type {number} Most recent starting repeat index (based on scroll offset) */\n\t  this.newStartIndex = 0;\n\t  /** @type {number} Most recent ending repeat index (based on scroll offset) */\n\t  this.newEndIndex = 0;\n\t  /** @type {number} Most recent end visible index (based on scroll offset) */\n\t  this.newVisibleEnd = 0;\n\t  /** @type {number} Previous starting repeat index (based on scroll offset) */\n\t  this.startIndex = 0;\n\t  /** @type {number} Previous ending repeat index (based on scroll offset) */\n\t  this.endIndex = 0;\n\t  // TODO: measure width/height of first element from dom if not provided.\n\t  // getComputedStyle?\n\t  /** @type {?number} Height/width of repeated elements. */\n\t  this.itemSize = $scope.$eval($attrs.mdItemSize) || null;\n\t\n\t  /** @type {boolean} Whether this is the first time that items are rendered. */\n\t  this.isFirstRender = true;\n\t\n\t  /** @type {number} Most recently seen length of items. */\n\t  this.itemsLength = 0;\n\t\n\t  /**\n\t   * @type {!Function} Unwatch callback for item size (when md-items-size is\n\t   *     not specified), or angular.noop otherwise.\n\t   */\n\t  this.unwatchItemSize_ = angular.noop;\n\t\n\t  /**\n\t   * Presently rendered blocks by repeat index.\n\t   * @type {Object<number, !VirtualRepeatController.Block}\n\t   */\n\t  this.blocks = {};\n\t  /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */\n\t  this.pooledBlocks = [];\n\t}\n\tVirtualRepeatController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$browser\", \"$document\", \"$$rAF\"];\n\t\n\t\n\t/**\n\t * An object representing a repeated item.\n\t * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}\n\t */\n\tVirtualRepeatController.Block;\n\t\n\t\n\t/**\n\t * Called at startup by the md-virtual-repeat postLink function.\n\t * @param {!VirtualRepeatContainerController} container The container's controller.\n\t * @param {!Function} transclude The repeated element's bound transclude function.\n\t * @param {string} repeatName The left hand side of the repeat expression, indicating\n\t *     the name for each item in the array.\n\t * @param {!Function} repeatListExpression A compiled expression based on the right hand side\n\t *     of the repeat expression. Points to the array to repeat over.\n\t * @param {string|undefined} extraName The optional extra repeatName.\n\t */\n\tVirtualRepeatController.prototype.link_ =\n\t    function(container, transclude, repeatName, repeatListExpression, extraName) {\n\t  this.container = container;\n\t  this.transclude = transclude;\n\t  this.repeatName = repeatName;\n\t  this.rawRepeatListExpression = repeatListExpression;\n\t  this.extraName = extraName;\n\t  this.sized = false;\n\t\n\t  this.repeatListExpression = angular.bind(this, this.repeatListExpression_);\n\t\n\t  this.container.register(this);\n\t};\n\t\n\t\n\t/** @private Attempts to set itemSize by measuring a repeated element in the dom */\n\tVirtualRepeatController.prototype.readItemSize_ = function() {\n\t  if (this.itemSize) {\n\t    // itemSize was successfully read in a different asynchronous call.\n\t    return;\n\t  }\n\t\n\t  this.items = this.repeatListExpression(this.$scope);\n\t  this.parentNode = this.$element[0].parentNode;\n\t  var block = this.getBlock_(0);\n\t  if (!block.element[0].parentNode) {\n\t    this.parentNode.appendChild(block.element[0]);\n\t  }\n\t\n\t  this.itemSize = block.element[0][\n\t      this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'] || null;\n\t\n\t  this.blocks[0] = block;\n\t  this.poolBlock_(0);\n\t\n\t  if (this.itemSize) {\n\t    this.containerUpdated();\n\t  }\n\t};\n\t\n\t\n\t/**\n\t * Returns the user-specified repeat list, transforming it into an array-like\n\t * object in the case of infinite scroll/dynamic load mode.\n\t * @param {!angular.Scope} The scope.\n\t * @return {!Array|!Object} An array or array-like object for iteration.\n\t */\n\tVirtualRepeatController.prototype.repeatListExpression_ = function(scope) {\n\t  var repeatList = this.rawRepeatListExpression(scope);\n\t\n\t  if (this.onDemand && repeatList) {\n\t    var virtualList = new VirtualRepeatModelArrayLike(repeatList);\n\t    virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);\n\t    return virtualList;\n\t  } else {\n\t    return repeatList;\n\t  }\n\t};\n\t\n\t\n\t/**\n\t * Called by the container. Informs us that the containers scroll or size has\n\t * changed.\n\t */\n\tVirtualRepeatController.prototype.containerUpdated = function() {\n\t  // If itemSize is unknown, attempt to measure it.\n\t  if (!this.itemSize) {\n\t    this.unwatchItemSize_ = this.$scope.$watchCollection(\n\t        this.repeatListExpression,\n\t        angular.bind(this, function(items) {\n\t          if (items && items.length) {\n\t            this.$$rAF(angular.bind(this, this.readItemSize_));\n\t          }\n\t        }));\n\t    if (!this.$scope.$root.$$phase) this.$scope.$digest();\n\t\n\t    return;\n\t  } else if (!this.sized) {\n\t    this.items = this.repeatListExpression(this.$scope);\n\t  }\n\t\n\t  if (!this.sized) {\n\t    this.unwatchItemSize_();\n\t    this.sized = true;\n\t    this.$scope.$watchCollection(this.repeatListExpression,\n\t        angular.bind(this, this.virtualRepeatUpdate_));\n\t  }\n\t\n\t  this.updateIndexes_();\n\t\n\t  if (this.newStartIndex !== this.startIndex ||\n\t      this.newEndIndex !== this.endIndex ||\n\t      this.container.getScrollOffset() > this.container.getScrollSize()) {\n\t    if (this.items instanceof VirtualRepeatModelArrayLike) {\n\t      this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);\n\t    }\n\t    this.virtualRepeatUpdate_(this.items, this.items);\n\t  }\n\t};\n\t\n\t\n\t/**\n\t * Called by the container. Returns the size of a single repeated item.\n\t * @return {?number} Size of a repeated item.\n\t */\n\tVirtualRepeatController.prototype.getItemSize = function() {\n\t  return this.itemSize;\n\t};\n\t\n\t\n\t/**\n\t * Updates the order and visible offset of repeated blocks in response to scrolling\n\t * or items updates.\n\t * @private\n\t */\n\tVirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {\n\t  var itemsLength = items && items.length || 0;\n\t  var lengthChanged = false;\n\t\n\t  // If the number of items shrank, scroll up to the top.\n\t  if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {\n\t    this.items = items;\n\t    this.container.resetScroll();\n\t    return;\n\t  }\n\t\n\t  if (itemsLength !== this.itemsLength) {\n\t    lengthChanged = true;\n\t    this.itemsLength = itemsLength;\n\t  }\n\t\n\t  this.items = items;\n\t  if (items !== oldItems || lengthChanged) {\n\t    this.updateIndexes_();\n\t  }\n\t\n\t  this.parentNode = this.$element[0].parentNode;\n\t\n\t  if (lengthChanged) {\n\t    this.container.setScrollSize(itemsLength * this.itemSize);\n\t  }\n\t\n\t  if (this.isFirstRender) {\n\t    this.isFirstRender = false;\n\t    var startIndex = this.$attrs.mdStartIndex ?\n\t      this.$scope.$eval(this.$attrs.mdStartIndex) :\n\t      this.container.topIndex;\n\t    this.container.scrollToIndex(startIndex);\n\t  }\n\t\n\t  // Detach and pool any blocks that are no longer in the viewport.\n\t  Object.keys(this.blocks).forEach(function(blockIndex) {\n\t    var index = parseInt(blockIndex, 10);\n\t    if (index < this.newStartIndex || index >= this.newEndIndex) {\n\t      this.poolBlock_(index);\n\t    }\n\t  }, this);\n\t\n\t  // Add needed blocks.\n\t  // For performance reasons, temporarily block browser url checks as we digest\n\t  // the restored block scopes ($$checkUrlChange reads window.location to\n\t  // check for changes and trigger route change, etc, which we don't need when\n\t  // trying to scroll at 60fps).\n\t  this.$browser.$$checkUrlChange = angular.noop;\n\t\n\t  var i, block,\n\t      newStartBlocks = [],\n\t      newEndBlocks = [];\n\t\n\t  // Collect blocks at the top.\n\t  for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {\n\t    block = this.getBlock_(i);\n\t    this.updateBlock_(block, i);\n\t    newStartBlocks.push(block);\n\t  }\n\t\n\t  // Update blocks that are already rendered.\n\t  for (; this.blocks[i] != null; i++) {\n\t    this.updateBlock_(this.blocks[i], i);\n\t  }\n\t  var maxIndex = i - 1;\n\t\n\t  // Collect blocks at the end.\n\t  for (; i < this.newEndIndex; i++) {\n\t    block = this.getBlock_(i);\n\t    this.updateBlock_(block, i);\n\t    newEndBlocks.push(block);\n\t  }\n\t\n\t  // Attach collected blocks to the document.\n\t  if (newStartBlocks.length) {\n\t    this.parentNode.insertBefore(\n\t        this.domFragmentFromBlocks_(newStartBlocks),\n\t        this.$element[0].nextSibling);\n\t  }\n\t  if (newEndBlocks.length) {\n\t    this.parentNode.insertBefore(\n\t        this.domFragmentFromBlocks_(newEndBlocks),\n\t        this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);\n\t  }\n\t\n\t  // Restore $$checkUrlChange.\n\t  this.$browser.$$checkUrlChange = this.browserCheckUrlChange;\n\t\n\t  this.startIndex = this.newStartIndex;\n\t  this.endIndex = this.newEndIndex;\n\t};\n\t\n\t\n\t/**\n\t * @param {number} index Where the block is to be in the repeated list.\n\t * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.\n\t * @private\n\t */\n\tVirtualRepeatController.prototype.getBlock_ = function(index) {\n\t  if (this.pooledBlocks.length) {\n\t    return this.pooledBlocks.pop();\n\t  }\n\t\n\t  var block;\n\t  this.transclude(angular.bind(this, function(clone, scope) {\n\t    block = {\n\t      element: clone,\n\t      new: true,\n\t      scope: scope\n\t    };\n\t\n\t    this.updateScope_(scope, index);\n\t    this.parentNode.appendChild(clone[0]);\n\t  }));\n\t\n\t  return block;\n\t};\n\t\n\t\n\t/**\n\t * Updates and if not in a digest cycle, digests the specified block's scope to the data\n\t * at the specified index.\n\t * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.\n\t * @param {number} index The index to set.\n\t * @private\n\t */\n\tVirtualRepeatController.prototype.updateBlock_ = function(block, index) {\n\t  this.blocks[index] = block;\n\t\n\t  if (!block.new &&\n\t      (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {\n\t    return;\n\t  }\n\t  block.new = false;\n\t\n\t  // Update and digest the block's scope.\n\t  this.updateScope_(block.scope, index);\n\t\n\t  // Perform digest before reattaching the block.\n\t  // Any resulting synchronous dom mutations should be much faster as a result.\n\t  // This might break some directives, but I'm going to try it for now.\n\t  if (!this.$scope.$root.$$phase) {\n\t    block.scope.$digest();\n\t  }\n\t};\n\t\n\t\n\t/**\n\t * Updates scope to the data at the specified index.\n\t * @param {!angular.Scope} scope The scope which should be updated.\n\t * @param {number} index The index to set.\n\t * @private\n\t */\n\tVirtualRepeatController.prototype.updateScope_ = function(scope, index) {\n\t  scope.$index = index;\n\t  scope[this.repeatName] = this.items && this.items[index];\n\t  if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];\n\t};\n\t\n\t\n\t/**\n\t * Pools the block at the specified index (Pulls its element out of the dom and stores it).\n\t * @param {number} index The index at which the block to pool is stored.\n\t * @private\n\t */\n\tVirtualRepeatController.prototype.poolBlock_ = function(index) {\n\t  this.pooledBlocks.push(this.blocks[index]);\n\t  this.parentNode.removeChild(this.blocks[index].element[0]);\n\t  delete this.blocks[index];\n\t};\n\t\n\t\n\t/**\n\t * Produces a dom fragment containing the elements from the list of blocks.\n\t * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements\n\t *     should be added to the document fragment.\n\t * @return {DocumentFragment}\n\t * @private\n\t */\n\tVirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {\n\t  var fragment = this.$document[0].createDocumentFragment();\n\t  blocks.forEach(function(block) {\n\t    fragment.appendChild(block.element[0]);\n\t  });\n\t  return fragment;\n\t};\n\t\n\t\n\t/**\n\t * Updates start and end indexes based on length of repeated items and container size.\n\t * @private\n\t */\n\tVirtualRepeatController.prototype.updateIndexes_ = function() {\n\t  var itemsLength = this.items ? this.items.length : 0;\n\t  var containerLength = Math.ceil(this.container.getSize() / this.itemSize);\n\t\n\t  this.newStartIndex = Math.max(0, Math.min(\n\t      itemsLength - containerLength,\n\t      Math.floor(this.container.getScrollOffset() / this.itemSize)));\n\t  this.newVisibleEnd = this.newStartIndex + containerLength + NUM_EXTRA;\n\t  this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);\n\t  this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);\n\t};\n\t\n\t/**\n\t * This VirtualRepeatModelArrayLike class enforces the interface requirements\n\t * for infinite scrolling within a mdVirtualRepeatContainer. An object with this\n\t * interface must implement the following interface with two (2) methods:\n\t *\n\t * getItemAtIndex: function(index) -> item at that index or null if it is not yet\n\t *     loaded (It should start downloading the item in that case).\n\t *\n\t * getLength: function() -> number The data legnth to which the repeater container\n\t *     should be sized. Ideally, when the count is known, this method should return it.\n\t *     Otherwise, return a higher number than the currently loaded items to produce an\n\t *     infinite-scroll behavior.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *  <md-virtual-repeat-container md-orient-horizontal>\n\t *    <div md-virtual-repeat=\"i in items\" md-on-demand>\n\t *      Hello {{i}}!\n\t *    </div>\n\t *  </md-virtual-repeat-container>\n\t * </hljs>\n\t *\n\t */\n\tfunction VirtualRepeatModelArrayLike(model) {\n\t  if (!angular.isFunction(model.getItemAtIndex) ||\n\t      !angular.isFunction(model.getLength)) {\n\t    throw Error('When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement ' +\n\t        'functions getItemAtIndex() and getLength() ');\n\t  }\n\t\n\t  this.model = model;\n\t}\n\t\n\t\n\tVirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {\n\t  for (var i = start; i < end; i++) {\n\t    if (!this.hasOwnProperty(i)) {\n\t      this[i] = this.model.getItemAtIndex(i);\n\t    }\n\t  }\n\t  this.length = this.model.getLength();\n\t};\n\t\n\t\n\tfunction abstractMethod() {\n\t  throw Error('Non-overridden abstract method called.');\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc module\n\t * @name material.components.whiteframe\n\t */\n\tangular.module('material.components.whiteframe', []);\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.autocomplete')\n\t    .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);\n\t\n\tvar ITEM_HEIGHT  = 41,\n\t    MAX_HEIGHT   = 5.5 * ITEM_HEIGHT,\n\t    MENU_PADDING = 8;\n\t\n\tfunction MdAutocompleteCtrl ($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window,\n\t                             $animate, $rootElement, $attrs, $q) {\n\t  //-- private variables\n\t  var ctrl                 = this,\n\t      itemParts            = $scope.itemsExpr.split(/ in /i),\n\t      itemExpr             = itemParts[ 1 ],\n\t      elements             = null,\n\t      cache                = {},\n\t      noBlur               = false,\n\t      selectedItemWatchers = [],\n\t      hasFocus             = false,\n\t      lastCount            = 0;\n\t\n\t  //-- public variables with handlers\n\t  defineProperty('hidden', handleHiddenChange, true);\n\t\n\t  //-- public variables\n\t  ctrl.scope      = $scope;\n\t  ctrl.parent     = $scope.$parent;\n\t  ctrl.itemName   = itemParts[ 0 ];\n\t  ctrl.matches    = [];\n\t  ctrl.loading    = false;\n\t  ctrl.hidden     = true;\n\t  ctrl.index      = null;\n\t  ctrl.messages   = [];\n\t  ctrl.id         = $mdUtil.nextUid();\n\t  ctrl.isDisabled = null;\n\t  ctrl.isRequired = null;\n\t  ctrl.hasNotFound = false;\n\t\n\t  //-- public methods\n\t  ctrl.keydown                       = keydown;\n\t  ctrl.blur                          = blur;\n\t  ctrl.focus                         = focus;\n\t  ctrl.clear                         = clearValue;\n\t  ctrl.select                        = select;\n\t  ctrl.listEnter                     = onListEnter;\n\t  ctrl.listLeave                     = onListLeave;\n\t  ctrl.mouseUp                       = onMouseup;\n\t  ctrl.getCurrentDisplayValue        = getCurrentDisplayValue;\n\t  ctrl.registerSelectedItemWatcher   = registerSelectedItemWatcher;\n\t  ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;\n\t  ctrl.notFoundVisible               = notFoundVisible;\n\t  ctrl.loadingIsVisible              = loadingIsVisible;\n\t\n\t  return init();\n\t\n\t  //-- initialization methods\n\t\n\t  /**\n\t   * Initialize the controller, setup watchers, gather elements\n\t   */\n\t  function init () {\n\t    $mdUtil.initOptionalProperties($scope, $attrs, { searchText: null, selectedItem: null });\n\t    $mdTheming($element);\n\t    configureWatchers();\n\t    $mdUtil.nextTick(function () {\n\t      gatherElements();\n\t      moveDropdown();\n\t      focusElement();\n\t      $element.on('focus', focusElement);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Calculates the dropdown's position and applies the new styles to the menu element\n\t   * @returns {*}\n\t   */\n\t  function positionDropdown () {\n\t    if (!elements) return $mdUtil.nextTick(positionDropdown, false, $scope);\n\t    var hrect  = elements.wrap.getBoundingClientRect(),\n\t        vrect  = elements.snap.getBoundingClientRect(),\n\t        root   = elements.root.getBoundingClientRect(),\n\t        top    = vrect.bottom - root.top,\n\t        bot    = root.bottom - vrect.top,\n\t        left   = hrect.left - root.left,\n\t        width  = hrect.width,\n\t        styles = {\n\t          left:     left + 'px',\n\t          minWidth: width + 'px',\n\t          maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'\n\t        };\n\t    if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {\n\t      styles.top       = 'auto';\n\t      styles.bottom    = bot + 'px';\n\t      styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + 'px';\n\t    } else {\n\t      styles.top       = top + 'px';\n\t      styles.bottom    = 'auto';\n\t      styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom - hrect.bottom - MENU_PADDING) + 'px';\n\t    }\n\t\n\t    elements.$.scrollContainer.css(styles);\n\t    $mdUtil.nextTick(correctHorizontalAlignment, false);\n\t\n\t    /**\n\t     * Makes sure that the menu doesn't go off of the screen on either side.\n\t     */\n\t    function correctHorizontalAlignment () {\n\t      var dropdown = elements.scrollContainer.getBoundingClientRect(),\n\t          styles   = {};\n\t      if (dropdown.right > root.right - MENU_PADDING) {\n\t        styles.left = (hrect.right - dropdown.width) + 'px';\n\t      }\n\t      elements.$.scrollContainer.css(styles);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.\n\t   */\n\t  function moveDropdown () {\n\t    if (!elements.$.root.length) return;\n\t    $mdTheming(elements.$.scrollContainer);\n\t    elements.$.scrollContainer.detach();\n\t    elements.$.root.append(elements.$.scrollContainer);\n\t    if ($animate.pin) $animate.pin(elements.$.scrollContainer, $rootElement);\n\t  }\n\t\n\t  /**\n\t   * Sends focus to the input element.\n\t   */\n\t  function focusElement () {\n\t    if ($scope.autofocus) elements.input.focus();\n\t  }\n\t\n\t  /**\n\t   * Sets up any watchers used by autocomplete\n\t   */\n\t  function configureWatchers () {\n\t    var wait = parseInt($scope.delay, 10) || 0;\n\t    $attrs.$observe('disabled', function (value) { ctrl.isDisabled = value; });\n\t    $attrs.$observe('required', function (value) { ctrl.isRequired = value !== null; });\n\t    $scope.$watch('searchText', wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);\n\t    $scope.$watch('selectedItem', selectedItemChange);\n\t    angular.element($window).on('resize', positionDropdown);\n\t    $scope.$on('$destroy', cleanup);\n\t  }\n\t\n\t  /**\n\t   * Removes any events or leftover elements created by this controller\n\t   */\n\t  function cleanup () {\n\t    angular.element($window).off('resize', positionDropdown);\n\t    if ( elements ){\n\t      var items = 'ul scroller scrollContainer input'.split(' ');\n\t      angular.forEach(items, function(key){\n\t        elements.$[key].remove();\n\t      });\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Gathers all of the elements needed for this controller\n\t   */\n\t  function gatherElements () {\n\t    elements = {\n\t      main:  $element[0],\n\t      scrollContainer: $element[0].getElementsByClassName('md-virtual-repeat-container')[0],\n\t      scroller: $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0],\n\t      ul:    $element.find('ul')[0],\n\t      input: $element.find('input')[0],\n\t      wrap:  $element.find('md-autocomplete-wrap')[0],\n\t      root:  document.body\n\t    };\n\t    elements.li   = elements.ul.getElementsByTagName('li');\n\t    elements.snap = getSnapTarget();\n\t    elements.$    = getAngularElements(elements);\n\t  }\n\t\n\t  /**\n\t   * Finds the element that the menu will base its position on\n\t   * @returns {*}\n\t   */\n\t  function getSnapTarget () {\n\t    for (var element = $element; element.length; element = element.parent()) {\n\t      if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[ 0 ];\n\t    }\n\t    return elements.wrap;\n\t  }\n\t\n\t  /**\n\t   * Gathers angular-wrapped versions of each element\n\t   * @param elements\n\t   * @returns {{}}\n\t   */\n\t  function getAngularElements (elements) {\n\t    var obj = {};\n\t    for (var key in elements) {\n\t      if (elements.hasOwnProperty(key)) obj[ key ] = angular.element(elements[ key ]);\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  //-- event/change handlers\n\t\n\t  /**\n\t   * Handles changes to the `hidden` property.\n\t   * @param hidden\n\t   * @param oldHidden\n\t   */\n\t  function handleHiddenChange (hidden, oldHidden) {\n\t    if (!hidden && oldHidden) {\n\t      positionDropdown();\n\t\n\t      if (elements) {\n\t        $mdUtil.nextTick(function () {\n\t          $mdUtil.disableScrollAround(elements.ul);\n\t        }, false, $scope);\n\t      }\n\t    } else if (hidden && !oldHidden) {\n\t      $mdUtil.nextTick(function () {\n\t        $mdUtil.enableScrolling();\n\t      }, false, $scope);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * When the user mouses over the dropdown menu, ignore blur events.\n\t   */\n\t  function onListEnter () {\n\t    noBlur = true;\n\t  }\n\t\n\t  /**\n\t   * When the user's mouse leaves the menu, blur events may hide the menu again.\n\t   */\n\t  function onListLeave () {\n\t    noBlur = false;\n\t    ctrl.hidden = shouldHide();\n\t  }\n\t\n\t  /**\n\t   * When the mouse button is released, send focus back to the input field.\n\t   */\n\t  function onMouseup () {\n\t    elements.input.focus();\n\t  }\n\t\n\t  /**\n\t   * Handles changes to the selected item.\n\t   * @param selectedItem\n\t   * @param previousSelectedItem\n\t   */\n\t  function selectedItemChange (selectedItem, previousSelectedItem) {\n\t    if (selectedItem) {\n\t      getDisplayValue(selectedItem).then(function (val) {\n\t        $scope.searchText = val;\n\t        handleSelectedItemChange(selectedItem, previousSelectedItem);\n\t      });\n\t    }\n\t\n\t    if (selectedItem !== previousSelectedItem) announceItemChange();\n\t  }\n\t\n\t  /**\n\t   * Use the user-defined expression to announce changes each time a new item is selected\n\t   */\n\t  function announceItemChange () {\n\t    angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));\n\t  }\n\t\n\t  /**\n\t   * Use the user-defined expression to announce changes each time the search text is changed\n\t   */\n\t  function announceTextChange () {\n\t    angular.isFunction($scope.textChange) && $scope.textChange();\n\t  }\n\t\n\t  /**\n\t   * Calls any external watchers listening for the selected item.  Used in conjunction with\n\t   * `registerSelectedItemWatcher`.\n\t   * @param selectedItem\n\t   * @param previousSelectedItem\n\t   */\n\t  function handleSelectedItemChange (selectedItem, previousSelectedItem) {\n\t    selectedItemWatchers.forEach(function (watcher) { watcher(selectedItem, previousSelectedItem); });\n\t  }\n\t\n\t  /**\n\t   * Register a function to be called when the selected item changes.\n\t   * @param cb\n\t   */\n\t  function registerSelectedItemWatcher (cb) {\n\t    if (selectedItemWatchers.indexOf(cb) == -1) {\n\t      selectedItemWatchers.push(cb);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Unregister a function previously registered for selected item changes.\n\t   * @param cb\n\t   */\n\t  function unregisterSelectedItemWatcher (cb) {\n\t    var i = selectedItemWatchers.indexOf(cb);\n\t    if (i != -1) {\n\t      selectedItemWatchers.splice(i, 1);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Handles changes to the searchText property.\n\t   * @param searchText\n\t   * @param previousSearchText\n\t   */\n\t  function handleSearchText (searchText, previousSearchText) {\n\t    ctrl.index = getDefaultIndex();\n\t    // do nothing on init\n\t    if (searchText === previousSearchText) return;\n\t\n\t    getDisplayValue($scope.selectedItem).then(function (val) {\n\t      // clear selected item if search text no longer matches it\n\t      if (searchText !== val) {\n\t        $scope.selectedItem = null;\n\t\n\t        // trigger change event if available\n\t        if (searchText !== previousSearchText) announceTextChange();\n\t\n\t        // cancel results if search text is not long enough\n\t        if (!isMinLengthMet()) {\n\t          ctrl.matches = [];\n\t          setLoading(false);\n\t          updateMessages();\n\t        } else {\n\t          handleQuery();\n\t        }\n\t      }\n\t    });\n\t\n\t  }\n\t\n\t  /**\n\t   * Handles input blur event, determines if the dropdown should hide.\n\t   */\n\t  function blur () {\n\t    if (!noBlur) {\n\t      hasFocus = false;\n\t      ctrl.hidden = shouldHide();\n\t    }\n\t  }\n\t\n\t  function doBlur(forceBlur) {\n\t    if (forceBlur) {\n\t      noBlur = false;\n\t    }\n\t\n\t    elements.input.blur();\n\t  }\n\t\n\t  /**\n\t   * Handles input focus event, determines if the dropdown should show.\n\t   */\n\t  function focus () {\n\t    hasFocus = true;\n\t    //-- if searchText is null, let's force it to be a string\n\t    if (!angular.isString($scope.searchText)) $scope.searchText = '';\n\t    ctrl.hidden = shouldHide();\n\t    if (!ctrl.hidden) handleQuery();\n\t  }\n\t\n\t  /**\n\t   * Handles keyboard input.\n\t   * @param event\n\t   */\n\t  function keydown (event) {\n\t    switch (event.keyCode) {\n\t      case $mdConstant.KEY_CODE.DOWN_ARROW:\n\t        if (ctrl.loading) return;\n\t        event.stopPropagation();\n\t        event.preventDefault();\n\t        ctrl.index   = Math.min(ctrl.index + 1, ctrl.matches.length - 1);\n\t        updateScroll();\n\t        updateMessages();\n\t        break;\n\t      case $mdConstant.KEY_CODE.UP_ARROW:\n\t        if (ctrl.loading) return;\n\t        event.stopPropagation();\n\t        event.preventDefault();\n\t        ctrl.index   = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);\n\t        updateScroll();\n\t        updateMessages();\n\t        break;\n\t      case $mdConstant.KEY_CODE.TAB:\n\t      case $mdConstant.KEY_CODE.ENTER:\n\t        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;\n\t        event.stopPropagation();\n\t        event.preventDefault();\n\t        select(ctrl.index);\n\t        break;\n\t      case $mdConstant.KEY_CODE.ESCAPE:\n\t        event.stopPropagation();\n\t        event.preventDefault();\n\t        clearValue();\n\t\n\t        // Force the component to blur if they hit escape\n\t        doBlur(true);\n\t\n\t        break;\n\t      default:\n\t    }\n\t  }\n\t\n\t  //-- getters\n\t\n\t  /**\n\t   * Returns the minimum length needed to display the dropdown.\n\t   * @returns {*}\n\t   */\n\t  function getMinLength () {\n\t    return angular.isNumber($scope.minLength) ? $scope.minLength : 1;\n\t  }\n\t\n\t  /**\n\t   * Returns the display value for an item.\n\t   * @param item\n\t   * @returns {*}\n\t   */\n\t  function getDisplayValue (item) {\n\t    return $q.when(getItemText(item) || item);\n\t\n\t    /**\n\t     * Getter function to invoke user-defined expression (in the directive)\n\t     * to convert your object to a single string.\n\t     */\n\t    function getItemText (item) {\n\t      return (item && $scope.itemText) ? $scope.itemText(getItemAsNameVal(item)) : null;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Returns the locals object for compiling item templates.\n\t   * @param item\n\t   * @returns {{}}\n\t   */\n\t  function getItemAsNameVal (item) {\n\t    if (!item) return undefined;\n\t\n\t    var locals = {};\n\t    if (ctrl.itemName) locals[ ctrl.itemName ] = item;\n\t\n\t    return locals;\n\t  }\n\t\n\t  /**\n\t   * Returns the default index based on whether or not autoselect is enabled.\n\t   * @returns {number}\n\t   */\n\t  function getDefaultIndex () {\n\t    return $scope.autoselect ? 0 : -1;\n\t  }\n\t\n\t  /**\n\t   * Sets the loading parameter and updates the hidden state.\n\t   * @param value {boolean} Whether or not the component is currently loading.\n\t   */\n\t  function setLoading(value) {\n\t    if (ctrl.loading != value) {\n\t      ctrl.loading = value;\n\t    }\n\t\n\t    // Always refresh the hidden variable as something else might have changed\n\t    ctrl.hidden = shouldHide();\n\t  }\n\t\n\t  /**\n\t   * Determines if the menu should be hidden.\n\t   * @returns {boolean}\n\t   */\n\t  function shouldHide () {\n\t    if ((ctrl.loading && !hasMatches()) || hasSelection() || !hasFocus) {\n\t      return true;\n\t    }\n\t\n\t    return !shouldShow();\n\t  }\n\t\n\t  /**\n\t   * Determines if the menu should be shown.\n\t   * @returns {boolean}\n\t   */\n\t  function shouldShow() {\n\t    return (isMinLengthMet() && hasMatches()) || notFoundVisible();\n\t  }\n\t\n\t  /**\n\t   * Returns true if the search text has matches.\n\t   * @returns {boolean}\n\t   */\n\t  function hasMatches() {\n\t    return ctrl.matches.length ? true : false;\n\t  }\n\t\n\t  /**\n\t   * Returns true if the autocomplete has a valid selection.\n\t   * @returns {boolean}\n\t   */\n\t  function hasSelection() {\n\t    return ctrl.scope.selectedItem ? true : false;\n\t  }\n\t\n\t  /**\n\t   * Returns true if the loading indicator is, or should be, visible.\n\t   * @returns {boolean}\n\t   */\n\t  function loadingIsVisible() {\n\t    return ctrl.loading && !hasSelection();\n\t  }\n\t\n\t  /**\n\t   * Returns the display value of the current item.\n\t   * @returns {*}\n\t   */\n\t  function getCurrentDisplayValue () {\n\t    return getDisplayValue(ctrl.matches[ ctrl.index ]);\n\t  }\n\t\n\t  /**\n\t   * Determines if the minimum length is met by the search text.\n\t   * @returns {*}\n\t   */\n\t  function isMinLengthMet () {\n\t    return ($scope.searchText || '').length >= getMinLength();\n\t  }\n\t\n\t  //-- actions\n\t\n\t  /**\n\t   * Defines a public property with a handler and a default value.\n\t   * @param key\n\t   * @param handler\n\t   * @param value\n\t   */\n\t  function defineProperty (key, handler, value) {\n\t    Object.defineProperty(ctrl, key, {\n\t      get: function () { return value; },\n\t      set: function (newValue) {\n\t        var oldValue = value;\n\t        value        = newValue;\n\t        handler(newValue, oldValue);\n\t      }\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Selects the item at the given index.\n\t   * @param index\n\t   */\n\t  function select (index) {\n\t    //-- force form to update state for validation\n\t    $mdUtil.nextTick(function () {\n\t      getDisplayValue(ctrl.matches[ index ]).then(function (val) {\n\t        var ngModel = elements.$.input.controller('ngModel');\n\t        ngModel.$setViewValue(val);\n\t        ngModel.$render();\n\t      }).finally(function () {\n\t        $scope.selectedItem = ctrl.matches[ index ];\n\t        setLoading(false);\n\t      });\n\t    }, false);\n\t  }\n\t\n\t  /**\n\t   * Clears the searchText value and selected item.\n\t   */\n\t  function clearValue () {\n\t    // Set the loading to true so we don't see flashes of content\n\t    setLoading(true);\n\t\n\t    // Reset our variables\n\t    ctrl.index = 0;\n\t    ctrl.matches = [];\n\t    $scope.searchText = '';\n\t\n\t    // Tell the select to fire and select nothing\n\t    select(-1);\n\t\n\t    // Per http://www.w3schools.com/jsref/event_oninput.asp\n\t    var eventObj = document.createEvent('CustomEvent');\n\t    eventObj.initCustomEvent('input', true, true, { value: $scope.searchText });\n\t    elements.input.dispatchEvent(eventObj);\n\t\n\t    elements.input.focus();\n\t  }\n\t\n\t  /**\n\t   * Fetches the results for the provided search text.\n\t   * @param searchText\n\t   */\n\t  function fetchResults (searchText) {\n\t    var items = $scope.$parent.$eval(itemExpr),\n\t        term  = searchText.toLowerCase();\n\t    if (angular.isArray(items)) {\n\t      handleResults(items);\n\t    } else if (items) {\n\t      setLoading(true);\n\t      $mdUtil.nextTick(function () {\n\t        if (items.success) items.success(handleResults);\n\t        if (items.then)    items.then(handleResults);\n\t        if (items.finally) items.finally(function () {\n\t          setLoading(false);\n\t        });\n\t      },true, $scope);\n\t    }\n\t    function handleResults (matches) {\n\t      cache[ term ] = matches;\n\t      if ((searchText || '') !== ($scope.searchText || '')) return; //-- just cache the results if old request\n\t      ctrl.matches = matches;\n\t      ctrl.hidden  = shouldHide();\n\t      if ($scope.selectOnMatch) selectItemOnMatch();\n\t      updateMessages();\n\t      positionDropdown();\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Updates the ARIA messages\n\t   */\n\t  function updateMessages () {\n\t    getCurrentDisplayValue().then(function (msg) {\n\t      ctrl.messages = [ getCountMessage(), msg ];\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Returns the ARIA message for how many results match the current query.\n\t   * @returns {*}\n\t   */\n\t  function getCountMessage () {\n\t    if (lastCount === ctrl.matches.length) return '';\n\t    lastCount = ctrl.matches.length;\n\t    switch (ctrl.matches.length) {\n\t      case 0:\n\t        return 'There are no matches available.';\n\t      case 1:\n\t        return 'There is 1 match available.';\n\t      default:\n\t        return 'There are ' + ctrl.matches.length + ' matches available.';\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Makes sure that the focused element is within view.\n\t   */\n\t  function updateScroll () {\n\t    if (!elements.li[0]) return;\n\t    var height = elements.li[0].offsetHeight,\n\t        top = height * ctrl.index,\n\t        bot = top + height,\n\t        hgt = elements.scroller.clientHeight,\n\t        scrollTop = elements.scroller.scrollTop;\n\t    if (top < scrollTop) {\n\t      scrollTo(top);\n\t    } else if (bot > scrollTop + hgt) {\n\t      scrollTo(bot - hgt);\n\t    }\n\t  }\n\t\n\t  function scrollTo (offset) {\n\t    elements.$.scrollContainer.controller('mdVirtualRepeatContainer').scrollTo(offset);\n\t  }\n\t\n\t  function notFoundVisible () {\n\t    var textLength = (ctrl.scope.searchText || '').length;\n\t\n\t    return ctrl.hasNotFound && !hasMatches() && !ctrl.loading && textLength >= getMinLength() && hasFocus && !hasSelection();\n\t  }\n\t\n\t  /**\n\t   * Starts the query to gather the results for the current searchText.  Attempts to return cached\n\t   * results first, then forwards the process to `fetchResults` if necessary.\n\t   */\n\t  function handleQuery () {\n\t    var searchText = $scope.searchText,\n\t        term       = searchText.toLowerCase();\n\t    //-- if results are cached, pull in cached results\n\t    if (!$scope.noCache && cache[ term ]) {\n\t      ctrl.matches = cache[ term ];\n\t      updateMessages();\n\t    } else {\n\t      fetchResults(searchText);\n\t    }\n\t\n\t    ctrl.hidden = shouldHide();\n\t  }\n\t\n\t  /**\n\t   * If there is only one matching item and the search text matches its display value exactly,\n\t   * automatically select that item.  Note: This function is only called if the user uses the\n\t   * `md-select-on-match` flag.\n\t   */\n\t  function selectItemOnMatch () {\n\t    var searchText = $scope.searchText,\n\t        matches    = ctrl.matches,\n\t        item       = matches[ 0 ];\n\t    if (matches.length === 1) getDisplayValue(item).then(function (displayValue) {\n\t      if (searchText == displayValue) select(0);\n\t    });\n\t  }\n\t\n\t}\n\tMdAutocompleteCtrl.$inject = [\"$scope\", \"$element\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$window\", \"$animate\", \"$rootElement\", \"$attrs\", \"$q\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.autocomplete')\n\t    .directive('mdAutocomplete', MdAutocomplete);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdAutocomplete\n\t * @module material.components.autocomplete\n\t *\n\t * @description\n\t * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a\n\t *     custom query. This component allows you to provide real-time suggestions as the user types\n\t *     in the input area.\n\t *\n\t * To start, you will need to specify the required parameters and provide a template for your\n\t *     results. The content inside `md-autocomplete` will be treated as a template.\n\t *\n\t * In more complex cases, you may want to include other content such as a message to display when\n\t *     no matches were found.  You can do this by wrapping your template in `md-item-template` and\n\t *     adding a tag for `md-not-found`.  An example of this is shown below.\n\t *\n\t * ### Validation\n\t *\n\t * You can use `ng-messages` to include validation the same way that you would normally validate;\n\t *     however, if you want to replicate a standard input with a floating label, you will have to\n\t *     do the following:\n\t *\n\t * - Make sure that your template is wrapped in `md-item-template`\n\t * - Add your `ng-messages` code inside of `md-autocomplete`\n\t * - Add your validation properties to `md-autocomplete` (ie. `required`)\n\t * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)\n\t *\n\t * There is an example below of how this should look.\n\t *\n\t *\n\t * @param {expression} md-items An expression in the format of `item in items` to iterate over\n\t *     matches for your search.\n\t * @param {expression=} md-selected-item-change An expression to be run each time a new item is\n\t *     selected\n\t * @param {expression=} md-search-text-change An expression to be run each time the search text\n\t *     updates\n\t * @param {expression=} md-search-text A model to bind the search query text to\n\t * @param {object=} md-selected-item A model to bind the selected item to\n\t * @param {expression=} md-item-text An expression that will convert your object to a single string.\n\t * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n\t * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete\n\t * @param {boolean=} ng-disabled Determines whether or not to disable the input field\n\t * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will\n\t *     make suggestions\n\t * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking\n\t *     for results\n\t * @param {boolean=} md-autofocus If true, will immediately focus the input element\n\t * @param {boolean=} md-autoselect If true, the first item will be selected by default\n\t * @param {string=} md-menu-class This will be applied to the dropdown menu for styling\n\t * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in\n\t *     `md-input-container`\n\t * @param {string=} md-input-name The name attribute given to the input element to be used with\n\t *     FormController\n\t * @param {string=} md-input-id An ID to be added to the input element\n\t * @param {number=} md-input-minlength The minimum length for the input's value for validation\n\t * @param {number=} md-input-maxlength The maximum length for the input's value for validation\n\t * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact\n\t *     the item if the search text is an exact match\n\t *\n\t * @usage\n\t * ### Basic Example\n\t * <hljs lang=\"html\">\n\t *   <md-autocomplete\n\t *       md-selected-item=\"selectedItem\"\n\t *       md-search-text=\"searchText\"\n\t *       md-items=\"item in getMatches(searchText)\"\n\t *       md-item-text=\"item.display\">\n\t *     <span md-highlight-text=\"searchText\">{{item.display}}</span>\n\t *   </md-autocomplete>\n\t * </hljs>\n\t *\n\t * ### Example with \"not found\" message\n\t * <hljs lang=\"html\">\n\t * <md-autocomplete\n\t *     md-selected-item=\"selectedItem\"\n\t *     md-search-text=\"searchText\"\n\t *     md-items=\"item in getMatches(searchText)\"\n\t *     md-item-text=\"item.display\">\n\t *   <md-item-template>\n\t *     <span md-highlight-text=\"searchText\">{{item.display}}</span>\n\t *   </md-item-template>\n\t *   <md-not-found>\n\t *     No matches found.\n\t *   </md-not-found>\n\t * </md-autocomplete>\n\t * </hljs>\n\t *\n\t * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the\n\t *     different parts that make up our component.\n\t *\n\t * ### Example with validation\n\t * <hljs lang=\"html\">\n\t * <form name=\"autocompleteForm\">\n\t *   <md-autocomplete\n\t *       required\n\t *       md-input-name=\"autocomplete\"\n\t *       md-selected-item=\"selectedItem\"\n\t *       md-search-text=\"searchText\"\n\t *       md-items=\"item in getMatches(searchText)\"\n\t *       md-item-text=\"item.display\">\n\t *     <md-item-template>\n\t *       <span md-highlight-text=\"searchText\">{{item.display}}</span>\n\t *     </md-item-template>\n\t *     <div ng-messages=\"autocompleteForm.autocomplete.$error\">\n\t *       <div ng-message=\"required\">This field is required</div>\n\t *     </div>\n\t *   </md-autocomplete>\n\t * </form>\n\t * </hljs>\n\t *\n\t * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the\n\t *     different parts that make up our component.\n\t */\n\t\n\tfunction MdAutocomplete () {\n\t  var hasNotFoundTemplate = false;\n\t\n\t  return {\n\t    controller:   'MdAutocompleteCtrl',\n\t    controllerAs: '$mdAutocompleteCtrl',\n\t    scope:        {\n\t      inputName:      '@mdInputName',\n\t      inputMinlength: '@mdInputMinlength',\n\t      inputMaxlength: '@mdInputMaxlength',\n\t      searchText:     '=?mdSearchText',\n\t      selectedItem:   '=?mdSelectedItem',\n\t      itemsExpr:      '@mdItems',\n\t      itemText:       '&mdItemText',\n\t      placeholder:    '@placeholder',\n\t      noCache:        '=?mdNoCache',\n\t      selectOnMatch:  '=?mdSelectOnMatch',\n\t      itemChange:     '&?mdSelectedItemChange',\n\t      textChange:     '&?mdSearchTextChange',\n\t      minLength:      '=?mdMinLength',\n\t      delay:          '=?mdDelay',\n\t      autofocus:      '=?mdAutofocus',\n\t      floatingLabel:  '@?mdFloatingLabel',\n\t      autoselect:     '=?mdAutoselect',\n\t      menuClass:      '@?mdMenuClass',\n\t      inputId:        '@?mdInputId'\n\t    },\n\t    link: function(scope, element, attrs, controller) {\n\t      controller.hasNotFound = hasNotFoundTemplate;\n\t    },\n\t    template:     function (element, attr) {\n\t      var noItemsTemplate = getNoItemsTemplate(),\n\t          itemTemplate    = getItemTemplate(),\n\t          leftover        = element.html(),\n\t          tabindex        = attr.tabindex;\n\t\n\t      if (noItemsTemplate) {\n\t        hasNotFoundTemplate = true;\n\t      }\n\t\n\t      if (attr.hasOwnProperty('tabindex')) {\n\t        element.attr('tabindex', '-1');\n\t      }\n\t\n\t      return '\\\n\t        <md-autocomplete-wrap\\\n\t            layout=\"row\"\\\n\t            ng-class=\"{ \\'md-whiteframe-z1\\': !floatingLabel, \\'md-menu-showing\\': !$mdAutocompleteCtrl.hidden }\"\\\n\t            role=\"listbox\">\\\n\t          ' + getInputElement() + '\\\n\t          <md-progress-linear\\\n\t              ng-if=\"$mdAutocompleteCtrl.loadingIsVisible()\"\\\n\t              md-mode=\"indeterminate\"></md-progress-linear>\\\n\t          <md-virtual-repeat-container\\\n\t              md-auto-shrink\\\n\t              md-auto-shrink-min=\"1\"\\\n\t              ng-hide=\"$mdAutocompleteCtrl.hidden\"\\\n\t              class=\"md-autocomplete-suggestions-container md-whiteframe-z1\"\\\n\t              role=\"presentation\">\\\n\t            <ul class=\"md-autocomplete-suggestions\"\\\n\t                ng-class=\"::menuClass\"\\\n\t                id=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n\t                ng-mouseenter=\"$mdAutocompleteCtrl.listEnter()\"\\\n\t                ng-mouseleave=\"$mdAutocompleteCtrl.listLeave()\"\\\n\t                ng-mouseup=\"$mdAutocompleteCtrl.mouseUp()\">\\\n\t              <li md-virtual-repeat=\"item in $mdAutocompleteCtrl.matches\"\\\n\t                  ng-class=\"{ selected: $index === $mdAutocompleteCtrl.index }\"\\\n\t                  ng-click=\"$mdAutocompleteCtrl.select($index)\"\\\n\t                  md-extra-name=\"$mdAutocompleteCtrl.itemName\">\\\n\t                  ' + itemTemplate + '\\\n\t                  </li>' + noItemsTemplate + '\\\n\t            </ul>\\\n\t          </md-virtual-repeat-container>\\\n\t        </md-autocomplete-wrap>\\\n\t        <aria-status\\\n\t            class=\"md-visually-hidden\"\\\n\t            role=\"status\"\\\n\t            aria-live=\"assertive\">\\\n\t          <p ng-repeat=\"message in $mdAutocompleteCtrl.messages track by $index\" ng-if=\"message\">{{message}}</p>\\\n\t        </aria-status>';\n\t\n\t      function getItemTemplate() {\n\t        var templateTag = element.find('md-item-template').detach(),\n\t            html = templateTag.length ? templateTag.html() : element.html();\n\t        if (!templateTag.length) element.empty();\n\t        return '<md-autocomplete-parent-scope md-autocomplete-replace>' + html + '</md-autocomplete-parent-scope>';\n\t      }\n\t\n\t      function getNoItemsTemplate() {\n\t        var templateTag = element.find('md-not-found').detach(),\n\t            template = templateTag.length ? templateTag.html() : '';\n\t        return template\n\t            ? '<li ng-if=\"$mdAutocompleteCtrl.notFoundVisible()\"\\\n\t                         md-autocomplete-parent-scope>' + template + '</li>'\n\t            : '';\n\t\n\t      }\n\t\n\t      function getInputElement () {\n\t        if (attr.mdFloatingLabel) {\n\t          return '\\\n\t            <md-input-container flex ng-if=\"floatingLabel\">\\\n\t              <label>{{floatingLabel}}</label>\\\n\t              <input type=\"search\"\\\n\t                  ' + (tabindex != null ? 'tabindex=\"' + tabindex + '\"' : '') + '\\\n\t                  id=\"{{ inputId || \\'fl-input-\\' + $mdAutocompleteCtrl.id }}\"\\\n\t                  name=\"{{inputName}}\"\\\n\t                  autocomplete=\"off\"\\\n\t                  ng-required=\"$mdAutocompleteCtrl.isRequired\"\\\n\t                  ng-minlength=\"inputMinlength\"\\\n\t                  ng-maxlength=\"inputMaxlength\"\\\n\t                  ng-disabled=\"$mdAutocompleteCtrl.isDisabled\"\\\n\t                  ng-model=\"$mdAutocompleteCtrl.scope.searchText\"\\\n\t                  ng-keydown=\"$mdAutocompleteCtrl.keydown($event)\"\\\n\t                  ng-blur=\"$mdAutocompleteCtrl.blur()\"\\\n\t                  ng-focus=\"$mdAutocompleteCtrl.focus()\"\\\n\t                  aria-owns=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n\t                  aria-label=\"{{floatingLabel}}\"\\\n\t                  aria-autocomplete=\"list\"\\\n\t                  aria-haspopup=\"true\"\\\n\t                  aria-activedescendant=\"\"\\\n\t                  aria-expanded=\"{{!$mdAutocompleteCtrl.hidden}}\"/>\\\n\t              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\\\n\t            </md-input-container>';\n\t        } else {\n\t          return '\\\n\t            <input flex type=\"search\"\\\n\t                ' + (tabindex != null ? 'tabindex=\"' + tabindex + '\"' : '') + '\\\n\t                id=\"{{ inputId || \\'input-\\' + $mdAutocompleteCtrl.id }}\"\\\n\t                name=\"{{inputName}}\"\\\n\t                ng-if=\"!floatingLabel\"\\\n\t                autocomplete=\"off\"\\\n\t                ng-required=\"$mdAutocompleteCtrl.isRequired\"\\\n\t                ng-disabled=\"$mdAutocompleteCtrl.isDisabled\"\\\n\t                ng-model=\"$mdAutocompleteCtrl.scope.searchText\"\\\n\t                ng-keydown=\"$mdAutocompleteCtrl.keydown($event)\"\\\n\t                ng-blur=\"$mdAutocompleteCtrl.blur()\"\\\n\t                ng-focus=\"$mdAutocompleteCtrl.focus()\"\\\n\t                placeholder=\"{{placeholder}}\"\\\n\t                aria-owns=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n\t                aria-label=\"{{placeholder}}\"\\\n\t                aria-autocomplete=\"list\"\\\n\t                aria-haspopup=\"true\"\\\n\t                aria-activedescendant=\"\"\\\n\t                aria-expanded=\"{{!$mdAutocompleteCtrl.hidden}}\"/>\\\n\t            <button\\\n\t                type=\"button\"\\\n\t                tabindex=\"-1\"\\\n\t                ng-if=\"$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled\"\\\n\t                ng-click=\"$mdAutocompleteCtrl.clear()\">\\\n\t              <md-icon md-svg-icon=\"md-close\"></md-icon>\\\n\t              <span class=\"md-visually-hidden\">Clear</span>\\\n\t            </button>\\\n\t                ';\n\t        }\n\t      }\n\t    }\n\t  };\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t  .module('material.components.autocomplete')\n\t  .directive('mdAutocompleteParentScope', MdAutocompleteItemScopeDirective);\n\t\n\tfunction MdAutocompleteItemScopeDirective($compile, $mdUtil) {\n\t  return {\n\t    restrict: 'AE',\n\t    link: postLink,\n\t    terminal: true\n\t  };\n\t\n\t  function postLink(scope, element, attr) {\n\t    var ctrl = scope.$mdAutocompleteCtrl;\n\t    var newScope = ctrl.parent.$new();\n\t    var itemName = ctrl.itemName;\n\t\n\t    // Watch for changes to our scope's variables and copy them to the new scope\n\t    watchVariable('$index', '$index');\n\t    watchVariable('item', itemName);\n\t\n\t    // Recompile the contents with the new/modified scope\n\t    $compile(element.contents())(newScope);\n\t\n\t    // Replace it if required\n\t    if (attr.hasOwnProperty('mdAutocompleteReplace')) {\n\t      element.after(element.contents());\n\t      element.remove();\n\t    }\n\t\n\t    /**\n\t     * Creates a watcher for variables that are copied from the parent scope\n\t     * @param variable\n\t     * @param alias\n\t     */\n\t    function watchVariable(variable, alias) {\n\t      newScope[alias] = scope[variable];\n\t\n\t      scope.$watch(variable, function(value) {\n\t        $mdUtil.nextTick(function() {\n\t          newScope[alias] = value;\n\t        });\n\t      });\n\t    }\n\t  }\n\t}\n\tMdAutocompleteItemScopeDirective.$inject = [\"$compile\", \"$mdUtil\"];\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.autocomplete')\n\t    .controller('MdHighlightCtrl', MdHighlightCtrl);\n\t\n\tfunction MdHighlightCtrl ($scope, $element, $attrs) {\n\t  this.init = init;\n\t\n\t  function init (termExpr, unsafeTextExpr) {\n\t    var text = null,\n\t        regex = null,\n\t        flags = $attrs.mdHighlightFlags || '',\n\t        watcher = $scope.$watch(function($scope) {\n\t          return {\n\t            term: termExpr($scope),\n\t            unsafeText: unsafeTextExpr($scope)\n\t          };\n\t        }, function (state, prevState) {\n\t          if (text === null || state.unsafeText !== prevState.unsafeText) {\n\t            text = angular.element('<div>').text(state.unsafeText).html()\n\t          }\n\t          if (regex === null || state.term !== prevState.term) {\n\t            regex = getRegExp(state.term, flags);\n\t          }\n\t\n\t          $element.html(text.replace(regex, '<span class=\"highlight\">$&</span>'));\n\t        }, true);\n\t    $element.on('$destroy', function () { watcher(); });\n\t  }\n\t\n\t  function sanitize (term) {\n\t    return term && term.replace(/[\\\\\\^\\$\\*\\+\\?\\.\\(\\)\\|\\{}\\[\\]]/g, '\\\\$&');\n\t  }\n\t\n\t  function getRegExp (text, flags) {\n\t    var str = '';\n\t    if (flags.indexOf('^') >= 1) str += '^';\n\t    str += text;\n\t    if (flags.indexOf('$') >= 1) str += '$';\n\t    return new RegExp(sanitize(str), flags.replace(/[\\$\\^]/g, ''));\n\t  }\n\t}\n\tMdHighlightCtrl.$inject = [\"$scope\", \"$element\", \"$attrs\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.autocomplete')\n\t    .directive('mdHighlightText', MdHighlight);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdHighlightText\n\t * @module material.components.autocomplete\n\t *\n\t * @description\n\t * The `md-highlight-text` directive allows you to specify text that should be highlighted within\n\t *     an element.  Highlighted text will be wrapped in `<span class=\"highlight\"></span>` which can\n\t *     be styled through CSS.  Please note that child elements may not be used with this directive.\n\t *\n\t * @param {string} md-highlight-text A model to be searched for\n\t * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).\n\t * #### **Supported flags**:\n\t * - `g`: Find all matches within the provided text\n\t * - `i`: Ignore case when searching for matches\n\t * - `$`: Only match if the text ends with the search term\n\t * - `^`: Only match if the text begins with the search term\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <input placeholder=\"Enter a search term...\" ng-model=\"searchTerm\" type=\"text\" />\n\t * <ul>\n\t *   <li ng-repeat=\"result in results\" md-highlight-text=\"searchTerm\">\n\t *     {{result.text}}\n\t *   </li>\n\t * </ul>\n\t * </hljs>\n\t */\n\t\n\tfunction MdHighlight ($interpolate, $parse) {\n\t  return {\n\t    terminal: true,\n\t    controller: 'MdHighlightCtrl',\n\t    compile: function mdHighlightCompile(tElement, tAttr) {\n\t      var termExpr = $parse(tAttr.mdHighlightText);\n\t      var unsafeTextExpr = $interpolate(tElement.html());\n\t\n\t      return function mdHighlightLink(scope, element, attr, ctrl) {\n\t        ctrl.init(termExpr, unsafeTextExpr);\n\t      };\n\t    }\n\t  };\n\t}\n\tMdHighlight.$inject = [\"$interpolate\", \"$parse\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.chips')\n\t    .directive('mdChip', MdChip);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdChip\n\t * @module material.components.chips\n\t *\n\t * @description\n\t * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual\n\t * chips.\n\t *\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *   <md-chip>{{$chip}}</md-chip>\n\t * </hljs>\n\t *\n\t */\n\t\n\t// This hint text is hidden within a chip but used by screen readers to\n\t// inform the user how they can interact with a chip.\n\tvar DELETE_HINT_TEMPLATE = '\\\n\t    <span ng-if=\"!$mdChipsCtrl.readonly\" class=\"md-visually-hidden\">\\\n\t      {{$mdChipsCtrl.deleteHint}}\\\n\t    </span>';\n\t\n\t/**\n\t * MDChip Directive Definition\n\t *\n\t * @param $mdTheming\n\t * @param $mdInkRipple\n\t * @ngInject\n\t */\n\tfunction MdChip($mdTheming, $mdUtil) {\n\t  var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);\n\t\n\t  return {\n\t    restrict: 'E',\n\t    require: '^?mdChips',\n\t    compile:  compile\n\t  };\n\t\n\t  function compile(element, attr) {\n\t    // Append the delete template\n\t    element.append($mdUtil.processTemplate(hintTemplate));\n\t\n\t    return function postLink(scope, element, attr, ctrl) {\n\t      element.addClass('md-chip');\n\t      $mdTheming(element);\n\t\n\t      if (ctrl) angular.element(element[0].querySelector('.md-chip-content'))\n\t          .on('blur', function () {\n\t            ctrl.selectedChip = -1;\n\t          });\n\t    };\n\t  }\n\t}\n\tMdChip.$inject = [\"$mdTheming\", \"$mdUtil\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.chips')\n\t    .directive('mdChipRemove', MdChipRemove);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdChipRemove\n\t * @module material.components.chips\n\t *\n\t * @description\n\t * `<md-chip-remove>`\n\t * Designates an element to be used as the delete button for a chip. This\n\t * element is passed as a child of the `md-chips` element.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *   <md-chips><button md-chip-remove>DEL</button></md-chips>\n\t * </hljs>\n\t */\n\t\n\t\n\t/**\n\t * MdChipRemove Directive Definition.\n\t * \n\t * @param $compile\n\t * @param $timeout\n\t * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}\n\t * @constructor\n\t */\n\tfunction MdChipRemove ($timeout) {\n\t  return {\n\t    restrict: 'A',\n\t    require: '^mdChips',\n\t    scope: false,\n\t    link: postLink\n\t  };\n\t\n\t  function postLink(scope, element, attr, ctrl) {\n\t    element.on('click', function(event) {\n\t      scope.$apply(function() {\n\t        ctrl.removeChip(scope.$$replacedScope.$index);\n\t      });\n\t    });\n\t\n\t    // Child elements aren't available until after a $timeout tick as they are hidden by an\n\t    // `ng-if`. see http://goo.gl/zIWfuw\n\t    $timeout(function() {\n\t      element.attr({ tabindex: -1, ariaHidden: true });\n\t      element.find('button').attr('tabindex', '-1');\n\t    });\n\t  }\n\t}\n\tMdChipRemove.$inject = [\"$timeout\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.chips')\n\t    .directive('mdChipTransclude', MdChipTransclude);\n\t\n\tfunction MdChipTransclude ($compile) {\n\t  return {\n\t    restrict: 'EA',\n\t    terminal: true,\n\t    link: link,\n\t    scope: false\n\t  };\n\t  function link (scope, element, attr) {\n\t    var ctrl = scope.$parent.$mdChipsCtrl,\n\t        newScope = ctrl.parent.$new(false, ctrl.parent);\n\t    newScope.$$replacedScope = scope;\n\t    newScope.$chip = scope.$chip;\n\t    newScope.$index = scope.$index;\n\t    newScope.$mdChipsCtrl = ctrl;\n\t\n\t    var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);\n\t\n\t    element.html(newHtml);\n\t    $compile(element.contents())(newScope);\n\t  }\n\t}\n\tMdChipTransclude.$inject = [\"$compile\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.chips')\n\t    .controller('MdChipsCtrl', MdChipsCtrl);\n\t\n\t/**\n\t * Controller for the MdChips component. Responsible for adding to and\n\t * removing from the list of chips, marking chips as selected, and binding to\n\t * the models of various input components.\n\t *\n\t * @param $scope\n\t * @param $mdConstant\n\t * @param $log\n\t * @param $element\n\t * @constructor\n\t */\n\tfunction MdChipsCtrl ($scope, $mdConstant, $log, $element, $timeout) {\n\t  /** @type {$timeout} **/\n\t  this.$timeout = $timeout;\n\t\n\t  /** @type {Object} */\n\t  this.$mdConstant = $mdConstant;\n\t\n\t  /** @type {angular.$scope} */\n\t  this.$scope = $scope;\n\t\n\t  /** @type {angular.$scope} */\n\t  this.parent = $scope.$parent;\n\t\n\t  /** @type {$log} */\n\t  this.$log = $log;\n\t\n\t  /** @type {$element} */\n\t  this.$element = $element;\n\t\n\t  /** @type {angular.NgModelController} */\n\t  this.ngModelCtrl = null;\n\t\n\t  /** @type {angular.NgModelController} */\n\t  this.userInputNgModelCtrl = null;\n\t\n\t  /** @type {Element} */\n\t  this.userInputElement = null;\n\t\n\t  /** @type {Array.<Object>} */\n\t  this.items = [];\n\t\n\t  /** @type {number} */\n\t  this.selectedChip = -1;\n\t\n\t  /** @type {boolean} */\n\t  this.hasAutocomplete = false;\n\t\n\t\n\t  /**\n\t   * Hidden hint text for how to delete a chip. Used to give context to screen readers.\n\t   * @type {string}\n\t   */\n\t  this.deleteHint = 'Press delete to remove this chip.';\n\t\n\t  /**\n\t   * Hidden label for the delete button. Used to give context to screen readers.\n\t   * @type {string}\n\t   */\n\t  this.deleteButtonLabel = 'Remove';\n\t\n\t  /**\n\t   * Model used by the input element.\n\t   * @type {string}\n\t   */\n\t  this.chipBuffer = '';\n\t\n\t  /**\n\t   * Whether to use the onAppend expression to transform the chip buffer\n\t   * before appending it to the list.\n\t   * @type {boolean}\n\t   */\n\t  this.useOnAppend = false;\n\t\n\t  /**\n\t   * Whether to use the onSelect expression to notify the component's user\n\t   * after selecting a chip from the list.\n\t   * @type {boolean}\n\t   */\n\t  this.useOnSelect = false;\n\t}\n\tMdChipsCtrl.$inject = [\"$scope\", \"$mdConstant\", \"$log\", \"$element\", \"$timeout\"];\n\t\n\t/**\n\t * Handles the keydown event on the input element: <enter> appends the\n\t * buffer to the chip list, while backspace removes the last chip in the list\n\t * if the current buffer is empty.\n\t * @param event\n\t */\n\tMdChipsCtrl.prototype.inputKeydown = function(event) {\n\t  var chipBuffer = this.getChipBuffer();\n\t\n\t  switch (event.keyCode) {\n\t    case this.$mdConstant.KEY_CODE.ENTER:\n\t      if ((this.hasAutocomplete && this.requireMatch) || !chipBuffer) break;\n\t      event.preventDefault();\n\t      this.appendChip(chipBuffer);\n\t      this.resetChipBuffer();\n\t      break;\n\t    case this.$mdConstant.KEY_CODE.BACKSPACE:\n\t      if (chipBuffer) break;\n\t      event.preventDefault();\n\t      event.stopPropagation();\n\t      if (this.items.length) this.selectAndFocusChipSafe(this.items.length - 1);\n\t      break;\n\t  }\n\t};\n\t\n\t/**\n\t * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow\n\t * keys switch which chips is active\n\t * @param event\n\t */\n\tMdChipsCtrl.prototype.chipKeydown = function (event) {\n\t  if (this.getChipBuffer()) return;\n\t  switch (event.keyCode) {\n\t    case this.$mdConstant.KEY_CODE.BACKSPACE:\n\t    case this.$mdConstant.KEY_CODE.DELETE:\n\t      if (this.selectedChip < 0) return;\n\t      event.preventDefault();\n\t      this.removeAndSelectAdjacentChip(this.selectedChip);\n\t      break;\n\t    case this.$mdConstant.KEY_CODE.LEFT_ARROW:\n\t      event.preventDefault();\n\t      if (this.selectedChip < 0) this.selectedChip = this.items.length;\n\t      if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);\n\t      break;\n\t    case this.$mdConstant.KEY_CODE.RIGHT_ARROW:\n\t      event.preventDefault();\n\t      this.selectAndFocusChipSafe(this.selectedChip + 1);\n\t      break;\n\t    case this.$mdConstant.KEY_CODE.ESCAPE:\n\t    case this.$mdConstant.KEY_CODE.TAB:\n\t      if (this.selectedChip < 0) return;\n\t      event.preventDefault();\n\t      this.onFocus();\n\t      break;\n\t  }\n\t};\n\t\n\t/**\n\t * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`\n\t * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used\n\t * always.\n\t */\n\tMdChipsCtrl.prototype.getPlaceholder = function() {\n\t  // Allow `secondary-placeholder` to be blank.\n\t  var useSecondary = (this.items.length &&\n\t      (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));\n\t  return useSecondary ? this.placeholder : this.secondaryPlaceholder;\n\t};\n\t\n\t/**\n\t * Removes chip at {@code index} and selects the adjacent chip.\n\t * @param index\n\t */\n\tMdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {\n\t  var selIndex = this.getAdjacentChipIndex(index);\n\t  this.removeChip(index);\n\t  this.$timeout(angular.bind(this, function () {\n\t      this.selectAndFocusChipSafe(selIndex);\n\t  }));\n\t};\n\t\n\t/**\n\t * Sets the selected chip index to -1.\n\t */\n\tMdChipsCtrl.prototype.resetSelectedChip = function() {\n\t  this.selectedChip = -1;\n\t};\n\t\n\t/**\n\t * Gets the index of an adjacent chip to select after deletion. Adjacency is\n\t * determined as the next chip in the list, unless the target chip is the\n\t * last in the list, then it is the chip immediately preceding the target. If\n\t * there is only one item in the list, -1 is returned (select none).\n\t * The number returned is the index to select AFTER the target has been\n\t * removed.\n\t * If the current chip is not selected, then -1 is returned to select none.\n\t */\n\tMdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {\n\t  var len = this.items.length - 1;\n\t  return (len == 0) ? -1 :\n\t      (index == len) ? index -1 : index;\n\t};\n\t\n\t/**\n\t * Append the contents of the buffer to the chip list. This method will first\n\t * call out to the md-on-append method, if provided\n\t * @param newChip\n\t */\n\tMdChipsCtrl.prototype.appendChip = function(newChip) {\n\t  if (this.useOnAppend && this.onAppend) {\n\t    newChip = this.onAppend({'$chip': newChip});\n\t  }\n\t  if (this.items.indexOf(newChip) + 1) return;\n\t  this.items.push(newChip);\n\t};\n\t\n\t/**\n\t * Sets whether to use the md-on-append expression. This expression is\n\t * bound to scope and controller in {@code MdChipsDirective} as\n\t * {@code onAppend}. Due to the nature of directive scope bindings, the\n\t * controller cannot know on its own/from the scope whether an expression was\n\t * actually provided.\n\t */\n\tMdChipsCtrl.prototype.useOnAppendExpression = function() {\n\t  this.useOnAppend = true;\n\t};\n\t\n\t/**\n\t * Sets whether to use the md-on-remove expression. This expression is\n\t * bound to scope and controller in {@code MdChipsDirective} as\n\t * {@code onRemove}. Due to the nature of directive scope bindings, the\n\t * controller cannot know on its own/from the scope whether an expression was\n\t * actually provided.\n\t */\n\tMdChipsCtrl.prototype.useOnRemoveExpression = function() {\n\t  this.useOnRemove = true;\n\t};\n\t\n\t/*\n\t * Sets whether to use the md-on-select expression. This expression is\n\t * bound to scope and controller in {@code MdChipsDirective} as\n\t * {@code onSelect}. Due to the nature of directive scope bindings, the\n\t * controller cannot know on its own/from the scope whether an expression was\n\t * actually provided.\n\t */\n\tMdChipsCtrl.prototype.useOnSelectExpression = function() {\n\t  this.useOnSelect = true;\n\t};\n\t\n\t/**\n\t * Gets the input buffer. The input buffer can be the model bound to the\n\t * default input item {@code this.chipBuffer}, the {@code selectedItem}\n\t * model of an {@code md-autocomplete}, or, through some magic, the model\n\t * bound to any inpput or text area element found within a\n\t * {@code md-input-container} element.\n\t * @return {Object|string}\n\t */\n\tMdChipsCtrl.prototype.getChipBuffer = function() {\n\t  return !this.userInputElement ? this.chipBuffer :\n\t      this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :\n\t          this.userInputElement[0].value;\n\t};\n\t\n\t/**\n\t * Resets the input buffer for either the internal input or user provided input element.\n\t */\n\tMdChipsCtrl.prototype.resetChipBuffer = function() {\n\t  if (this.userInputElement) {\n\t    if (this.userInputNgModelCtrl) {\n\t      this.userInputNgModelCtrl.$setViewValue('');\n\t      this.userInputNgModelCtrl.$render();\n\t    } else {\n\t      this.userInputElement[0].value = '';\n\t    }\n\t  } else {\n\t    this.chipBuffer = '';\n\t  }\n\t};\n\t\n\t/**\n\t * Removes the chip at the given index.\n\t * @param index\n\t */\n\tMdChipsCtrl.prototype.removeChip = function(index) {\n\t  var removed = this.items.splice(index, 1);\n\t\n\t  if (removed && removed.length && this.useOnRemove && this.onRemove) {\n\t    this.onRemove({ '$chip': removed[0], '$index': index });\n\t  }\n\t};\n\t\n\tMdChipsCtrl.prototype.removeChipAndFocusInput = function (index) {\n\t  this.removeChip(index);\n\t  this.onFocus();\n\t};\n\t/**\n\t * Selects the chip at `index`,\n\t * @param index\n\t */\n\tMdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {\n\t  if (!this.items.length) {\n\t    this.selectChip(-1);\n\t    this.onFocus();\n\t    return;\n\t  }\n\t  if (index === this.items.length) return this.onFocus();\n\t  index = Math.max(index, 0);\n\t  index = Math.min(index, this.items.length - 1);\n\t  this.selectChip(index);\n\t  this.focusChip(index);\n\t};\n\t\n\t/**\n\t * Marks the chip at the given index as selected.\n\t * @param index\n\t */\n\tMdChipsCtrl.prototype.selectChip = function(index) {\n\t  if (index >= -1 && index <= this.items.length) {\n\t    this.selectedChip = index;\n\t\n\t    // Fire the onSelect if provided\n\t    if (this.useOnSelect && this.onSelect) {\n\t      this.onSelect({'$chip': this.items[this.selectedChip] });\n\t    }\n\t  } else {\n\t    this.$log.warn('Selected Chip index out of bounds; ignoring.');\n\t  }\n\t};\n\t\n\t/**\n\t * Selects the chip at `index` and gives it focus.\n\t * @param index\n\t */\n\tMdChipsCtrl.prototype.selectAndFocusChip = function(index) {\n\t  this.selectChip(index);\n\t  if (index != -1) {\n\t    this.focusChip(index);\n\t  }\n\t};\n\t\n\t/**\n\t * Call `focus()` on the chip at `index`\n\t */\n\tMdChipsCtrl.prototype.focusChip = function(index) {\n\t  this.$element[0].querySelector('md-chip[index=\"' + index + '\"] .md-chip-content').focus();\n\t};\n\t\n\t/**\n\t * Configures the required interactions with the ngModel Controller.\n\t * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.\n\t * @param ngModelCtrl\n\t */\n\tMdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {\n\t  this.ngModelCtrl = ngModelCtrl;\n\t\n\t  var self = this;\n\t  ngModelCtrl.$render = function() {\n\t    // model is updated. do something.\n\t    self.items = self.ngModelCtrl.$viewValue;\n\t  };\n\t};\n\t\n\tMdChipsCtrl.prototype.onFocus = function () {\n\t  var input = this.$element[0].querySelector('input');\n\t  input && input.focus();\n\t  this.resetSelectedChip();\n\t};\n\t\n\tMdChipsCtrl.prototype.onInputFocus = function () {\n\t  this.inputHasFocus = true;\n\t  this.resetSelectedChip();\n\t};\n\t\n\tMdChipsCtrl.prototype.onInputBlur = function () {\n\t  this.inputHasFocus = false;\n\t};\n\t\n\t/**\n\t * Configure event bindings on a user-provided input element.\n\t * @param inputElement\n\t */\n\tMdChipsCtrl.prototype.configureUserInput = function(inputElement) {\n\t  this.userInputElement = inputElement;\n\t\n\t  // Find the NgModelCtrl for the input element\n\t  var ngModelCtrl = inputElement.controller('ngModel');\n\t  // `.controller` will look in the parent as well.\n\t  if (ngModelCtrl != this.ngModelCtrl) {\n\t    this.userInputNgModelCtrl = ngModelCtrl;\n\t  }\n\t\n\t  var scope = this.$scope;\n\t  var ctrl = this;\n\t\n\t  // Run all of the events using evalAsync because a focus may fire a blur in the same digest loop\n\t  var scopeApplyFn = function(event, fn) {\n\t    scope.$evalAsync(angular.bind(ctrl, fn, event));\n\t  };\n\t\n\t  // Bind to keydown and focus events of input\n\t  inputElement\n\t      .attr({ tabindex: 0 })\n\t      .on('keydown', function(event) { scopeApplyFn(event, ctrl.inputKeydown) })\n\t      .on('focus', function(event) { scopeApplyFn(event, ctrl.onInputFocus) })\n\t      .on('blur', function(event) { scopeApplyFn(event, ctrl.onInputBlur) })\n\t};\n\t\n\tMdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {\n\t  if ( ctrl ){\n\t    this.hasAutocomplete = true;\n\t    ctrl.registerSelectedItemWatcher(angular.bind(this, function (item) {\n\t      if (item) {\n\t        this.appendChip(item);\n\t        this.resetChipBuffer();\n\t      }\n\t    }));\n\t\n\t    this.$element.find('input')\n\t        .on('focus',angular.bind(this, this.onInputFocus) )\n\t        .on('blur', angular.bind(this, this.onInputBlur) );\n\t  }\n\t};\n\t\n\tMdChipsCtrl.prototype.hasFocus = function () {\n\t  return this.inputHasFocus || this.selectedChip >= 0;\n\t};\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t  angular\n\t      .module('material.components.chips')\n\t      .directive('mdChips', MdChips);\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name mdChips\n\t   * @module material.components.chips\n\t   *\n\t   * @description\n\t   * `<md-chips>` is an input component for building lists of strings or objects. The list items are\n\t   * displayed as 'chips'. This component can make use of an `<input>` element or an\n\t   * `<md-autocomplete>` element.\n\t   *\n\t   * ### Custom templates\n\t   * A custom template may be provided to render the content of each chip. This is achieved by\n\t   * specifying an `<md-chip-template>` element containing the custom content as a child of\n\t   * `<md-chips>`.\n\t   *\n\t   * Note: Any attributes on\n\t   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The\n\t   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing\n\t   * the chip object and its index in the list of chips, respectively.\n\t   * To override the chip delete control, include an element (ideally a button) with the attribute\n\t   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element\n\t   * is also placed as a sibling to the chip content (on which there are also click listeners) to\n\t   * avoid a nested ng-click situation.\n\t   *\n\t   * <h3> Pending Features </h3>\n\t   * <ul style=\"padding-left:20px;\">\n\t   *\n\t   *   <ul>Style\n\t   *     <li>Colours for hover, press states (ripple?).</li>\n\t   *   </ul>\n\t   *\n\t   *   <ul>Validation\n\t   *     <li>allow a validation callback</li>\n\t   *     <li>hilighting style for invalid chips</li>\n\t   *   </ul>\n\t   *\n\t   *   <ul>Item mutation\n\t   *     <li>Support `\n\t   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double\n\t   *       click?\n\t   *     </li>\n\t   *   </ul>\n\t   *\n\t   *   <ul>Truncation and Disambiguation (?)\n\t   *     <li>Truncate chip text where possible, but do not truncate entries such that two are\n\t   *     indistinguishable.</li>\n\t   *   </ul>\n\t   *\n\t   *   <ul>Drag and Drop\n\t   *     <li>Drag and drop chips between related `<md-chips>` elements.\n\t   *     </li>\n\t   *   </ul>\n\t   * </ul>\n\t   *\n\t   *  <span style=\"font-size:.8em;text-align:center\">\n\t   *    Warning: This component is a WORK IN PROGRESS. If you use it now,\n\t   *    it will probably break on you in the future.\n\t   *  </span>\n\t   *\n\t   * @param {string=|object=} ng-model A model to bind the list of items to\n\t   * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n\t   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,\n\t   *    displayed when there is at least on item in the list\n\t   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding\n\t   *    the input and delete buttons\n\t   * @param {expression} md-on-append An expression that when called expects you to return an object\n\t   *    representation of the chip input string.\n\t   * @param {expression=} md-on-remove An expression which will be called when a chip has been\n\t   *    removed.\n\t   * @param {expression=} md-on-select An expression which will be called when a chip is selected.\n\t   * @param {string=} delete-hint A string read by screen readers instructing users that pressing\n\t   *    the delete key will remove the chip.\n\t   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by\n\t   *    screen readers.\n\t   *\n\t   * @usage\n\t   * <hljs lang=\"html\">\n\t   *   <md-chips\n\t   *       ng-model=\"myItems\"\n\t   *       placeholder=\"Add an item\"\n\t   *       readonly=\"isReadOnly\">\n\t   *   </md-chips>\n\t   * </hljs>\n\t   *\n\t   */\n\t\n\t\n\t  var MD_CHIPS_TEMPLATE = '\\\n\t      <md-chips-wrap\\\n\t          ng-if=\"!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0\"\\\n\t          ng-keydown=\"$mdChipsCtrl.chipKeydown($event)\"\\\n\t          ng-class=\"{ \\'md-focused\\': $mdChipsCtrl.hasFocus(), \\'md-readonly\\': !$mdChipsCtrl.ngModelCtrl }\"\\\n\t          class=\"md-chips\">\\\n\t        <md-chip ng-repeat=\"$chip in $mdChipsCtrl.items\"\\\n\t            index=\"{{$index}}\"\\\n\t            ng-class=\"{\\'md-focused\\': $mdChipsCtrl.selectedChip == $index, \\'md-readonly\\': $mdChipsCtrl.readonly}\">\\\n\t          <div class=\"md-chip-content\"\\\n\t              tabindex=\"-1\"\\\n\t              aria-hidden=\"true\"\\\n\t              ng-focus=\"!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)\"\\\n\t              md-chip-transclude=\"$mdChipsCtrl.chipContentsTemplate\"></div>\\\n\t          <div ng-if=\"!$mdChipsCtrl.readonly\"\\\n\t               class=\"md-chip-remove-container\"\\\n\t               md-chip-transclude=\"$mdChipsCtrl.chipRemoveTemplate\"></div>\\\n\t        </md-chip>\\\n\t        <div ng-if=\"!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl\"\\\n\t            class=\"md-chip-input-container\"\\\n\t            md-chip-transclude=\"$mdChipsCtrl.chipInputTemplate\"></div>\\\n\t        </div>\\\n\t      </md-chips-wrap>';\n\t\n\t  var CHIP_INPUT_TEMPLATE = '\\\n\t        <input\\\n\t            tabindex=\"0\"\\\n\t            placeholder=\"{{$mdChipsCtrl.getPlaceholder()}}\"\\\n\t            aria-label=\"{{$mdChipsCtrl.getPlaceholder()}}\"\\\n\t            ng-model=\"$mdChipsCtrl.chipBuffer\"\\\n\t            ng-focus=\"$mdChipsCtrl.onInputFocus()\"\\\n\t            ng-blur=\"$mdChipsCtrl.onInputBlur()\"\\\n\t            ng-keydown=\"$mdChipsCtrl.inputKeydown($event)\">';\n\t\n\t  var CHIP_DEFAULT_TEMPLATE = '\\\n\t      <span>{{$chip}}</span>';\n\t\n\t  var CHIP_REMOVE_TEMPLATE = '\\\n\t      <button\\\n\t          class=\"md-chip-remove\"\\\n\t          ng-if=\"!$mdChipsCtrl.readonly\"\\\n\t          ng-click=\"$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)\"\\\n\t          type=\"button\"\\\n\t          aria-hidden=\"true\"\\\n\t          tabindex=\"-1\">\\\n\t        <md-icon md-svg-icon=\"md-close\"></md-icon>\\\n\t        <span class=\"md-visually-hidden\">\\\n\t          {{$mdChipsCtrl.deleteButtonLabel}}\\\n\t        </span>\\\n\t      </button>';\n\t\n\t  /**\n\t   * MDChips Directive Definition\n\t   */\n\t  function MdChips ($mdTheming, $mdUtil, $compile, $log, $timeout) {\n\t    // Run our templates through $mdUtil.processTemplate() to allow custom start/end symbols\n\t    var templates = getTemplates();\n\t\n\t    return {\n\t      template: function(element, attrs) {\n\t        // Clone the element into an attribute. By prepending the attribute\n\t        // name with '$', Angular won't write it into the DOM. The cloned\n\t        // element propagates to the link function via the attrs argument,\n\t        // where various contained-elements can be consumed.\n\t        attrs['$mdUserTemplate'] = element.clone();\n\t        return templates.chips;\n\t      },\n\t      require: ['mdChips'],\n\t      restrict: 'E',\n\t      controller: 'MdChipsCtrl',\n\t      controllerAs: '$mdChipsCtrl',\n\t      bindToController: true,\n\t      compile: compile,\n\t      scope: {\n\t        readonly: '=readonly',\n\t        placeholder: '@',\n\t        secondaryPlaceholder: '@',\n\t        onAppend: '&mdOnAppend',\n\t        onRemove: '&mdOnRemove',\n\t        onSelect: '&mdOnSelect',\n\t        deleteHint: '@',\n\t        deleteButtonLabel: '@',\n\t        requireMatch: '=?mdRequireMatch'\n\t      }\n\t    };\n\t\n\t    /**\n\t     * Builds the final template for `md-chips` and returns the postLink function.\n\t     *\n\t     * Building the template involves 3 key components:\n\t     * static chips\n\t     * chip template\n\t     * input control\n\t     *\n\t     * If no `ng-model` is provided, only the static chip work needs to be done.\n\t     *\n\t     * If no user-passed `md-chip-template` exists, the default template is used. This resulting\n\t     * template is appended to the chip content element.\n\t     *\n\t     * The remove button may be overridden by passing an element with an md-chip-remove attribute.\n\t     *\n\t     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for\n\t     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.\n\t     * If no user input is provided, a default one is appended to the input container node in the\n\t     * template.\n\t     *\n\t     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for\n\t     * transclusion in the `postLink` function.\n\t     *\n\t     *\n\t     * @param element\n\t     * @param attr\n\t     * @returns {Function}\n\t     */\n\t    function compile(element, attr) {\n\t      // Grab the user template from attr and reset the attribute to null.\n\t      var userTemplate = attr['$mdUserTemplate'];\n\t      attr['$mdUserTemplate'] = null;\n\t\n\t      // Set the chip remove, chip contents and chip input templates. The link function will put\n\t      // them on the scope for transclusion later.\n\t      var chipRemoveTemplate   = getTemplateByQuery('md-chips>*[md-chip-remove]') || templates.remove,\n\t          chipContentsTemplate = getTemplateByQuery('md-chips>md-chip-template') || templates.default,\n\t          chipInputTemplate    = getTemplateByQuery('md-chips>md-autocomplete')\n\t              || getTemplateByQuery('md-chips>input')\n\t              || templates.input,\n\t          staticChips = userTemplate.find('md-chip');\n\t\n\t      // Warn of malformed template. See #2545\n\t      if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {\n\t        $log.warn('invalid placement of md-chip-remove within md-chip-template.');\n\t      }\n\t\n\t      function getTemplateByQuery (query) {\n\t        if (!attr.ngModel) return;\n\t        var element = userTemplate[0].querySelector(query);\n\t        return element && element.outerHTML;\n\t      }\n\t\n\t      /**\n\t       * Configures controller and transcludes.\n\t       */\n\t      return function postLink(scope, element, attrs, controllers) {\n\t\n\t        $mdUtil.initOptionalProperties(scope, attr);\n\t\n\t        $mdTheming(element);\n\t        var mdChipsCtrl = controllers[0];\n\t        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;\n\t        mdChipsCtrl.chipRemoveTemplate   = chipRemoveTemplate;\n\t        mdChipsCtrl.chipInputTemplate    = chipInputTemplate;\n\t\n\t        element\n\t            .attr({ ariaHidden: true, tabindex: -1 })\n\t            .on('focus', function () { mdChipsCtrl.onFocus(); });\n\t\n\t        if (attr.ngModel) {\n\t          mdChipsCtrl.configureNgModel(element.controller('ngModel'));\n\t\n\t          // If an `md-on-append` attribute was set, tell the controller to use the expression\n\t          // when appending chips.\n\t          if (attrs.mdOnAppend) mdChipsCtrl.useOnAppendExpression();\n\t\n\t          // If an `md-on-remove` attribute was set, tell the controller to use the expression\n\t          // when removing chips.\n\t          if (attrs.mdOnRemove) mdChipsCtrl.useOnRemoveExpression();\n\t\n\t          // If an `md-on-select` attribute was set, tell the controller to use the expression\n\t          // when selecting chips.\n\t          if (attrs.mdOnSelect) mdChipsCtrl.useOnSelectExpression();\n\t\n\t          // The md-autocomplete and input elements won't be compiled until after this directive\n\t          // is complete (due to their nested nature). Wait a tick before looking for them to\n\t          // configure the controller.\n\t          if (chipInputTemplate != templates.input) {\n\t            // The autocomplete will not appear until the readonly attribute is not true (i.e.\n\t            // false or undefined), so we have to watch the readonly and then on the next tick\n\t            // after the chip transclusion has run, we can configure the autocomplete and user\n\t            // input.\n\t            scope.$watch('$mdChipsCtrl.readonly', function(readonly) {\n\t              if (!readonly) {\n\t                $mdUtil.nextTick(function(){\n\t                  if (chipInputTemplate.indexOf('<md-autocomplete') === 0)\n\t                    mdChipsCtrl\n\t                        .configureAutocomplete(element.find('md-autocomplete')\n\t                            .controller('mdAutocomplete'));\n\t                  mdChipsCtrl.configureUserInput(element.find('input'));\n\t                });\n\t              }\n\t            });\n\t          }\n\t        }\n\t\n\t        // Compile with the parent's scope and prepend any static chips to the wrapper.\n\t        if (staticChips.length > 0) {\n\t          var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);\n\t          $timeout(function() { element.find('md-chips-wrap').prepend(compiledStaticChips); });\n\t        }\n\t      };\n\t    }\n\t\n\t    function getTemplates() {\n\t      return {\n\t        chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),\n\t        input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),\n\t        default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),\n\t        remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)\n\t      };\n\t    }\n\t  }\n\t  MdChips.$inject = [\"$mdTheming\", \"$mdUtil\", \"$compile\", \"$log\", \"$timeout\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.chips')\n\t    .controller('MdContactChipsCtrl', MdContactChipsCtrl);\n\t\n\t\n\t\n\t/**\n\t * Controller for the MdContactChips component\n\t * @constructor\n\t */\n\tfunction MdContactChipsCtrl () {\n\t  /** @type {Object} */\n\t  this.selectedItem = null;\n\t\n\t  /** @type {string} */\n\t  this.searchText = '';\n\t}\n\t\n\t\n\tMdContactChipsCtrl.prototype.queryContact = function(searchText) {\n\t  var results = this.contactQuery({'$query': searchText});\n\t  return this.filterSelected ?\n\t      results.filter(angular.bind(this, this.filterSelectedContacts)) : results;\n\t};\n\t\n\t\n\tMdContactChipsCtrl.prototype.itemName = function(item) {\n\t  return item[this.contactName];\n\t};\n\t\n\t\n\tMdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {\n\t  return this.contacts.indexOf(contact) == -1;\n\t};\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t  .module('material.components.chips')\n\t  .directive('mdContactChips', MdContactChips);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdContactChips\n\t * @module material.components.chips\n\t *\n\t * @description\n\t * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an\n\t * `md-autocomplete` element. The component allows the caller to supply a query expression which\n\t * returns  a list of possible contacts. The user can select one of these and add it to the list of\n\t * chips.\n\t *\n\t * You may also use the `md-highlight-text` directive along with it's parameters to control the\n\t * appearance of the matched text inside of the contacts' autocomplete popup.\n\t *\n\t * @param {string=|object=} ng-model A model to bind the list of items to\n\t * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n\t * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,\n\t *    displayed when there is at least on item in the list\n\t * @param {expression} md-contacts An expression expected to return contacts matching the search\n\t *    test, `$query`.\n\t * @param {string} md-contact-name The field name of the contact object representing the\n\t *    contact's name.\n\t * @param {string} md-contact-email The field name of the contact object representing the\n\t *    contact's email address.\n\t * @param {string} md-contact-image The field name of the contact object representing the\n\t *    contact's image.\n\t *\n\t *\n\t * // The following attribute has been removed but may come back.\n\t * @param {expression=} filter-selected Whether to filter selected contacts from the list of\n\t *    suggestions shown in the autocomplete.\n\t *\n\t *\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t *   <md-contact-chips\n\t *       ng-model=\"ctrl.contacts\"\n\t *       md-contacts=\"ctrl.querySearch($query)\"\n\t *       md-contact-name=\"name\"\n\t *       md-contact-image=\"image\"\n\t *       md-contact-email=\"email\"\n\t *       placeholder=\"To\">\n\t *   </md-contact-chips>\n\t * </hljs>\n\t *\n\t */\n\t\n\t\n\tvar MD_CONTACT_CHIPS_TEMPLATE = '\\\n\t      <md-chips class=\"md-contact-chips\"\\\n\t          ng-model=\"$mdContactChipsCtrl.contacts\"\\\n\t          md-require-match=\"$mdContactChipsCtrl.requireMatch\"\\\n\t          md-autocomplete-snap>\\\n\t          <md-autocomplete\\\n\t              md-menu-class=\"md-contact-chips-suggestions\"\\\n\t              md-selected-item=\"$mdContactChipsCtrl.selectedItem\"\\\n\t              md-search-text=\"$mdContactChipsCtrl.searchText\"\\\n\t              md-items=\"item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)\"\\\n\t              md-item-text=\"$mdContactChipsCtrl.itemName(item)\"\\\n\t              md-no-cache=\"true\"\\\n\t              md-autoselect\\\n\t              placeholder=\"{{$mdContactChipsCtrl.contacts.length == 0 ?\\\n\t                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}\">\\\n\t            <div class=\"md-contact-suggestion\">\\\n\t              <img \\\n\t                  ng-src=\"{{item[$mdContactChipsCtrl.contactImage]}}\"\\\n\t                  alt=\"{{item[$mdContactChipsCtrl.contactName]}}\"\\\n\t                  ng-if=\"item[$mdContactChipsCtrl.contactImage]\" />\\\n\t              <span class=\"md-contact-name\" md-highlight-text=\"$mdContactChipsCtrl.searchText\"\\\n\t                    md-highlight-flags=\"{{$mdContactChipsCtrl.highlightFlags}}\">\\\n\t                {{item[$mdContactChipsCtrl.contactName]}}\\\n\t              </span>\\\n\t              <span class=\"md-contact-email\" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\\\n\t            </div>\\\n\t          </md-autocomplete>\\\n\t          <md-chip-template>\\\n\t            <div class=\"md-contact-avatar\">\\\n\t              <img \\\n\t                  ng-src=\"{{$chip[$mdContactChipsCtrl.contactImage]}}\"\\\n\t                  alt=\"{{$chip[$mdContactChipsCtrl.contactName]}}\"\\\n\t                  ng-if=\"$chip[$mdContactChipsCtrl.contactImage]\" />\\\n\t            </div>\\\n\t            <div class=\"md-contact-name\">\\\n\t              {{$chip[$mdContactChipsCtrl.contactName]}}\\\n\t            </div>\\\n\t          </md-chip-template>\\\n\t      </md-chips>';\n\t\n\t\n\t/**\n\t * MDContactChips Directive Definition\n\t *\n\t * @param $mdTheming\n\t * @returns {*}\n\t * @ngInject\n\t */\n\tfunction MdContactChips($mdTheming, $mdUtil) {\n\t  return {\n\t    template: function(element, attrs) {\n\t      return MD_CONTACT_CHIPS_TEMPLATE;\n\t    },\n\t    restrict: 'E',\n\t    controller: 'MdContactChipsCtrl',\n\t    controllerAs: '$mdContactChipsCtrl',\n\t    bindToController: true,\n\t    compile: compile,\n\t    scope: {\n\t      contactQuery: '&mdContacts',\n\t      placeholder: '@',\n\t      secondaryPlaceholder: '@',\n\t      contactName: '@mdContactName',\n\t      contactImage: '@mdContactImage',\n\t      contactEmail: '@mdContactEmail',\n\t      contacts: '=ngModel',\n\t      requireMatch: '=?mdRequireMatch',\n\t      highlightFlags: '@?mdHighlightFlags'\n\t    }\n\t  };\n\t\n\t  function compile(element, attr) {\n\t    return function postLink(scope, element, attrs, controllers) {\n\t\n\t      $mdUtil.initOptionalProperties(scope, attr);\n\t      $mdTheming(element);\n\t\n\t      element.attr('tabindex', '-1');\n\t    };\n\t  }\n\t}\n\tMdContactChips.$inject = [\"$mdTheming\", \"$mdUtil\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t  .module('material.components.icon')\n\t  .directive('mdIcon', ['$mdIcon', '$mdTheming', '$mdAria', mdIconDirective]);\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdIcon\n\t * @module material.components.icon\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `md-icon` directive makes it easier to use vector-based icons in your app (as opposed to\n\t * raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.\n\t *\n\t * Icons should be consider view-only elements that should not be used directly as buttons; instead nest a `<md-icon>`\n\t * inside a `md-button` to add hover and click features.\n\t *\n\t * ### Icon fonts\n\t * Icon fonts are a technique in which you use a font where the glyphs in the font are\n\t * your icons instead of text. Benefits include a straightforward way to bundle everything into a\n\t * single HTTP request, simple scaling, easy color changing, and more.\n\t *\n\t * `md-icon` let's you consume an icon font by letting you reference specific icons in that font\n\t * by name rather than character code.\n\t *\n\t * ### SVG\n\t * For SVGs, the problem with using `<img>` or a CSS `background-image` is that you can't take\n\t * advantage of some SVG features, such as styling specific parts of the icon with CSS or SVG\n\t * animation.\n\t *\n\t * `md-icon` makes it easier to use SVG icons by *inlining* the SVG into an `<svg>` element in the\n\t * document. The most straightforward way of referencing an SVG icon is via URL, just like a\n\t * traditional `<img>`. `$mdIconProvider`, as a convenience, let's you _name_ an icon so you can\n\t * reference it by name instead of URL throughout your templates.\n\t *\n\t * Additionally, you may not want to make separate HTTP requests for every icon, so you can bundle\n\t * your SVG icons together and pre-load them with $mdIconProvider as an icon set. An icon set can\n\t * also be given a name, which acts as a namespace for individual icons, so you can reference them\n\t * like `\"social:cake\"`.\n\t *\n\t * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be\n\t * easily loaded and used.When use font-icons, developers must following three (3) simple steps:\n\t *\n\t * <ol>\n\t * <li>Load the font library. e.g.<br/>\n\t *    &lt;link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n\t *    rel=\"stylesheet\"&gt;\n\t * </li>\n\t * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>\n\t * <li> Use &lt;md-icon md-font-icon=\"classname\" /&gt; or <br/>\n\t *     use &lt;md-icon md-font-set=\"font library classname or alias\"&gt; textual_name &lt;/md-icon&gt; or <br/>\n\t *     use &lt;md-icon md-font-set=\"font library classname or alias\"&gt; numerical_character_reference &lt;/md-icon&gt;\n\t * </li>\n\t * </ol>\n\t *\n\t * Full details for these steps can be found:\n\t *\n\t * <ul>\n\t * <li>http://google.github.io/material-design-icons/</li>\n\t * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>\n\t * </ul>\n\t *\n\t * The Material Design icon style <code>.material-icons</code> and the icon font references are published in\n\t * Material Design Icons:\n\t *\n\t * <ul>\n\t * <li>http://www.google.com/design/icons/</li>\n\t * <li>https://www.google.com/design/icons/#ic_accessibility</li>\n\t * </ul>\n\t *\n\t * <h2 id=\"material_design_icons\">Material Design Icons</h2>\n\t * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and\n\t * determine its textual name and character reference code. Click on any icon to see the slide-up information\n\t * panel with details regarding a SVG download or information on the font-icon usage.\n\t *\n\t * <a href=\"https://www.google.com/design/icons/#ic_accessibility\" target=\"_blank\" style=\"border-bottom:none;\">\n\t * <img src=\"https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png\"\n\t *      aria-label=\"Material Design Icon-Selector\" style=\"max-width:75%;padding-left:10%\">\n\t * </a>\n\t *\n\t * <span class=\"image_caption\">\n\t *  Click on the image above to link to the\n\t *  <a href=\"https://www.google.com/design/icons/#ic_accessibility\" target=\"_blank\">Material Design Icon-Selector</a>.\n\t * </span>\n\t *\n\t * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used\n\t * to render the icon. Requires the fonts and the named CSS styles to be preloaded.\n\t * @param {string} md-font-set CSS style name associated with the font library; which will be assigned as\n\t * the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname;\n\t * internally use `$mdIconProvider.fontSet(<alias>)` to determine the style name.\n\t * @param {string} md-svg-src String URL (or expression) used to load, cache, and display an\n\t *     external SVG.\n\t * @param {string} md-svg-icon md-svg-icon String name used for lookup of the icon from the internal cache;\n\t *     interpolated strings or expressions may also be used. Specific set names can be used with\n\t *     the syntax `<set name>:<icon name>`.<br/><br/>\n\t * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.\n\t * @param {string=} aria-label Labels icon for accessibility. If an empty string is provided, icon\n\t * will be hidden from accessibility layer with `aria-hidden=\"true\"`. If there's no aria-label on the icon\n\t * nor a label on the parent element, a warning will be logged to the console.\n\t * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon\n\t * will be hidden from accessibility layer with `aria-hidden=\"true\"`. If there's no alt on the icon\n\t * nor a label on the parent element, a warning will be logged to the console.\n\t *\n\t * @usage\n\t * When using SVGs:\n\t * <hljs lang=\"html\">\n\t *\n\t *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->\n\t *  <md-icon md-svg-icon=\"social:android\"    aria-label=\"android \" ></md-icon>\n\t *\n\t *  <!-- Icon urls; may be preloaded in templateCache -->\n\t *  <md-icon md-svg-src=\"/android.svg\"       aria-label=\"android \" ></md-icon>\n\t *  <md-icon md-svg-src=\"{{ getAndroid() }}\" aria-label=\"android \" ></md-icon>\n\t *\n\t * </hljs>\n\t *\n\t * Use the <code>$mdIconProvider</code> to configure your application with\n\t * svg iconsets.\n\t *\n\t * <hljs lang=\"js\">\n\t *  angular.module('appSvgIconSets', ['ngMaterial'])\n\t *    .controller('DemoCtrl', function($scope) {})\n\t *    .config(function($mdIconProvider) {\n\t *      $mdIconProvider\n\t *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)\n\t *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);\n\t *     });\n\t * </hljs>\n\t *\n\t *\n\t * When using Font Icons with classnames:\n\t * <hljs lang=\"html\">\n\t *\n\t *  <md-icon md-font-icon=\"android\" aria-label=\"android\" ></md-icon>\n\t *  <md-icon class=\"icon_home\"      aria-label=\"Home\"    ></md-icon>\n\t *\n\t * </hljs>\n\t *\n\t * When using Material Font Icons with ligatures:\n\t * <hljs lang=\"html\">\n\t *  <!-- For Material Design Icons -->\n\t *  <!-- The class '.material-icons' is auto-added if a style has NOT been specified -->\n\t *  <md-icon> face </md-icon>\n\t *  <md-icon md-font-set=\"material-icons\"> face </md-icon>\n\t *  <md-icon> #xE87C; </md-icon>\n\t *  <!-- The class '.material-icons' must be manually added if other styles are also specified-->\n\t *  <md-icon class=\"material-icons md-light md-48\"> face </md-icon>\n\t * </hljs>\n\t *\n\t * When using other Font-Icon libraries:\n\t *\n\t * <hljs lang=\"js\">\n\t *  // Specify a font-icon style alias\n\t *  angular.config(function($mdIconProvider) {\n\t *    $mdIconProvider.fontSet('fa', 'fontawesome');\n\t *  });\n\t * </hljs>\n\t *\n\t * <hljs lang=\"html\">\n\t *  <md-icon md-font-set=\"fa\">email</md-icon>\n\t * </hljs>\n\t *\n\t */\n\tfunction mdIconDirective($mdIcon, $mdTheming, $mdAria ) {\n\t\n\t  return {\n\t    scope: {\n\t      fontSet : '@mdFontSet',\n\t      fontIcon: '@mdFontIcon',\n\t      svgIcon : '@mdSvgIcon',\n\t      svgSrc  : '@mdSvgSrc'\n\t    },\n\t    restrict: 'E',\n\t    link : postLink\n\t  };\n\t\n\t\n\t  /**\n\t   * Directive postLink\n\t   * Supports embedded SVGs, font-icons, & external SVGs\n\t   */\n\t  function postLink(scope, element, attr) {\n\t    $mdTheming(element);\n\t\n\t    prepareForFontIcon();\n\t\n\t    // If using a font-icon, then the textual name of the icon itself\n\t    // provides the aria-label.\n\t\n\t    var label = attr.alt || scope.fontIcon || scope.svgIcon || element.text();\n\t    var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');\n\t\n\t    if ( !attr['aria-label'] ) {\n\t\n\t      if (label != '' && !parentsHaveText() ) {\n\t\n\t        $mdAria.expect(element, 'aria-label', label);\n\t        $mdAria.expect(element, 'role', 'img');\n\t\n\t      } else if ( !element.text() ) {\n\t        // If not a font-icon with ligature, then\n\t        // hide from the accessibility layer.\n\t\n\t        $mdAria.expect(element, 'aria-hidden', 'true');\n\t      }\n\t    }\n\t\n\t    if (attrName) {\n\t      // Use either pre-configured SVG or URL source, respectively.\n\t      attr.$observe(attrName, function(attrVal) {\n\t\n\t        element.empty();\n\t        if (attrVal) {\n\t          $mdIcon(attrVal).then(function(svg) {\n\t            element.append(svg);\n\t          });\n\t        }\n\t\n\t      });\n\t    }\n\t\n\t    function parentsHaveText() {\n\t      var parent = element.parent();\n\t      if (parent.attr('aria-label') || parent.text()) {\n\t        return true;\n\t      }\n\t      else if(parent.parent().attr('aria-label') || parent.parent().text()) {\n\t        return true;\n\t      }\n\t      return false;\n\t    }\n\t\n\t    function prepareForFontIcon() {\n\t      if (!scope.svgIcon && !scope.svgSrc) {\n\t        if (scope.fontIcon) {\n\t          element.addClass('md-font ' + scope.fontIcon);\n\t        }\n\t        element.addClass($mdIcon.fontSet(scope.fontSet));\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t  angular\n\t    .module('material.components.icon' )\n\t    .provider('$mdIcon', MdIconProvider);\n\t\n\t  /**\n\t    * @ngdoc service\n\t    * @name $mdIconProvider\n\t    * @module material.components.icon\n\t    *\n\t    * @description\n\t    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow\n\t    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`\n\t    * directives are compiled.\n\t    *\n\t    * If using font-icons, the developer is responsible for loading the fonts.\n\t    *\n\t    * If using SVGs, loading of the actual svg files are deferred to on-demand requests and are loaded\n\t    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,\n\t    * the `$mdIcon` service searches its registry for the associated source URL;\n\t    * that URL is used to on-demand load and parse the SVG dynamically.\n\t    *\n\t    * @usage\n\t    * <hljs lang=\"js\">\n\t    *   app.config(function($mdIconProvider) {\n\t    *\n\t    *     // Configure URLs for icons specified by [set:]id.\n\t    *\n\t    *     $mdIconProvider\n\t    *          .defaultFontSet( 'fontawesome' )\n\t    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons\n\t    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs\n\t    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)\n\t    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set\n\t    *   });\n\t    * </hljs>\n\t    *\n\t    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime\n\t    * **startup** process (shown below):\n\t    *\n\t    * <hljs lang=\"js\">\n\t    *   app.config(function($mdIconProvider) {\n\t    *\n\t    *     // Register a default set of SVG icon definitions\n\t    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')\n\t    *\n\t    *   })\n\t    *   .run(function($http, $templateCache){\n\t    *\n\t    *     // Pre-fetch icons sources by URL and cache in the $templateCache...\n\t    *     // subsequent $http calls will look there first.\n\t    *\n\t    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];\n\t    *\n\t    *     angular.forEach(urls, function(url) {\n\t    *       $http.get(url, {cache: $templateCache});\n\t    *     });\n\t    *\n\t    *   });\n\t    *\n\t    * </hljs>\n\t    *\n\t    * NOTE: the loaded SVG data is subsequently cached internally for future requests.\n\t    *\n\t    */\n\t\n\t   /**\n\t    * @ngdoc method\n\t    * @name $mdIconProvider#icon\n\t    *\n\t    * @description\n\t    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.\n\t    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`\n\t    *\n\t    * @param {string} id Icon name/id used to register the icon\n\t    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n\t    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n\t    * @param {number=} viewBoxSize Sets the width and height the icon's viewBox.\n\t    * It is ignored for icons with an existing viewBox. Default size is 24.\n\t    *\n\t    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n\t    *\n\t    * @usage\n\t    * <hljs lang=\"js\">\n\t    *   app.config(function($mdIconProvider) {\n\t    *\n\t    *     // Configure URLs for icons specified by [set:]id.\n\t    *\n\t    *     $mdIconProvider\n\t    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)\n\t    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set\n\t    *   });\n\t    * </hljs>\n\t    *\n\t    */\n\t   /**\n\t    * @ngdoc method\n\t    * @name $mdIconProvider#iconSet\n\t    *\n\t    * @description\n\t    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition\n\t    * has an icon id. Individual icons can be subsequently retrieved from this cached set using\n\t    * `$mdIcon(<icon set name>:<icon name>)`\n\t    *\n\t    * @param {string} id Icon name/id used to register the iconset\n\t    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n\t    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n\t    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. \n\t    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.\n\t    * Default value is 24.\n\t    *\n\t    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n\t    *\n\t    *\n\t    * @usage\n\t    * <hljs lang=\"js\">\n\t    *   app.config(function($mdIconProvider) {\n\t    *\n\t    *     // Configure URLs for icons specified by [set:]id.\n\t    *\n\t    *     $mdIconProvider\n\t    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set\n\t    *   });\n\t    * </hljs>\n\t    *\n\t    */\n\t   /**\n\t    * @ngdoc method\n\t    * @name $mdIconProvider#defaultIconSet\n\t    *\n\t    * @description\n\t    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,\n\t    * subsequent lookups of icons will failover to search this 'default' icon set.\n\t    * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`\n\t    *\n\t    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n\t    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n\t    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. \n\t    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.\n\t    * Default value is 24.\n\t    *\n\t    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n\t    *\n\t    * @usage\n\t    * <hljs lang=\"js\">\n\t    *   app.config(function($mdIconProvider) {\n\t    *\n\t    *     // Configure URLs for icons specified by [set:]id.\n\t    *\n\t    *     $mdIconProvider\n\t    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set\n\t    *   });\n\t    * </hljs>\n\t    *\n\t    */\n\t  /**\n\t   * @ngdoc method\n\t   * @name $mdIconProvider#defaultFontSet\n\t   *\n\t   * @description\n\t   * When using Font-Icons, Angular Material assumes the the Material Design icons will be used and automatically\n\t   * configures the default font-set == 'material-icons'. Note that the font-set references the font-icon library\n\t   * class style that should be applied to the `<md-icon>`.\n\t   *\n\t   * Configuring the default means that the attributes\n\t   * `md-font-set=\"material-icons\"` or `class=\"material-icons\"` do not need to be explicitly declared on the\n\t   * `<md-icon>` markup. For example:\n\t   *\n\t   *  `<md-icon> face </md-icon>`\n\t   *  will render as\n\t   *  `<span class=\"material-icons\"> face </span>`, and\n\t   *\n\t   *  `<md-icon md-font-set=\"fa\"> face </md-icon>`\n\t   *  will render as\n\t   *  `<span class=\"fa\"> face </span>`\n\t   *\n\t   * @param {string} name of the font-library style that should be applied to the md-icon DOM element\n\t   *\n\t   * @usage\n\t   * <hljs lang=\"js\">\n\t   *   app.config(function($mdIconProvider) {\n\t   *     $mdIconProvider.defaultFontSet( 'fontawesome' );\n\t   *   });\n\t   * </hljs>\n\t   *\n\t   */\n\t\n\t   /**\n\t    * @ngdoc method\n\t    * @name $mdIconProvider#defaultViewBoxSize\n\t    *\n\t    * @description\n\t    * While `<md-icon />` markup can also be style with sizing CSS, this method configures\n\t    * the default width **and** height used for all icons; unless overridden by specific CSS.\n\t    * The default sizing is (24px, 24px).\n\t    * @param {number=} viewBoxSize Sets the width and height of the viewBox for an icon or an icon set.\n\t    * All icons in a set should be the same size. The default value is 24.\n\t    *\n\t    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n\t    *\n\t    * @usage\n\t    * <hljs lang=\"js\">\n\t    *   app.config(function($mdIconProvider) {\n\t    *\n\t    *     // Configure URLs for icons specified by [set:]id.\n\t    *\n\t    *     $mdIconProvider\n\t    *          .defaultViewBoxSize(36)   // Register a default icon size (width == height)\n\t    *   });\n\t    * </hljs>\n\t    *\n\t    */\n\t\n\t var config = {\n\t   defaultViewBoxSize: 24,\n\t   defaultFontSet: 'material-icons',\n\t   fontSets : [ ]\n\t };\n\t\n\t function MdIconProvider() { }\n\t\n\t MdIconProvider.prototype = {\n\t   icon : function (id, url, viewBoxSize) {\n\t     if ( id.indexOf(':') == -1 ) id = '$default:' + id;\n\t\n\t     config[id] = new ConfigurationItem(url, viewBoxSize );\n\t     return this;\n\t   },\n\t\n\t   iconSet : function (id, url, viewBoxSize) {\n\t     config[id] = new ConfigurationItem(url, viewBoxSize );\n\t     return this;\n\t   },\n\t\n\t   defaultIconSet : function (url, viewBoxSize) {\n\t     var setName = '$default';\n\t\n\t     if ( !config[setName] ) {\n\t       config[setName] = new ConfigurationItem(url, viewBoxSize );\n\t     }\n\t\n\t     config[setName].viewBoxSize = viewBoxSize || config.defaultViewBoxSize;\n\t\n\t     return this;\n\t   },\n\t\n\t   defaultViewBoxSize : function (viewBoxSize) {\n\t     config.defaultViewBoxSize = viewBoxSize;\n\t     return this;\n\t   },\n\t   \n\t   /**\n\t    * Register an alias name associated with a font-icon library style ;\n\t    */\n\t   fontSet : function fontSet(alias, className) {\n\t    config.fontSets.push({\n\t      alias : alias,\n\t      fontSet : className || alias\n\t    });\n\t    return this;\n\t   },\n\t\n\t   /**\n\t    * Specify a default style name associated with a font-icon library\n\t    * fallback to Material Icons.\n\t    *\n\t    */\n\t   defaultFontSet : function defaultFontSet(className) {\n\t    config.defaultFontSet = !className ? '' : className;\n\t    return this;\n\t   },\n\t\n\t   defaultIconSize : function defaultIconSize(iconSize) {\n\t     config.defaultIconSize = iconSize;\n\t     return this;\n\t   },\n\t\n\t   preloadIcons: function ($templateCache) {\n\t     var iconProvider = this;\n\t     var svgRegistry = [\n\t       {\n\t         id : 'md-tabs-arrow',\n\t         url: 'md-tabs-arrow.svg',\n\t         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g><polygon points=\"15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 \"/></g></svg>'\n\t       },\n\t       {\n\t         id : 'md-close',\n\t         url: 'md-close.svg',\n\t         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g><path d=\"M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z\"/></g></svg>'\n\t       },\n\t       {\n\t         id:  'md-cancel',\n\t         url: 'md-cancel.svg',\n\t         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g><path d=\"M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z\"/></g></svg>'\n\t       },\n\t       {\n\t         id:  'md-menu',\n\t         url: 'md-menu.svg',\n\t         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><path d=\"M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z\" /></svg>'\n\t       },\n\t       {\n\t         id:  'md-toggle-arrow',\n\t         url: 'md-toggle-arrow-svg',\n\t         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 48 48\"><path d=\"M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z\"/><path d=\"M0 0h48v48h-48z\" fill=\"none\"/></svg>'\n\t       },\n\t       {\n\t         id:  'md-calendar',\n\t         url: 'md-calendar.svg',\n\t         svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/></svg>'\n\t       }\n\t     ];\n\t\n\t     svgRegistry.forEach(function(asset){\n\t       iconProvider.icon(asset.id,  asset.url);\n\t       $templateCache.put(asset.url, asset.svg);\n\t     });\n\t\n\t   },\n\t\n\t   $get : ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {\n\t     this.preloadIcons($templateCache);\n\t     return MdIconService(config, $http, $q, $log, $templateCache);\n\t   }]\n\t };\n\t\n\t   /**\n\t    *  Configuration item stored in the Icon registry; used for lookups\n\t    *  to load if not already cached in the `loaded` cache\n\t    */\n\t   function ConfigurationItem(url, viewBoxSize) {\n\t     this.url = url;\n\t     this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;\n\t   }\n\t\n\t /**\n\t  * @ngdoc service\n\t  * @name $mdIcon\n\t  * @module material.components.icon\n\t  *\n\t  * @description\n\t  * The `$mdIcon` service is a function used to lookup SVG icons.\n\t  *\n\t  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element\n\t  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is\n\t  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.\n\t  *\n\t  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured\n\t  * using the `$mdIconProvider`.\n\t  *\n\t  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.\n\t  *\n\t  * @usage\n\t  * <hljs lang=\"js\">\n\t  * function SomeDirective($mdIcon) {\n\t  *\n\t  *   // See if the icon has already been loaded, if not\n\t  *   // then lookup the icon from the registry cache, load and cache\n\t  *   // it for future requests.\n\t  *   // NOTE: ID queries require configuration with $mdIconProvider\n\t  *\n\t  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });\n\t  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });\n\t  *\n\t  *   // Load and cache the external SVG using a URL\n\t  *\n\t  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {\n\t  *     element.append(iconEl);\n\t  *   });\n\t  * };\n\t  * </hljs>\n\t  *\n\t  * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate\n\t  * SVG DOM elements.\n\t  */\n\t\n\t  /* @ngInject */\n\t function MdIconService(config, $http, $q, $log, $templateCache) {\n\t   var iconCache = {};\n\t   var urlRegex = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/i;\n\t\n\t   Icon.prototype = { clone : cloneSVG, prepare: prepareAndStyle };\n\t   getIcon.fontSet = findRegisteredFontSet;\n\t\n\t   // Publish service...\n\t   return getIcon;\n\t\n\t   /**\n\t    * Actual $mdIcon service is essentially a lookup function\n\t    */\n\t   function getIcon(id) {\n\t     id = id || '';\n\t\n\t     // If already loaded and cached, use a clone of the cached icon.\n\t     // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.\n\t\n\t     if ( iconCache[id]         ) return $q.when( iconCache[id].clone() );\n\t     if ( urlRegex.test(id)     ) return loadByURL(id).then( cacheIcon(id) );\n\t     if ( id.indexOf(':') == -1 ) id = '$default:' + id;\n\t\n\t     var load = config[id] ? loadByID : loadFromIconSet;\n\t     return load(id)\n\t         .then( cacheIcon(id) );\n\t   }\n\t\n\t   /**\n\t    * Lookup registered fontSet style using its alias...\n\t    * If not found,\n\t    */\n\t   function findRegisteredFontSet(alias) {\n\t      var useDefault = angular.isUndefined(alias) || !(alias && alias.length);\n\t      if ( useDefault ) return config.defaultFontSet;\n\t\n\t      var result = alias;\n\t      angular.forEach(config.fontSets, function(it){\n\t        if ( it.alias == alias ) result = it.fontSet || result;\n\t      });\n\t\n\t      return result;\n\t   }\n\t\n\t   /**\n\t    * Prepare and cache the loaded icon for the specified `id`\n\t    */\n\t   function cacheIcon( id ) {\n\t\n\t     return function updateCache( icon ) {\n\t       iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);\n\t\n\t       return iconCache[id].clone();\n\t     };\n\t   }\n\t\n\t   /**\n\t    * Lookup the configuration in the registry, if !registered throw an error\n\t    * otherwise load the icon [on-demand] using the registered URL.\n\t    *\n\t    */\n\t   function loadByID(id) {\n\t    var iconConfig = config[id];\n\t     return loadByURL(iconConfig.url).then(function(icon) {\n\t       return new Icon(icon, iconConfig);\n\t     });\n\t   }\n\t\n\t   /**\n\t    *    Loads the file as XML and uses querySelector( <id> ) to find\n\t    *    the desired node...\n\t    */\n\t   function loadFromIconSet(id) {\n\t     var setName = id.substring(0, id.lastIndexOf(':')) || '$default';\n\t     var iconSetConfig = config[setName];\n\t\n\t     return !iconSetConfig ? announceIdNotFound(id) : loadByURL(iconSetConfig.url).then(extractFromSet);\n\t\n\t     function extractFromSet(set) {\n\t       var iconName = id.slice(id.lastIndexOf(':') + 1);\n\t       var icon = set.querySelector('#' + iconName);\n\t       return !icon ? announceIdNotFound(id) : new Icon(icon, iconSetConfig);\n\t     }\n\t\n\t     function announceIdNotFound(id) {\n\t       var msg = 'icon ' + id + ' not found';\n\t      $log.warn(msg);\n\t\n\t       return $q.reject(msg || id);\n\t     }\n\t   }\n\t\n\t   /**\n\t    * Load the icon by URL (may use the $templateCache).\n\t    * Extract the data for later conversion to Icon\n\t    */\n\t   function loadByURL(url) {\n\t     return $http\n\t       .get(url, { cache: $templateCache })\n\t       .then(function(response) {\n\t         return angular.element('<div>').append(response.data).find('svg')[0];\n\t       }).catch(announceNotFound);\n\t   }\n\t\n\t   /**\n\t    * Catch HTTP or generic errors not related to incorrect icon IDs.\n\t    */\n\t   function announceNotFound(err) {\n\t     var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);\n\t     $log.warn(msg);\n\t\n\t     return $q.reject(msg);\n\t   }\n\t\n\t   /**\n\t    * Check target signature to see if it is an Icon instance.\n\t    */\n\t   function isIcon(target) {\n\t     return angular.isDefined(target.element) && angular.isDefined(target.config);\n\t   }\n\t\n\t   /**\n\t    *  Define the Icon class\n\t    */\n\t   function Icon(el, config) {\n\t     if (el && el.tagName != 'svg') {\n\t       el = angular.element('<svg xmlns=\"http://www.w3.org/2000/svg\">').append(el)[0];\n\t     }\n\t\n\t     // Inject the namespace if not available...\n\t     if ( !el.getAttribute('xmlns') ) {\n\t       el.setAttribute('xmlns', \"http://www.w3.org/2000/svg\");\n\t     }\n\t\n\t     this.element = el;\n\t     this.config = config;\n\t     this.prepare();\n\t   }\n\t\n\t   /**\n\t    *  Prepare the DOM element that will be cached in the\n\t    *  loaded iconCache store.\n\t    */\n\t   function prepareAndStyle() {\n\t     var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;\n\t         angular.forEach({\n\t           'fit'   : '',\n\t           'height': '100%',\n\t           'width' : '100%',\n\t           'preserveAspectRatio': 'xMidYMid meet',\n\t           'viewBox' : this.element.getAttribute('viewBox') || ('0 0 ' + viewBoxSize + ' ' + viewBoxSize)\n\t         }, function(val, attr) {\n\t           this.element.setAttribute(attr, val);\n\t         }, this);\n\t\n\t         angular.forEach({\n\t           'pointer-events' : 'none',\n\t           'display' : 'block'\n\t         }, function(val, style) {\n\t           this.element.style[style] = val;\n\t         }, this);\n\t   }\n\t\n\t   /**\n\t    * Clone the Icon DOM element.\n\t    */\n\t   function cloneSVG(){\n\t     return this.element.cloneNode(true);\n\t   }\n\t\n\t }\n\t MdIconService.$inject = [\"config\", \"$http\", \"$q\", \"$log\", \"$templateCache\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t\n\t\n\tangular\n\t    .module('material.components.menu')\n\t    .controller('mdMenuCtrl', MenuController);\n\t\n\t/**\n\t * @ngInject\n\t */\n\tfunction MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout) {\n\t\n\t  var menuContainer;\n\t  var self = this;\n\t  var triggerElement;\n\t\n\t  this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;\n\t\n\t  /**\n\t   * Called by our linking fn to provide access to the menu-content\n\t   * element removed during link\n\t   */\n\t  this.init = function init(setMenuContainer, opts) {\n\t    opts = opts || {};\n\t    menuContainer = setMenuContainer;\n\t    // Default element for ARIA attributes has the ngClick or ngMouseenter expression\n\t    triggerElement = $element[0].querySelector('[ng-click],[ng-mouseenter]');\n\t\n\t    this.isInMenuBar = opts.isInMenuBar;\n\t    this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll('.md-nested-menu'));\n\t    this.enableHoverListener();\n\t\n\t    menuContainer.on('$mdInterimElementRemove', function() {\n\t      self.isOpen = false;\n\t    });\n\t  };\n\t\n\t  this.enableHoverListener = function() {\n\t    $scope.$on('$mdMenuOpen', function(event, el) {\n\t      if (menuContainer[0].contains(el[0])) {\n\t        self.currentlyOpenMenu = el.controller('mdMenu');\n\t        self.isAlreadyOpening = false;\n\t        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));\n\t      }\n\t    });\n\t    $scope.$on('$mdMenuClose', function(event, el) {\n\t      if (menuContainer[0].contains(el[0])) {\n\t        self.currentlyOpenMenu = undefined;\n\t      }\n\t    });\n\t\n\t    var menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].querySelectorAll('md-menu-item')));\n\t\n\t    var openMenuTimeout;\n\t    menuItems.on('mouseenter', function(event) {\n\t      if (self.isAlreadyOpening) return;\n\t      var nestedMenu = (\n\t        event.target.querySelector('md-menu')\n\t          || $mdUtil.getClosest(event.target, 'MD-MENU')\n\t      );\n\t      openMenuTimeout = $timeout(function() {\n\t        if (nestedMenu) {\n\t          nestedMenu = angular.element(nestedMenu).controller('mdMenu');\n\t        }\n\t\n\t        if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {\n\t          var closeTo = self.nestLevel + 1;\n\t          self.currentlyOpenMenu.close(true, { closeTo: closeTo });\n\t        } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {\n\t          self.isAlreadyOpening = true;\n\t          nestedMenu.open();\n\t        }\n\t      }, nestedMenu ? 100 : 250);\n\t      var focusableTarget = event.currentTarget.querySelector('button:not([disabled])');\n\t      focusableTarget && focusableTarget.focus();\n\t    });\n\t    menuItems.on('mouseleave', function(event) {\n\t      if (openMenuTimeout) {\n\t        $timeout.cancel(openMenuTimeout);\n\t        openMenuTimeout = undefined;\n\t      }\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Uses the $mdMenu interim element service to open the menu contents\n\t   */\n\t  this.open = function openMenu(ev) {\n\t    ev && ev.stopPropagation();\n\t    ev && ev.preventDefault();\n\t    if (self.isOpen) return;\n\t    self.isOpen = true;\n\t    triggerElement = triggerElement || (ev ? ev.target : $element[0]);\n\t    $scope.$emit('$mdMenuOpen', $element);\n\t    $mdMenu.show({\n\t      scope: $scope,\n\t      mdMenuCtrl: self,\n\t      nestLevel: self.nestLevel,\n\t      element: menuContainer,\n\t      target: triggerElement,\n\t      preserveElement: self.isInMenuBar || self.nestedMenus.length > 0,\n\t      parent: self.isInMenuBar ? $element : 'body'\n\t    });\n\t  };\n\t\n\t  // Expose a open function to the child scope for html to use\n\t  $scope.$mdOpenMenu = this.open;\n\t\n\t  $scope.$watch(function() { return self.isOpen; }, function(isOpen) {\n\t    if (isOpen) {\n\t      triggerElement.setAttribute('aria-expanded', 'true');\n\t      $element[0].classList.add('md-open');\n\t      angular.forEach(self.nestedMenus, function(el) {\n\t        el.classList.remove('md-open');\n\t      });\n\t    } else {\n\t      triggerElement && triggerElement.setAttribute('aria-expanded', 'false');\n\t      $element[0].classList.remove('md-open');\n\t    }\n\t    $scope.$mdMenuIsOpen = self.isOpen;\n\t  });\n\t\n\t  this.focusMenuContainer = function focusMenuContainer() {\n\t    var focusTarget = menuContainer[0].querySelector('[md-menu-focus-target]');\n\t    if (!focusTarget) focusTarget = menuContainer[0].querySelector('.md-button');\n\t    focusTarget.focus();\n\t  };\n\t\n\t  this.registerContainerProxy = function registerContainerProxy(handler) {\n\t    this.containerProxy = handler;\n\t  };\n\t\n\t  this.triggerContainerProxy = function triggerContainerProxy(ev) {\n\t    this.containerProxy && this.containerProxy(ev);\n\t  };\n\t\n\t  this.destroy = function() {\n\t    return $mdMenu.destroy();\n\t  };\n\t\n\t  // Use the $mdMenu interim element service to close the menu contents\n\t  this.close = function closeMenu(skipFocus, closeOpts) {\n\t    if ( !self.isOpen ) return;\n\t    self.isOpen = false;\n\t\n\t    var eventDetails = angular.extend({}, closeOpts, { skipFocus: skipFocus });\n\t    $scope.$emit('$mdMenuClose', $element, eventDetails);\n\t    $mdMenu.hide(null, closeOpts);\n\t\n\t    if (!skipFocus) {\n\t      var el = self.restoreFocusTo || $element.find('button')[0];\n\t      if (el instanceof angular.element) el = el[0];\n\t      if (el) el.focus();\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Build a nice object out of our string attribute which specifies the\n\t   * target mode for left and top positioning\n\t   */\n\t  this.positionMode = function positionMode() {\n\t    var attachment = ($attrs.mdPositionMode || 'target').split(' ');\n\t\n\t    // If attachment is a single item, duplicate it for our second value.\n\t    // ie. 'target' -> 'target target'\n\t    if (attachment.length == 1) {\n\t      attachment.push(attachment[0]);\n\t    }\n\t\n\t    return {\n\t      left: attachment[0],\n\t      top: attachment[1]\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Build a nice object out of our string attribute which specifies\n\t   * the offset of top and left in pixels.\n\t   */\n\t  this.offsets = function offsets() {\n\t    var position = ($attrs.mdOffset || '0 0').split(' ').map(parseFloat);\n\t    if (position.length == 2) {\n\t      return {\n\t        left: position[0],\n\t        top: position[1]\n\t      };\n\t    } else if (position.length == 1) {\n\t      return {\n\t        top: position[0],\n\t        left: position[0]\n\t      };\n\t    } else {\n\t      throw Error('Invalid offsets specified. Please follow format <x, y> or <n>');\n\t    }\n\t  }\n\t}\n\tMenuController.$inject = [\"$mdMenu\", \"$attrs\", \"$element\", \"$scope\", \"$mdUtil\", \"$timeout\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdMenu\n\t * @module material.components.menu\n\t * @restrict E\n\t * @description\n\t *\n\t * Menus are elements that open when clicked. They are useful for displaying\n\t * additional options within the context of an action.\n\t *\n\t * Every `md-menu` must specify exactly two child elements. The first element is what is\n\t * left in the DOM and is used to open the menu. This element is called the trigger element.\n\t * The trigger element's scope has access to `$mdOpenMenu($event)`\n\t * which it may call to open the menu. By passing $event as argument, the\n\t * corresponding event is stopped from propagating up the DOM-tree.\n\t *\n\t * The second element is the `md-menu-content` element which represents the\n\t * contents of the menu when it is open. Typically this will contain `md-menu-item`s,\n\t * but you can do custom content as well.\n\t *\n\t * <hljs lang=\"html\">\n\t * <md-menu>\n\t *  <!-- Trigger element is a md-button with an icon -->\n\t *  <md-button ng-click=\"$mdOpenMenu($event)\" class=\"md-icon-button\" aria-label=\"Open sample menu\">\n\t *    <md-icon md-svg-icon=\"call:phone\"></md-icon>\n\t *  </md-button>\n\t *  <md-menu-content>\n\t *    <md-menu-item><md-button ng-click=\"doSomething()\">Do Something</md-button></md-menu-item>\n\t *  </md-menu-content>\n\t * </md-menu>\n\t * </hljs>\n\t\n\t * ## Sizing Menus\n\t *\n\t * The width of the menu when it is open may be specified by specifying a `width`\n\t * attribute on the `md-menu-content` element.\n\t * See the [Material Design Spec](http://www.google.com/design/spec/components/menus.html#menus-specs)\n\t * for more information.\n\t *\n\t *\n\t * ## Aligning Menus\n\t *\n\t * When a menu opens, it is important that the content aligns with the trigger element.\n\t * Failure to align menus can result in jarring experiences for users as content\n\t * suddenly shifts. To help with this, `md-menu` provides serveral APIs to help\n\t * with alignment.\n\t *\n\t * ### Target Mode\n\t *\n\t * By default, `md-menu` will attempt to align the `md-menu-content` by aligning\n\t * designated child elements in both the trigger and the menu content.\n\t *\n\t * To specify the alignment element in the `trigger` you can use the `md-menu-origin`\n\t * attribute on a child element. If no `md-menu-origin` is specified, the `md-menu`\n\t * will be used as the origin element.\n\t *\n\t * Similarly, the `md-menu-content` may specify a `md-menu-align-target` for a\n\t * `md-menu-item` to specify the node that it should try and align with.\n\t *\n\t * In this example code, we specify an icon to be our origin element, and an\n\t * icon in our menu content to be our alignment target. This ensures that both\n\t * icons are aligned when the menu opens.\n\t *\n\t * <hljs lang=\"html\">\n\t * <md-menu>\n\t *  <md-button ng-click=\"$mdOpenMenu($event)\" class=\"md-icon-button\" aria-label=\"Open some menu\">\n\t *    <md-icon md-menu-origin md-svg-icon=\"call:phone\"></md-icon>\n\t *  </md-button>\n\t *  <md-menu-content>\n\t *    <md-menu-item>\n\t *      <md-button ng-click=\"doSomething()\" aria-label=\"Do something\">\n\t *        <md-icon md-menu-align-target md-svg-icon=\"call:phone\"></md-icon>\n\t *        Do Something\n\t *      </md-button>\n\t *    </md-menu-item>\n\t *  </md-menu-content>\n\t * </md-menu>\n\t * </hljs>\n\t *\n\t * Sometimes we want to specify alignment on the right side of an element, for example\n\t * if we have a menu on the right side a toolbar, we want to right align our menu content.\n\t *\n\t * We can specify the origin by using the `md-position-mode` attribute on both\n\t * the `x` and `y` axis. Right now only the `x-axis` has more than one option.\n\t * You may specify the default mode of `target target` or\n\t * `target-right target` to specify a right-oriented alignment target. See the\n\t * position section of the demos for more examples.\n\t *\n\t * ### Menu Offsets\n\t *\n\t * It is sometimes unavoidable to need to have a deeper level of control for\n\t * the positioning of a menu to ensure perfect alignment. `md-menu` provides\n\t * the `md-offset` attribute to allow pixel level specificty of adjusting the\n\t * exact positioning.\n\t *\n\t * This offset is provided in the format of `x y` or `n` where `n` will be used\n\t * in both the `x` and `y` axis.\n\t *\n\t * For example, to move a menu by `2px` from the top, we can use:\n\t * <hljs lang=\"html\">\n\t * <md-menu md-offset=\"2 0\">\n\t *   <!-- menu-content -->\n\t * </md-menu>\n\t * </hljs>\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-menu>\n\t *  <md-button ng-click=\"$mdOpenMenu($event)\" class=\"md-icon-button\">\n\t *    <md-icon md-svg-icon=\"call:phone\"></md-icon>\n\t *  </md-button>\n\t *  <md-menu-content>\n\t *    <md-menu-item><md-button ng-click=\"doSomething()\">Do Something</md-button></md-menu-item>\n\t *  </md-menu-content>\n\t * </md-menu>\n\t * </hljs>\n\t *\n\t * @param {string} md-position-mode The position mode in the form of\n\t *           `x`, `y`. Default value is `target`,`target`. Right now the `x` axis\n\t *           also suppports `target-right`.\n\t * @param {string} md-offset An offset to apply to the dropdown after positioning\n\t *           `x`, `y`. Default value is `0`,`0`.\n\t *\n\t */\n\t\n\tangular\n\t    .module('material.components.menu')\n\t    .directive('mdMenu', MenuDirective);\n\t\n\t/**\n\t * @ngInject\n\t */\n\tfunction MenuDirective($mdUtil) {\n\t  var INVALID_PREFIX = 'Invalid HTML for md-menu: ';\n\t  return {\n\t    restrict: 'E',\n\t    require: ['mdMenu', '?^mdMenuBar'],\n\t    controller: 'mdMenuCtrl', // empty function to be built by link\n\t    scope: true,\n\t    compile: compile\n\t  };\n\t\n\t  function compile(templateElement) {\n\t    templateElement.addClass('md-menu');\n\t    var triggerElement = templateElement.children()[0];\n\t    if (!triggerElement.hasAttribute('ng-click')) {\n\t      triggerElement = triggerElement.querySelector('[ng-click],[ng-mouseenter]') || triggerElement;\n\t    }\n\t    if (triggerElement && (\n\t      triggerElement.nodeName == 'MD-BUTTON' ||\n\t      triggerElement.nodeName == 'BUTTON'\n\t    ) && !triggerElement.hasAttribute('type')) {\n\t      triggerElement.setAttribute('type', 'button');\n\t    }\n\t\n\t    if (templateElement.children().length != 2) {\n\t      throw Error(INVALID_PREFIX + 'Expected two children elements.');\n\t    }\n\t\n\t    // Default element for ARIA attributes has the ngClick or ngMouseenter expression\n\t    triggerElement && triggerElement.setAttribute('aria-haspopup', 'true');\n\t\n\t    var nestedMenus = templateElement[0].querySelectorAll('md-menu');\n\t    var nestingDepth = parseInt(templateElement[0].getAttribute('md-nest-level'), 10) || 0;\n\t    if (nestedMenus) {\n\t      angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {\n\t        if (!menuEl.hasAttribute('md-position-mode')) {\n\t          menuEl.setAttribute('md-position-mode', 'cascade');\n\t        }\n\t        menuEl.classList.add('md-nested-menu');\n\t        menuEl.setAttribute('md-nest-level', nestingDepth + 1);\n\t        menuEl.setAttribute('role', 'menu');\n\t      });\n\t    }\n\t    return link;\n\t  }\n\t\n\t  function link(scope, element, attrs, ctrls) {\n\t    var mdMenuCtrl = ctrls[0];\n\t    var isInMenuBar = ctrls[1] != undefined;\n\t    // Move everything into a md-menu-container and pass it to the controller\n\t    var menuContainer = angular.element(\n\t      '<div class=\"md-open-menu-container md-whiteframe-z2\"></div>'\n\t    );\n\t    var menuContents = element.children()[1];\n\t    menuContainer.append(menuContents);\n\t    if (isInMenuBar) {\n\t      element.append(menuContainer);\n\t      menuContainer[0].style.display = 'none';\n\t    }\n\t    mdMenuCtrl.init(menuContainer, { isInMenuBar: isInMenuBar });\n\t\n\t    scope.$on('$destroy', function() {\n\t      mdMenuCtrl\n\t        .destroy()\n\t        .finally(function(){\n\t          menuContainer.remove();\n\t        });\n\t    });\n\t\n\t  }\n\t}\n\tMenuDirective.$inject = [\"$mdUtil\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t  .module('material.components.menu')\n\t  .provider('$mdMenu', MenuProvider);\n\t\n\t/*\n\t * Interim element provider for the menu.\n\t * Handles behavior for a menu while it is open, including:\n\t *    - handling animating the menu opening/closing\n\t *    - handling key/mouse events on the menu element\n\t *    - handling enabling/disabling scroll while the menu is open\n\t *    - handling redrawing during resizes and orientation changes\n\t *\n\t */\n\t\n\tfunction MenuProvider($$interimElementProvider) {\n\t  var MENU_EDGE_MARGIN = 8;\n\t\n\t  menuDefaultOptions.$inject = [\"$mdUtil\", \"$mdTheming\", \"$mdConstant\", \"$document\", \"$window\", \"$q\", \"$$rAF\", \"$animateCss\", \"$animate\"];\n\t  return $$interimElementProvider('$mdMenu')\n\t    .setDefaults({\n\t      methods: ['target'],\n\t      options: menuDefaultOptions\n\t    });\n\t\n\t  /* @ngInject */\n\t  function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {\n\t    var animator = $mdUtil.dom.animator;\n\t\n\t    return {\n\t      parent: 'body',\n\t      onShow: onShow,\n\t      onRemove: onRemove,\n\t      hasBackdrop: true,\n\t      disableParentScroll: true,\n\t      skipCompile: true,\n\t      preserveScope: true,\n\t      skipHide: true,\n\t      themable: true\n\t    };\n\t\n\t    /**\n\t     * Show modal backdrop element...\n\t     * @returns {function(): void} A function that removes this backdrop\n\t     */\n\t    function showBackdrop(scope, element, options) {\n\t      if (options.nestLevel) return angular.noop;\n\t\n\t      // If we are not within a dialog...\n\t      if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {\n\t        // !! DO this before creating the backdrop; since disableScrollAround()\n\t        //    configures the scroll offset; which is used by mdBackDrop postLink()\n\t        options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);\n\t      } else {\n\t        options.disableParentScroll = false;\n\t      }\n\t\n\t      if (options.hasBackdrop) {\n\t        options.backdrop = $mdUtil.createBackdrop(scope, \"md-menu-backdrop md-click-catcher\");\n\t\n\t        $animate.enter(options.backdrop, options.parent);\n\t      }\n\t\n\t      /**\n\t       * Hide and destroys the backdrop created by showBackdrop()\n\t       */\n\t      return function hideBackdrop() {\n\t        if (options.backdrop) options.backdrop.remove();\n\t        if (options.disableParentScroll) options.restoreScroll();\n\t      };\n\t    }\n\t\n\t    /**\n\t     * Removing the menu element from the DOM and remove all associated evetn listeners\n\t     * and backdrop\n\t     */\n\t    function onRemove(scope, element, opts) {\n\t      opts.cleanupInteraction();\n\t      opts.cleanupResizing();\n\t      opts.hideBackdrop();\n\t\n\t      // For navigation $destroy events, do a quick, non-animated removal,\n\t      // but for normal closes (from clicks, etc) animate the removal\n\t\n\t      return (opts.$destroy === true) ? detachAndClean() : animateRemoval().then( detachAndClean );\n\t\n\t      /**\n\t       * For normal closes, animate the removal.\n\t       * For forced closes (like $destroy events), skip the animations\n\t       */\n\t      function animateRemoval() {\n\t        return $animateCss(element, {addClass: 'md-leave'}).start();\n\t      }\n\t\n\t      /**\n\t       * Detach the element\n\t       */\n\t      function detachAndClean() {\n\t        element.removeClass('md-active');\n\t        detachElement(element, opts);\n\t        opts.alreadyOpen = false;\n\t      }\n\t\n\t    }\n\t\n\t    /**\n\t     * Inserts and configures the staged Menu element into the DOM, positioning it,\n\t     * and wiring up various interaction events\n\t     */\n\t    function onShow(scope, element, opts) {\n\t      sanitizeAndConfigure(opts);\n\t\n\t      // Wire up theming on our menu element\n\t      $mdTheming.inherit(opts.menuContentEl, opts.target);\n\t\n\t      // Register various listeners to move menu on resize/orientation change\n\t      opts.cleanupResizing = startRepositioningOnResize();\n\t      opts.hideBackdrop = showBackdrop(scope, element, opts);\n\t\n\t      // Return the promise for when our menu is done animating in\n\t      return showMenu()\n\t        .then(function(response) {\n\t          opts.alreadyOpen = true;\n\t          opts.cleanupInteraction = activateInteraction();\n\t          return response;\n\t        });\n\t\n\t      /**\n\t       * Place the menu into the DOM and call positioning related functions\n\t       */\n\t      function showMenu() {\n\t        if (!opts.preserveElement) {\n\t          opts.parent.append(element);\n\t        } else {\n\t          element[0].style.display = '';\n\t        }\n\t\n\t        return $q(function(resolve) {\n\t          var position = calculateMenuPosition(element, opts);\n\t\n\t          element.removeClass('md-leave');\n\t\n\t          // Animate the menu scaling, and opacity [from its position origin (default == top-left)]\n\t          // to normal scale.\n\t          $animateCss(element, {\n\t            addClass: 'md-active',\n\t            from: animator.toCss(position),\n\t            to: animator.toCss({transform: ''})\n\t          })\n\t          .start()\n\t          .then(resolve);\n\t\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Check for valid opts and set some sane defaults\n\t       */\n\t      function sanitizeAndConfigure() {\n\t        if (!opts.target) {\n\t          throw Error(\n\t            '$mdMenu.show() expected a target to animate from in options.target'\n\t          );\n\t        }\n\t        angular.extend(opts, {\n\t          alreadyOpen: false,\n\t          isRemoved: false,\n\t          target: angular.element(opts.target), //make sure it's not a naked dom node\n\t          parent: angular.element(opts.parent),\n\t          menuContentEl: angular.element(element[0].querySelector('md-menu-content'))\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Configure various resize listeners for screen changes\n\t       */\n\t      function startRepositioningOnResize() {\n\t\n\t        var repositionMenu = (function(target, options) {\n\t          return $$rAF.throttle(function() {\n\t            if (opts.isRemoved) return;\n\t            var position = calculateMenuPosition(target, options);\n\t\n\t            target.css(animator.toCss(position));\n\t          });\n\t        })(element, opts);\n\t\n\t        $window.addEventListener('resize', repositionMenu);\n\t        $window.addEventListener('orientationchange', repositionMenu);\n\t\n\t        return function stopRepositioningOnResize() {\n\t\n\t          // Disable resizing handlers\n\t          $window.removeEventListener('resize', repositionMenu);\n\t          $window.removeEventListener('orientationchange', repositionMenu);\n\t\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Activate interaction on the menu. Wire up keyboard listerns for\n\t       * clicks, keypresses, backdrop closing, etc.\n\t       */\n\t      function activateInteraction() {\n\t        element.addClass('md-clickable');\n\t\n\t        // close on backdrop click\n\t        if (opts.backdrop) opts.backdrop.on('click', onBackdropClick);\n\t\n\t        // Wire up keyboard listeners.\n\t        // - Close on escape,\n\t        // - focus next item on down arrow,\n\t        // - focus prev item on up\n\t        opts.menuContentEl.on('keydown', onMenuKeyDown);\n\t        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);\n\t\n\t        // kick off initial focus in the menu on the first element\n\t        var focusTarget = opts.menuContentEl[0].querySelector('[md-menu-focus-target]');\n\t        if ( !focusTarget ) {\n\t          var firstChild = opts.menuContentEl[0].firstElementChild;\n\t\n\t          focusTarget = firstChild && (firstChild.querySelector('.md-button:not([disabled])') || firstChild.firstElementChild);\n\t        }\n\t\n\t        focusTarget && focusTarget.focus();\n\t\n\t        return function cleanupInteraction() {\n\t          element.removeClass('md-clickable');\n\t          if (opts.backdrop) opts.backdrop.off('click', onBackdropClick);\n\t          opts.menuContentEl.off('keydown', onMenuKeyDown);\n\t          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);\n\t        };\n\t\n\t        // ************************************\n\t        // internal functions\n\t        // ************************************\n\t\n\t        function onMenuKeyDown(ev) {\n\t          var handled;\n\t          switch (ev.keyCode) {\n\t            case $mdConstant.KEY_CODE.ESCAPE:\n\t              opts.mdMenuCtrl.close(false, { closeAll: true });\n\t              handled = true;\n\t              break;\n\t            case $mdConstant.KEY_CODE.UP_ARROW:\n\t              if (!focusMenuItem(ev, opts.menuContentEl, opts, -1)) {\n\t                opts.mdMenuCtrl.triggerContainerProxy(ev);\n\t              }\n\t              handled = true;\n\t              break;\n\t            case $mdConstant.KEY_CODE.DOWN_ARROW:\n\t              if (!focusMenuItem(ev, opts.menuContentEl, opts, 1)) {\n\t                opts.mdMenuCtrl.triggerContainerProxy(ev);\n\t              }\n\t              handled = true;\n\t              break;\n\t            case $mdConstant.KEY_CODE.LEFT_ARROW:\n\t              if (opts.nestLevel) {\n\t                opts.mdMenuCtrl.close();\n\t              } else {\n\t                opts.mdMenuCtrl.triggerContainerProxy(ev);\n\t              }\n\t              handled = true;\n\t              break;\n\t            case $mdConstant.KEY_CODE.RIGHT_ARROW:\n\t              var parentMenu = $mdUtil.getClosest(ev.target, 'MD-MENU');\n\t              if (parentMenu && parentMenu != opts.parent[0]) {\n\t                ev.target.click();\n\t              } else {\n\t                opts.mdMenuCtrl.triggerContainerProxy(ev);\n\t              }\n\t              handled = true;\n\t              break;\n\t          }\n\t          if (handled) {\n\t            ev.preventDefault();\n\t            ev.stopImmediatePropagation();\n\t          }\n\t        }\n\t\n\t        function onBackdropClick(e) {\n\t          e.preventDefault();\n\t          e.stopPropagation();\n\t          scope.$apply(function() {\n\t            opts.mdMenuCtrl.close(true, { closeAll: true });\n\t          });\n\t        }\n\t\n\t        // Close menu on menu item click, if said menu-item is not disabled\n\t        function captureClickListener(e) {\n\t          var target = e.target;\n\t          // Traverse up the event until we get to the menuContentEl to see if\n\t          // there is an ng-click and that the ng-click is not disabled\n\t          do {\n\t            if (target == opts.menuContentEl[0]) return;\n\t            if (hasAnyAttribute(target, ['ng-click', 'ng-href', 'ui-sref']) ||\n\t                target.nodeName == 'BUTTON' || target.nodeName == 'MD-BUTTON') {\n\t              var closestMenu = $mdUtil.getClosest(target, 'MD-MENU');\n\t              if (!target.hasAttribute('disabled') && (!closestMenu || closestMenu == opts.parent[0])) {\n\t                close();\n\t              }\n\t              break;\n\t            }\n\t          } while (target = target.parentNode)\n\t\n\t          function close() {\n\t            scope.$apply(function() {\n\t              opts.mdMenuCtrl.close(true, { closeAll: true });\n\t            });\n\t          }\n\t\n\t          function hasAnyAttribute(target, attrs) {\n\t            if (!target) return false;\n\t            for (var i = 0, attr; attr = attrs[i]; ++i) {\n\t              var altForms = [attr, 'data-' + attr, 'x-' + attr];\n\t              for (var j = 0, rawAttr; rawAttr = altForms[j]; ++j) {\n\t                if (target.hasAttribute(rawAttr)) {\n\t                  return true;\n\t                }\n\t              }\n\t            }\n\t            return false;\n\t          }\n\t        }\n\t\n\t        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);\n\t\n\t        return function cleanupInteraction() {\n\t          element.removeClass('md-clickable');\n\t          opts.menuContentEl.off('keydown');\n\t          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);\n\t        };\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Takes a keypress event and focuses the next/previous menu\n\t     * item from the emitting element\n\t     * @param {event} e - The origin keypress event\n\t     * @param {angular.element} menuEl - The menu element\n\t     * @param {object} opts - The interim element options for the mdMenu\n\t     * @param {number} direction - The direction to move in (+1 = next, -1 = prev)\n\t     */\n\t    function focusMenuItem(e, menuEl, opts, direction) {\n\t      var currentItem = $mdUtil.getClosest(e.target, 'MD-MENU-ITEM');\n\t\n\t      var items = $mdUtil.nodesToArray(menuEl[0].children);\n\t      var currentIndex = items.indexOf(currentItem);\n\t\n\t      // Traverse through our elements in the specified direction (+/-1) and try to\n\t      // focus them until we find one that accepts focus\n\t      var didFocus;\n\t      for (var i = currentIndex + direction; i >= 0 && i < items.length; i = i + direction) {\n\t        var focusTarget = items[i].querySelector('.md-button');\n\t        didFocus = attemptFocus(focusTarget);\n\t        if (didFocus) {\n\t          break;\n\t        }\n\t      }\n\t      return didFocus;\n\t    }\n\t\n\t    /**\n\t     * Attempts to focus an element. Checks whether that element is the currently\n\t     * focused element after attempting.\n\t     * @param {HTMLElement} el - the element to attempt focus on\n\t     * @returns {bool} - whether the element was successfully focused\n\t     */\n\t    function attemptFocus(el) {\n\t      if (el && el.getAttribute('tabindex') != -1) {\n\t        el.focus();\n\t        return ($document[0].activeElement == el);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Use browser to remove this element without triggering a $destroy event\n\t     */\n\t    function detachElement(element, opts) {\n\t      if (!opts.preserveElement) {\n\t        if (toNode(element).parentNode === toNode(opts.parent)) {\n\t          toNode(opts.parent).removeChild(toNode(element));\n\t        }\n\t      } else {\n\t        toNode(element).style.display = 'none';\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Computes menu position and sets the style on the menu container\n\t     * @param {HTMLElement} el - the menu container element\n\t     * @param {object} opts - the interim element options object\n\t     */\n\t    function calculateMenuPosition(el, opts) {\n\t\n\t      var containerNode = el[0],\n\t        openMenuNode = el[0].firstElementChild,\n\t        openMenuNodeRect = openMenuNode.getBoundingClientRect(),\n\t        boundryNode = $document[0].body,\n\t        boundryNodeRect = boundryNode.getBoundingClientRect();\n\t\n\t      var menuStyle = $window.getComputedStyle(openMenuNode);\n\t\n\t      var originNode = opts.target[0].querySelector('[md-menu-origin]') || opts.target[0],\n\t        originNodeRect = originNode.getBoundingClientRect();\n\t\n\t      var bounds = {\n\t        left: boundryNodeRect.left + MENU_EDGE_MARGIN,\n\t        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,\n\t        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,\n\t        right: boundryNodeRect.right - MENU_EDGE_MARGIN\n\t      };\n\t\n\t      var alignTarget, alignTargetRect = { top:0, left : 0, right:0, bottom:0 }, existingOffsets  = { top:0, left : 0, right:0, bottom:0  };\n\t      var positionMode = opts.mdMenuCtrl.positionMode();\n\t\n\t      if (positionMode.top == 'target' || positionMode.left == 'target' || positionMode.left == 'target-right') {\n\t        alignTarget = firstVisibleChild();\n\t        if ( alignTarget ) {\n\t          // TODO: Allow centering on an arbitrary node, for now center on first menu-item's child\n\t          alignTarget = alignTarget.firstElementChild || alignTarget;\n\t          alignTarget = alignTarget.querySelector('[md-menu-align-target]') || alignTarget;\n\t          alignTargetRect = alignTarget.getBoundingClientRect();\n\t\n\t          existingOffsets = {\n\t            top: parseFloat(containerNode.style.top || 0),\n\t            left: parseFloat(containerNode.style.left || 0)\n\t          };\n\t        }\n\t      }\n\t\n\t      var position = {};\n\t      var transformOrigin = 'top ';\n\t\n\t      switch (positionMode.top) {\n\t        case 'target':\n\t          position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;\n\t          break;\n\t        case 'cascade':\n\t          position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;\n\t          break;\n\t        case 'bottom':\n\t          position.top = originNodeRect.top + originNodeRect.height;\n\t          break;\n\t        default:\n\t          throw new Error('Invalid target mode \"' + positionMode.top + '\" specified for md-menu on Y axis.');\n\t      }\n\t\n\t      switch (positionMode.left) {\n\t        case 'target':\n\t          position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;\n\t          transformOrigin += 'left';\n\t          break;\n\t        case 'target-right':\n\t          position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);\n\t          transformOrigin += 'right';\n\t          break;\n\t        case 'cascade':\n\t          var willFitRight = (originNodeRect.right + openMenuNodeRect.width) < bounds.right;\n\t          position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;\n\t          transformOrigin += willFitRight ? 'left' : 'right';\n\t          break;\n\t        case 'left':\n\t          position.left = originNodeRect.left;\n\t          transformOrigin += 'left';\n\t          break;\n\t        default:\n\t          throw new Error('Invalid target mode \"' + positionMode.left + '\" specified for md-menu on X axis.');\n\t      }\n\t\n\t      var offsets = opts.mdMenuCtrl.offsets();\n\t      position.top += offsets.top;\n\t      position.left += offsets.left;\n\t\n\t      clamp(position);\n\t\n\t      var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1.0)) / 100;\n\t      var scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1.0)) / 100;\n\t\n\t      return {\n\t        top: Math.round(position.top),\n\t        left: Math.round(position.left),\n\t        // Animate a scale out if we aren't just repositioning\n\t        transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : undefined,\n\t        transformOrigin: transformOrigin\n\t      };\n\t\n\t      /**\n\t       * Clamps the repositioning of the menu within the confines of\n\t       * bounding element (often the screen/body)\n\t       */\n\t      function clamp(pos) {\n\t        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);\n\t        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);\n\t      }\n\t\n\t      /**\n\t       * Gets the first visible child in the openMenuNode\n\t       * Necessary incase menu nodes are being dynamically hidden\n\t       */\n\t      function firstVisibleChild() {\n\t        for (var i = 0; i < openMenuNode.children.length; ++i) {\n\t          if ($window.getComputedStyle(openMenuNode.children[i]).display != 'none') {\n\t            return openMenuNode.children[i];\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  function toNode(el) {\n\t    if (el instanceof angular.element) {\n\t      el = el[0];\n\t    }\n\t    return el;\n\t  }\n\t}\n\tMenuProvider.$inject = [\"$$interimElementProvider\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t\n\tangular\n\t  .module('material.components.menuBar')\n\t  .controller('MenuBarController', MenuBarController);\n\t\n\tvar BOUND_MENU_METHODS = ['handleKeyDown', 'handleMenuHover', 'scheduleOpenHoveredMenu', 'cancelScheduledOpen'];\n\t\n\t/**\n\t * @ngInject\n\t */\n\tfunction MenuBarController($scope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {\n\t  this.$element = $element;\n\t  this.$attrs = $attrs;\n\t  this.$mdConstant = $mdConstant;\n\t  this.$mdUtil = $mdUtil;\n\t  this.$document = $document;\n\t  this.$scope = $scope;\n\t  this.$timeout = $timeout;\n\t\n\t  var self = this;\n\t  angular.forEach(BOUND_MENU_METHODS, function(methodName) {\n\t    self[methodName] = angular.bind(self, self[methodName]);\n\t  });\n\t}\n\tMenuBarController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$mdConstant\", \"$document\", \"$mdUtil\", \"$timeout\"];\n\t\n\tMenuBarController.prototype.init = function() {\n\t  var $element = this.$element;\n\t  var $mdUtil = this.$mdUtil;\n\t  var $scope = this.$scope;\n\t\n\t  var self = this;\n\t  $element.on('keydown', this.handleKeyDown);\n\t  this.parentToolbar = $mdUtil.getClosest($element, 'MD-TOOLBAR');\n\t\n\t  $scope.$on('$mdMenuOpen', function(event, el) {\n\t    if (self.getMenus().indexOf(el[0]) != -1) {\n\t      $element[0].classList.add('md-open');\n\t      el[0].classList.add('md-open');\n\t      self.currentlyOpenMenu = el.controller('mdMenu');\n\t      self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);\n\t      self.enableOpenOnHover();\n\t    }\n\t  });\n\t\n\t  $scope.$on('$mdMenuClose', function(event, el, opts) {\n\t    var rootMenus = self.getMenus();\n\t    if (rootMenus.indexOf(el[0]) != -1) {\n\t      $element[0].classList.remove('md-open');\n\t      el[0].classList.remove('md-open');\n\t    }\n\t\n\t    if (opts.closeAll) {\n\t      if ($element[0].contains(el[0])) {\n\t        var parentMenu = el[0];\n\t        while (parentMenu && rootMenus.indexOf(parentMenu) == -1) {\n\t          parentMenu = $mdUtil.getClosest(parentMenu, 'MD-MENU', true);\n\t        }\n\t        if (parentMenu) {\n\t          if (!opts.skipFocus) parentMenu.querySelector('button:not([disabled])').focus();\n\t          self.currentlyOpenMenu = undefined;\n\t          self.disableOpenOnHover();\n\t          self.setKeyboardMode(true);\n\t        }\n\t      }\n\t    }\n\t  });\n\t\n\t  angular\n\t    .element(this.getMenus())\n\t    .on('mouseenter', this.handleMenuHover);\n\t\n\t  this.setKeyboardMode(true);\n\t};\n\t\n\tMenuBarController.prototype.setKeyboardMode = function(enabled) {\n\t  if (enabled) this.$element[0].classList.add('md-keyboard-mode');\n\t  else this.$element[0].classList.remove('md-keyboard-mode');\n\t};\n\t\n\tMenuBarController.prototype.enableOpenOnHover = function() {\n\t  if (this.openOnHoverEnabled) return;\n\t  this.openOnHoverEnabled = true;\n\t\n\t  var parentToolbar;\n\t  if (parentToolbar = this.parentToolbar) {\n\t    parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute('style');\n\t    parentToolbar.style.position = 'relative';\n\t    parentToolbar.style.zIndex = 100;\n\t  }\n\t};\n\t\n\tMenuBarController.prototype.handleMenuHover = function(e) {\n\t  this.setKeyboardMode(false);\n\t  if (this.openOnHoverEnabled) {\n\t    this.scheduleOpenHoveredMenu(e);\n\t  }\n\t};\n\t\n\t\n\tMenuBarController.prototype.disableOpenOnHover = function() {\n\t  if (!this.openOnHoverEnabled) return;\n\t  this.openOnHoverEnabled = false;\n\t  var parentToolbar;\n\t  if (parentToolbar = this.parentToolbar) {\n\t    parentToolbar.setAttribute('style', parentToolbar.dataset.mdRestoreStyle || '');\n\t  }\n\t};\n\t\n\tMenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {\n\t  var menuEl = angular.element(e.currentTarget);\n\t  var menuCtrl = menuEl.controller('mdMenu');\n\t  this.setKeyboardMode(false);\n\t  this.scheduleOpenMenu(menuCtrl);\n\t};\n\t\n\tMenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {\n\t  var self = this;\n\t  var $timeout = this.$timeout;\n\t  if (menuCtrl != self.currentlyOpenMenu) {\n\t    $timeout.cancel(self.pendingMenuOpen);\n\t    self.pendingMenuOpen = $timeout(function() {\n\t      self.pendingMenuOpen = undefined;\n\t      if (self.currentlyOpenMenu) {\n\t        self.currentlyOpenMenu.close(true, { closeAll: true });\n\t      }\n\t      menuCtrl.open();\n\t    }, 200, false);\n\t  }\n\t};\n\t\n\tMenuBarController.prototype.handleKeyDown = function(e) {\n\t  var keyCodes = this.$mdConstant.KEY_CODE;\n\t  var currentMenu = this.currentlyOpenMenu;\n\t  var wasOpen = currentMenu && currentMenu.isOpen;\n\t  this.setKeyboardMode(true);\n\t  var handled, newMenu, newMenuCtrl;\n\t  switch (e.keyCode) {\n\t    case keyCodes.DOWN_ARROW:\n\t      if (currentMenu) {\n\t        currentMenu.focusMenuContainer();\n\t      } else {\n\t        this.openFocusedMenu();\n\t      }\n\t      handled = true;\n\t      break;\n\t    case keyCodes.UP_ARROW:\n\t      currentMenu && currentMenu.close();\n\t      handled = true;\n\t      break;\n\t    case keyCodes.LEFT_ARROW:\n\t      newMenu = this.focusMenu(-1);\n\t      if (wasOpen) {\n\t        newMenuCtrl = angular.element(newMenu).controller('mdMenu');\n\t        this.scheduleOpenMenu(newMenuCtrl);\n\t      }\n\t      handled = true;\n\t      break;\n\t    case keyCodes.RIGHT_ARROW:\n\t      newMenu = this.focusMenu(+1);\n\t      if (wasOpen) {\n\t        newMenuCtrl = angular.element(newMenu).controller('mdMenu');\n\t        this.scheduleOpenMenu(newMenuCtrl);\n\t      }\n\t      handled = true;\n\t      break;\n\t  }\n\t  if (handled) {\n\t    e && e.preventDefault && e.preventDefault();\n\t    e && e.stopImmediatePropagation && e.stopImmediatePropagation();\n\t  }\n\t};\n\t\n\tMenuBarController.prototype.focusMenu = function(direction) {\n\t  var menus = this.getMenus();\n\t  var focusedIndex = this.getFocusedMenuIndex();\n\t\n\t  if (focusedIndex == -1) { focusedIndex = this.getOpenMenuIndex(); }\n\t\n\t  var changed = false;\n\t\n\t  if (focusedIndex == -1) { focusedIndex = 0; }\n\t  else if (\n\t    direction < 0 && focusedIndex > 0 ||\n\t    direction > 0 && focusedIndex < menus.length - direction\n\t  ) {\n\t    focusedIndex += direction;\n\t    changed = true;\n\t  }\n\t  if (changed) {\n\t    menus[focusedIndex].querySelector('button').focus();\n\t    return menus[focusedIndex];\n\t  }\n\t};\n\t\n\tMenuBarController.prototype.openFocusedMenu = function() {\n\t  var menu = this.getFocusedMenu();\n\t  menu && angular.element(menu).controller('mdMenu').open();\n\t};\n\t\n\tMenuBarController.prototype.getMenus = function() {\n\t  var $element = this.$element;\n\t  return this.$mdUtil.nodesToArray($element[0].children)\n\t    .filter(function(el) { return el.nodeName == 'MD-MENU'; });\n\t};\n\t\n\tMenuBarController.prototype.getFocusedMenu = function() {\n\t  return this.getMenus()[this.getFocusedMenuIndex()];\n\t};\n\t\n\tMenuBarController.prototype.getFocusedMenuIndex = function() {\n\t  var $mdUtil = this.$mdUtil;\n\t  var focusedEl = $mdUtil.getClosest(\n\t    this.$document[0].activeElement,\n\t    'MD-MENU'\n\t  );\n\t  if (!focusedEl) return -1;\n\t\n\t  var focusedIndex = this.getMenus().indexOf(focusedEl);\n\t  return focusedIndex;\n\t\n\t};\n\t\n\tMenuBarController.prototype.getOpenMenuIndex = function() {\n\t  var menus = this.getMenus();\n\t  for (var i = 0; i < menus.length; ++i) {\n\t    if (menus[i].classList.contains('md-open')) return i;\n\t  }\n\t  return -1;\n\t};\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdMenuBar\n\t * @module material.components.menu-bar\n\t * @restrict E\n\t * @description\n\t *\n\t * Menu bars are containers that hold multiple menus. They change the behavior and appearence\n\t * of the `md-menu` directive to behave similar to an operating system provided menu.\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-menu-bar>\n\t *   <md-menu>\n\t *     <button ng-click=\"$mdOpenMenu()\">\n\t *       File\n\t *     </button>\n\t *     <md-menu-content>\n\t *       <md-menu-item>\n\t *         <md-button ng-click=\"ctrl.sampleAction('share', $event)\">\n\t *           Share...\n\t *         </md-button>\n\t *       </md-menu-item>\n\t *       <md-menu-divider></md-menu-divider>\n\t *       <md-menu-item>\n\t *       <md-menu-item>\n\t *         <md-menu>\n\t *           <md-button ng-click=\"$mdOpenMenu()\">New</md-button>\n\t *           <md-menu-content>\n\t *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Document', $event)\">Document</md-button></md-menu-item>\n\t *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Spreadsheet', $event)\">Spreadsheet</md-button></md-menu-item>\n\t *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Presentation', $event)\">Presentation</md-button></md-menu-item>\n\t *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Form', $event)\">Form</md-button></md-menu-item>\n\t *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Drawing', $event)\">Drawing</md-button></md-menu-item>\n\t *           </md-menu-content>\n\t *         </md-menu>\n\t *       </md-menu-item>\n\t *     </md-menu-content>\n\t *   </md-menu>\n\t * </md-menu-bar>\n\t * </hljs>\n\t *\n\t * ## Menu Bar Controls\n\t *\n\t * You may place `md-menu-items` that function as controls within menu bars.\n\t * There are two modes that are exposed via the `type` attribute of the `md-menu-item`.\n\t * `type=\"checkbox\"` will function as a boolean control for the `ng-model` attribute of the\n\t * `md-menu-item`. `type=\"radio\"` will function like a radio button, setting the `ngModel`\n\t * to the `string` value of the `value` attribute. If you need non-string values, you can use\n\t * `ng-value` to provide an expression (this is similar to how angular's native `input[type=radio]` works.\n\t *\n\t * <hljs lang=\"html\">\n\t * <md-menu-bar>\n\t *  <md-menu>\n\t *    <button ng-click=\"$mdOpenMenu()\">\n\t *      Sample Menu\n\t *    </button>\n\t *    <md-menu-content>\n\t *      <md-menu-item type=\"checkbox\" ng-model=\"settings.allowChanges\">Allow changes</md-menu-item>\n\t *      <md-menu-divider></md-menu-divider>\n\t *      <md-menu-item type=\"radio\" ng-model=\"settings.mode\" ng-value=\"1\">Mode 1</md-menu-item>\n\t *      <md-menu-item type=\"radio\" ng-model=\"settings.mode\" ng-value=\"1\">Mode 2</md-menu-item>\n\t *      <md-menu-item type=\"radio\" ng-model=\"settings.mode\" ng-value=\"1\">Mode 3</md-menu-item>\n\t *    </md-menu-content>\n\t *  </md-menu>\n\t * </md-menu-bar>\n\t * </hljs>\n\t *\n\t *\n\t * ### Nesting Menus\n\t *\n\t * Menus may be nested within menu bars. This is commonly called cascading menus.\n\t * To nest a menu place the nested menu inside the content of the `md-menu-item`.\n\t * <hljs lang=\"html\">\n\t * <md-menu-item>\n\t *   <md-menu>\n\t *     <button ng-click=\"$mdOpenMenu()\">New</md-button>\n\t *     <md-menu-content>\n\t *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Document', $event)\">Document</md-button></md-menu-item>\n\t *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Spreadsheet', $event)\">Spreadsheet</md-button></md-menu-item>\n\t *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Presentation', $event)\">Presentation</md-button></md-menu-item>\n\t *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Form', $event)\">Form</md-button></md-menu-item>\n\t *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Drawing', $event)\">Drawing</md-button></md-menu-item>\n\t *     </md-menu-content>\n\t *   </md-menu>\n\t * </md-menu-item>\n\t * </hljs>\n\t *\n\t */\n\t\n\tangular\n\t  .module('material.components.menuBar')\n\t  .directive('mdMenuBar', MenuBarDirective);\n\t\n\t/**\n\t *\n\t * @ngInjdect\n\t */\n\tfunction MenuBarDirective($mdUtil, $mdTheming) {\n\t  return {\n\t    restrict: 'E',\n\t    require: 'mdMenuBar',\n\t    controller: 'MenuBarController',\n\t\n\t    compile: function compile(templateEl, templateAttrs) {\n\t      if (!templateAttrs.ariaRole) {\n\t        templateEl[0].setAttribute('role', 'menubar');\n\t      }\n\t      angular.forEach(templateEl[0].children, function(menuEl) {\n\t        if (menuEl.nodeName == 'MD-MENU') {\n\t          if (!menuEl.hasAttribute('md-position-mode')) {\n\t            menuEl.setAttribute('md-position-mode', 'left bottom');\n\t          }\n\t          menuEl.setAttribute('role', 'menu');\n\t          var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll('md-menu-content'));\n\t          angular.forEach(contentEls, function(contentEl) {\n\t            contentEl.classList.add('md-menu-bar-menu');\n\t            contentEl.classList.add('md-dense');\n\t            if (!contentEl.hasAttribute('width')) {\n\t              contentEl.setAttribute('width', 5);\n\t            }\n\t          });\n\t        }\n\t      });\n\t\n\t      return function postLink(scope, el, attrs, ctrl) {\n\t        $mdTheming(scope, el);\n\t        ctrl.init();\n\t      };\n\t    }\n\t  };\n\t\n\t}\n\tMenuBarDirective.$inject = [\"$mdUtil\", \"$mdTheming\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t\n\tangular\n\t  .module('material.components.menuBar')\n\t  .directive('mdMenuDivider', MenuDividerDirective);\n\t\n\t\n\tfunction MenuDividerDirective() {\n\t  return {\n\t    restrict: 'E',\n\t    compile: function(templateEl, templateAttrs) {\n\t      if (!templateAttrs.role) {\n\t        templateEl[0].setAttribute('role', 'separator');\n\t      }\n\t    }\n\t  };\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t\n\tangular\n\t  .module('material.components.menuBar')\n\t  .controller('MenuItemController', MenuItemController);\n\t\n\t\n\t/**\n\t * @ngInject\n\t */\n\tfunction MenuItemController($scope, $element, $attrs) {\n\t  this.$element = $element;\n\t  this.$attrs = $attrs;\n\t  this.$scope = $scope;\n\t}\n\tMenuItemController.$inject = [\"$scope\", \"$element\", \"$attrs\"];\n\t\n\tMenuItemController.prototype.init = function(ngModel) {\n\t  var $element = this.$element;\n\t  var $attrs = this.$attrs;\n\t\n\t  this.ngModel = ngModel;\n\t  if ($attrs.type == 'checkbox' || $attrs.type == 'radio') {\n\t    this.mode  = $attrs.type;\n\t    this.iconEl = $element[0].children[0];\n\t    this.buttonEl = $element[0].children[1];\n\t    if (ngModel) this.initClickListeners();\n\t  }\n\t};\n\t\n\tMenuItemController.prototype.initClickListeners = function() {\n\t  var ngModel = this.ngModel;\n\t  var $scope = this.$scope;\n\t  var $attrs = this.$attrs;\n\t  var $element = this.$element;\n\t  var mode = this.mode;\n\t\n\t  this.handleClick = angular.bind(this, this.handleClick);\n\t\n\t  var icon = this.iconEl\n\t  var button = angular.element(this.buttonEl);\n\t  var handleClick = this.handleClick;\n\t\n\t  $attrs.$observe('disabled', setDisabled);\n\t  setDisabled($attrs.disabled);\n\t\n\t  ngModel.$render = function render() {\n\t    if (isSelected()) {\n\t      icon.style.display = '';\n\t      $element.attr('aria-checked', 'true');\n\t    } else {\n\t      icon.style.display = 'none';\n\t      $element.attr('aria-checked', 'false');\n\t    }\n\t  };\n\t\n\t  $scope.$$postDigest(ngModel.$render);\n\t\n\t  function isSelected() {\n\t    if (mode == 'radio') {\n\t      var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;\n\t      return ngModel.$modelValue == val;\n\t    } else {\n\t      return ngModel.$modelValue;\n\t    }\n\t  }\n\t\n\t  function setDisabled(disabled) {\n\t    if (disabled) {\n\t      button.off('click', handleClick);\n\t    } else {\n\t      button.on('click', handleClick);\n\t    }\n\t  }\n\t};\n\t\n\tMenuItemController.prototype.handleClick = function(e) {\n\t  var mode = this.mode;\n\t  var ngModel = this.ngModel;\n\t  var $attrs = this.$attrs;\n\t  var newVal;\n\t  if (mode == 'checkbox') {\n\t    newVal = !ngModel.$modelValue;\n\t  } else if (mode == 'radio') {\n\t    newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value;\n\t  }\n\t  ngModel.$setViewValue(newVal);\n\t  ngModel.$render();\n\t};\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t\n\tangular\n\t  .module('material.components.menuBar')\n\t  .directive('mdMenuItem', MenuItemDirective);\n\t\n\t /**\n\t  *\n\t  * @ngInjdect\n\t  */\n\tfunction MenuItemDirective() {\n\t  return {\n\t    require: ['mdMenuItem', '?ngModel'],\n\t    compile: function(templateEl, templateAttrs) {\n\t      if (templateAttrs.type == 'checkbox' || templateAttrs.type == 'radio') {\n\t        var text = templateEl[0].textContent;\n\t        var buttonEl = angular.element('<md-button type=\"button\"></md-button>');\n\t            buttonEl.html(text);\n\t            buttonEl.attr('tabindex', '0');\n\t\n\t        templateEl.html('');\n\t        templateEl.append(angular.element('<md-icon md-svg-icon=\"check\"></md-icon>'));\n\t        templateEl.append(buttonEl);\n\t        templateEl[0].classList.add('md-indent');\n\t\n\t        setDefault('role', (templateAttrs.type == 'checkbox') ? 'menuitemcheckbox' : 'menuitemradio');\n\t        angular.forEach(['ng-disabled'], moveAttrToButton);\n\t\n\t      } else {\n\t        setDefault('role', 'menuitem');\n\t      }\n\t\n\t\n\t      return function(scope, el, attrs, ctrls) {\n\t        var ctrl = ctrls[0];\n\t        var ngModel = ctrls[1];\n\t        ctrl.init(ngModel);\n\t      };\n\t\n\t      function setDefault(attr, val) {\n\t        if (!templateEl[0].hasAttribute(attr)) {\n\t          templateEl[0].setAttribute(attr, val);\n\t        }\n\t      }\n\t\n\t      function moveAttrToButton(attr) {\n\t        if (templateEl[0].hasAttribute(attr)) {\n\t          var val = templateEl[0].getAttribute(attr);\n\t          buttonEl[0].setAttribute(attr, val);\n\t          templateEl[0].removeAttribute(attr);\n\t        }\n\t      }\n\t    },\n\t    controller: 'MenuItemController'\n\t  };\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdTab\n\t * @module material.components.tabs\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.\n\t *\n\t * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more\n\t * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested\n\t * markup of the `<md-tab>` is used as the tab header markup.\n\t *\n\t * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This\n\t * is to define a clear separation between the tab content and the tab label.\n\t *\n\t * If a tab **label** has been identified, then any **non-**`<md-tab-label>` markup\n\t * will be considered tab content and will be transcluded to the internal `<div class=\"md-tabs-content\">` container.\n\t *\n\t * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is\n\t * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can\n\t * be initiated via data binding changes, programmatic invocation, or user gestures.\n\t *\n\t * @param {string=} label Optional attribute to specify a simple string as the tab label\n\t * @param {boolean=} disabled If present, disabled tab selection.\n\t * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.\n\t * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.\n\t * @param {boolean=} md-active When true, sets the active tab.  Note: There can only be one active tab at a time.\n\t *\n\t *\n\t * @usage\n\t *\n\t * <hljs lang=\"html\">\n\t * <md-tab label=\"\" disabled=\"\" md-on-select=\"\" md-on-deselect=\"\" >\n\t *   <h3>My Tab content</h3>\n\t * </md-tab>\n\t *\n\t * <md-tab >\n\t *   <md-tab-label>\n\t *     <h3>My Tab content</h3>\n\t *   </md-tab-label>\n\t *   <md-tab-body>\n\t *     <p>\n\t *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,\n\t *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae\n\t *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,\n\t *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n\t *     </p>\n\t *   </md-tab-body>\n\t * </md-tab>\n\t * </hljs>\n\t *\n\t */\n\tangular\n\t    .module('material.components.tabs')\n\t    .directive('mdTab', MdTab);\n\t\n\tfunction MdTab () {\n\t  return {\n\t    require:  '^?mdTabs',\n\t    terminal: true,\n\t    compile:  function (element, attr) {\n\t      var label = element.find('md-tab-label'),\n\t          body  = element.find('md-tab-body');\n\t\n\t      if (label.length == 0) {\n\t        label = angular.element('<md-tab-label></md-tab-label>');\n\t        if (attr.label) label.text(attr.label);\n\t        else label.append(element.contents());\n\t        if (body.length == 0) {\n\t          var contents = element.contents().detach();\n\t          body         = angular.element('<md-tab-body></md-tab-body>');\n\t          body.append(contents);\n\t        }\n\t      }\n\t\n\t      element.append(label);\n\t      if (body.html()) element.append(body);\n\t\n\t      return postLink;\n\t    },\n\t    scope:    {\n\t      active:   '=?mdActive',\n\t      disabled: '=?ngDisabled',\n\t      select:   '&?mdOnSelect',\n\t      deselect: '&?mdOnDeselect'\n\t    }\n\t  };\n\t\n\t  function postLink (scope, element, attr, ctrl) {\n\t    if (!ctrl) return;\n\t    var index = ctrl.getTabElementIndex(element),\n\t        body  = element.find('md-tab-body').eq(0).remove(),\n\t        label = element.find('md-tab-label').eq(0).remove(),\n\t        data  = ctrl.insertTab({\n\t          scope:    scope,\n\t          parent:   scope.$parent,\n\t          index:    index,\n\t          element:  element,\n\t          template: body.html(),\n\t          label:    label.html()\n\t        }, index);\n\t\n\t    scope.select   = scope.select || angular.noop;\n\t    scope.deselect = scope.deselect || angular.noop;\n\t\n\t    scope.$watch('active', function (active) { if (active) ctrl.select(data.getIndex()); });\n\t    scope.$watch('disabled', function () { ctrl.refreshIndex(); });\n\t    scope.$watch(\n\t        function () {\n\t          return ctrl.getTabElementIndex(element);\n\t        },\n\t        function (newIndex) {\n\t          data.index = newIndex;\n\t          ctrl.updateTabOrder();\n\t        }\n\t    );\n\t    scope.$on('$destroy', function () { ctrl.removeTab(data); });\n\t\n\t  }\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.tabs')\n\t    .directive('mdTabItem', MdTabItem);\n\t\n\tfunction MdTabItem () {\n\t  return {\n\t    require: '^?mdTabs',\n\t    link:    function link (scope, element, attr, ctrl) {\n\t      if (!ctrl) return;\n\t      ctrl.attachRipple(scope, element);\n\t    }\n\t  };\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.tabs')\n\t    .directive('mdTabLabel', MdTabLabel);\n\t\n\tfunction MdTabLabel () {\n\t  return { terminal: true };\n\t}\n\t\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular.module('material.components.tabs')\n\t    .directive('mdTabScroll', MdTabScroll);\n\t\n\tfunction MdTabScroll ($parse) {\n\t  return {\n\t    restrict: 'A',\n\t    compile: function ($element, attr) {\n\t      var fn = $parse(attr.mdTabScroll, null, true);\n\t      return function ngEventHandler (scope, element) {\n\t        element.on('mousewheel', function (event) {\n\t          scope.$apply(function () { fn(scope, { $event: event }); });\n\t        });\n\t      };\n\t    }\n\t  }\n\t}\n\tMdTabScroll.$inject = [\"$parse\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.tabs')\n\t    .controller('MdTabsController', MdTabsController);\n\t\n\t/**\n\t * @ngInject\n\t */\n\tfunction MdTabsController ($scope, $element, $window, $mdConstant, $mdTabInkRipple,\n\t                           $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {\n\t  // define private properties\n\t  var ctrl      = this,\n\t      locked    = false,\n\t      elements  = getElements(),\n\t      queue     = [],\n\t      destroyed = false,\n\t      loaded    = false;\n\t\n\t  // define one-way bindings\n\t  defineOneWayBinding('stretchTabs', handleStretchTabs);\n\t\n\t  // define public properties with change handlers\n\t  defineProperty('focusIndex', handleFocusIndexChange, ctrl.selectedIndex || 0);\n\t  defineProperty('offsetLeft', handleOffsetChange, 0);\n\t  defineProperty('hasContent', handleHasContent, false);\n\t  defineProperty('maxTabWidth', handleMaxTabWidth, getMaxTabWidth());\n\t  defineProperty('shouldPaginate', handleShouldPaginate, false);\n\t\n\t  // define boolean attributes\n\t  defineBooleanAttribute('noInkBar', handleInkBar);\n\t  defineBooleanAttribute('dynamicHeight', handleDynamicHeight);\n\t  defineBooleanAttribute('noPagination');\n\t  defineBooleanAttribute('swipeContent');\n\t  defineBooleanAttribute('noDisconnect');\n\t  defineBooleanAttribute('autoselect');\n\t  defineBooleanAttribute('centerTabs', handleCenterTabs, false);\n\t  defineBooleanAttribute('enableDisconnect');\n\t\n\t  // define public properties\n\t  ctrl.scope             = $scope;\n\t  ctrl.parent            = $scope.$parent;\n\t  ctrl.tabs              = [];\n\t  ctrl.lastSelectedIndex = null;\n\t  ctrl.hasFocus          = false;\n\t  ctrl.lastClick         = true;\n\t  ctrl.shouldCenterTabs  = shouldCenterTabs();\n\t\n\t  // define public methods\n\t  ctrl.updatePagination   = $mdUtil.debounce(updatePagination, 100);\n\t  ctrl.redirectFocus      = redirectFocus;\n\t  ctrl.attachRipple       = attachRipple;\n\t  ctrl.insertTab          = insertTab;\n\t  ctrl.removeTab          = removeTab;\n\t  ctrl.select             = select;\n\t  ctrl.scroll             = scroll;\n\t  ctrl.nextPage           = nextPage;\n\t  ctrl.previousPage       = previousPage;\n\t  ctrl.keydown            = keydown;\n\t  ctrl.canPageForward     = canPageForward;\n\t  ctrl.canPageBack        = canPageBack;\n\t  ctrl.refreshIndex       = refreshIndex;\n\t  ctrl.incrementIndex     = incrementIndex;\n\t  ctrl.getTabElementIndex = getTabElementIndex;\n\t  ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);\n\t  ctrl.updateTabOrder     = $mdUtil.debounce(updateTabOrder, 100);\n\t\n\t  init();\n\t\n\t  /**\n\t   * Perform initialization for the controller, setup events and watcher(s)\n\t   */\n\t  function init () {\n\t    ctrl.selectedIndex = ctrl.selectedIndex || 0;\n\t    compileTemplate();\n\t    configureWatchers();\n\t    bindEvents();\n\t    $mdTheming($element);\n\t    $mdUtil.nextTick(function () {\n\t      updateHeightFromContent();\n\t      adjustOffset();\n\t      updateInkBarStyles();\n\t      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();\n\t      loaded = true;\n\t      updatePagination();\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Compiles the template provided by the user.  This is passed as an attribute from the tabs\n\t   * directive's template function.\n\t   */\n\t  function compileTemplate () {\n\t    var template = $attrs.$mdTabsTemplate,\n\t        element  = angular.element(elements.data);\n\t    element.html(template);\n\t    $compile(element.contents())(ctrl.parent);\n\t    delete $attrs.$mdTabsTemplate;\n\t  }\n\t\n\t  /**\n\t   * Binds events used by the tabs component.\n\t   */\n\t  function bindEvents () {\n\t    angular.element($window).on('resize', handleWindowResize);\n\t    $scope.$on('$destroy', cleanup);\n\t  }\n\t\n\t  /**\n\t   * Configure watcher(s) used by Tabs\n\t   */\n\t  function configureWatchers () {\n\t    $scope.$watch('$mdTabsCtrl.selectedIndex', handleSelectedIndexChange);\n\t  }\n\t\n\t  /**\n\t   * Creates a one-way binding manually rather than relying on Angular's isolated scope\n\t   * @param key\n\t   * @param handler\n\t   */\n\t  function defineOneWayBinding (key, handler) {\n\t    var attr = $attrs.$normalize('md-' + key);\n\t    if (handler) defineProperty(key, handler);\n\t    $attrs.$observe(attr, function (newValue) { ctrl[ key ] = newValue; });\n\t  }\n\t\n\t  /**\n\t   * Defines boolean attributes with default value set to true.  (ie. md-stretch-tabs with no value\n\t   * will be treated as being truthy)\n\t   * @param key\n\t   * @param handler\n\t   */\n\t  function defineBooleanAttribute (key, handler) {\n\t    var attr = $attrs.$normalize('md-' + key);\n\t    if (handler) defineProperty(key, handler);\n\t    if ($attrs.hasOwnProperty(attr)) updateValue($attrs[attr]);\n\t    $attrs.$observe(attr, updateValue);\n\t    function updateValue (newValue) {\n\t      ctrl[ key ] = newValue !== 'false';\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Remove any events defined by this controller\n\t   */\n\t  function cleanup () {\n\t    destroyed = true;\n\t    angular.element($window).off('resize', handleWindowResize);\n\t  }\n\t\n\t  // Change handlers\n\t\n\t  /**\n\t   * Toggles stretch tabs class and updates inkbar when tab stretching changes\n\t   * @param stretchTabs\n\t   */\n\t  function handleStretchTabs (stretchTabs) {\n\t    angular.element(elements.wrapper).toggleClass('md-stretch-tabs', shouldStretchTabs());\n\t    updateInkBarStyles();\n\t  }\n\t\n\t  function handleCenterTabs (newValue) {\n\t    ctrl.shouldCenterTabs = shouldCenterTabs();\n\t  }\n\t\n\t  function handleMaxTabWidth (newWidth, oldWidth) {\n\t    if (newWidth !== oldWidth) {\n\t      $mdUtil.nextTick(ctrl.updateInkBarStyles);\n\t    }\n\t  }\n\t\n\t  function handleShouldPaginate (newValue, oldValue) {\n\t    if (newValue !== oldValue) {\n\t      ctrl.maxTabWidth      = getMaxTabWidth();\n\t      ctrl.shouldCenterTabs = shouldCenterTabs();\n\t      $mdUtil.nextTick(function () {\n\t        ctrl.maxTabWidth = getMaxTabWidth();\n\t        adjustOffset(ctrl.selectedIndex);\n\t      });\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Add/remove the `md-no-tab-content` class depending on `ctrl.hasContent`\n\t   * @param hasContent\n\t   */\n\t  function handleHasContent (hasContent) {\n\t    $element[ hasContent ? 'removeClass' : 'addClass' ]('md-no-tab-content');\n\t  }\n\t\n\t  /**\n\t   * Apply ctrl.offsetLeft to the paging element when it changes\n\t   * @param left\n\t   */\n\t  function handleOffsetChange (left) {\n\t    var newValue = ctrl.shouldCenterTabs ? '' : '-' + left + 'px';\n\t    angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, 'translate3d(' + newValue + ', 0, 0)');\n\t    $scope.$broadcast('$mdTabsPaginationChanged');\n\t  }\n\t\n\t  /**\n\t   * Update the UI whenever `ctrl.focusIndex` is updated\n\t   * @param newIndex\n\t   * @param oldIndex\n\t   */\n\t  function handleFocusIndexChange (newIndex, oldIndex) {\n\t    if (newIndex === oldIndex) return;\n\t    if (!elements.tabs[ newIndex ]) return;\n\t    adjustOffset();\n\t    redirectFocus();\n\t  }\n\t\n\t  /**\n\t   * Update the UI whenever the selected index changes. Calls user-defined select/deselect methods.\n\t   * @param newValue\n\t   * @param oldValue\n\t   */\n\t  function handleSelectedIndexChange (newValue, oldValue) {\n\t    if (newValue === oldValue) return;\n\t    \n\t    ctrl.selectedIndex     = getNearestSafeIndex(newValue);\n\t    ctrl.lastSelectedIndex = oldValue;\n\t    ctrl.updateInkBarStyles();\n\t    updateHeightFromContent();\n\t    adjustOffset(newValue);\n\t    $scope.$broadcast('$mdTabsChanged');\n\t    ctrl.tabs[ oldValue ] && ctrl.tabs[ oldValue ].scope.deselect();\n\t    ctrl.tabs[ newValue ] && ctrl.tabs[ newValue ].scope.select();\n\t  }\n\t\n\t  function getTabElementIndex(tabEl){\n\t    var tabs = $element[0].getElementsByTagName('md-tab');\n\t    return Array.prototype.indexOf.call(tabs, tabEl[0]);\n\t  }\n\t\n\t  /**\n\t   * Queues up a call to `handleWindowResize` when a resize occurs while the tabs component is\n\t   * hidden.\n\t   */\n\t  function handleResizeWhenVisible () {\n\t    // if there is already a watcher waiting for resize, do nothing\n\t    if (handleResizeWhenVisible.watcher) return;\n\t    // otherwise, we will abuse the $watch function to check for visible\n\t    handleResizeWhenVisible.watcher = $scope.$watch(function () {\n\t      // since we are checking for DOM size, we use $mdUtil.nextTick() to wait for after the DOM updates\n\t      $mdUtil.nextTick(function () {\n\t        // if the watcher has already run (ie. multiple digests in one cycle), do nothing\n\t        if (!handleResizeWhenVisible.watcher) return;\n\t\n\t        if ($element.prop('offsetParent')) {\n\t          handleResizeWhenVisible.watcher();\n\t          handleResizeWhenVisible.watcher = null;\n\t\n\t          handleWindowResize();\n\t        }\n\t      }, false);\n\t    });\n\t  }\n\t\n\t  // Event handlers / actions\n\t\n\t  /**\n\t   * Handle user keyboard interactions\n\t   * @param event\n\t   */\n\t  function keydown (event) {\n\t    switch (event.keyCode) {\n\t      case $mdConstant.KEY_CODE.LEFT_ARROW:\n\t        event.preventDefault();\n\t        incrementIndex(-1, true);\n\t        break;\n\t      case $mdConstant.KEY_CODE.RIGHT_ARROW:\n\t        event.preventDefault();\n\t        incrementIndex(1, true);\n\t        break;\n\t      case $mdConstant.KEY_CODE.SPACE:\n\t      case $mdConstant.KEY_CODE.ENTER:\n\t        event.preventDefault();\n\t        if (!locked) ctrl.selectedIndex = ctrl.focusIndex;\n\t        break;\n\t    }\n\t    ctrl.lastClick = false;\n\t  }\n\t\n\t  /**\n\t   * Update the selected index and trigger a click event on the original `md-tab` element in order\n\t   * to fire user-added click events.\n\t   * @param index\n\t   */\n\t  function select (index) {\n\t    if (!locked) ctrl.focusIndex = ctrl.selectedIndex = index;\n\t    ctrl.lastClick = true;\n\t    // nextTick is required to prevent errors in user-defined click events\n\t    $mdUtil.nextTick(function () {\n\t      ctrl.tabs[ index ].element.triggerHandler('click');\n\t    }, false);\n\t  }\n\t\n\t  /**\n\t   * When pagination is on, this makes sure the selected index is in view.\n\t   * @param event\n\t   */\n\t  function scroll (event) {\n\t    if (!ctrl.shouldPaginate) return;\n\t    event.preventDefault();\n\t    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);\n\t  }\n\t\n\t  /**\n\t   * Slides the tabs over approximately one page forward.\n\t   */\n\t  function nextPage () {\n\t    var viewportWidth = elements.canvas.clientWidth,\n\t        totalWidth    = viewportWidth + ctrl.offsetLeft,\n\t        i, tab;\n\t    for (i = 0; i < elements.tabs.length; i++) {\n\t      tab = elements.tabs[ i ];\n\t      if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;\n\t    }\n\t    ctrl.offsetLeft = fixOffset(tab.offsetLeft);\n\t  }\n\t\n\t  /**\n\t   * Slides the tabs over approximately one page backward.\n\t   */\n\t  function previousPage () {\n\t    var i, tab;\n\t    for (i = 0; i < elements.tabs.length; i++) {\n\t      tab = elements.tabs[ i ];\n\t      if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;\n\t    }\n\t    ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);\n\t  }\n\t\n\t  /**\n\t   * Update size calculations when the window is resized.\n\t   */\n\t  function handleWindowResize () {\n\t    ctrl.lastSelectedIndex = ctrl.selectedIndex;\n\t    ctrl.offsetLeft        = fixOffset(ctrl.offsetLeft);\n\t    $mdUtil.nextTick(function () {\n\t      ctrl.updateInkBarStyles();\n\t      updatePagination();\n\t    });\n\t  }\n\t\n\t  function handleInkBar (hide) {\n\t    angular.element(elements.inkBar).toggleClass('ng-hide', hide);\n\t  }\n\t\n\t  /**\n\t   * Toggle dynamic height class when value changes\n\t   * @param value\n\t   */\n\t  function handleDynamicHeight (value) {\n\t    $element.toggleClass('md-dynamic-height', value);\n\t  }\n\t\n\t  /**\n\t   * Remove a tab from the data and select the nearest valid tab.\n\t   * @param tabData\n\t   */\n\t  function removeTab (tabData) {\n\t    if (destroyed) return;\n\t    var selectedIndex = ctrl.selectedIndex,\n\t        tab           = ctrl.tabs.splice(tabData.getIndex(), 1)[ 0 ];\n\t    refreshIndex();\n\t    // when removing a tab, if the selected index did not change, we have to manually trigger the\n\t    //   tab select/deselect events\n\t    if (ctrl.selectedIndex === selectedIndex) {\n\t      tab.scope.deselect();\n\t      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();\n\t    }\n\t    $mdUtil.nextTick(function () {\n\t      updatePagination();\n\t      ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Create an entry in the tabs array for a new tab at the specified index.\n\t   * @param tabData\n\t   * @param index\n\t   * @returns {*}\n\t   */\n\t  function insertTab (tabData, index) {\n\t    var hasLoaded = loaded;\n\t    var proto     = {\n\t          getIndex:     function () { return ctrl.tabs.indexOf(tab); },\n\t          isActive:     function () { return this.getIndex() === ctrl.selectedIndex; },\n\t          isLeft:       function () { return this.getIndex() < ctrl.selectedIndex; },\n\t          isRight:      function () { return this.getIndex() > ctrl.selectedIndex; },\n\t          shouldRender: function () { return !ctrl.noDisconnect || this.isActive(); },\n\t          hasFocus:     function () {\n\t            return !ctrl.lastClick\n\t                && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;\n\t          },\n\t          id:           $mdUtil.nextUid()\n\t        },\n\t        tab       = angular.extend(proto, tabData);\n\t    if (angular.isDefined(index)) {\n\t      ctrl.tabs.splice(index, 0, tab);\n\t    } else {\n\t      ctrl.tabs.push(tab);\n\t    }\n\t    processQueue();\n\t    updateHasContent();\n\t    $mdUtil.nextTick(function () {\n\t      updatePagination();\n\t      // if autoselect is enabled, select the newly added tab\n\t      if (hasLoaded && ctrl.autoselect) $mdUtil.nextTick(function () {\n\t        $mdUtil.nextTick(function () { select(ctrl.tabs.indexOf(tab)); });\n\t      });\n\t    });\n\t    return tab;\n\t  }\n\t\n\t  // Getter methods\n\t\n\t  /**\n\t   * Gathers references to all of the DOM elements used by this controller.\n\t   * @returns {{}}\n\t   */\n\t  function getElements () {\n\t    var elements = {};\n\t\n\t    // gather tab bar elements\n\t    elements.wrapper = $element[ 0 ].getElementsByTagName('md-tabs-wrapper')[ 0 ];\n\t    elements.data    = $element[ 0 ].getElementsByTagName('md-tab-data')[ 0 ];\n\t    elements.canvas  = elements.wrapper.getElementsByTagName('md-tabs-canvas')[ 0 ];\n\t    elements.paging  = elements.canvas.getElementsByTagName('md-pagination-wrapper')[ 0 ];\n\t    elements.tabs    = elements.paging.getElementsByTagName('md-tab-item');\n\t    elements.dummies = elements.canvas.getElementsByTagName('md-dummy-tab');\n\t    elements.inkBar  = elements.paging.getElementsByTagName('md-ink-bar')[ 0 ];\n\t\n\t    // gather tab content elements\n\t    elements.contentsWrapper = $element[ 0 ].getElementsByTagName('md-tabs-content-wrapper')[ 0 ];\n\t    elements.contents        = elements.contentsWrapper.getElementsByTagName('md-tab-content');\n\t\n\t    return elements;\n\t  }\n\t\n\t  /**\n\t   * Determines whether or not the left pagination arrow should be enabled.\n\t   * @returns {boolean}\n\t   */\n\t  function canPageBack () {\n\t    return ctrl.offsetLeft > 0;\n\t  }\n\t\n\t  /**\n\t   * Determines whether or not the right pagination arrow should be enabled.\n\t   * @returns {*|boolean}\n\t   */\n\t  function canPageForward () {\n\t    var lastTab = elements.tabs[ elements.tabs.length - 1 ];\n\t    return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth +\n\t        ctrl.offsetLeft;\n\t  }\n\t\n\t  /**\n\t   * Determines if the UI should stretch the tabs to fill the available space.\n\t   * @returns {*}\n\t   */\n\t  function shouldStretchTabs () {\n\t    switch (ctrl.stretchTabs) {\n\t      case 'always':\n\t        return true;\n\t      case 'never':\n\t        return false;\n\t      default:\n\t        return !ctrl.shouldPaginate\n\t            && $window.matchMedia('(max-width: 600px)').matches;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Determines if the tabs should appear centered.\n\t   * @returns {string|boolean}\n\t   */\n\t  function shouldCenterTabs () {\n\t    return ctrl.centerTabs && !ctrl.shouldPaginate;\n\t  }\n\t\n\t  /**\n\t   * Determines if pagination is necessary to display the tabs within the available space.\n\t   * @returns {boolean}\n\t   */\n\t  function shouldPaginate () {\n\t    if (ctrl.noPagination || !loaded) return false;\n\t    var canvasWidth = $element.prop('clientWidth');\n\t    angular.forEach(elements.dummies, function (tab) { canvasWidth -= tab.offsetWidth; });\n\t    return canvasWidth < 0;\n\t  }\n\t\n\t  /**\n\t   * Finds the nearest tab index that is available.  This is primarily used for when the active\n\t   * tab is removed.\n\t   * @param newIndex\n\t   * @returns {*}\n\t   */\n\t  function getNearestSafeIndex (newIndex) {\n\t    if (newIndex === -1) return -1;\n\t    var maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex),\n\t        i, tab;\n\t    for (i = 0; i <= maxOffset; i++) {\n\t      tab = ctrl.tabs[ newIndex + i ];\n\t      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();\n\t      tab = ctrl.tabs[ newIndex - i ];\n\t      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();\n\t    }\n\t    return newIndex;\n\t  }\n\t\n\t  // Utility methods\n\t\n\t  /**\n\t   * Defines a property using a getter and setter in order to trigger a change handler without\n\t   * using `$watch` to observe changes.\n\t   * @param key\n\t   * @param handler\n\t   * @param value\n\t   */\n\t  function defineProperty (key, handler, value) {\n\t    Object.defineProperty(ctrl, key, {\n\t      get: function () { return value; },\n\t      set: function (newValue) {\n\t        var oldValue = value;\n\t        value        = newValue;\n\t        handler && handler(newValue, oldValue);\n\t      }\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Updates whether or not pagination should be displayed.\n\t   */\n\t  function updatePagination () {\n\t    if (!shouldStretchTabs()) updatePagingWidth();\n\t    ctrl.maxTabWidth = getMaxTabWidth();\n\t    ctrl.shouldPaginate = shouldPaginate();\n\t  }\n\t\n\t  function updatePagingWidth() {\n\t    var width = 1;\n\t    angular.forEach(elements.dummies, function (element) { width += element.offsetWidth; });\n\t    angular.element(elements.paging).css('width', width + 'px');\n\t  }\n\t\n\t  function getMaxTabWidth () {\n\t    return $element.prop('clientWidth');\n\t  }\n\t\n\t  /**\n\t   * Re-orders the tabs and updates the selected and focus indexes to their new positions.\n\t   * This is triggered by `tabDirective.js` when the user's tabs have been re-ordered.\n\t   */\n\t  function updateTabOrder () {\n\t    var selectedItem   = ctrl.tabs[ ctrl.selectedIndex ],\n\t        focusItem      = ctrl.tabs[ ctrl.focusIndex ];\n\t    ctrl.tabs          = ctrl.tabs.sort(function (a, b) {\n\t      return a.index - b.index;\n\t    });\n\t    ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);\n\t    ctrl.focusIndex    = ctrl.tabs.indexOf(focusItem);\n\t  }\n\t\n\t  /**\n\t   * This moves the selected or focus index left or right.  This is used by the keydown handler.\n\t   * @param inc\n\t   */\n\t  function incrementIndex (inc, focus) {\n\t    var newIndex,\n\t        key   = focus ? 'focusIndex' : 'selectedIndex',\n\t        index = ctrl[ key ];\n\t    for (newIndex = index + inc;\n\t         ctrl.tabs[ newIndex ] && ctrl.tabs[ newIndex ].scope.disabled;\n\t         newIndex += inc) {}\n\t    if (ctrl.tabs[ newIndex ]) {\n\t      ctrl[ key ] = newIndex;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * This is used to forward focus to dummy elements.  This method is necessary to avoid aniation\n\t   * issues when attempting to focus an item that is out of view.\n\t   */\n\t  function redirectFocus () {\n\t    elements.dummies[ ctrl.focusIndex ].focus();\n\t  }\n\t\n\t  /**\n\t   * Forces the pagination to move the focused tab into view.\n\t   */\n\t  function adjustOffset (index) {\n\t    if (index == null) index = ctrl.focusIndex;\n\t    if (!elements.tabs[ index ]) return;\n\t    if (ctrl.shouldCenterTabs) return;\n\t    var tab         = elements.tabs[ index ],\n\t        left        = tab.offsetLeft,\n\t        right       = tab.offsetWidth + left;\n\t    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 32 * 2));\n\t    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));\n\t  }\n\t\n\t  /**\n\t   * Iterates through all queued functions and clears the queue.  This is used for functions that\n\t   * are called before the UI is ready, such as size calculations.\n\t   */\n\t  function processQueue () {\n\t    queue.forEach(function (func) { $mdUtil.nextTick(func); });\n\t    queue = [];\n\t  }\n\t\n\t  /**\n\t   * Determines if the tab content area is needed.\n\t   */\n\t  function updateHasContent () {\n\t    var hasContent  = false;\n\t    angular.forEach(ctrl.tabs, function (tab) {\n\t      if (tab.template) hasContent = true;\n\t    });\n\t    ctrl.hasContent = hasContent;\n\t  }\n\t\n\t  /**\n\t   * Moves the indexes to their nearest valid values.\n\t   */\n\t  function refreshIndex () {\n\t    ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);\n\t    ctrl.focusIndex    = getNearestSafeIndex(ctrl.focusIndex);\n\t  }\n\t\n\t  /**\n\t   * Calculates the content height of the current tab.\n\t   * @returns {*}\n\t   */\n\t  function updateHeightFromContent () {\n\t    if (!ctrl.dynamicHeight) return $element.css('height', '');\n\t    if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);\n\t\n\t    var tabContent    = elements.contents[ ctrl.selectedIndex ],\n\t        contentHeight = tabContent ? tabContent.offsetHeight : 0,\n\t        tabsHeight    = elements.wrapper.offsetHeight,\n\t        newHeight     = contentHeight + tabsHeight,\n\t        currentHeight = $element.prop('offsetHeight');\n\t\n\t    // Adjusts calculations for when the buttons are bottom-aligned since this relies on absolute\n\t    // positioning.  This should probably be cleaned up if a cleaner solution is possible.\n\t    if ($element.attr('md-align-tabs') === 'bottom') {\n\t      currentHeight -= tabsHeight;\n\t      newHeight -= tabsHeight;\n\t      // Need to include bottom border in these calculations\n\t      if ($element.attr('md-border-bottom') !== undefined) ++currentHeight;\n\t    }\n\t\n\t    if (currentHeight === newHeight) return;\n\t\n\t    // Lock during animation so the user can't change tabs\n\t    locked = true;\n\t\n\t    var fromHeight = { height: currentHeight + 'px' },\n\t        toHeight = { height: newHeight + 'px' };\n\t\n\t    // Set the height to the current, specific pixel height to fix a bug on iOS where the height\n\t    // first animates to 0, then back to the proper height causing a visual glitch\n\t    $element.css(fromHeight);\n\t\n\t    // Animate the height from the old to the new\n\t    $animateCss($element, {\n\t      from: fromHeight,\n\t      to: toHeight,\n\t      easing: 'cubic-bezier(0.35, 0, 0.25, 1)',\n\t      duration: 0.5\n\t    }).start().done(function () {\n\t      // Then (to fix the same iOS issue as above), disable transitions and remove the specific\n\t      // pixel height so the height can size with browser width/content changes, etc.\n\t      $element.css({\n\t        transition: 'none',\n\t        height: ''\n\t      });\n\t\n\t      // In the next tick, re-allow transitions (if we do it all at once, $element.css is \"smart\"\n\t      // enough to batch it for us instead of doing it immediately, which undoes the original\n\t      // transition: none)\n\t      $mdUtil.nextTick(function() {\n\t        $element.css('transition', '');\n\t      });\n\t\n\t      // And unlock so tab changes can occur\n\t      locked = false;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Repositions the ink bar to the selected tab.\n\t   * @returns {*}\n\t   */\n\t  function updateInkBarStyles () {\n\t    if (!elements.tabs[ ctrl.selectedIndex ]) {\n\t      angular.element(elements.inkBar).css({ left: 'auto', right: 'auto' });\n\t      return;\n\t    }\n\t    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);\n\t    // if the element is not visible, we will not be able to calculate sizes until it is\n\t    // we should treat that as a resize event rather than just updating the ink bar\n\t    if (!$element.prop('offsetParent')) return handleResizeWhenVisible();\n\t    var index      = ctrl.selectedIndex,\n\t        totalWidth = elements.paging.offsetWidth,\n\t        tab        = elements.tabs[ index ],\n\t        left       = tab.offsetLeft,\n\t        right      = totalWidth - left - tab.offsetWidth,\n\t        tabWidth;\n\t    if (ctrl.shouldCenterTabs) {\n\t      tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function (value, element) {\n\t        return value + element.offsetWidth;\n\t      }, 0);\n\t      if (totalWidth > tabWidth) $mdUtil.nextTick(updateInkBarStyles, false);\n\t    }\n\t    updateInkBarClassName();\n\t    angular.element(elements.inkBar).css({ left: left + 'px', right: right + 'px' });\n\t  }\n\t\n\t  /**\n\t   * Adds left/right classes so that the ink bar will animate properly.\n\t   */\n\t  function updateInkBarClassName () {\n\t    var newIndex = ctrl.selectedIndex,\n\t        oldIndex = ctrl.lastSelectedIndex,\n\t        ink      = angular.element(elements.inkBar);\n\t    if (!angular.isNumber(oldIndex)) return;\n\t    ink\n\t        .toggleClass('md-left', newIndex < oldIndex)\n\t        .toggleClass('md-right', newIndex > oldIndex);\n\t  }\n\t\n\t  /**\n\t   * Takes an offset value and makes sure that it is within the min/max allowed values.\n\t   * @param value\n\t   * @returns {*}\n\t   */\n\t  function fixOffset (value) {\n\t    if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;\n\t    var lastTab    = elements.tabs[ elements.tabs.length - 1 ],\n\t        totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n\t    value          = Math.max(0, value);\n\t    value          = Math.min(totalWidth - elements.canvas.clientWidth, value);\n\t    return value;\n\t  }\n\t\n\t  /**\n\t   * Attaches a ripple to the tab item element.\n\t   * @param scope\n\t   * @param element\n\t   */\n\t  function attachRipple (scope, element) {\n\t    var options = { colorElement: angular.element(elements.inkBar) };\n\t    $mdTabInkRipple.attach(scope, element, options);\n\t  }\n\t}\n\tMdTabsController.$inject = [\"$scope\", \"$element\", \"$window\", \"$mdConstant\", \"$mdTabInkRipple\", \"$mdUtil\", \"$animateCss\", \"$attrs\", \"$compile\", \"$mdTheming\"];\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name mdTabs\n\t * @module material.components.tabs\n\t *\n\t * @restrict E\n\t *\n\t * @description\n\t * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.\n\t * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view\n\t * content that will be associated with each tab button.\n\t *\n\t * Below is the markup for its simplest usage:\n\t *\n\t *  <hljs lang=\"html\">\n\t *  <md-tabs>\n\t *    <md-tab label=\"Tab #1\"></md-tab>\n\t *    <md-tab label=\"Tab #2\"></md-tab>\n\t *    <md-tab label=\"Tab #3\"></md-tab>\n\t *  </md-tabs>\n\t *  </hljs>\n\t *\n\t * Tabs supports three (3) usage scenarios:\n\t *\n\t *  1. Tabs (buttons only)\n\t *  2. Tabs with internal view content\n\t *  3. Tabs with external view content\n\t *\n\t * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.\n\t * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.\n\t * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.\n\t *\n\t * Additional features also include:\n\t *\n\t * *  Content can include any markup.\n\t * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.\n\t *\n\t * ### Explanation of tab stretching\n\t *\n\t * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.\n\t *\n\t * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.\n\t *\n\t * On desktops, by default, stretching will never occur.\n\t *\n\t * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:\n\t *\n\t * `md-stretch-tabs` | mobile    | desktop\n\t * ------------------|-----------|--------\n\t * `auto`            | stretched | ---\n\t * `always`          | stretched | stretched\n\t * `never`           | ---       | ---\n\t *\n\t * @param {integer=} md-selected Index of the active/selected tab\n\t * @param {boolean=} md-no-ink If present, disables ink ripple effects.\n\t * @param {boolean=} md-no-ink-bar If present, disables the selection ink bar.\n\t * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`\n\t * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`\n\t * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab\n\t * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination\n\t * @param {boolean=} md-no-pagination When enabled, pagination will remain off\n\t * @param {boolean=} md-swipe-content When enabled, swipe gestures will be enabled for the content area to jump between tabs\n\t * @param {boolean=} md-no-disconnect If your tab content has background tasks (ie. event listeners), you will want to include this to prevent the scope from being disconnected\n\t * @param {boolean=} md-autoselect When present, any tabs added after the initial load will be automatically selected\n\t *\n\t * @usage\n\t * <hljs lang=\"html\">\n\t * <md-tabs md-selected=\"selectedIndex\" >\n\t *   <img ng-src=\"img/angular.png\" class=\"centered\">\n\t *   <md-tab\n\t *       ng-repeat=\"tab in tabs | orderBy:predicate:reversed\"\n\t *       md-on-select=\"onTabSelected(tab)\"\n\t *       md-on-deselect=\"announceDeselected(tab)\"\n\t *       ng-disabled=\"tab.disabled\">\n\t *     <md-tab-label>\n\t *       {{tab.title}}\n\t *       <img src=\"img/removeTab.png\" ng-click=\"removeTab(tab)\" class=\"delete\">\n\t *     </md-tab-label>\n\t *     <md-tab-body>\n\t *       {{tab.content}}\n\t *     </md-tab-body>\n\t *   </md-tab>\n\t * </md-tabs>\n\t * </hljs>\n\t *\n\t */\n\tangular\n\t    .module('material.components.tabs')\n\t    .directive('mdTabs', MdTabs);\n\t\n\tfunction MdTabs () {\n\t  return {\n\t    scope:            {\n\t      selectedIndex: '=?mdSelected'\n\t    },\n\t    template:         function (element, attr) {\n\t      attr[ \"$mdTabsTemplate\" ] = element.html();\n\t      return '' +\n\t        '<md-tabs-wrapper> ' +\n\t          '<md-tab-data></md-tab-data> ' +\n\t          '<md-prev-button ' +\n\t              'tabindex=\"-1\" ' +\n\t              'role=\"button\" ' +\n\t              'aria-label=\"Previous Page\" ' +\n\t              'aria-disabled=\"{{!$mdTabsCtrl.canPageBack()}}\" ' +\n\t              'ng-class=\"{ \\'md-disabled\\': !$mdTabsCtrl.canPageBack() }\" ' +\n\t              'ng-if=\"$mdTabsCtrl.shouldPaginate\" ' +\n\t              'ng-click=\"$mdTabsCtrl.previousPage()\"> ' +\n\t            '<md-icon md-svg-icon=\"md-tabs-arrow\"></md-icon> ' +\n\t          '</md-prev-button> ' +\n\t          '<md-next-button ' +\n\t              'tabindex=\"-1\" ' +\n\t              'role=\"button\" ' +\n\t              'aria-label=\"Next Page\" ' +\n\t              'aria-disabled=\"{{!$mdTabsCtrl.canPageForward()}}\" ' +\n\t              'ng-class=\"{ \\'md-disabled\\': !$mdTabsCtrl.canPageForward() }\" ' +\n\t              'ng-if=\"$mdTabsCtrl.shouldPaginate\" ' +\n\t              'ng-click=\"$mdTabsCtrl.nextPage()\"> ' +\n\t            '<md-icon md-svg-icon=\"md-tabs-arrow\"></md-icon> ' +\n\t          '</md-next-button> ' +\n\t          '<md-tabs-canvas ' +\n\t              'tabindex=\"0\" ' +\n\t              'aria-activedescendant=\"tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}\" ' +\n\t              'ng-focus=\"$mdTabsCtrl.redirectFocus()\" ' +\n\t              'ng-class=\"{ ' +\n\t                  '\\'md-paginated\\': $mdTabsCtrl.shouldPaginate, ' +\n\t                  '\\'md-center-tabs\\': $mdTabsCtrl.shouldCenterTabs ' +\n\t              '}\" ' +\n\t              'ng-keydown=\"$mdTabsCtrl.keydown($event)\" ' +\n\t              'role=\"tablist\"> ' +\n\t            '<md-pagination-wrapper ' +\n\t                'ng-class=\"{ \\'md-center-tabs\\': $mdTabsCtrl.shouldCenterTabs }\" ' +\n\t                'md-tab-scroll=\"$mdTabsCtrl.scroll($event)\"> ' +\n\t              '<md-tab-item ' +\n\t                  'tabindex=\"-1\" ' +\n\t                  'class=\"md-tab\" ' +\n\t                  'style=\"max-width: {{ $mdTabsCtrl.maxTabWidth + \\'px\\' }}\" ' +\n\t                  'ng-repeat=\"tab in $mdTabsCtrl.tabs\" ' +\n\t                  'role=\"tab\" ' +\n\t                  'aria-controls=\"tab-content-{{::tab.id}}\" ' +\n\t                  'aria-selected=\"{{tab.isActive()}}\" ' +\n\t                  'aria-disabled=\"{{tab.scope.disabled || \\'false\\'}}\" ' +\n\t                  'ng-click=\"$mdTabsCtrl.select(tab.getIndex())\" ' +\n\t                  'ng-class=\"{ ' +\n\t                      '\\'md-active\\':    tab.isActive(), ' +\n\t                      '\\'md-focused\\':   tab.hasFocus(), ' +\n\t                      '\\'md-disabled\\':  tab.scope.disabled ' +\n\t                  '}\" ' +\n\t                  'ng-disabled=\"tab.scope.disabled\" ' +\n\t                  'md-swipe-left=\"$mdTabsCtrl.nextPage()\" ' +\n\t                  'md-swipe-right=\"$mdTabsCtrl.previousPage()\" ' +\n\t                  'md-tabs-template=\"::tab.label\" ' +\n\t                  'md-scope=\"::tab.parent\"></md-tab-item> ' +\n\t              '<md-ink-bar></md-ink-bar> ' +\n\t            '</md-pagination-wrapper> ' +\n\t            '<div class=\"md-visually-hidden md-dummy-wrapper\"> ' +\n\t              '<md-dummy-tab ' +\n\t                  'class=\"md-tab\" ' +\n\t                  'tabindex=\"-1\" ' +\n\t                  'id=\"tab-item-{{::tab.id}}\" ' +\n\t                  'role=\"tab\" ' +\n\t                  'aria-controls=\"tab-content-{{::tab.id}}\" ' +\n\t                  'aria-selected=\"{{tab.isActive()}}\" ' +\n\t                  'aria-disabled=\"{{tab.scope.disabled || \\'false\\'}}\" ' +\n\t                  'ng-focus=\"$mdTabsCtrl.hasFocus = true\" ' +\n\t                  'ng-blur=\"$mdTabsCtrl.hasFocus = false\" ' +\n\t                  'ng-repeat=\"tab in $mdTabsCtrl.tabs\" ' +\n\t                  'md-tabs-template=\"::tab.label\" ' +\n\t                  'md-scope=\"::tab.parent\"></md-dummy-tab> ' +\n\t            '</div> ' +\n\t          '</md-tabs-canvas> ' +\n\t        '</md-tabs-wrapper> ' +\n\t        '<md-tabs-content-wrapper ng-show=\"$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0\"> ' +\n\t          '<md-tab-content ' +\n\t              'id=\"tab-content-{{::tab.id}}\" ' +\n\t              'role=\"tabpanel\" ' +\n\t              'aria-labelledby=\"tab-item-{{::tab.id}}\" ' +\n\t              'md-swipe-left=\"$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)\" ' +\n\t              'md-swipe-right=\"$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)\" ' +\n\t              'ng-if=\"$mdTabsCtrl.hasContent\" ' +\n\t              'ng-repeat=\"(index, tab) in $mdTabsCtrl.tabs\" ' +\n\t              'ng-class=\"{ ' +\n\t                '\\'md-no-transition\\': $mdTabsCtrl.lastSelectedIndex == null, ' +\n\t                '\\'md-active\\':        tab.isActive(), ' +\n\t                '\\'md-left\\':          tab.isLeft(), ' +\n\t                '\\'md-right\\':         tab.isRight(), ' +\n\t                '\\'md-no-scroll\\':     $mdTabsCtrl.dynamicHeight ' +\n\t              '}\"> ' +\n\t            '<div ' +\n\t                'md-tabs-template=\"::tab.template\" ' +\n\t                'md-connected-if=\"tab.isActive()\" ' +\n\t                'md-scope=\"::tab.parent\" ' +\n\t                'ng-if=\"$mdTabsCtrl.enableDisconnect || tab.shouldRender()\"></div> ' +\n\t          '</md-tab-content> ' +\n\t        '</md-tabs-content-wrapper>';\n\t    },\n\t    controller:       'MdTabsController',\n\t    controllerAs:     '$mdTabsCtrl',\n\t    bindToController: true\n\t  };\n\t}\n\t\n\t})();\n\t(function(){\n\t\"use strict\";\n\t\n\tangular\n\t    .module('material.components.tabs')\n\t    .directive('mdTabsTemplate', MdTabsTemplate);\n\t\n\tfunction MdTabsTemplate ($compile, $mdUtil) {\n\t  return {\n\t    restrict: 'A',\n\t    link:     link,\n\t    scope:    {\n\t      template:     '=mdTabsTemplate',\n\t      connected:    '=?mdConnectedIf',\n\t      compileScope: '=mdScope'\n\t    },\n\t    require:  '^?mdTabs'\n\t  };\n\t  function link (scope, element, attr, ctrl) {\n\t    if (!ctrl) return;\n\t    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;\n\t    element.html(scope.template);\n\t    $compile(element.contents())(compileScope);\n\t    element.on('DOMSubtreeModified', function () {\n\t      ctrl.updatePagination();\n\t      ctrl.updateInkBarStyles();\n\t    });\n\t    return $mdUtil.nextTick(handleScope);\n\t\n\t    function handleScope () {\n\t      scope.$watch('connected', function (value) { value === false ? disconnect() : reconnect(); });\n\t      scope.$on('$destroy', reconnect);\n\t    }\n\t\n\t    function disconnect () {\n\t      if (ctrl.enableDisconnect) $mdUtil.disconnectScope(compileScope);\n\t    }\n\t\n\t    function reconnect () {\n\t      if (ctrl.enableDisconnect) $mdUtil.reconnectScope(compileScope);\n\t    }\n\t  }\n\t}\n\tMdTabsTemplate.$inject = [\"$compile\", \"$mdUtil\"];\n\t\n\t})();\n\t(function(){ \n\tangular.module(\"material.core\").constant(\"$MD_THEME_CSS\", \"md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover, .md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon, .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary, .md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab, .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised, .md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-contrast}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {    color: '{{background-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn, .md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab, .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent, .md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab, .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled], .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-accent[disabled], .md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}';  cursor: not-allowed; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon, .md-button.md-THEME_NAME-theme[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator, .md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled, .md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar, .md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-list.md-THEME_NAME-theme md-list-item button {  background-color: '{{background-color}}'; }  md-list.md-THEME_NAME-theme md-list-item button.md-button:not([disabled]):hover {    background-color: '{{background-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover, md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled], md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked:not([disabled]).md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-500}}' !important;  border-bottom-color: '{{warn-500}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-toast.md-THEME_NAME-theme {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }\"); \n\t})();\n\t\n\t\n\t})(window, window.angular);\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t* angular-formly JavaScript Library v7.3.4\n\t*\n\t* @license MIT (http://license.angular-formly.com)\n\t*\n\t* built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us>\n\t* (ó ì_í)=óò=(ì_í ò)\n\t*/\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory(__webpack_require__(1), __webpack_require__(11));\n\t\telse if(typeof define === 'function' && define.amd)\n\t\t\tdefine([\"angular\", \"api-check\"], factory);\n\t\telse if(typeof exports === 'object')\n\t\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\t\telse\n\t\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n\t})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_5__) {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t\n\t\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _indexCommon = __webpack_require__(1);\n\t\n\t\tvar _indexCommon2 = _interopRequireDefault(_indexCommon);\n\t\n\t\texports['default'] = _indexCommon2['default'];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 1 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\tvar _providersFormlyApiCheck = __webpack_require__(4);\n\t\n\t\tvar _providersFormlyApiCheck2 = _interopRequireDefault(_providersFormlyApiCheck);\n\t\n\t\tvar _otherDocsBaseUrl = __webpack_require__(6);\n\t\n\t\tvar _otherDocsBaseUrl2 = _interopRequireDefault(_otherDocsBaseUrl);\n\t\n\t\tvar _providersFormlyUsability = __webpack_require__(7);\n\t\n\t\tvar _providersFormlyUsability2 = _interopRequireDefault(_providersFormlyUsability);\n\t\n\t\tvar _providersFormlyConfig = __webpack_require__(8);\n\t\n\t\tvar _providersFormlyConfig2 = _interopRequireDefault(_providersFormlyConfig);\n\t\n\t\tvar _providersFormlyValidationMessages = __webpack_require__(10);\n\t\n\t\tvar _providersFormlyValidationMessages2 = _interopRequireDefault(_providersFormlyValidationMessages);\n\t\n\t\tvar _servicesFormlyUtil = __webpack_require__(11);\n\t\n\t\tvar _servicesFormlyUtil2 = _interopRequireDefault(_servicesFormlyUtil);\n\t\n\t\tvar _servicesFormlyWarn = __webpack_require__(12);\n\t\n\t\tvar _servicesFormlyWarn2 = _interopRequireDefault(_servicesFormlyWarn);\n\t\n\t\tvar _directivesFormlyCustomValidation = __webpack_require__(13);\n\t\n\t\tvar _directivesFormlyCustomValidation2 = _interopRequireDefault(_directivesFormlyCustomValidation);\n\t\n\t\tvar _directivesFormlyField = __webpack_require__(14);\n\t\n\t\tvar _directivesFormlyField2 = _interopRequireDefault(_directivesFormlyField);\n\t\n\t\tvar _directivesFormlyFocus = __webpack_require__(15);\n\t\n\t\tvar _directivesFormlyFocus2 = _interopRequireDefault(_directivesFormlyFocus);\n\t\n\t\tvar _directivesFormlyForm = __webpack_require__(16);\n\t\n\t\tvar _directivesFormlyForm2 = _interopRequireDefault(_directivesFormlyForm);\n\t\n\t\tvar _runFormlyNgModelAttrsManipulator = __webpack_require__(17);\n\t\n\t\tvar _runFormlyNgModelAttrsManipulator2 = _interopRequireDefault(_runFormlyNgModelAttrsManipulator);\n\t\n\t\tvar _runFormlyCustomTags = __webpack_require__(18);\n\t\n\t\tvar _runFormlyCustomTags2 = _interopRequireDefault(_runFormlyCustomTags);\n\t\n\t\tvar ngModuleName = 'formly';\n\t\n\t\texports['default'] = ngModuleName;\n\t\n\t\tvar ngModule = _angularFix2['default'].module(ngModuleName, []);\n\t\n\t\tngModule.constant('formlyApiCheck', _providersFormlyApiCheck2['default']);\n\t\tngModule.constant('formlyErrorAndWarningsUrlPrefix', _otherDocsBaseUrl2['default']);\n\t\tngModule.constant('formlyVersion', (\"7.3.4\")); // <-- webpack variable\n\t\n\t\tngModule.provider('formlyUsability', _providersFormlyUsability2['default']);\n\t\tngModule.provider('formlyConfig', _providersFormlyConfig2['default']);\n\t\n\t\tngModule.factory('formlyValidationMessages', _providersFormlyValidationMessages2['default']);\n\t\tngModule.factory('formlyUtil', _servicesFormlyUtil2['default']);\n\t\tngModule.factory('formlyWarn', _servicesFormlyWarn2['default']);\n\t\n\t\tngModule.directive('formlyCustomValidation', _directivesFormlyCustomValidation2['default']);\n\t\tngModule.directive('formlyField', _directivesFormlyField2['default']);\n\t\tngModule.directive('formlyFocus', _directivesFormlyFocus2['default']);\n\t\tngModule.directive('formlyForm', _directivesFormlyForm2['default']);\n\t\n\t\tngModule.run(_runFormlyNgModelAttrsManipulator2['default']);\n\t\tngModule.run(_runFormlyCustomTags2['default']);\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 2 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t// some versions of angular don't export the angular module properly,\n\t\t// so we get it from window in this case.\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\tvar angular = __webpack_require__(3);\n\t\n\t\t/* istanbul ignore next */\n\t\tif (!angular.version) {\n\t\t  angular = window.angular;\n\t\t}\n\t\texports['default'] = angular;\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 3 */\n\t/***/ function(module, exports) {\n\t\n\t\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\t\n\t/***/ },\n\t/* 4 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\tvar _apiCheck = __webpack_require__(5);\n\t\n\t\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\t\tvar apiCheck = (0, _apiCheck2['default'])({\n\t\t  output: {\n\t\t    prefix: 'angular-formly:',\n\t\t    docsBaseUrl: __webpack_require__(6)\n\t\t  }\n\t\t});\n\t\n\t\tfunction shapeRequiredIfNot(otherProps, propChecker) {\n\t\t  if (!_angularFix2['default'].isArray(otherProps)) {\n\t\t    otherProps = [otherProps];\n\t\t  }\n\t\t  var type = 'specified if these are not specified: `' + otherProps.join(', ') + '` (otherwise it\\'s optional)';\n\t\n\t\t  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t\t    var propExists = obj && obj.hasOwnProperty(propName);\n\t\t    var otherPropsExist = otherProps.some(function (otherProp) {\n\t\t      return obj && obj.hasOwnProperty(otherProp);\n\t\t    });\n\t\t    if (!otherPropsExist && !propExists) {\n\t\t      return apiCheck.utils.getError(propName, location, type);\n\t\t    } else if (propExists) {\n\t\t      return propChecker(prop, propName, location, obj);\n\t\t    }\n\t\t  }\n\t\n\t\t  shapeRequiredIfNotDefinition.type = type;\n\t\t  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t\t}\n\t\n\t\tvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\t\tvar specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable;\n\t\n\t\tvar apiCheckProperty = apiCheck.func;\n\t\n\t\tvar apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n\t\t  warn: apiCheck.func,\n\t\t  'throw': apiCheck.func,\n\t\t  shape: apiCheck.func\n\t\t}));\n\t\n\t\tvar apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\t\n\t\tvar formlyWrapperType = apiCheck.shape({\n\t\t  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n\t\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n\t\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n\t\t  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t\t  overwriteOk: apiCheck.bool.optional,\n\t\t  apiCheck: apiCheckProperty.optional,\n\t\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t\t  apiCheckOptions: apiCheck.object.optional\n\t\t}).strict;\n\t\n\t\tvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t\t  expression: formlyExpression,\n\t\t  message: formlyExpression.optional\n\t\t}).strict]));\n\t\n\t\tvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\t\n\t\tvar templateManipulators = apiCheck.shape({\n\t\t  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n\t\t  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional\n\t\t}).strict.nullable;\n\t\n\t\tvar validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t\t  expression: formlyExpression,\n\t\t  message: formlyExpression.optional\n\t\t}).strict]));\n\t\n\t\tvar fieldOptionsApiShape = {\n\t\t  $$hashKey: apiCheck.any.optional,\n\t\t  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n\t\t  template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t\t  templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t\t  model: modelChecker.optional,\n\t\t  originalModel: modelChecker.optional,\n\t\t  className: apiCheck.string.optional,\n\t\t  id: apiCheck.string.optional,\n\t\t  name: apiCheck.string.optional,\n\t\t  expressionProperties: expressionProperties.optional,\n\t\t  extras: apiCheck.shape({\n\t\t    validateOnModelChange: apiCheck.bool.optional,\n\t\t    skipNgModelAttrsManipulator: apiCheck.oneOfType([apiCheck.string, apiCheck.bool]).optional\n\t\t  }).strict.optional,\n\t\t  data: apiCheck.object.optional,\n\t\t  templateOptions: apiCheck.object.optional,\n\t\t  wrapper: specifyWrapperType.optional,\n\t\t  modelOptions: apiCheck.shape({\n\t\t    updateOn: apiCheck.string.optional,\n\t\t    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n\t\t    allowInvalid: apiCheck.bool.optional,\n\t\t    getterSetter: apiCheck.bool.optional,\n\t\t    timezone: apiCheck.string.optional\n\t\t  }).optional,\n\t\t  watcher: apiCheck.typeOrArrayOf(apiCheck.shape({\n\t\t    expression: formlyExpression.optional,\n\t\t    listener: formlyExpression\n\t\t  })).optional,\n\t\t  validators: validatorChecker.optional,\n\t\t  asyncValidators: validatorChecker.optional,\n\t\t  parsers: apiCheck.arrayOf(formlyExpression).optional,\n\t\t  formatters: apiCheck.arrayOf(formlyExpression).optional,\n\t\t  noFormControl: apiCheck.bool.optional,\n\t\t  hide: apiCheck.bool.optional,\n\t\t  hideExpression: formlyExpression.optional,\n\t\t  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n\t\t  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t\t    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n\t\t    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t\t    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t\t    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t\t    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional\n\t\t  }).strict).optional,\n\t\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n\t\t  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t\t  link: apiCheck.func.optional,\n\t\t  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t\t  validation: apiCheck.shape({\n\t\t    show: apiCheck.bool.nullable.optional,\n\t\t    messages: apiCheck.objectOf(formlyExpression).optional,\n\t\t    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t\t  }).optional,\n\t\t  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n\t\t  value: apiCheck.func.optional,\n\t\t  runExpressions: apiCheck.func.optional,\n\t\t  templateManipulators: templateManipulators.optional,\n\t\t  resetModel: apiCheck.func.optional,\n\t\t  updateInitialValue: apiCheck.func.optional,\n\t\t  initialValue: apiCheck.any.optional,\n\t\t  defaultValue: apiCheck.any.optional\n\t\t};\n\t\n\t\tvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\t\tvar formOptionsApi = apiCheck.shape({\n\t\t  formState: apiCheck.object.optional,\n\t\t  resetModel: apiCheck.func.optional,\n\t\t  updateInitialValue: apiCheck.func.optional,\n\t\t  removeChromeAutoComplete: apiCheck.bool.optional,\n\t\t  templateManipulators: templateManipulators.optional,\n\t\t  wrapper: specifyWrapperType.optional,\n\t\t  fieldTransform: apiCheck.oneOfType([apiCheck.func, apiCheck.array]).optional,\n\t\t  data: apiCheck.object.optional\n\t\t}).strict;\n\t\n\t\tvar fieldGroup = apiCheck.shape({\n\t\t  $$hashKey: apiCheck.any.optional,\n\t\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t\t  // danger. Nested field groups wont get api-checked...\n\t\t  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n\t\t  className: apiCheck.string.optional,\n\t\t  options: formOptionsApi.optional,\n\t\t  templateOptions: apiCheck.object.optional,\n\t\t  wrapper: specifyWrapperType.optional,\n\t\t  hide: apiCheck.bool.optional,\n\t\t  hideExpression: formlyExpression.optional,\n\t\t  data: apiCheck.object.optional,\n\t\t  model: modelChecker.optional,\n\t\t  form: apiCheck.object.optional,\n\t\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n\t\t}).strict;\n\t\n\t\tvar typeOptionsDefaultOptions = _angularFix2['default'].copy(fieldOptionsApiShape);\n\t\ttypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\t\tvar formlyTypeOptions = apiCheck.shape({\n\t\t  name: apiCheck.string,\n\t\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t\t  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t\t  link: apiCheck.func.optional,\n\t\t  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t\t  'extends': apiCheck.string.optional,\n\t\t  wrapper: specifyWrapperType.optional,\n\t\t  data: apiCheck.object.optional,\n\t\t  apiCheck: apiCheckProperty.optional,\n\t\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t\t  apiCheckOptions: apiCheck.object.optional,\n\t\t  overwriteOk: apiCheck.bool.optional\n\t\t}).strict;\n\t\n\t\t_angularFix2['default'].extend(apiCheck, {\n\t\t  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n\t\t});\n\t\n\t\texports['default'] = apiCheck;\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 5 */\n\t/***/ function(module, exports) {\n\t\n\t\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\t\n\t/***/ },\n\t/* 6 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t\"use strict\";\n\t\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t  value: true\n\t\t});\n\t\texports[\"default\"] = \"https://github.com/formly-js/angular-formly/blob/\" + (\"7.3.4\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\t\tmodule.exports = exports[\"default\"];\n\t\n\t/***/ },\n\t/* 7 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\texports['default'] = formlyUsability;\n\t\n\t\t// @ngInject\n\t\tfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n\t\t  var _this = this;\n\t\n\t\t  _angularFix2['default'].extend(this, {\n\t\t    getFormlyError: getFormlyError,\n\t\t    getFieldError: getFieldError,\n\t\t    checkWrapper: checkWrapper,\n\t\t    checkWrapperTemplate: checkWrapperTemplate,\n\t\t    getErrorMessage: getErrorMessage,\n\t\t    $get: function $get() {\n\t\t      return _this;\n\t\t    }\n\t\t  });\n\t\n\t\t  function getFieldError(errorInfoSlug, message, field) {\n\t\t    if (arguments.length < 3) {\n\t\t      field = message;\n\t\t      message = errorInfoSlug;\n\t\t      errorInfoSlug = null;\n\t\t    }\n\t\t    return new Error(getErrorMessage(errorInfoSlug, message) + (' Field definition: ' + _angularFix2['default'].toJson(field)));\n\t\t  }\n\t\n\t\t  function getFormlyError(errorInfoSlug, message) {\n\t\t    if (!message) {\n\t\t      message = errorInfoSlug;\n\t\t      errorInfoSlug = null;\n\t\t    }\n\t\t    return new Error(getErrorMessage(errorInfoSlug, message));\n\t\t  }\n\t\n\t\t  function getErrorMessage(errorInfoSlug, message) {\n\t\t    var url = '';\n\t\t    if (errorInfoSlug !== null) {\n\t\t      url = '' + formlyErrorAndWarningsUrlPrefix + errorInfoSlug;\n\t\t    }\n\t\t    return 'Formly Error: ' + message + '. ' + url;\n\t\t  }\n\t\n\t\t  function checkWrapper(wrapper) {\n\t\t    formlyApiCheck['throw'](formlyApiCheck.formlyWrapperType, wrapper, {\n\t\t      prefix: 'formlyConfig.setWrapper',\n\t\t      urlSuffix: 'setwrapper-validation-failed'\n\t\t    });\n\t\t  }\n\t\n\t\t  function checkWrapperTemplate(template, additionalInfo) {\n\t\t    var formlyTransclude = '<formly-transclude></formly-transclude>';\n\t\t    if (template.indexOf(formlyTransclude) === -1) {\n\t\t      throw getFormlyError('Template wrapper templates must use \"' + formlyTransclude + '\" somewhere in them. ' + ('This one does not have \"<formly-transclude></formly-transclude>\" in it: ' + template) + '\\n' + ('Additional information: ' + JSON.stringify(additionalInfo)));\n\t\t    }\n\t\t  }\n\t\t}\n\t\tformlyUsability.$inject = [\"formlyApiCheck\", \"formlyErrorAndWarningsUrlPrefix\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 8 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\tvar _otherUtils = __webpack_require__(9);\n\t\n\t\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\t\texports['default'] = formlyConfig;\n\t\n\t\t// @ngInject\n\t\tfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n\t\t  var _this2 = this;\n\t\n\t\t  var typeMap = {};\n\t\t  var templateWrappersMap = {};\n\t\t  var defaultWrapperName = 'default';\n\t\t  var _this = this;\n\t\t  var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t\t  _angularFix2['default'].extend(this, {\n\t\t    setType: setType,\n\t\t    getType: getType,\n\t\t    getTypeHeritage: getTypeHeritage,\n\t\t    setWrapper: setWrapper,\n\t\t    getWrapper: getWrapper,\n\t\t    getWrapperByType: getWrapperByType,\n\t\t    removeWrapperByName: removeWrapperByName,\n\t\t    removeWrappersForType: removeWrappersForType,\n\t\t    disableWarnings: false,\n\t\t    extras: {\n\t\t      disableNgModelAttrsManipulator: false,\n\t\t      fieldTransform: [],\n\t\t      ngModelAttrsManipulatorPreferUnbound: false,\n\t\t      removeChromeAutoComplete: false,\n\t\t      defaultHideDirective: 'ng-if',\n\t\t      getFieldId: null\n\t\t    },\n\t\t    templateManipulators: {\n\t\t      preWrapper: [],\n\t\t      postWrapper: []\n\t\t    },\n\t\t    $get: function $get() {\n\t\t      return _this2;\n\t\t    }\n\t\t  });\n\t\n\t\t  function setType(options) {\n\t\t    if (_angularFix2['default'].isArray(options)) {\n\t\t      var _ret = (function () {\n\t\t        var allTypes = [];\n\t\t        _angularFix2['default'].forEach(options, function (item) {\n\t\t          allTypes.push(setType(item));\n\t\t        });\n\t\t        return {\n\t\t          v: allTypes\n\t\t        };\n\t\t      })();\n\t\n\t\t      if (typeof _ret === 'object') return _ret.v;\n\t\t    } else if (_angularFix2['default'].isObject(options)) {\n\t\t      checkType(options);\n\t\t      if (options['extends']) {\n\t\t        extendTypeOptions(options);\n\t\t      }\n\t\t      typeMap[options.name] = options;\n\t\t      return typeMap[options.name];\n\t\t    } else {\n\t\t      throw getError('You must provide an object or array for setType. You provided: ' + JSON.stringify(arguments));\n\t\t    }\n\t\t  }\n\t\n\t\t  function checkType(options) {\n\t\t    formlyApiCheck['throw'](formlyApiCheck.formlyTypeOptions, options, {\n\t\t      prefix: 'formlyConfig.setType',\n\t\t      url: 'settype-validation-failed'\n\t\t    });\n\t\t    if (!options.overwriteOk) {\n\t\t      checkOverwrite(options.name, typeMap, options, 'types');\n\t\t    } else {\n\t\t      options.overwriteOk = undefined;\n\t\t    }\n\t\t  }\n\t\n\t\t  function extendTypeOptions(options) {\n\t\t    var extendsType = getType(options['extends'], true, options);\n\t\t    extendTypeControllerFunction(options, extendsType);\n\t\t    extendTypeLinkFunction(options, extendsType);\n\t\t    extendTypeDefaultOptions(options, extendsType);\n\t\t    _otherUtils2['default'].reverseDeepMerge(options, extendsType);\n\t\t    extendTemplate(options, extendsType);\n\t\t  }\n\t\n\t\t  function extendTemplate(options, extendsType) {\n\t\t    if (options.template && extendsType.templateUrl) {\n\t\t      delete options.templateUrl;\n\t\t    } else if (options.templateUrl && extendsType.template) {\n\t\t      delete options.template;\n\t\t    }\n\t\t  }\n\t\n\t\t  function extendTypeControllerFunction(options, extendsType) {\n\t\t    var extendsCtrl = extendsType.controller;\n\t\t    if (!_angularFix2['default'].isDefined(extendsCtrl)) {\n\t\t      return;\n\t\t    }\n\t\t    var optionsCtrl = options.controller;\n\t\t    if (_angularFix2['default'].isDefined(optionsCtrl)) {\n\t\t      options.controller = function ($scope, $controller) {\n\t\t        $controller(extendsCtrl, { $scope: $scope });\n\t\t        $controller(optionsCtrl, { $scope: $scope });\n\t\t      };\n\t\t      options.controller.$inject = ['$scope', '$controller'];\n\t\t    } else {\n\t\t      options.controller = extendsCtrl;\n\t\t    }\n\t\t  }\n\t\n\t\t  function extendTypeLinkFunction(options, extendsType) {\n\t\t    var extendsFn = extendsType.link;\n\t\t    if (!_angularFix2['default'].isDefined(extendsFn)) {\n\t\t      return;\n\t\t    }\n\t\t    var optionsFn = options.link;\n\t\t    if (_angularFix2['default'].isDefined(optionsFn)) {\n\t\t      options.link = function () {\n\t\t        extendsFn.apply(undefined, arguments);\n\t\t        optionsFn.apply(undefined, arguments);\n\t\t      };\n\t\t    } else {\n\t\t      options.link = extendsFn;\n\t\t    }\n\t\t  }\n\t\n\t\t  function extendTypeDefaultOptions(options, extendsType) {\n\t\t    var extendsDO = extendsType.defaultOptions;\n\t\t    if (!_angularFix2['default'].isDefined(extendsDO)) {\n\t\t      return;\n\t\t    }\n\t\t    var optionsDO = options.defaultOptions;\n\t\t    var optionsDOIsFn = _angularFix2['default'].isFunction(optionsDO);\n\t\t    var extendsDOIsFn = _angularFix2['default'].isFunction(extendsDO);\n\t\t    if (extendsDOIsFn) {\n\t\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t\t        var extendsDefaultOptions = extendsDO(opts, scope);\n\t\t        var mergedDefaultOptions = {};\n\t\t        _otherUtils2['default'].reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n\t\t        var extenderOptionsDefaultOptions = optionsDO;\n\t\t        if (optionsDOIsFn) {\n\t\t          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope);\n\t\t        }\n\t\t        _otherUtils2['default'].reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n\t\t        return extendsDefaultOptions;\n\t\t      };\n\t\t    } else if (optionsDOIsFn) {\n\t\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t\t        var newDefaultOptions = {};\n\t\t        _otherUtils2['default'].reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n\t\t        return optionsDO(newDefaultOptions, scope);\n\t\t      };\n\t\t    }\n\t\t  }\n\t\n\t\t  function getType(name, throwError, errorContext) {\n\t\t    if (!name) {\n\t\t      return undefined;\n\t\t    }\n\t\t    var type = typeMap[name];\n\t\t    if (!type && throwError === true) {\n\t\t      throw getError('There is no type by the name of \"' + name + '\": ' + JSON.stringify(errorContext));\n\t\t    } else {\n\t\t      return type;\n\t\t    }\n\t\t  }\n\t\n\t\t  function getTypeHeritage(parent) {\n\t\t    var heritage = [];\n\t\t    var type = parent;\n\t\t    if (_angularFix2['default'].isString(type)) {\n\t\t      type = getType(parent);\n\t\t    }\n\t\t    parent = type['extends'];\n\t\t    while (parent) {\n\t\t      type = getType(parent);\n\t\t      heritage.push(type);\n\t\t      parent = type['extends'];\n\t\t    }\n\t\t    return heritage;\n\t\t  }\n\t\n\t\t  function setWrapper(_x, _x2) {\n\t\t    var _again = true;\n\t\n\t\t    _function: while (_again) {\n\t\t      var options = _x,\n\t\t          name = _x2;\n\t\t      _again = false;\n\t\n\t\t      if (_angularFix2['default'].isArray(options)) {\n\t\t        return options.map(function (wrapperOptions) {\n\t\t          return setWrapper(wrapperOptions);\n\t\t        });\n\t\t      } else if (_angularFix2['default'].isObject(options)) {\n\t\t        options.types = getOptionsTypes(options);\n\t\t        options.name = getOptionsName(options, name);\n\t\t        checkWrapperAPI(options);\n\t\t        templateWrappersMap[options.name] = options;\n\t\t        return options;\n\t\t      } else if (_angularFix2['default'].isString(options)) {\n\t\t        _x = {\n\t\t          template: options,\n\t\t          name: name\n\t\t        };\n\t\t        _x2 = undefined;\n\t\t        _again = true;\n\t\t        continue _function;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\n\t\t  function getOptionsTypes(options) {\n\t\t    if (_angularFix2['default'].isString(options.types)) {\n\t\t      return [options.types];\n\t\t    }\n\t\t    if (!_angularFix2['default'].isDefined(options.types)) {\n\t\t      return [];\n\t\t    } else {\n\t\t      return options.types;\n\t\t    }\n\t\t  }\n\t\n\t\t  function getOptionsName(options, name) {\n\t\t    return options.name || name || options.types.join(' ') || defaultWrapperName;\n\t\t  }\n\t\n\t\t  function checkWrapperAPI(options) {\n\t\t    formlyUsabilityProvider.checkWrapper(options);\n\t\t    if (options.template) {\n\t\t      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t\t    }\n\t\t    if (!options.overwriteOk) {\n\t\t      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n\t\t    } else {\n\t\t      delete options.overwriteOk;\n\t\t    }\n\t\t    checkWrapperTypes(options);\n\t\t  }\n\t\n\t\t  function checkWrapperTypes(options) {\n\t\t    var shouldThrow = !_angularFix2['default'].isArray(options.types) || !options.types.every(_angularFix2['default'].isString);\n\t\t    if (shouldThrow) {\n\t\t      throw getError('Attempted to create a template wrapper with types that is not a string or an array of strings');\n\t\t    }\n\t\t  }\n\t\n\t\t  function checkOverwrite(property, object, newValue, objectName) {\n\t\t    if (object.hasOwnProperty(property)) {\n\t\t      warn('overwriting-types-or-wrappers', ['Attempting to overwrite ' + property + ' on ' + objectName + ' which is currently', JSON.stringify(object[property]) + ' with ' + JSON.stringify(newValue), 'To supress this warning, specify the property \"overwriteOk: true\"'].join(' '));\n\t\t    }\n\t\t  }\n\t\n\t\t  function getWrapper(name) {\n\t\t    return templateWrappersMap[name || defaultWrapperName];\n\t\t  }\n\t\n\t\t  function getWrapperByType(type) {\n\t\t    /* eslint prefer-const:0 */\n\t\t    var wrappers = [];\n\t\t    for (var _name in templateWrappersMap) {\n\t\t      if (templateWrappersMap.hasOwnProperty(_name)) {\n\t\t        if (templateWrappersMap[_name].types && templateWrappersMap[_name].types.indexOf(type) !== -1) {\n\t\t          wrappers.push(templateWrappersMap[_name]);\n\t\t        }\n\t\t      }\n\t\t    }\n\t\t    return wrappers;\n\t\t  }\n\t\n\t\t  function removeWrapperByName(name) {\n\t\t    var wrapper = templateWrappersMap[name];\n\t\t    delete templateWrappersMap[name];\n\t\t    return wrapper;\n\t\t  }\n\t\n\t\t  function removeWrappersForType(type) {\n\t\t    var wrappers = getWrapperByType(type);\n\t\t    if (!wrappers) {\n\t\t      return undefined;\n\t\t    }\n\t\t    if (!_angularFix2['default'].isArray(wrappers)) {\n\t\t      return removeWrapperByName(wrappers.name);\n\t\t    } else {\n\t\t      wrappers.forEach(function (wrapper) {\n\t\t        return removeWrapperByName(wrapper.name);\n\t\t      });\n\t\t      return wrappers;\n\t\t    }\n\t\t  }\n\t\n\t\t  function warn() {\n\t\t    if (!_this.disableWarnings && console.warn) {\n\t\t      /* eslint no-console:0 */\n\t\t      var args = Array.prototype.slice.call(arguments);\n\t\t      var warnInfoSlug = args.shift();\n\t\t      args.unshift('Formly Warning:');\n\t\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t\t      console.warn.apply(console, _toConsumableArray(args));\n\t\t    }\n\t\t  }\n\t\t}\n\t\tformlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyErrorAndWarningsUrlPrefix\", \"formlyApiCheck\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 9 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\texports['default'] = {\n\t\t  formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName, arrayify: arrayify, extendFunction: extendFunction, extendArray: extendArray, startsWith: startsWith, contains: contains\n\t\t};\n\t\n\t\tfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n\t\t  if (_angularFix2['default'].isFunction(expression)) {\n\t\t    return expression($viewValue, $modelValue, scope, extraLocals);\n\t\t  } else {\n\t\t    return scope.$eval(expression, _angularFix2['default'].extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n\t\t  }\n\t\t}\n\t\n\t\tfunction getFieldId(formId, options, index) {\n\t\t  if (options.id) {\n\t\t    return options.id;\n\t\t  }\n\t\t  var type = options.type;\n\t\t  if (!type && options.template) {\n\t\t    type = 'template';\n\t\t  } else if (!type && options.templateUrl) {\n\t\t    type = 'templateUrl';\n\t\t  }\n\t\n\t\t  return [formId, type, options.key, index].join('_');\n\t\t}\n\t\n\t\tfunction reverseDeepMerge(dest) {\n\t\t  _angularFix2['default'].forEach(arguments, function (src, index) {\n\t\t    if (!index) {\n\t\t      return;\n\t\t    }\n\t\t    _angularFix2['default'].forEach(src, function (val, prop) {\n\t\t      if (!_angularFix2['default'].isDefined(dest[prop])) {\n\t\t        dest[prop] = _angularFix2['default'].copy(val);\n\t\t      } else if (objAndSameType(dest[prop], val)) {\n\t\t        reverseDeepMerge(dest[prop], val);\n\t\t      }\n\t\t    });\n\t\t  });\n\t\t  return dest;\n\t\t}\n\t\n\t\tfunction objAndSameType(obj1, obj2) {\n\t\t  return _angularFix2['default'].isObject(obj1) && _angularFix2['default'].isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t\t}\n\t\n\t\t// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\t\tfunction findByNodeName(el, nodeName) {\n\t\t  if (!el.prop) {\n\t\t    // not a jQuery or jqLite object -> wrap it\n\t\t    el = _angularFix2['default'].element(el);\n\t\t  }\n\t\n\t\t  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n\t\t    return el;\n\t\t  }\n\t\n\t\t  var c = el.children();\n\t\t  for (var i = 0; c && i < c.length; i++) {\n\t\t    var node = findByNodeName(c[i], nodeName);\n\t\t    if (node) {\n\t\t      return node;\n\t\t    }\n\t\t  }\n\t\t}\n\t\n\t\tfunction arrayify(obj) {\n\t\t  if (obj && !_angularFix2['default'].isArray(obj)) {\n\t\t    obj = [obj];\n\t\t  } else if (!obj) {\n\t\t    obj = [];\n\t\t  }\n\t\t  return obj;\n\t\t}\n\t\n\t\tfunction extendFunction() {\n\t\t  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t    fns[_key] = arguments[_key];\n\t\t  }\n\t\n\t\t  return function extendedFunction() {\n\t\t    var args = arguments;\n\t\t    fns.forEach(function (fn) {\n\t\t      return fn.apply(null, args);\n\t\t    });\n\t\t  };\n\t\t}\n\t\n\t\tfunction extendArray(primary, secondary, property) {\n\t\t  if (property) {\n\t\t    primary = primary[property];\n\t\t    secondary = secondary[property];\n\t\t  }\n\t\t  if (secondary && primary) {\n\t\t    _angularFix2['default'].forEach(secondary, function (item) {\n\t\t      if (primary.indexOf(item) === -1) {\n\t\t        primary.push(item);\n\t\t      }\n\t\t    });\n\t\t    return primary;\n\t\t  } else if (secondary) {\n\t\t    return secondary;\n\t\t  } else {\n\t\t    return primary;\n\t\t  }\n\t\t}\n\t\n\t\tfunction startsWith(str, search) {\n\t\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t\t    return str.length >= search.length && str.substring(0, search.length) === search;\n\t\t  } else {\n\t\t    return false;\n\t\t  }\n\t\t}\n\t\n\t\tfunction contains(str, search) {\n\t\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t\t    return str.length >= search.length && str.indexOf(search) !== -1;\n\t\t  } else {\n\t\t    return false;\n\t\t  }\n\t\t}\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 10 */\n\t/***/ function(module, exports) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\texports['default'] = formlyValidationMessages;\n\t\n\t\t// @ngInject\n\t\tfunction formlyValidationMessages() {\n\t\n\t\t  var validationMessages = {\n\t\t    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t\t    addStringMessage: addStringMessage,\n\t\t    messages: {}\n\t\t  };\n\t\n\t\t  return validationMessages;\n\t\n\t\t  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t\t    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t\t  }\n\t\n\t\t  function addStringMessage(name, string) {\n\t\t    validationMessages.messages[name] = function () {\n\t\t      return string;\n\t\t    };\n\t\t  }\n\t\n\t\t  function templateOptionValue(prop, prefix, suffix, alternate) {\n\t\t    return function getValidationMessage(viewValue, modelValue, scope) {\n\t\t      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n\t\t        return prefix + ' ' + scope.options.templateOptions[prop] + ' ' + suffix;\n\t\t      } else {\n\t\t        return alternate;\n\t\t      }\n\t\t    };\n\t\t  }\n\t\t}\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 11 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _otherUtils = __webpack_require__(9);\n\t\n\t\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\t\texports['default'] = formlyUtil;\n\t\n\t\t// @ngInject\n\t\tfunction formlyUtil() {\n\t\t  return _otherUtils2['default'];\n\t\t}\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 12 */\n\t/***/ function(module, exports) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\t\texports['default'] = formlyWarn;\n\t\n\t\t// @ngInject\n\t\tfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t\t  return function warn() {\n\t\t    if (!formlyConfig.disableWarnings) {\n\t\t      var args = Array.prototype.slice.call(arguments);\n\t\t      var warnInfoSlug = args.shift();\n\t\t      args.unshift('Formly Warning:');\n\t\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t\t      $log.warn.apply($log, _toConsumableArray(args));\n\t\t    }\n\t\t  };\n\t\t}\n\t\tformlyWarn.$inject = [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 13 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\texports['default'] = formlyCustomValidation;\n\t\n\t\t// @ngInject\n\t\tfunction formlyCustomValidation(formlyUtil) {\n\t\t  return {\n\t\t    restrict: 'A',\n\t\t    require: 'ngModel',\n\t\t    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n\t\t      var opts = scope.options;\n\t\t      opts.validation.messages = opts.validation.messages || {};\n\t\t      _angularFix2['default'].forEach(opts.validation.messages, function (message, key) {\n\t\t        opts.validation.messages[key] = function () {\n\t\t          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t\t        };\n\t\t      });\n\t\n\t\t      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n\t\t      _angularFix2['default'].forEach(opts.validators, _angularFix2['default'].bind(null, addValidatorToPipeline, false));\n\t\t      _angularFix2['default'].forEach(opts.asyncValidators, _angularFix2['default'].bind(null, addValidatorToPipeline, true));\n\t\n\t\t      function addValidatorToPipeline(isAsync, validator, name) {\n\t\t        setupMessage(validator, name);\n\t\t        validator = _angularFix2['default'].isObject(validator) ? validator.expression : validator;\n\t\t        if (useNewValidatorsApi) {\n\t\t          setupWithValidators(validator, name, isAsync);\n\t\t        } else {\n\t\t          setupWithParsers(validator, name, isAsync);\n\t\t        }\n\t\t      }\n\t\n\t\t      function setupMessage(validator, name) {\n\t\t        var message = validator.message;\n\t\t        if (message) {\n\t\t          opts.validation.messages[name] = function () {\n\t\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t\t          };\n\t\t        }\n\t\t      }\n\t\n\t\t      function setupWithValidators(validator, name, isAsync) {\n\t\t        var validatorCollection = isAsync ? '$asyncValidators' : '$validators';\n\t\n\t\t        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n\t\t          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t\t        };\n\t\t      }\n\t\n\t\t      function setupWithParsers(validator, name, isAsync) {\n\t\t        var inFlightValidator = undefined;\n\t\t        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n\t\t          var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t\t          if (isAsync) {\n\t\t            ctrl.$pending = ctrl.$pending || {};\n\t\t            ctrl.$pending[name] = true;\n\t\t            inFlightValidator = isValid;\n\t\t            isValid.then(function () {\n\t\t              if (inFlightValidator === isValid) {\n\t\t                ctrl.$setValidity(name, true);\n\t\t              }\n\t\t            })['catch'](function () {\n\t\t              if (inFlightValidator === isValid) {\n\t\t                ctrl.$setValidity(name, false);\n\t\t              }\n\t\t            })['finally'](function () {\n\t\t              var $pending = ctrl.$pending || {};\n\t\t              if (Object.keys($pending).length === 1) {\n\t\t                delete ctrl.$pending;\n\t\t              } else {\n\t\t                delete ctrl.$pending[name];\n\t\t              }\n\t\t            });\n\t\t          } else {\n\t\t            ctrl.$setValidity(name, isValid);\n\t\t          }\n\t\t          return viewValue;\n\t\t        });\n\t\t      }\n\t\t    }\n\t\t  };\n\t\t}\n\t\tformlyCustomValidation.$inject = [\"formlyUtil\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 14 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\tvar _apiCheck = __webpack_require__(5);\n\t\n\t\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\t\texports['default'] = formlyField;\n\t\n\t\t/**\n\t\t * @ngdoc directive\n\t\t * @name formlyField\n\t\t * @restrict AE\n\t\t */\n\t\t// @ngInject\n\t\tfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t\t  var arrayify = formlyUtil.arrayify;\n\t\n\t\t  FormlyFieldController.$inject = [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", \"formlyValidationMessages\"];\n\t\t  return {\n\t\t    restrict: 'AE',\n\t\t    transclude: true,\n\t\t    require: '?^formlyForm',\n\t\t    scope: {\n\t\t      options: '=',\n\t\t      model: '=',\n\t\t      originalModel: '=?',\n\t\t      formId: '@', // TODO remove formId in a breaking release\n\t\t      index: '=?',\n\t\t      fields: '=?',\n\t\t      formState: '=?',\n\t\t      formOptions: '=?',\n\t\t      form: '=?' },\n\t\t    // TODO require form in a breaking release\n\t\t    controller: FormlyFieldController,\n\t\t    link: fieldLink\n\t\t  };\n\t\n\t\t  // @ngInject\n\t\t  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n\t\t    /* eslint max-statements:[2, 31] */\n\t\t    if ($scope.options.fieldGroup) {\n\t\t      setupFieldGroup();\n\t\t      return;\n\t\t    }\n\t\n\t\t    var fieldType = getFieldType($scope.options);\n\t\t    simplifyLife($scope.options);\n\t\t    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n\t\t    extendOptionsWithDefaults($scope.options, $scope.index);\n\t\t    checkApi($scope.options);\n\t\t    // set field id to link labels and fields\n\t\n\t\t    // initalization\n\t\t    setFieldIdAndName();\n\t\t    setDefaultValue();\n\t\t    setInitialValue();\n\t\t    runExpressions();\n\t\t    addValidationMessages($scope.options);\n\t\t    invokeControllers($scope, $scope.options, fieldType);\n\t\n\t\t    // function definitions\n\t\t    function runExpressions() {\n\t\t      // must run on next tick to make sure that the current value is correct.\n\t\t      return $timeout(function runExpressionsOnNextTick() {\n\t\t        var field = $scope.options;\n\t\t        var currentValue = valueGetterSetter();\n\t\t        _angularFix2['default'].forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t\t          var setter = $parse(prop).assign;\n\t\t          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n\t\t          promise.then(function setFieldValue(value) {\n\t\t            setter(field, value);\n\t\t          });\n\t\t        });\n\t\t      }, 0, false);\n\t\t    }\n\t\n\t\t    function valueGetterSetter(newVal) {\n\t\t      if (!$scope.model || !$scope.options.key) {\n\t\t        return undefined;\n\t\t      }\n\t\t      if (_angularFix2['default'].isDefined(newVal)) {\n\t\t        parseSet($scope.options.key, $scope.model, newVal);\n\t\t      }\n\t\t      return parseGet($scope.options.key, $scope.model);\n\t\t    }\n\t\n\t\t    function parseSet(key, model, newVal) {\n\t\t      // If either of these are null/undefined then just return undefined\n\t\t      if (!key || !model) {\n\t\t        return;\n\t\t      }\n\t\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t\t      if (_angularFix2['default'].isNumber(key)) {\n\t\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t\t        model[key] = newVal;\n\t\t      } else {\n\t\t        var setter = $parse($scope.options.key).assign;\n\t\t        if (setter) {\n\t\t          setter($scope.model, newVal);\n\t\t        }\n\t\t      }\n\t\t    }\n\t\n\t\t    function parseGet(key, model) {\n\t\t      // If either of these are null/undefined then just return undefined\n\t\t      if (!key || !model) {\n\t\t        return undefined;\n\t\t      }\n\t\n\t\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t\t      if (_angularFix2['default'].isNumber(key)) {\n\t\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t\t        return model[key];\n\t\t      } else {\n\t\t        return $parse(key)(model);\n\t\t      }\n\t\t    }\n\t\n\t\t    function simplifyLife(options) {\n\t\t      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t\t      formlyUtil.reverseDeepMerge(options, {\n\t\t        originalModel: options.model,\n\t\t        extras: {},\n\t\t        data: {},\n\t\t        templateOptions: {},\n\t\t        validation: {}\n\t\t      });\n\t\t      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t\t      $scope.to = $scope.options.templateOptions;\n\t\t      $scope.formOptions = $scope.formOptions || {};\n\t\t    }\n\t\n\t\t    function setFieldIdAndName() {\n\t\t      if (_angularFix2['default'].isFunction(formlyConfig.extras.getFieldId)) {\n\t\t        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n\t\t      } else {\n\t\t        var formName = $scope.form && $scope.form.$name || $scope.formId;\n\t\t        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n\t\t      }\n\t\t      $scope.options.id = $scope.id;\n\t\t      $scope.name = $scope.options.name || $scope.options.id;\n\t\t      $scope.options.name = $scope.name;\n\t\t    }\n\t\n\t\t    function setDefaultValue() {\n\t\t      if (_angularFix2['default'].isDefined($scope.options.defaultValue) && !_angularFix2['default'].isDefined(parseGet($scope.options.key, $scope.model))) {\n\t\t        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue);\n\t\t      }\n\t\t    }\n\t\n\t\t    function setInitialValue() {\n\t\t      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model);\n\t\t    }\n\t\n\t\t    function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t\t      if (type) {\n\t\t        mergeOptions(options, type.defaultOptions);\n\t\t      }\n\t\t      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t\t      _angularFix2['default'].forEach(properOrder, function (typeName) {\n\t\t        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t\t      });\n\t\t    }\n\t\n\t\t    function mergeOptions(options, extraOptions) {\n\t\t      if (extraOptions) {\n\t\t        if (_angularFix2['default'].isFunction(extraOptions)) {\n\t\t          extraOptions = extraOptions(options, $scope);\n\t\t        }\n\t\t        formlyUtil.reverseDeepMerge(options, extraOptions);\n\t\t      }\n\t\t    }\n\t\n\t\t    function extendOptionsWithDefaults(options, index) {\n\t\t      var key = options.key || index || 0;\n\t\t      _angularFix2['default'].extend(options, {\n\t\t        // attach the key in case the formly-field directive is used directly\n\t\t        key: key,\n\t\t        value: options.value || valueGetterSetter,\n\t\t        runExpressions: runExpressions,\n\t\t        resetModel: resetModel,\n\t\t        updateInitialValue: updateInitialValue\n\t\t      });\n\t\t    }\n\t\n\t\t    function resetModel() {\n\t\t      parseSet($scope.options.key, $scope.model, $scope.options.initialValue);\n\t\t      if ($scope.options.formControl) {\n\t\t        if (_angularFix2['default'].isArray($scope.options.formControl)) {\n\t\t          _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n\t\t            resetFormControl(formControl, true);\n\t\t          });\n\t\t        } else {\n\t\t          resetFormControl($scope.options.formControl);\n\t\t        }\n\t\t      }\n\t\t    }\n\t\n\t\t    function resetFormControl(formControl, isMultiNgModel) {\n\t\t      if (!isMultiNgModel) {\n\t\t        formControl.$setViewValue(parseGet($scope.options.key, $scope.model));\n\t\t      }\n\t\n\t\t      formControl.$render();\n\t\t      formControl.$setUntouched && formControl.$setUntouched();\n\t\t      formControl.$setPristine();\n\t\n\t\t      // To prevent breaking change requiring a digest to reset $viewModel\n\t\t      if (!$scope.$root.$$phase) {\n\t\t        $scope.$digest();\n\t\t      }\n\t\t    }\n\t\n\t\t    function updateInitialValue() {\n\t\t      $scope.options.initialValue = parseGet($scope.options.key, $scope.model);\n\t\t    }\n\t\n\t\t    function addValidationMessages(options) {\n\t\t      options.validation.messages = options.validation.messages || {};\n\t\t      _angularFix2['default'].forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n\t\t        if (!options.validation.messages[name]) {\n\t\t          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n\t\t            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t\t          };\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function invokeControllers(scope) {\n\t\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\t      var type = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t\t      _angularFix2['default'].forEach([type.controller, options.controller], function (controller) {\n\t\t        if (controller) {\n\t\t          $controller(controller, { $scope: scope });\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function setupFieldGroup() {\n\t\t      $scope.options.options = $scope.options.options || {};\n\t\t      $scope.options.options.formState = $scope.formState;\n\t\t      $scope.to = $scope.options.templateOptions;\n\t\t    }\n\t\t  }\n\t\n\t\t  // link function\n\t\t  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n\t\t    if (scope.options.fieldGroup) {\n\t\t      setFieldGroupTemplate();\n\t\t      return;\n\t\t    }\n\t\n\t\t    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n\t\t    if (!formlyFormCtrl && scope.options.model) {\n\t\t      scope.$watch('options.model', function () {\n\t\t        return scope.options.runExpressions();\n\t\t      }, true);\n\t\t    }\n\t\n\t\t    addAttributes();\n\t\t    addClasses();\n\t\n\t\t    var type = getFieldType(scope.options);\n\t\t    var args = arguments;\n\t\t    var thusly = this;\n\t\t    var fieldCount = 0;\n\t\t    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n\t\t    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)['catch'](function (error) {\n\t\t      formlyWarn('there-was-a-problem-setting-the-template-for-this-field', 'There was a problem setting the template for this field ', scope.options, error);\n\t\t    });\n\t\n\t\t    function setFieldGroupTemplate() {\n\t\t      checkFieldGroupApi(scope.options);\n\t\t      el.addClass('formly-field-group');\n\t\t      var extraAttributes = '';\n\t\t      if (scope.options.elementAttributes) {\n\t\t        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n\t\t          return key + '=\"' + scope.options.elementAttributes[key] + '\"';\n\t\t        }).join(' ');\n\t\t      }\n\t\t      var modelValue = 'model';\n\t\t      scope.options.form = scope.form;\n\t\t      if (scope.options.key) {\n\t\t        modelValue = 'model[\\'' + scope.options.key + '\\']';\n\t\t      }\n\t\t      getTemplate('\\n          <formly-form model=\"' + modelValue + '\"\\n                       fields=\"options.fieldGroup\"\\n                       options=\"options.options\"\\n                       form=\"options.form\"\\n                       class=\"' + scope.options.className + '\"\\n                       ' + extraAttributes + '\\n                       is-field-group>\\n          </formly-form>\\n        ').then(transcludeInWrappers(scope.options, scope.formOptions)).then(setElementTemplate);\n\t\t    }\n\t\n\t\t    function addAttributes() {\n\t\t      if (scope.options.elementAttributes) {\n\t\t        el.attr(scope.options.elementAttributes);\n\t\t      }\n\t\t    }\n\t\n\t\t    function addClasses() {\n\t\t      if (scope.options.className) {\n\t\t        el.addClass(scope.options.className);\n\t\t      }\n\t\t      if (scope.options.type) {\n\t\t        el.addClass('formly-field-' + scope.options.type);\n\t\t      }\n\t\t    }\n\t\n\t\t    function setElementTemplate(templateString) {\n\t\t      el.html(asHtml(templateString));\n\t\t      $compile(el.contents())(scope);\n\t\t      return templateString;\n\t\t    }\n\t\n\t\t    function watchFormControl(templateString) {\n\t\t      var stopWatchingShowError = _angularFix2['default'].noop;\n\t\t      if (scope.options.noFormControl) {\n\t\t        return;\n\t\t      }\n\t\t      var templateEl = _angularFix2['default'].element('<div>' + templateString + '</div>');\n\t\t      var ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\t\n\t\t      if (ngModelNodes.length) {\n\t\t        _angularFix2['default'].forEach(ngModelNodes, function (ngModelNode) {\n\t\t          fieldCount++;\n\t\t          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n\t\t        });\n\t\t      }\n\t\n\t\t      function watchFieldNameOrExistence(name) {\n\t\t        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n\t\t        var nameExpression = nameExpressionRegex.exec(name);\n\t\t        if (nameExpression) {\n\t\t          name = $interpolate(name)(scope);\n\t\t        }\n\t\t        watchFieldExistence(name);\n\t\t      }\n\t\n\t\t      function watchFieldExistence(name) {\n\t\t        scope.$watch('form[\"' + name + '\"]', function formControlChange(formControl) {\n\t\t          if (formControl) {\n\t\t            if (fieldCount > 1) {\n\t\t              if (!scope.options.formControl) {\n\t\t                scope.options.formControl = [];\n\t\t              }\n\t\t              scope.options.formControl.push(formControl);\n\t\t            } else {\n\t\t              scope.options.formControl = formControl;\n\t\t            }\n\t\t            scope.fc = scope.options.formControl; // shortcut for template authors\n\t\t            stopWatchingShowError();\n\t\t            addShowMessagesWatcher();\n\t\t            addParsers();\n\t\t            addFormatters();\n\t\t          }\n\t\t        });\n\t\t      }\n\t\n\t\t      function addShowMessagesWatcher() {\n\t\t        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n\t\t          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n\t\t          var options = scope.options;\n\t\t          var formControls = arrayify(scope.fc);\n\t\t          if (!formControls.some(function (fc) {\n\t\t            return fc.$invalid;\n\t\t          })) {\n\t\t            return false;\n\t\t          } else if (typeof options.validation.show === 'boolean') {\n\t\t            return options.validation.show;\n\t\t          } else if (customExpression) {\n\t\t            return formControls.some(function (fc) {\n\t\t              return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n\t\t            });\n\t\t          } else {\n\t\t            return formControls.some(function (fc) {\n\t\t              var noTouchedButDirty = _angularFix2['default'].isUndefined(fc.$touched) && fc.$dirty;\n\t\t              return fc.$touched || noTouchedButDirty;\n\t\t            });\n\t\t          }\n\t\t        }, function onShowValidationChange(show) {\n\t\t          scope.options.validation.errorExistsAndShouldBeVisible = show;\n\t\t          scope.showError = show; // shortcut for template authors\n\t\t        });\n\t\t      }\n\t\n\t\t      function addParsers() {\n\t\t        setParsersOrFormatters('parsers');\n\t\t      }\n\t\n\t\t      function addFormatters() {\n\t\t        setParsersOrFormatters('formatters');\n\t\t        var ctrl = scope.fc;\n\t\t        var formWasPristine = scope.form.$pristine;\n\t\t        if (scope.options.formatters) {\n\t\t          (function () {\n\t\t            var value = ctrl.$modelValue;\n\t\t            ctrl.$formatters.forEach(function (formatter) {\n\t\t              value = formatter(value);\n\t\t            });\n\t\n\t\t            ctrl.$setViewValue(value);\n\t\t            ctrl.$render();\n\t\t            ctrl.$setPristine();\n\t\t            if (formWasPristine) {\n\t\t              scope.form.$setPristine();\n\t\t            }\n\t\t          })();\n\t\t        }\n\t\t      }\n\t\n\t\t      function setParsersOrFormatters(which) {\n\t\t        var originalThingProp = 'originalParser';\n\t\t        if (which === 'formatters') {\n\t\t          originalThingProp = 'originalFormatter';\n\t\t        }\n\t\n\t\t        // init with type's parsers\n\t\t        var things = getThingsFromType(type);\n\t\n\t\t        // get optionsTypes things\n\t\t        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes));\n\t\n\t\t        // get field's things\n\t\t        things = formlyUtil.extendArray(things, scope.options[which]);\n\t\n\t\t        // convert things into formlyExpression things\n\t\t        _angularFix2['default'].forEach(things, function (thing, index) {\n\t\t          things[index] = getFormlyExpressionThing(thing);\n\t\t        });\n\t\n\t\t        var ngModelCtrls = scope.fc;\n\t\t        if (!_angularFix2['default'].isArray(ngModelCtrls)) {\n\t\t          ngModelCtrls = [ngModelCtrls];\n\t\t        }\n\t\n\t\t        _angularFix2['default'].forEach(ngModelCtrls, function (ngModelCtrl) {\n\t\t          var _ngModelCtrl;\n\t\n\t\t          ngModelCtrl['$' + which] = (_ngModelCtrl = ngModelCtrl['$' + which]).concat.apply(_ngModelCtrl, _toConsumableArray(things));\n\t\t        });\n\t\n\t\t        function getThingsFromType(theType) {\n\t\t          if (!theType) {\n\t\t            return [];\n\t\t          }\n\t\t          if (_angularFix2['default'].isString(theType)) {\n\t\t            theType = formlyConfig.getType(theType, true, scope.options);\n\t\t          }\n\t\t          var typeThings = [];\n\t\n\t\t          // get things from parent\n\t\t          if (theType['extends']) {\n\t\t            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType['extends']));\n\t\t          }\n\t\n\t\t          // get own type's things\n\t\t          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []));\n\t\n\t\t          // get things from optionsTypes\n\t\t          typeThings = formlyUtil.extendArray(typeThings, getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType)));\n\t\n\t\t          return typeThings;\n\t\t        }\n\t\n\t\t        function getThingsFromOptionsTypes() {\n\t\t          var optionsTypes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t\n\t\t          var optionsTypesThings = [];\n\t\t          _angularFix2['default'].forEach(_angularFix2['default'].copy(arrayify(optionsTypes)).reverse(), function (optionsTypeName) {\n\t\t            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName));\n\t\t          });\n\t\t          return optionsTypesThings;\n\t\t        }\n\t\n\t\t        function getFormlyExpressionThing(thing) {\n\t\t          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing;\n\t\t          return formlyExpressionParserOrFormatterFunction;\n\t\n\t\t          function formlyExpressionParserOrFormatterFunction($viewValue) {\n\t\t            var $modelValue = scope.options.value();\n\t\t            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue);\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t    }\n\t\n\t\t    function callLinkFunctions() {\n\t\t      if (type && type.link) {\n\t\t        type.link.apply(thusly, args);\n\t\t      }\n\t\t      if (scope.options.link) {\n\t\t        scope.options.link.apply(thusly, args);\n\t\t      }\n\t\t    }\n\t\n\t\t    function runManipulators(manipulators) {\n\t\t      return function runManipulatorsOnTemplate(templateToManipulate) {\n\t\t        var chain = $q.when(templateToManipulate);\n\t\t        _angularFix2['default'].forEach(manipulators, function (manipulator) {\n\t\t          chain = chain.then(function (template) {\n\t\t            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t\t              return _angularFix2['default'].isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t\t            });\n\t\t          });\n\t\t        });\n\t\t        return chain;\n\t\t      };\n\t\t    }\n\t\t  }\n\t\n\t\t  // sort-of stateless util functions\n\t\t  function asHtml(el) {\n\t\t    var wrapper = _angularFix2['default'].element('<a></a>');\n\t\t    return wrapper.append(el).html();\n\t\t  }\n\t\n\t\t  function getFieldType(options) {\n\t\t    return options.type && formlyConfig.getType(options.type);\n\t\t  }\n\t\n\t\t  function getManipulators(options, formOptions) {\n\t\t    var preWrapper = [];\n\t\t    var postWrapper = [];\n\t\t    addManipulators(options.templateManipulators);\n\t\t    addManipulators(formOptions.templateManipulators);\n\t\t    addManipulators(formlyConfig.templateManipulators);\n\t\t    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\t\n\t\t    function addManipulators(manipulators) {\n\t\t      /* eslint-disable */ // it doesn't understand this :-(\n\t\n\t\t      var _ref = manipulators || {};\n\t\n\t\t      var _ref$preWrapper = _ref.preWrapper;\n\t\t      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n\t\t      var _ref$postWrapper = _ref.postWrapper;\n\t\t      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\t\n\t\t      preWrapper = preWrapper.concat(pre);\n\t\t      postWrapper = postWrapper.concat(post);\n\t\t      /* eslint-enable */\n\t\t    }\n\t\t  }\n\t\n\t\t  function getFieldTemplate(options) {\n\t\t    function fromOptionsOrType(key, fieldType) {\n\t\t      if (_angularFix2['default'].isDefined(options[key])) {\n\t\t        return options[key];\n\t\t      } else if (fieldType && _angularFix2['default'].isDefined(fieldType[key])) {\n\t\t        return fieldType[key];\n\t\t      }\n\t\t    }\n\t\n\t\t    var type = formlyConfig.getType(options.type, true, options);\n\t\t    var template = fromOptionsOrType('template', type);\n\t\t    var templateUrl = fromOptionsOrType('templateUrl', type);\n\t\t    if (_angularFix2['default'].isUndefined(template) && !templateUrl) {\n\t\t      throw formlyUsability.getFieldError('type-type-has-no-template', 'Type \\'' + options.type + '\\' has no template. On element:', options);\n\t\t    }\n\t\n\t\t    return getTemplate(templateUrl || template, _angularFix2['default'].isUndefined(template), options);\n\t\t  }\n\t\n\t\t  function getTemplate(template, isUrl, options) {\n\t\t    var templatePromise = undefined;\n\t\t    if (_angularFix2['default'].isFunction(template)) {\n\t\t      templatePromise = $q.when(template(options));\n\t\t    } else {\n\t\t      templatePromise = $q.when(template);\n\t\t    }\n\t\n\t\t    if (!isUrl) {\n\t\t      return templatePromise;\n\t\t    } else {\n\t\t      var _ret2 = (function () {\n\t\t        var httpOptions = { cache: $templateCache };\n\t\t        return {\n\t\t          v: templatePromise.then(function (url) {\n\t\t            return $http.get(url, httpOptions);\n\t\t          }).then(function (response) {\n\t\t            return response.data;\n\t\t          })['catch'](function handleErrorGettingATemplate(error) {\n\t\t            formlyWarn('problem-loading-template-for-templateurl', 'Problem loading template for ' + template, error);\n\t\t          })\n\t\t        };\n\t\t      })();\n\t\n\t\t      if (typeof _ret2 === 'object') return _ret2.v;\n\t\t    }\n\t\t  }\n\t\n\t\t  function transcludeInWrappers(options, formOptions) {\n\t\t    var wrapper = getWrapperOption(options, formOptions);\n\t\n\t\t    return function transcludeTemplate(template) {\n\t\t      if (!wrapper.length) {\n\t\t        return $q.when(template);\n\t\t      }\n\t\n\t\t      wrapper.forEach(function (aWrapper) {\n\t\t        formlyUsability.checkWrapper(aWrapper, options);\n\t\t        runApiCheck(aWrapper, options);\n\t\t      });\n\t\t      var promises = wrapper.map(function (w) {\n\t\t        return getTemplate(w.template || w.templateUrl, !w.template);\n\t\t      });\n\t\t      return $q.all(promises).then(function (wrappersTemplates) {\n\t\t        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t\t          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t\t        });\n\t\t        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t\t        var totalWrapper = wrappersTemplates.shift();\n\t\t        wrappersTemplates.forEach(function (wrapperTemplate) {\n\t\t          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t\t        });\n\t\t        return doTransclusion(totalWrapper, template);\n\t\t      });\n\t\t    };\n\t\t  }\n\t\n\t\t  function doTransclusion(wrapper, template) {\n\t\t    var superWrapper = _angularFix2['default'].element('<a></a>'); // this allows people not have to have a single root in wrappers\n\t\t    superWrapper.append(wrapper);\n\t\t    var transcludeEl = superWrapper.find('formly-transclude');\n\t\t    if (!transcludeEl.length) {\n\t\t      // try it using our custom find function\n\t\t      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n\t\t    }\n\t\t    transcludeEl.replaceWith(template);\n\t\t    return superWrapper.html();\n\t\t  }\n\t\n\t\t  function getWrapperOption(options, formOptions) {\n\t\t    /* eslint complexity:[2, 6] */\n\t\t    var wrapper = options.wrapper;\n\t\t    // explicit null means no wrapper\n\t\t    if (wrapper === null) {\n\t\t      return [];\n\t\t    }\n\t\n\t\t    // nothing specified means use the default wrapper for the type\n\t\t    if (!wrapper) {\n\t\t      // get all wrappers that specify they apply to this type\n\t\t      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t\t    } else {\n\t\t      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t\t    }\n\t\n\t\t    // get all wrappers for that the type specified that it uses.\n\t\t    var type = formlyConfig.getType(options.type, true, options);\n\t\t    if (type && type.wrapper) {\n\t\t      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t\t      wrapper = wrapper.concat(typeWrappers);\n\t\t    }\n\t\n\t\t    // add form wrappers\n\t\t    if (formOptions.wrapper) {\n\t\t      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n\t\t      wrapper = wrapper.concat(formWrappers);\n\t\t    }\n\t\n\t\t    // add the default wrapper last\n\t\t    var defaultWrapper = formlyConfig.getWrapper();\n\t\t    if (defaultWrapper) {\n\t\t      wrapper.push(defaultWrapper);\n\t\t    }\n\t\t    return wrapper;\n\t\t  }\n\t\n\t\t  function checkApi(options) {\n\t\t    formlyApiCheck['throw'](formlyApiCheck.formlyFieldOptions, options, {\n\t\t      prefix: 'formly-field directive',\n\t\t      url: 'formly-field-directive-validation-failed'\n\t\t    });\n\t\t    // validate with the type\n\t\t    var type = options.type && formlyConfig.getType(options.type);\n\t\t    if (type) {\n\t\t      runApiCheck(type, options, true);\n\t\t    }\n\t\t    if (options.expressionProperties && options.expressionProperties.hide) {\n\t\t      formlyWarn('dont-use-expressionproperties.hide-use-hideexpression-instead', 'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead', options);\n\t\t    }\n\t\t  }\n\t\n\t\t  function checkFieldGroupApi(options) {\n\t\t    formlyApiCheck['throw'](formlyApiCheck.fieldGroup, options, {\n\t\t      prefix: 'formly-field directive',\n\t\t      url: 'formly-field-directive-validation-failed'\n\t\t    });\n\t\t  }\n\t\n\t\t  function runApiCheck(_ref2, options, forType) {\n\t\t    var apiCheck = _ref2.apiCheck;\n\t\t    var apiCheckInstance = _ref2.apiCheckInstance;\n\t\t    var apiCheckFunction = _ref2.apiCheckFunction;\n\t\t    var apiCheckOptions = _ref2.apiCheckOptions;\n\t\n\t\t    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options);\n\t\t    if (forType && options.type) {\n\t\t      _angularFix2['default'].forEach(formlyConfig.getTypeHeritage(options.type), function (type) {\n\t\t        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options);\n\t\t      });\n\t\t    }\n\t\t  }\n\t\n\t\t  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n\t\t    /* eslint complexity:[2, 9] */\n\t\t    if (!apiCheck) {\n\t\t      return;\n\t\t    }\n\t\t    var instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck;\n\t\t    if (instance.config.disabled || _apiCheck2['default'].globalConfig.disabled) {\n\t\t      return;\n\t\t    }\n\t\t    var fn = apiCheckFunction || 'warn';\n\t\t    // this is the new API\n\t\t    var checkerObjects = apiCheck(instance);\n\t\t    _angularFix2['default'].forEach(checkerObjects, function (shape, name) {\n\t\t      var checker = instance.shape(shape);\n\t\t      var checkOptions = _angularFix2['default'].extend({\n\t\t        prefix: 'formly-field type ' + options.type + ' for property ' + name,\n\t\t        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n\t\t      }, apiCheckOptions);\n\t\t      instance[fn](checker, options[name], checkOptions);\n\t\t    });\n\t\t  }\n\t\t}\n\t\tformlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"$interpolate\", \"formlyConfig\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t\n\t\t// Stateless util functions\n\t\tfunction getDefaultOptionsOptionsTypes(type) {\n\t\t  return getDefaultOptionsProperty(type, 'optionsTypes', []);\n\t\t}\n\t\n\t\tfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n\t\t  return type.defaultOptions && type.defaultOptions[prop] || defaultValue;\n\t\t}\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 15 */\n\t/***/ function(module, exports) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\texports['default'] = formlyFocus;\n\t\n\t\t// @ngInject\n\t\tfunction formlyFocus($timeout, $document) {\n\t\t  return {\n\t\t    restrict: 'A',\n\t\t    link: function formlyFocusLink(scope, element, attrs) {\n\t\t      var previousEl = null;\n\t\t      var el = element[0];\n\t\t      var doc = $document[0];\n\t\t      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n\t\t        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n\t\t        if (value === 'true') {\n\t\t          $timeout(function setElementFocus() {\n\t\t            previousEl = doc.activeElement;\n\t\t            el.focus();\n\t\t          }, ~ ~attrs.focusWait);\n\t\t        } else if (value === 'false') {\n\t\t          if (doc.activeElement === el) {\n\t\t            el.blur();\n\t\t            if (attrs.hasOwnProperty('refocus') && previousEl) {\n\t\t              previousEl.focus();\n\t\t            }\n\t\t          }\n\t\t        }\n\t\t      });\n\t\t    }\n\t\t  };\n\t\t}\n\t\tformlyFocus.$inject = [\"$timeout\", \"$document\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 16 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\tvar _slice = Array.prototype.slice;\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\texports['default'] = formlyForm;\n\t\n\t\t/**\n\t\t * @ngdoc directive\n\t\t * @name formlyForm\n\t\t * @restrict AE\n\t\t */\n\t\t// @ngInject\n\t\tfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n\t\t  var currentFormId = 1;\n\t\t  FormlyFormController.$inject = [\"$scope\", \"formlyApiCheck\", \"formlyUtil\"];\n\t\t  return {\n\t\t    restrict: 'AE',\n\t\t    template: formlyFormGetTemplate,\n\t\t    replace: true,\n\t\t    transclude: true,\n\t\t    scope: {\n\t\t      fields: '=',\n\t\t      model: '=',\n\t\t      form: '=?',\n\t\t      options: '=?'\n\t\t    },\n\t\t    controller: FormlyFormController,\n\t\t    link: formlyFormLink\n\t\t  };\n\t\n\t\t  function formlyFormGetTemplate(el, attrs) {\n\t\t    var rootEl = getRootEl();\n\t\t    var fieldRootEl = getFieldRootEl();\n\t\t    var formId = 'formly_' + currentFormId++;\n\t\t    var parentFormAttributes = '';\n\t\t    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n\t\t      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n\t\t    }\n\t\t    return '\\n        <' + rootEl + ' class=\"formly\"\\n                 name=\"' + getFormName() + '\"\\n                 role=\"form\" ' + parentFormAttributes + '>\\n          <' + fieldRootEl + ' formly-field\\n               ng-repeat=\"field in fields ' + getTrackBy() + '\"\\n               ' + getHideDirective() + '=\"!field.hide\"\\n               class=\"formly-field\"\\n               options=\"field\"\\n               model=\"field.model || model\"\\n               original-model=\"model\"\\n               fields=\"fields\"\\n               form=\"theFormlyForm\"\\n               form-id=\"' + getFormName() + '\"\\n               form-state=\"options.formState\"\\n               form-options=\"options\"\\n               index=\"$index\">\\n          </' + fieldRootEl + '>\\n          <div ng-transclude class=\"' + getTranscludeClass() + '\"></div>\\n        </' + rootEl + '>\\n      ';\n\t\n\t\t    function getRootEl() {\n\t\t      return attrs.rootEl || 'ng-form';\n\t\t    }\n\t\n\t\t    function getFieldRootEl() {\n\t\t      return attrs.fieldRootEl || 'div';\n\t\t    }\n\t\n\t\t    function getHideDirective() {\n\t\t      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n\t\t    }\n\t\n\t\t    function getTrackBy() {\n\t\t      if (!attrs.trackBy) {\n\t\t        return '';\n\t\t      } else {\n\t\t        return 'track by ' + attrs.trackBy;\n\t\t      }\n\t\t    }\n\t\n\t\t    function getFormName() {\n\t\t      var formName = formId;\n\t\t      var bindName = attrs.bindName;\n\t\t      if (bindName) {\n\t\t        if (_angularFix2['default'].version.minor < 3) {\n\t\t          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n\t\t        }\n\t\t        // we can do a one-time binding here because we know we're in 1.3.x territory\n\t\t        formName = $interpolate.startSymbol() + '::\\'formly_\\' + ' + bindName + $interpolate.endSymbol();\n\t\t      }\n\t\t      return formName;\n\t\t    }\n\t\n\t\t    function getTranscludeClass() {\n\t\t      return attrs.transcludeClass || '';\n\t\t    }\n\t\n\t\t    function copyAttributes(attributes) {\n\t\t      var excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class', 'data-model', 'data-form', 'data-fields', 'data-options', 'data-name'];\n\t\t      var arrayAttrs = [];\n\t\t      _angularFix2['default'].forEach(attributes, function (_ref) {\n\t\t        var nodeName = _ref.nodeName;\n\t\t        var value = _ref.value;\n\t\n\t\t        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n\t\t          arrayAttrs.push(toKebabCase(nodeName) + '=\"' + value + '\"');\n\t\t        }\n\t\t      });\n\t\t      return arrayAttrs.join(' ');\n\t\t    }\n\t\t  }\n\t\n\t\t  // @ngInject\n\t\t  function FormlyFormController($scope, formlyApiCheck, formlyUtil) {\n\t\t    setupOptions();\n\t\t    $scope.model = $scope.model || {};\n\t\t    setupFields();\n\t\n\t\t    // watch the model and evaluate watch expressions that depend on it.\n\t\t    $scope.$watch('model', onModelOrFormStateChange, true);\n\t\t    if ($scope.options.formState) {\n\t\t      $scope.$watch('options.formState', onModelOrFormStateChange, true);\n\t\t    }\n\t\n\t\t    function onModelOrFormStateChange() {\n\t\t      _angularFix2['default'].forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n\t\t        var model = field.model || $scope.model;\n\t\t        var promise = field.runExpressions && field.runExpressions();\n\t\t        if (field.hideExpression) {\n\t\t          // can't use hide with expressionProperties reliably\n\t\t          var val = model[field.key];\n\t\t          field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n\t\t        }\n\t\t        if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n\t\t          var validate = field.formControl.$validate;\n\t\t          if (promise) {\n\t\t            promise.then(validate);\n\t\t          } else {\n\t\t            validate();\n\t\t          }\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function setupFields() {\n\t\t      $scope.fields = $scope.fields || [];\n\t\n\t\t      checkDeprecatedOptions($scope.options);\n\t\n\t\t      var fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\t\n\t\t      if (!_angularFix2['default'].isArray(fieldTransforms)) {\n\t\t        fieldTransforms = [fieldTransforms];\n\t\t      }\n\t\n\t\t      _angularFix2['default'].forEach(fieldTransforms, function transformFields(fieldTransform) {\n\t\t        if (fieldTransform) {\n\t\t          $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n\t\t          if (!$scope.fields) {\n\t\t            throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n\t\t          }\n\t\t        }\n\t\t      });\n\t\n\t\t      setupModels();\n\t\n\t\t      _angularFix2['default'].forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t\t      _angularFix2['default'].forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\t    }\n\t\n\t\t    function checkDeprecatedOptions(options) {\n\t\t      if (formlyConfig.extras.fieldTransform && _angularFix2['default'].isFunction(formlyConfig.extras.fieldTransform)) {\n\t\t        formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for formlyConfig.extras: ' + formlyConfig.extras.fieldTransform.name, formlyConfig.extras);\n\t\t      } else if (options.fieldTransform && _angularFix2['default'].isFunction(options.fieldTransform)) {\n\t\t        formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for form', options);\n\t\t      }\n\t\t    }\n\t\n\t\t    function setupOptions() {\n\t\t      formlyApiCheck['throw']([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: 'formly-form options check' });\n\t\t      $scope.options = $scope.options || {};\n\t\t      $scope.options.formState = $scope.options.formState || {};\n\t\n\t\t      _angularFix2['default'].extend($scope.options, {\n\t\t        updateInitialValue: updateInitialValue,\n\t\t        resetModel: resetModel\n\t\t      });\n\t\t    }\n\t\n\t\t    function updateInitialValue() {\n\t\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t\t        if (isFieldGroup(field) && field.options) {\n\t\t          field.options.updateInitialValue();\n\t\t        } else {\n\t\t          field.updateInitialValue();\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function resetModel() {\n\t\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t\t        if (isFieldGroup(field) && field.options) {\n\t\t          field.options.resetModel();\n\t\t        } else if (field.resetModel) {\n\t\t          field.resetModel();\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function setupModels() {\n\t\t      // a set of field models that are already watched (the $scope.model will have its own watcher)\n\t\t      var watchedModels = [$scope.model];\n\t\n\t\t      if ($scope.options.formState) {\n\t\t        // $scope.options.formState will have its own watcher\n\t\t        watchedModels.push($scope.options.formState);\n\t\t      }\n\t\n\t\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t\t        var isNewModel = initModel(field);\n\t\n\t\t        if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1) {\n\t\t          $scope.$watch(function () {\n\t\t            return field.model;\n\t\t          }, onModelOrFormStateChange, true);\n\t\t          watchedModels.push(field.model);\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function initModel(field) {\n\t\t      var isNewModel = true;\n\t\n\t\t      if (_angularFix2['default'].isString(field.model)) {\n\t\t        var expression = field.model;\n\t\t        var index = $scope.fields.indexOf(field);\n\t\n\t\t        isNewModel = !refrencesCurrentlyWatchedModel(expression);\n\t\n\t\t        field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n\t\t        if (!field.model) {\n\t\t          throw formlyUsability.getFieldError('field-model-must-be-initialized', 'Field model must be initialized. When specifying a model as a string for a field, the result of the' + ' expression must have been initialized ahead of time.', field);\n\t\t        }\n\t\t      }\n\t\t      return isNewModel;\n\t\t    }\n\t\n\t\t    function refrencesCurrentlyWatchedModel(expression) {\n\t\t      return ['model', 'formState'].some(function (item) {\n\t\t        return formlyUtil.startsWith(expression, item + '.') || formlyUtil.startsWith(expression, item + '[');\n\t\t      });\n\t\t    }\n\t\n\t\t    function attachKey(field, index) {\n\t\t      if (!isFieldGroup(field)) {\n\t\t        field.key = field.key || index || 0;\n\t\t      }\n\t\t    }\n\t\n\t\t    function setupWatchers(field, index) {\n\t\t      if (isFieldGroup(field) || !_angularFix2['default'].isDefined(field.watcher)) {\n\t\t        return;\n\t\t      }\n\t\t      var watchers = field.watcher;\n\t\t      if (!_angularFix2['default'].isArray(watchers)) {\n\t\t        watchers = [watchers];\n\t\t      }\n\t\t      _angularFix2['default'].forEach(watchers, function setupWatcher(watcher) {\n\t\t        if (!_angularFix2['default'].isDefined(watcher.listener)) {\n\t\t          throw formlyUsability.getFieldError('all-field-watchers-must-have-a-listener', 'All field watchers must have a listener', field);\n\t\t        }\n\t\t        var watchExpression = getWatchExpression(watcher, field, index);\n\t\t        var watchListener = getWatchListener(watcher, field, index);\n\t\n\t\t        var type = watcher.type || '$watch';\n\t\t        watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t\t      });\n\t\t    }\n\t\n\t\t    function getWatchExpression(watcher, field, index) {\n\t\t      var watchExpression = watcher.expression || 'model[\\'' + field.key + '\\']';\n\t\t      if (_angularFix2['default'].isFunction(watchExpression)) {\n\t\t        (function () {\n\t\t          // wrap the field's watch expression so we can call it with the field as the first arg\n\t\t          // and the stop function as the last arg as a helper\n\t\t          var originalExpression = watchExpression;\n\t\t          watchExpression = function formlyWatchExpression() {\n\t\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t\t            return originalExpression.apply(undefined, _toConsumableArray(args));\n\t\t          };\n\t\t          watchExpression.displayName = 'Formly Watch Expression for field for ' + field.key;\n\t\t        })();\n\t\t      }\n\t\t      return watchExpression;\n\t\t    }\n\t\n\t\t    function getWatchListener(watcher, field, index) {\n\t\t      var watchListener = watcher.listener;\n\t\t      if (_angularFix2['default'].isFunction(watchListener)) {\n\t\t        (function () {\n\t\t          // wrap the field's watch listener so we can call it with the field as the first arg\n\t\t          // and the stop function as the last arg as a helper\n\t\t          var originalListener = watchListener;\n\t\t          watchListener = function formlyWatchListener() {\n\t\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t\t            return originalListener.apply(undefined, _toConsumableArray(args));\n\t\t          };\n\t\t          watchListener.displayName = 'Formly Watch Listener for field for ' + field.key;\n\t\t        })();\n\t\t      }\n\t\t      return watchListener;\n\t\t    }\n\t\n\t\t    function modifyArgs(watcher, index) {\n\t\t      for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t\t        originalArgs[_key - 2] = arguments[_key];\n\t\t      }\n\t\n\t\t      return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t\t    }\n\t\n\t\t    function evalCloseToFormlyExpression(expression, val, field, index) {\n\t\t      var extraLocals = getFormlyFieldLikeLocals(field, index);\n\t\t      return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n\t\t    }\n\t\n\t\t    function getFormlyFieldLikeLocals(field, index) {\n\t\t      // this makes it closer to what a regular formlyExpression would be\n\t\t      return {\n\t\t        options: field,\n\t\t        index: index,\n\t\t        formState: $scope.options.formState,\n\t\t        formId: $scope.formId\n\t\t      };\n\t\t    }\n\t\t  }\n\t\n\t\t  function formlyFormLink(scope, el, attrs) {\n\t\t    setFormController();\n\t\t    fixChromeAutocomplete();\n\t\n\t\t    function setFormController() {\n\t\t      var formId = attrs.name;\n\t\t      scope.formId = formId;\n\t\t      scope.theFormlyForm = scope[formId];\n\t\t      if (attrs.form) {\n\t\t        var getter = $parse(attrs.form);\n\t\t        var setter = getter.assign;\n\t\t        var parentForm = getter(scope.$parent);\n\t\t        if (parentForm) {\n\t\t          scope.theFormlyForm = parentForm;\n\t\t          if (scope[formId]) {\n\t\t            scope.theFormlyForm.$removeControl(scope[formId]);\n\t\t          }\n\t\n\t\t          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n\t\t          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n\t\t          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n\t\t          // this is necessary because it's confusing to have a step between the form you pass in\n\t\t          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n\t\t          // to children forms :-( This line was added to solve this issue:\n\t\t          // https://github.com/formly-js/angular-formly/issues/287\n\t\t          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n\t\t          // so I expect it will remain this way for the life of angular 1.x\n\t\t          el.removeData('$formController');\n\t\t        } else {\n\t\t          setter(scope.$parent, scope[formId]);\n\t\t        }\n\t\t      }\n\t\t      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n\t\t        /* eslint no-console:0 */\n\t\t        formlyWarn('formly-form-has-no-formcontroller', 'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work', el, scope);\n\t\t      }\n\t\t    }\n\t\n\t\t    /*\n\t\t     * chrome autocomplete lameness\n\t\t     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t\t     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t\t     */\n\t\t    function fixChromeAutocomplete() {\n\t\t      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t\t      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t\t      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t\t      if (global && !offInstance || onInstance) {\n\t\t        var input = document.createElement('input');\n\t\t        input.setAttribute('autocomplete', 'address-level4');\n\t\t        input.setAttribute('hidden', 'true');\n\t\t        el[0].appendChild(input);\n\t\t      }\n\t\t    }\n\t\t  }\n\t\n\t\t  // stateless util functions\n\t\t  function toKebabCase(string) {\n\t\t    if (string) {\n\t\t      return string.replace(/([A-Z])/g, function ($1) {\n\t\t        return '-' + $1.toLowerCase();\n\t\t      });\n\t\t    } else {\n\t\t      return '';\n\t\t    }\n\t\t  }\n\t\n\t\t  function isFieldGroup(field) {\n\t\t    return field && !!field.fieldGroup;\n\t\t  }\n\t\t}\n\t\tformlyForm.$inject = [\"formlyUsability\", \"formlyWarn\", \"$parse\", \"formlyConfig\", \"$interpolate\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 17 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\tvar _otherUtils = __webpack_require__(9);\n\t\n\t\texports['default'] = addFormlyNgModelAttrsManipulator;\n\t\n\t\t// @ngInject\n\t\tfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n\t\t  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t\t    return;\n\t\t  }\n\t\t  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t\t  function ngModelAttrsManipulator(template, options, scope) {\n\t\t    var node = document.createElement('div');\n\t\t    var skip = options.extras && options.extras.skipNgModelAttrsManipulator;\n\t\t    if (skip === true) {\n\t\t      return template;\n\t\t    }\n\t\t    node.innerHTML = template;\n\t\n\t\t    var modelNodes = getNgModelNodes(node, skip);\n\t\t    if (!modelNodes || !modelNodes.length) {\n\t\t      return template;\n\t\t    }\n\t\n\t\t    addIfNotPresent(modelNodes, 'id', scope.id);\n\t\t    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\t\n\t\t    addValidation();\n\t\t    alterNgModelAttr();\n\t\t    addModelOptions();\n\t\t    addTemplateOptionsAttrs();\n\t\t    addNgModelElAttrs();\n\t\n\t\t    return node.innerHTML;\n\t\n\t\t    function addValidation() {\n\t\t      if (_angularFix2['default'].isDefined(options.validators) || _angularFix2['default'].isDefined(options.validation.messages)) {\n\t\t        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n\t\t      }\n\t\t    }\n\t\n\t\t    function alterNgModelAttr() {\n\t\t      if (isPropertyAccessor(options.key)) {\n\t\t        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key);\n\t\t      }\n\t\t    }\n\t\n\t\t    function addModelOptions() {\n\t\t      if (_angularFix2['default'].isDefined(options.modelOptions)) {\n\t\t        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n\t\t        if (options.modelOptions.getterSetter) {\n\t\t          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value');\n\t\t        }\n\t\t      }\n\t\t    }\n\t\n\t\t    function addTemplateOptionsAttrs() {\n\t\t      if (!options.templateOptions && !options.expressionProperties) {\n\t\t        // no need to run these if there are no templateOptions or expressionProperties\n\t\t        return;\n\t\t      }\n\t\t      var to = options.templateOptions || {};\n\t\t      var ep = options.expressionProperties || {};\n\t\n\t\t      var ngModelAttributes = getBuiltInAttributes();\n\t\n\t\t      // extend with the user's specifications winning\n\t\t      _angularFix2['default'].extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t\t      // Feel free to make this more simple :-)\n\t\t      _angularFix2['default'].forEach(ngModelAttributes, function (val, name) {\n\t\t        /* eslint complexity:[2, 14] */\n\t\t        var attrVal = undefined,\n\t\t            attrName = undefined;\n\t\t        var ref = 'options.templateOptions[\\'' + name + '\\']';\n\t\t        var toVal = to[name];\n\t\t        var epVal = getEpValue(ep, name);\n\t\n\t\t        var inTo = _angularFix2['default'].isDefined(toVal);\n\t\t        var inEp = _angularFix2['default'].isDefined(epVal);\n\t\t        if (val.value) {\n\t\t          // I realize this looks backwards, but it's right, trust me...\n\t\t          attrName = val.value;\n\t\t          attrVal = name;\n\t\t        } else if (val.statement && inTo) {\n\t\t          attrName = val.statement;\n\t\t          if (_angularFix2['default'].isString(to[name])) {\n\t\t            attrVal = '$eval(' + ref + ')';\n\t\t          } else if (_angularFix2['default'].isFunction(to[name])) {\n\t\t            attrVal = ref + '(model[options.key], options, this, $event)';\n\t\t          } else {\n\t\t            throw new Error('options.templateOptions.' + name + ' must be a string or function: ' + JSON.stringify(options));\n\t\t          }\n\t\t        } else if (val.bound && inEp) {\n\t\t          attrName = val.bound;\n\t\t          attrVal = ref;\n\t\t        } else if ((val.attribute || val.boolean) && inEp) {\n\t\t          attrName = val.attribute || val.boolean;\n\t\t          attrVal = '' + $interpolate.startSymbol() + ref + $interpolate.endSymbol();\n\t\t        } else if (val.attribute && inTo) {\n\t\t          attrName = val.attribute;\n\t\t          attrVal = toVal;\n\t\t        } else if (val.boolean) {\n\t\t          if (inTo && !inEp && toVal) {\n\t\t            attrName = val.boolean;\n\t\t            attrVal = true;\n\t\t          } else {\n\t\t            /* eslint no-empty:0 */\n\t\t            // empty to illustrate that a boolean will not be added via val.bound\n\t\t            // if you want it added via val.bound, then put it in expressionProperties\n\t\t          }\n\t\t        } else if (val.bound && inTo) {\n\t\t            attrName = val.bound;\n\t\t            attrVal = ref;\n\t\t          }\n\t\n\t\t        if (_angularFix2['default'].isDefined(attrName) && _angularFix2['default'].isDefined(attrVal)) {\n\t\t          addIfNotPresent(modelNodes, attrName, attrVal);\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function addNgModelElAttrs() {\n\t\t      _angularFix2['default'].forEach(options.ngModelElAttrs, function (val, name) {\n\t\t        addRegardlessOfPresence(modelNodes, name, val);\n\t\t      });\n\t\t    }\n\t\t  }\n\t\n\t\t  // Utility functions\n\t\t  function getNgModelNodes(node, skip) {\n\t\t    var selectorNot = _angularFix2['default'].isString(skip) ? ':not(' + skip + ')' : '';\n\t\t    var skipNot = ':not([formly-skip-ng-model-attrs-manipulator])';\n\t\t    var query = '[ng-model]' + selectorNot + skipNot + ', [data-ng-model]' + selectorNot + skipNot;\n\t\t    try {\n\t\t      return node.querySelectorAll(query);\n\t\t    } catch (e) {\n\t\t      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n\t\t      //it should be removed when IE8 support is dropped\n\t\t      return getNgModelNodesFallback(node, skip);\n\t\t    }\n\t\t  }\n\t\n\t\t  function getNgModelNodesFallback(node, skip) {\n\t\t    var allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]');\n\t\t    var matchingNgModelNodes = [];\n\t\n\t\t    //make sure this array is compatible with NodeList type by adding an 'item' function\n\t\t    matchingNgModelNodes.item = function (i) {\n\t\t      return this[i];\n\t\t    };\n\t\n\t\t    for (var i = 0; i < allNgModelNodes.length; i++) {\n\t\t      var ngModelNode = allNgModelNodes[i];\n\t\t      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') && !(_angularFix2['default'].isString(skip) && nodeMatches(ngModelNode, skip))) {\n\t\t        matchingNgModelNodes.push(ngModelNode);\n\t\t      }\n\t\t    }\n\t\n\t\t    return matchingNgModelNodes;\n\t\t  }\n\t\n\t\t  function nodeMatches(node, selector) {\n\t\t    var div = document.createElement('div');\n\t\t    div.innerHTML = node.outerHTML;\n\t\t    return div.querySelector(selector);\n\t\t  }\n\t\n\t\t  function getBuiltInAttributes() {\n\t\t    var ngModelAttributes = {\n\t\t      focus: {\n\t\t        attribute: 'formly-focus'\n\t\t      }\n\t\t    };\n\t\t    var boundOnly = [];\n\t\t    var bothBooleanAndBound = ['required', 'disabled'];\n\t\t    var bothAttributeAndBound = ['pattern', 'minlength'];\n\t\t    var statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\t\t    var attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n\t\t    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t\t      bothAttributeAndBound.push('maxlength');\n\t\t    } else {\n\t\t      boundOnly.push('maxlength');\n\t\t    }\n\t\n\t\t    _angularFix2['default'].forEach(boundOnly, function (item) {\n\t\t      ngModelAttributes[item] = { bound: 'ng-' + item };\n\t\t    });\n\t\n\t\t    _angularFix2['default'].forEach(bothBooleanAndBound, function (item) {\n\t\t      ngModelAttributes[item] = { boolean: item, bound: 'ng-' + item };\n\t\t    });\n\t\n\t\t    _angularFix2['default'].forEach(bothAttributeAndBound, function (item) {\n\t\t      ngModelAttributes[item] = { attribute: item, bound: 'ng-' + item };\n\t\t    });\n\t\n\t\t    _angularFix2['default'].forEach(statementOnly, function (item) {\n\t\t      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t\t      ngModelAttributes[propName] = { statement: 'ng-' + item };\n\t\t    });\n\t\n\t\t    _angularFix2['default'].forEach(attributeOnly, function (item) {\n\t\t      ngModelAttributes[item] = { attribute: item };\n\t\t    });\n\t\t    return ngModelAttributes;\n\t\t  }\n\t\n\t\t  function getEpValue(ep, name) {\n\t\t    return ep['templateOptions.' + name] || ep['templateOptions[\\'' + name + '\\']'] || ep['templateOptions[\"' + name + '\"]'];\n\t\t  }\n\t\n\t\t  function addIfNotPresent(nodes, attr, val) {\n\t\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t\t      if (!node.getAttribute(attr)) {\n\t\t        node.setAttribute(attr, val);\n\t\t      }\n\t\t    });\n\t\t  }\n\t\n\t\t  function addRegardlessOfPresence(nodes, attr, val) {\n\t\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t\t      node.setAttribute(attr, val);\n\t\t    });\n\t\t  }\n\t\n\t\t  function isPropertyAccessor(key) {\n\t\t    return (0, _otherUtils.contains)(key, '.') || (0, _otherUtils.contains)(key, '[') && (0, _otherUtils.contains)(key, ']');\n\t\t  }\n\t\t}\n\t\taddFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\", \"$interpolate\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 18 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _angularFix = __webpack_require__(2);\n\t\n\t\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\t\texports['default'] = addCustomTags;\n\t\n\t\t// @ngInject\n\t\tfunction addCustomTags($document) {\n\t\t  // IE8 check ->\n\t\t  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n\t\t  if ($document && $document.documentMode < 9) {\n\t\t    (function () {\n\t\t      var document = $document.get(0);\n\t\t      // add the custom elements that we need for formly\n\t\t      var customElements = ['formly-field', 'formly-form'];\n\t\t      _angularFix2['default'].forEach(customElements, function (el) {\n\t\t        document.createElement(el);\n\t\t      });\n\t\t    })();\n\t\t  }\n\t\t}\n\t\taddCustomTags.$inject = [\"$document\"];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//! api-check version 7.5.5 built with ♥ by Kent C. Dodds <kent@doddsfamily.us> (http://kent.doddsfamily.us) (ó ì_í)=óò=(ì_í ò)\n\t\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse if(typeof define === 'function' && define.amd)\n\t\t\tdefine(factory);\n\t\telse if(typeof exports === 'object')\n\t\t\texports[\"apiCheck\"] = factory();\n\t\telse\n\t\t\troot[\"apiCheck\"] = factory();\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t\n\t\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tObject.defineProperty(exports, '__esModule', {\n\t\t  value: true\n\t\t});\n\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t\tvar _apiCheck = __webpack_require__(1);\n\t\n\t\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\t\texports['default'] = _apiCheck2['default'];\n\t\tmodule.exports = exports['default'];\n\t\n\t/***/ },\n\t/* 1 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tvar stringify = __webpack_require__(2);\n\t\tvar apiCheckUtil = __webpack_require__(3);\n\t\tvar each = apiCheckUtil.each;\n\t\tvar isError = apiCheckUtil.isError;\n\t\tvar t = apiCheckUtil.t;\n\t\tvar arrayify = apiCheckUtil.arrayify;\n\t\tvar getCheckerDisplay = apiCheckUtil.getCheckerDisplay;\n\t\tvar typeOf = apiCheckUtil.typeOf;\n\t\tvar getError = apiCheckUtil.getError;\n\t\n\t\tvar checkers = __webpack_require__(4);\n\t\tvar apiCheckApis = getApiCheckApis();\n\t\n\t\tmodule.exports = getApiCheckInstance;\n\t\tmodule.exports.VERSION = (\"7.5.5\");\n\t\tmodule.exports.utils = apiCheckUtil;\n\t\tmodule.exports.globalConfig = {\n\t\t  verbose: false,\n\t\t  disabled: false\n\t\t};\n\t\n\t\tvar apiCheckApiCheck = getApiCheckInstance({\n\t\t  output: { prefix: 'apiCheck' }\n\t\t});\n\t\tmodule.exports.internalChecker = apiCheckApiCheck;\n\t\n\t\teach(checkers, function (checker, name) {\n\t\t  return module.exports[name] = checker;\n\t\t});\n\t\n\t\tfunction getApiCheckInstance() {\n\t\t  var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\t  var extraCheckers = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t\t  /* eslint complexity:[2, 6] */\n\t\t  if (apiCheckApiCheck && arguments.length) {\n\t\t    apiCheckApiCheck['throw'](apiCheckApis.getApiCheckInstanceCheckers, arguments, {\n\t\t      prefix: 'creating an apiCheck instance'\n\t\t    });\n\t\t  }\n\t\n\t\t  var additionalProperties = {\n\t\t    'throw': getApiCheck(true),\n\t\t    warn: getApiCheck(false),\n\t\t    getErrorMessage: getErrorMessage,\n\t\t    handleErrorMessage: handleErrorMessage,\n\t\t    config: {\n\t\t      output: config.output || {\n\t\t        prefix: '',\n\t\t        suffix: '',\n\t\t        docsBaseUrl: ''\n\t\t      },\n\t\t      verbose: config.verbose || false,\n\t\t      disabled: config.disabled || false\n\t\t    },\n\t\t    utils: apiCheckUtil\n\t\t  };\n\t\n\t\t  each(additionalProperties, function (wrapper, name) {\n\t\t    return apiCheck[name] = wrapper;\n\t\t  });\n\t\n\t\t  var disabled = apiCheck.disabled || module.exports.globalConfig.disabled;\n\t\t  each(checkers.getCheckers(disabled), function (checker, name) {\n\t\t    return apiCheck[name] = checker;\n\t\t  });\n\t\t  each(extraCheckers, function (checker, name) {\n\t\t    return apiCheck[name] = checker;\n\t\t  });\n\t\n\t\t  return apiCheck;\n\t\n\t\t  /**\n\t\t   * This is the instance function. Other things are attached to this see additional properties above.\n\t\t   * @param {Array} api - the checkers to check with\n\t\t   * @param {Array} args - the args to check\n\t\t   * @param {Object} output - output options\n\t\t   * @returns {Object} - if this has a failed = true property, then it failed\n\t\t   */\n\t\t  function apiCheck(api, args, output) {\n\t\t    /* eslint complexity:[2, 8] */\n\t\t    if (apiCheck.config.disabled || module.exports.globalConfig.disabled) {\n\t\t      return {\n\t\t        apiTypes: {}, argTypes: {},\n\t\t        passed: true, message: '',\n\t\t        failed: false\n\t\t      }; // empty version of what is normally returned\n\t\t    }\n\t\t    checkApiCheckApi(arguments);\n\t\t    if (!Array.isArray(api)) {\n\t\t      api = [api];\n\t\t      args = [args];\n\t\t    } else {\n\t\t      // turn arguments into an array\n\t\t      args = Array.prototype.slice.call(args);\n\t\t    }\n\t\t    var messages = checkEnoughArgs(api, args);\n\t\t    if (!messages.length) {\n\t\t      // this is where we actually go perform the checks.\n\t\t      messages = checkApiWithArgs(api, args);\n\t\t    }\n\t\n\t\t    var returnObject = getTypes(api, args);\n\t\t    returnObject.args = args;\n\t\t    if (messages.length) {\n\t\t      returnObject.message = apiCheck.getErrorMessage(api, args, messages, output);\n\t\t      returnObject.failed = true;\n\t\t      returnObject.passed = false;\n\t\t    } else {\n\t\t      returnObject.message = '';\n\t\t      returnObject.failed = false;\n\t\t      returnObject.passed = true;\n\t\t    }\n\t\t    return returnObject;\n\t\t  }\n\t\n\t\t  /**\n\t\t   * checkApiCheckApi, should be read like: check apiCheck api. As in, check the api for apiCheck :-)\n\t\t   * @param {Array} checkApiArgs - args provided to apiCheck function\n\t\t   */\n\t\t  function checkApiCheckApi(checkApiArgs) {\n\t\t    var api = checkApiArgs[0];\n\t\t    var args = checkApiArgs[1];\n\t\t    var isArrayOrArgs = Array.isArray(args) || args && typeof args === 'object' && typeof args.length === 'number';\n\t\n\t\t    if (Array.isArray(api) && !isArrayOrArgs) {\n\t\t      throw new Error(getErrorMessage(api, [args], ['If an array is provided for the api, an array must be provided for the args as well.'], { prefix: 'apiCheck' }));\n\t\t    }\n\t\t    // dog fooding here\n\t\t    var errors = checkApiWithArgs(apiCheckApis.checkApiCheckApi, checkApiArgs);\n\t\t    if (errors.length) {\n\t\t      var message = apiCheck.getErrorMessage(apiCheckApis.checkApiCheckApi, checkApiArgs, errors, {\n\t\t        prefix: 'apiCheck'\n\t\t      });\n\t\t      apiCheck.handleErrorMessage(message, true);\n\t\t    }\n\t\t  }\n\t\n\t\t  function getApiCheck(shouldThrow) {\n\t\t    return function apiCheckWrapper(api, args, output) {\n\t\t      var result = apiCheck(api, args, output);\n\t\t      apiCheck.handleErrorMessage(result.message, shouldThrow);\n\t\t      return result; // wont get here if an error is thrown\n\t\t    };\n\t\t  }\n\t\n\t\t  function handleErrorMessage(message, shouldThrow) {\n\t\t    if (shouldThrow && message) {\n\t\t      throw new Error(message);\n\t\t    } else if (message) {\n\t\t      /* eslint no-console:0 */\n\t\t      console.warn(message);\n\t\t    }\n\t\t  }\n\t\n\t\t  function getErrorMessage(api, args) {\n\t\t    var messages = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\t\t    var output = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\t\n\t\t    var gOut = apiCheck.config.output || {};\n\t\t    var prefix = getPrefix();\n\t\t    var suffix = getSuffix();\n\t\t    var url = getUrl();\n\t\t    var message = 'apiCheck failed! ' + messages.join(', ');\n\t\t    var passedAndShouldHavePassed = '\\n\\n' + buildMessageFromApiAndArgs(api, args);\n\t\t    return (prefix + ' ' + message + ' ' + suffix + ' ' + (url || '') + passedAndShouldHavePassed).trim();\n\t\n\t\t    function getPrefix() {\n\t\t      var p = output.onlyPrefix;\n\t\t      if (!p) {\n\t\t        p = ((gOut.prefix || '') + ' ' + (output.prefix || '')).trim();\n\t\t      }\n\t\t      return p;\n\t\t    }\n\t\n\t\t    function getSuffix() {\n\t\t      var s = output.onlySuffix;\n\t\t      if (!s) {\n\t\t        s = ((output.suffix || '') + ' ' + (gOut.suffix || '')).trim();\n\t\t      }\n\t\t      return s;\n\t\t    }\n\t\n\t\t    function getUrl() {\n\t\t      var u = output.url;\n\t\t      if (!u) {\n\t\t        u = gOut.docsBaseUrl && output.urlSuffix && ('' + gOut.docsBaseUrl + output.urlSuffix).trim();\n\t\t      }\n\t\t      return u;\n\t\t    }\n\t\t  }\n\t\n\t\t  function buildMessageFromApiAndArgs(api, args) {\n\t\t    var _getTypes = getTypes(api, args);\n\t\n\t\t    var apiTypes = _getTypes.apiTypes;\n\t\t    var argTypes = _getTypes.argTypes;\n\t\n\t\t    var copy = Array.prototype.slice.call(args || []);\n\t\t    var replacedItems = [];\n\t\t    replaceFunctionWithName(copy);\n\t\t    var passedArgs = getObjectString(copy);\n\t\t    argTypes = getObjectString(argTypes);\n\t\t    apiTypes = getObjectString(apiTypes);\n\t\n\t\t    return generateMessage();\n\t\n\t\t    // functions\n\t\n\t\t    function replaceFunctionWithName(obj) {\n\t\t      each(obj, function (val, name) {\n\t\t        /* eslint complexity:[2, 6] */\n\t\t        if (replacedItems.indexOf(val) === -1) {\n\t\t          // avoid recursive problems\n\t\t          replacedItems.push(val);\n\t\t          if (typeof val === 'object') {\n\t\t            replaceFunctionWithName(obj);\n\t\t          } else if (typeof val === 'function') {\n\t\t            obj[name] = val.displayName || val.name || 'anonymous function';\n\t\t          }\n\t\t        }\n\t\t      });\n\t\t    }\n\t\n\t\t    function getObjectString(types) {\n\t\t      if (!types || !types.length) {\n\t\t        return 'nothing';\n\t\t      } else if (types && types.length === 1) {\n\t\t        types = types[0];\n\t\t      }\n\t\t      return stringify(types, null, 2);\n\t\t    }\n\t\n\t\t    function generateMessage() {\n\t\t      var n = '\\n';\n\t\t      var useS = true;\n\t\t      if (args && args.length === 1) {\n\t\t        if (typeof args[0] === 'object' && args[0] !== null) {\n\t\t          useS = !!Object.keys(args[0]).length;\n\t\t        } else {\n\t\t          useS = false;\n\t\t        }\n\t\t      }\n\t\t      var types = 'type' + (useS ? 's' : '');\n\t\t      var newLine = n + n;\n\t\t      return 'You passed:' + n + passedArgs + newLine + ('With the ' + types + ':' + n + argTypes + newLine) + ('The API calls for:' + n + apiTypes);\n\t\t    }\n\t\t  }\n\t\n\t\t  function getTypes(api, args) {\n\t\t    api = arrayify(api);\n\t\t    args = arrayify(args);\n\t\t    var apiTypes = api.map(function (checker, index) {\n\t\t      var specified = module.exports.globalConfig.hasOwnProperty('verbose');\n\t\t      return getCheckerDisplay(checker, {\n\t\t        terse: specified ? !module.exports.globalConfig.verbose : !apiCheck.config.verbose,\n\t\t        obj: args[index],\n\t\t        addHelpers: true\n\t\t      });\n\t\t    });\n\t\t    var argTypes = args.map(function (arg) {\n\t\t      return getArgDisplay(arg, []);\n\t\t    });\n\t\t    return { argTypes: argTypes, apiTypes: apiTypes };\n\t\t  }\n\t\t}\n\t\n\t\t// STATELESS FUNCTIONS\n\t\n\t\t/**\n\t\t * This is where the magic happens for actually checking the arguments with the api.\n\t\t * @param {Array} api - checkers\n\t\t * @param  {Array} args - and arguments object\n\t\t * @returns {Array} - the error messages\n\t\t */\n\t\tfunction checkApiWithArgs(api, args) {\n\t\t  /* eslint complexity:[2, 7] */\n\t\t  var messages = [];\n\t\t  var failed = false;\n\t\t  var checkerIndex = 0;\n\t\t  var argIndex = 0;\n\t\t  var arg = undefined,\n\t\t      checker = undefined,\n\t\t      res = undefined,\n\t\t      lastChecker = undefined,\n\t\t      argName = undefined,\n\t\t      argFailed = undefined,\n\t\t      skipPreviousChecker = undefined;\n\t\t  /* jshint -W084 */\n\t\t  while ((checker = api[checkerIndex++]) && argIndex < args.length) {\n\t\t    arg = args[argIndex++];\n\t\t    argName = 'Argument ' + argIndex + (checker.isOptional ? ' (optional)' : '');\n\t\t    res = checker(arg, 'value', argName);\n\t\t    argFailed = isError(res);\n\t\t    lastChecker = checkerIndex >= api.length;\n\t\t    skipPreviousChecker = checkerIndex > 1 && api[checkerIndex - 1].isOptional;\n\t\t    if (argFailed && lastChecker || argFailed && !lastChecker && !checker.isOptional && !skipPreviousChecker) {\n\t\t      failed = true;\n\t\t      messages.push(getCheckerErrorMessage(res, checker, arg));\n\t\t    } else if (argFailed && checker.isOptional) {\n\t\t      argIndex--;\n\t\t    } else {\n\t\t      messages.push(t(argName) + ' passed');\n\t\t    }\n\t\t  }\n\t\t  return failed ? messages : [];\n\t\t}\n\t\n\t\tcheckerTypeType.type = 'function with __apiCheckData property and `${function.type}` property';\n\t\tfunction checkerTypeType(checkerType, name, location) {\n\t\t  var apiCheckDataChecker = checkers.shape({\n\t\t    type: checkers.string,\n\t\t    optional: checkers.bool\n\t\t  });\n\t\t  var asFunc = checkers.func.withProperties({ __apiCheckData: apiCheckDataChecker });\n\t\t  var asShape = checkers.shape({ __apiCheckData: apiCheckDataChecker });\n\t\t  var wrongShape = checkers.oneOfType([asFunc, asShape])(checkerType, name, location);\n\t\t  if (isError(wrongShape)) {\n\t\t    return wrongShape;\n\t\t  }\n\t\t  if (typeof checkerType !== 'function' && !checkerType.hasOwnProperty(checkerType.__apiCheckData.type)) {\n\t\t    return getError(name, location, checkerTypeType.type);\n\t\t  }\n\t\t}\n\t\n\t\tfunction getCheckerErrorMessage(res, checker, val) {\n\t\t  var checkerHelp = getCheckerHelp(checker, val);\n\t\t  checkerHelp = checkerHelp ? ' - ' + checkerHelp : '';\n\t\t  return res.message + checkerHelp;\n\t\t}\n\t\n\t\tfunction getCheckerHelp(_ref, val) {\n\t\t  var help = _ref.help;\n\t\n\t\t  if (!help) {\n\t\t    return '';\n\t\t  }\n\t\t  if (typeof help === 'function') {\n\t\t    help = help(val);\n\t\t  }\n\t\t  return help;\n\t\t}\n\t\n\t\tfunction checkEnoughArgs(api, args) {\n\t\t  var requiredArgs = api.filter(function (a) {\n\t\t    return !a.isOptional;\n\t\t  });\n\t\t  if (args.length < requiredArgs.length) {\n\t\t    return ['Not enough arguments specified. Requires `' + requiredArgs.length + '`, you passed `' + args.length + '`'];\n\t\t  } else {\n\t\t    return [];\n\t\t  }\n\t\t}\n\t\n\t\tfunction getArgDisplay(arg, gottenArgs) {\n\t\t  /* eslint complexity:[2, 7] */\n\t\t  var cName = arg && arg.constructor && arg.constructor.name;\n\t\t  var type = typeOf(arg);\n\t\t  if (type === 'function') {\n\t\t    if (hasKeys()) {\n\t\t      var properties = stringify(getDisplayIfNotGotten());\n\t\t      return cName + ' (with properties: ' + properties + ')';\n\t\t    }\n\t\t    return cName;\n\t\t  }\n\t\n\t\t  if (arg === null) {\n\t\t    return 'null';\n\t\t  }\n\t\n\t\t  if (type !== 'array' && type !== 'object') {\n\t\t    return type;\n\t\t  }\n\t\n\t\t  if (hasKeys()) {\n\t\t    return getDisplayIfNotGotten();\n\t\t  }\n\t\n\t\t  return cName;\n\t\n\t\t  // utility functions\n\t\t  function hasKeys() {\n\t\t    return arg && Object.keys(arg).length;\n\t\t  }\n\t\n\t\t  function getDisplayIfNotGotten() {\n\t\t    if (gottenArgs.indexOf(arg) !== -1) {\n\t\t      return '[Circular]';\n\t\t    }\n\t\t    gottenArgs.push(arg);\n\t\t    return getDisplay(arg, gottenArgs);\n\t\t  }\n\t\t}\n\t\n\t\tfunction getDisplay(obj, gottenArgs) {\n\t\t  var argDisplay = {};\n\t\t  each(obj, function (v, k) {\n\t\t    return argDisplay[k] = getArgDisplay(v, gottenArgs);\n\t\t  });\n\t\t  return argDisplay;\n\t\t}\n\t\n\t\tfunction getApiCheckApis() {\n\t\t  var os = checkers.string.optional;\n\t\n\t\t  var checkerFnChecker = checkers.func.withProperties({\n\t\t    type: checkers.oneOfType([checkers.string, checkerTypeType]).optional,\n\t\t    displayName: checkers.string.optional,\n\t\t    shortType: checkers.string.optional,\n\t\t    notOptional: checkers.bool.optional,\n\t\t    notRequired: checkers.bool.optional\n\t\t  });\n\t\n\t\t  var getApiCheckInstanceCheckers = [checkers.shape({\n\t\t    output: checkers.shape({\n\t\t      prefix: checkers.string.optional,\n\t\t      suffix: checkers.string.optional,\n\t\t      docsBaseUrl: checkers.string.optional\n\t\t    }).strict.optional,\n\t\t    verbose: checkers.bool.optional,\n\t\t    disabled: checkers.bool.optional\n\t\t  }).strict.optional, checkers.objectOf(checkerFnChecker).optional];\n\t\n\t\t  var checkApiCheckApi = [checkers.typeOrArrayOf(checkerFnChecker), checkers.any.optional, checkers.shape({\n\t\t    prefix: os, suffix: os, urlSuffix: os, // appended case\n\t\t    onlyPrefix: os, onlySuffix: os, url: os // override case\n\t\t  }).strict.optional];\n\t\n\t\t  return {\n\t\t    checkerFnChecker: checkerFnChecker,\n\t\t    getApiCheckInstanceCheckers: getApiCheckInstanceCheckers,\n\t\t    checkApiCheckApi: checkApiCheckApi\n\t\t  };\n\t\t}\n\t\n\t/***/ },\n\t/* 2 */\n\t/***/ function(module, exports) {\n\t\n\t\tmodule.exports = stringify;\n\t\n\t\tfunction getSerialize (fn, decycle) {\n\t\t  var seen = [], keys = [];\n\t\t  decycle = decycle || function(key, value) {\n\t\t    return '[Circular ' + getPath(value, seen, keys) + ']'\n\t\t  };\n\t\t  return function(key, value) {\n\t\t    var ret = value;\n\t\t    if (typeof value === 'object' && value) {\n\t\t      if (seen.indexOf(value) !== -1)\n\t\t        ret = decycle(key, value);\n\t\t      else {\n\t\t        seen.push(value);\n\t\t        keys.push(key);\n\t\t      }\n\t\t    }\n\t\t    if (fn) ret = fn(key, ret);\n\t\t    return ret;\n\t\t  }\n\t\t}\n\t\n\t\tfunction getPath (value, seen, keys) {\n\t\t  var index = seen.indexOf(value);\n\t\t  var path = [ keys[index] ];\n\t\t  for (index--; index >= 0; index--) {\n\t\t    if (seen[index][ path[0] ] === value) {\n\t\t      value = seen[index];\n\t\t      path.unshift(keys[index]);\n\t\t    }\n\t\t  }\n\t\t  return '~' + path.join('.');\n\t\t}\n\t\n\t\tfunction stringify(obj, fn, spaces, decycle) {\n\t\t  return JSON.stringify(obj, getSerialize(fn, decycle), spaces);\n\t\t}\n\t\n\t\tstringify.getSerialize = getSerialize;\n\t\n\t\n\t/***/ },\n\t/* 3 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\t\tvar stringify = __webpack_require__(2);\n\t\tvar checkerHelpers = {\n\t\t  addOptional: addOptional, getRequiredVersion: getRequiredVersion, setupChecker: setupChecker, addNullable: addNullable\n\t\t};\n\t\n\t\tmodule.exports = {\n\t\t  each: each, copy: copy, typeOf: typeOf, arrayify: arrayify, getCheckerDisplay: getCheckerDisplay,\n\t\t  isError: isError, list: list, getError: getError, nAtL: nAtL, t: t, undef: undef, checkerHelpers: checkerHelpers,\n\t\t  noop: noop\n\t\t};\n\t\n\t\tfunction copy(obj) {\n\t\t  var type = typeOf(obj);\n\t\t  var daCopy = undefined;\n\t\t  if (type === 'array') {\n\t\t    daCopy = [];\n\t\t  } else if (type === 'object') {\n\t\t    daCopy = {};\n\t\t  } else {\n\t\t    return obj;\n\t\t  }\n\t\t  each(obj, function (val, key) {\n\t\t    daCopy[key] = val; // cannot single-line this because we don't want to abort the each\n\t\t  });\n\t\t  return daCopy;\n\t\t}\n\t\n\t\tfunction typeOf(obj) {\n\t\t  if (Array.isArray(obj)) {\n\t\t    return 'array';\n\t\t  } else if (obj instanceof RegExp) {\n\t\t    return 'object';\n\t\t  } else {\n\t\t    return typeof obj;\n\t\t  }\n\t\t}\n\t\n\t\tfunction getCheckerDisplay(checker, options) {\n\t\t  /* eslint complexity:[2, 7] */\n\t\t  var display = undefined;\n\t\t  var short = options && options.short;\n\t\t  if (short && checker.shortType) {\n\t\t    display = checker.shortType;\n\t\t  } else if (!short && typeof checker.type === 'object' || checker.type === 'function') {\n\t\t    display = getCheckerType(checker, options);\n\t\t  } else {\n\t\t    display = getCheckerType(checker, options) || checker.displayName || checker.name;\n\t\t  }\n\t\t  return display;\n\t\t}\n\t\n\t\tfunction getCheckerType(_ref, options) {\n\t\t  var type = _ref.type;\n\t\n\t\t  if (typeof type === 'function') {\n\t\t    var __apiCheckData = type.__apiCheckData;\n\t\t    var typeTypes = type(options);\n\t\t    type = _defineProperty({\n\t\t      __apiCheckData: __apiCheckData\n\t\t    }, __apiCheckData.type, typeTypes);\n\t\t  }\n\t\t  return type;\n\t\t}\n\t\n\t\tfunction arrayify(obj) {\n\t\t  if (!obj) {\n\t\t    return [];\n\t\t  } else if (Array.isArray(obj)) {\n\t\t    return obj;\n\t\t  } else {\n\t\t    return [obj];\n\t\t  }\n\t\t}\n\t\n\t\tfunction each(obj, iterator, context) {\n\t\t  if (Array.isArray(obj)) {\n\t\t    return eachArry(obj, iterator, context);\n\t\t  } else {\n\t\t    return eachObj(obj, iterator, context);\n\t\t  }\n\t\t}\n\t\n\t\tfunction eachObj(obj, iterator, context) {\n\t\t  var ret = undefined;\n\t\t  var hasOwn = Object.prototype.hasOwnProperty;\n\t\t  /* eslint prefer-const:0 */ // some weird eslint bug?\n\t\t  for (var key in obj) {\n\t\t    if (hasOwn.call(obj, key)) {\n\t\t      ret = iterator.call(context, obj[key], key, obj);\n\t\t      if (ret === false) {\n\t\t        return ret;\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t  return true;\n\t\t}\n\t\n\t\tfunction eachArry(obj, iterator, context) {\n\t\t  var ret = undefined;\n\t\t  var length = obj.length;\n\t\t  for (var i = 0; i < length; i++) {\n\t\t    ret = iterator.call(context, obj[i], i, obj);\n\t\t    if (ret === false) {\n\t\t      return ret;\n\t\t    }\n\t\t  }\n\t\t  return true;\n\t\t}\n\t\n\t\tfunction isError(obj) {\n\t\t  return obj instanceof Error;\n\t\t}\n\t\n\t\tfunction list(arry, join, finalJoin) {\n\t\t  arry = arrayify(arry);\n\t\t  var copy = arry.slice();\n\t\t  var last = copy.pop();\n\t\t  if (copy.length === 1) {\n\t\t    join = ' ';\n\t\t  }\n\t\t  return copy.join(join) + ('' + (copy.length ? join + finalJoin : '') + last);\n\t\t}\n\t\n\t\tfunction getError(name, location, checkerType) {\n\t\t  if (typeof checkerType === 'function') {\n\t\t    checkerType = checkerType({ short: true });\n\t\t  }\n\t\t  var stringType = typeof checkerType !== 'object' ? checkerType : stringify(checkerType);\n\t\t  return new Error(nAtL(name, location) + ' must be ' + t(stringType));\n\t\t}\n\t\n\t\tfunction nAtL(name, location) {\n\t\t  var tName = t(name || 'value');\n\t\t  var tLocation = !location ? '' : ' at ' + t(location);\n\t\t  return '' + tName + tLocation;\n\t\t}\n\t\n\t\tfunction t(thing) {\n\t\t  return '`' + thing + '`';\n\t\t}\n\t\n\t\tfunction undef(thing) {\n\t\t  return typeof thing === 'undefined';\n\t\t}\n\t\n\t\t/**\n\t\t * This will set up the checker with all of the defaults that most checkers want like required by default and an\n\t\t * optional version\n\t\t *\n\t\t * @param {Function} checker - the checker to setup with properties\n\t\t * @param {Object} properties - properties to add to the checker\n\t\t * @param {boolean} disabled - when set to true, this will set the checker to a no-op function\n\t\t * @returns {Function} checker - the setup checker\n\t\t */\n\t\tfunction setupChecker(checker, properties, disabled) {\n\t\t  /* eslint complexity:[2, 9] */\n\t\t  if (disabled) {\n\t\t    // swap out the checker for its own copy of noop\n\t\t    checker = getNoop();\n\t\t    checker.isNoop = true;\n\t\t  }\n\t\n\t\t  if (typeof checker.type === 'string') {\n\t\t    checker.shortType = checker.type;\n\t\t  }\n\t\n\t\t  // assign all properties given\n\t\t  each(properties, function (prop, name) {\n\t\t    return checker[name] = prop;\n\t\t  });\n\t\n\t\t  if (!checker.displayName) {\n\t\t    checker.displayName = 'apiCheck ' + t(checker.shortType || checker.type || checker.name) + ' type checker';\n\t\t  }\n\t\n\t\t  if (!checker.notRequired) {\n\t\t    checker = getRequiredVersion(checker, disabled);\n\t\t  }\n\t\n\t\t  if (!checker.notNullable) {\n\t\t    addNullable(checker, disabled);\n\t\t  }\n\t\n\t\t  if (!checker.notOptional) {\n\t\t    addOptional(checker, disabled);\n\t\t  }\n\t\n\t\t  return checker;\n\t\t}\n\t\n\t\tfunction getRequiredVersion(checker, disabled) {\n\t\t  var requiredChecker = disabled ? getNoop() : function requiredChecker(val, name, location, obj) {\n\t\t    if (undef(val) && !checker.isOptional) {\n\t\t      var tLocation = location ? ' in ' + t(location) : '';\n\t\t      var type = getCheckerDisplay(checker, { short: true });\n\t\t      var stringType = typeof type !== 'object' ? type : stringify(type);\n\t\t      return new Error('Required ' + t(name) + ' not specified' + tLocation + '. Must be ' + t(stringType));\n\t\t    } else {\n\t\t      return checker(val, name, location, obj);\n\t\t    }\n\t\t  };\n\t\t  copyProps(checker, requiredChecker);\n\t\t  requiredChecker.originalChecker = checker;\n\t\t  return requiredChecker;\n\t\t}\n\t\n\t\tfunction addOptional(checker, disabled) {\n\t\t  var optionalCheck = disabled ? getNoop() : function optionalCheck(val, name, location, obj) {\n\t\t    if (!undef(val)) {\n\t\t      return checker(val, name, location, obj);\n\t\t    }\n\t\t  };\n\t\t  // inherit all properties on the original checker\n\t\t  copyProps(checker, optionalCheck);\n\t\n\t\t  optionalCheck.isOptional = true;\n\t\t  optionalCheck.displayName = checker.displayName + ' (optional)';\n\t\t  optionalCheck.originalChecker = checker;\n\t\n\t\t  // the magic line that allows you to add .optional to the end of the checkers\n\t\t  checker.optional = optionalCheck;\n\t\n\t\t  fixType(checker, checker.optional);\n\t\t}\n\t\n\t\tfunction addNullable(checker, disabled) {\n\t\t  var nullableCheck = disabled ? getNoop() : function nullableCheck(val, name, location, obj) {\n\t\t    if (val !== null) {\n\t\t      return checker(val, name, location, obj);\n\t\t    }\n\t\t  };\n\t\t  // inherit all properties on the original checker\n\t\t  copyProps(checker, nullableCheck);\n\t\n\t\t  nullableCheck.isNullable = true;\n\t\t  nullableCheck.displayName = checker.displayName + ' (nullable)';\n\t\t  nullableCheck.originalChecker = checker;\n\t\n\t\t  // the magic line that allows you to add .nullable to the end of the checkers\n\t\t  checker.nullable = nullableCheck;\n\t\n\t\t  fixType(checker, checker.nullable);\n\t\t  if (!checker.notOptional) {\n\t\t    addOptional(checker.nullable, disabled);\n\t\t  }\n\t\t}\n\t\n\t\tfunction fixType(checker, checkerCopy) {\n\t\t  // fix type, because it's not a straight copy...\n\t\t  // the reason is we need to specify type.__apiCheckData.optional as true for the terse/verbose option.\n\t\t  // we also want to add \"(optional)\" to the types with a string\n\t\t  if (typeof checkerCopy.type === 'object') {\n\t\t    checkerCopy.type = copy(checkerCopy.type); // make our own copy of this\n\t\t  } else if (typeof checkerCopy.type === 'function') {\n\t\t      checkerCopy.type = function () {\n\t\t        return checker.type.apply(checker, arguments);\n\t\t      };\n\t\t    } else {\n\t\t      checkerCopy.type += ' (optional)';\n\t\t      return;\n\t\t    }\n\t\t  checkerCopy.type.__apiCheckData = copy(checker.type.__apiCheckData) || {}; // and this\n\t\t  checkerCopy.type.__apiCheckData.optional = true;\n\t\t}\n\t\n\t\t// UTILS\n\t\n\t\tfunction copyProps(src, dest) {\n\t\t  each(Object.keys(src), function (key) {\n\t\t    return dest[key] = src[key];\n\t\t  });\n\t\t}\n\t\n\t\tfunction noop() {}\n\t\n\t\tfunction getNoop() {\n\t\t  /* eslint no-shadow:0 */\n\t\t  /* istanbul ignore next */\n\t\t  return function noop() {};\n\t\t}\n\t\n\t/***/ },\n\t/* 4 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\t'use strict';\n\t\n\t\tvar stringify = __webpack_require__(2);\n\t\n\t\tvar _require = __webpack_require__(3);\n\t\n\t\tvar typeOf = _require.typeOf;\n\t\tvar each = _require.each;\n\t\tvar copy = _require.copy;\n\t\tvar getCheckerDisplay = _require.getCheckerDisplay;\n\t\tvar isError = _require.isError;\n\t\tvar arrayify = _require.arrayify;\n\t\tvar list = _require.list;\n\t\tvar getError = _require.getError;\n\t\tvar nAtL = _require.nAtL;\n\t\tvar t = _require.t;\n\t\tvar checkerHelpers = _require.checkerHelpers;\n\t\tvar undef = _require.undef;\n\t\tvar setupChecker = checkerHelpers.setupChecker;\n\t\n\t\tvar checkers = module.exports = getCheckers();\n\t\tmodule.exports.getCheckers = getCheckers;\n\t\n\t\tfunction getCheckers(disabled) {\n\t\t  return {\n\t\t    array: typeOfCheckGetter('Array'),\n\t\t    bool: typeOfCheckGetter('Boolean'),\n\t\t    number: typeOfCheckGetter('Number'),\n\t\t    string: typeOfCheckGetter('String'),\n\t\t    func: funcCheckGetter(),\n\t\t    object: objectCheckGetter(),\n\t\n\t\t    emptyObject: emptyObjectCheckGetter(),\n\t\n\t\t    instanceOf: instanceCheckGetter,\n\t\t    oneOf: oneOfCheckGetter,\n\t\t    oneOfType: oneOfTypeCheckGetter,\n\t\n\t\t    arrayOf: arrayOfCheckGetter,\n\t\t    objectOf: objectOfCheckGetter,\n\t\t    typeOrArrayOf: typeOrArrayOfCheckGetter,\n\t\n\t\t    range: rangeCheckGetter,\n\t\t    lessThan: lessThanCheckGetter,\n\t\t    greaterThan: greaterThanCheckGetter,\n\t\n\t\t    shape: getShapeCheckGetter(),\n\t\t    args: argumentsCheckerGetter(),\n\t\n\t\t    any: anyCheckGetter(),\n\t\t    'null': nullCheckGetter()\n\t\n\t\t  };\n\t\n\t\t  function typeOfCheckGetter(type) {\n\t\t    var lType = type.toLowerCase();\n\t\t    return setupChecker(function typeOfCheckerDefinition(val, name, location) {\n\t\t      if (typeOf(val) !== lType) {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\t  }\n\t\n\t\t  function funcCheckGetter() {\n\t\t    var type = 'Function';\n\t\t    var functionChecker = setupChecker(function functionCheckerDefinition(val, name, location) {\n\t\t      if (typeOf(val) !== 'function') {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\n\t\t    functionChecker.withProperties = function getWithPropertiesChecker(properties) {\n\t\t      var apiError = checkers.objectOf(checkers.func)(properties, 'properties', 'apiCheck.func.withProperties');\n\t\t      if (isError(apiError)) {\n\t\t        throw apiError;\n\t\t      }\n\t\t      var shapeChecker = checkers.shape(properties, true);\n\t\t      shapeChecker.type.__apiCheckData.type = 'func.withProperties';\n\t\n\t\t      return setupChecker(function functionWithPropertiesChecker(val, name, location) {\n\t\t        var notFunction = checkers.func(val, name, location);\n\t\t        if (isError(notFunction)) {\n\t\t          return notFunction;\n\t\t        }\n\t\t        return shapeChecker(val, name, location);\n\t\t      }, { type: shapeChecker.type, shortType: 'func.withProperties' }, disabled);\n\t\t    };\n\t\t    return functionChecker;\n\t\t  }\n\t\n\t\t  function objectCheckGetter() {\n\t\t    var type = 'Object';\n\t\t    var nullType = 'Object (null ok)';\n\t\t    var objectNullOkChecker = setupChecker(function objectNullOkCheckerDefinition(val, name, location) {\n\t\t      if (typeOf(val) !== 'object') {\n\t\t        return getError(name, location, nullType);\n\t\t      }\n\t\t    }, { type: nullType }, disabled);\n\t\n\t\t    var objectChecker = setupChecker(function objectCheckerDefinition(val, name, location) {\n\t\t      if (val === null || isError(objectNullOkChecker(val, name, location))) {\n\t\t        return getError(name, location, objectChecker.type);\n\t\t      }\n\t\t    }, { type: type, nullOk: objectNullOkChecker }, disabled);\n\t\n\t\t    return objectChecker;\n\t\t  }\n\t\n\t\t  function instanceCheckGetter(classToCheck) {\n\t\t    return setupChecker(function instanceCheckerDefinition(val, name, location) {\n\t\t      if (!(val instanceof classToCheck)) {\n\t\t        return getError(name, location, classToCheck.name);\n\t\t      }\n\t\t    }, { type: classToCheck.name }, disabled);\n\t\t  }\n\t\n\t\t  function oneOfCheckGetter(enums) {\n\t\t    var type = {\n\t\t      __apiCheckData: { optional: false, type: 'enum' },\n\t\t      'enum': enums\n\t\t    };\n\t\t    var shortType = 'oneOf[' + enums.map(function (enm) {\n\t\t      return stringify(enm);\n\t\t    }).join(', ') + ']';\n\t\t    return setupChecker(function oneOfCheckerDefinition(val, name, location) {\n\t\t      if (!enums.some(function (enm) {\n\t\t        return enm === val;\n\t\t      })) {\n\t\t        return getError(name, location, shortType);\n\t\t      }\n\t\t    }, { type: type, shortType: shortType }, disabled);\n\t\t  }\n\t\n\t\t  function oneOfTypeCheckGetter(typeCheckers) {\n\t\t    var checkersDisplay = typeCheckers.map(function (checker) {\n\t\t      return getCheckerDisplay(checker, { short: true });\n\t\t    });\n\t\t    var shortType = 'oneOfType[' + checkersDisplay.join(', ') + ']';\n\t\t    function type(options) {\n\t\t      if (options && options.short) {\n\t\t        return shortType;\n\t\t      }\n\t\t      return typeCheckers.map(function (checker) {\n\t\t        return getCheckerDisplay(checker, options);\n\t\t      });\n\t\t    }\n\t\t    type.__apiCheckData = { optional: false, type: 'oneOfType' };\n\t\t    return setupChecker(function oneOfTypeCheckerDefinition(val, name, location) {\n\t\t      if (!typeCheckers.some(function (checker) {\n\t\t        return !isError(checker(val, name, location));\n\t\t      })) {\n\t\t        return getError(name, location, shortType);\n\t\t      }\n\t\t    }, { type: type, shortType: shortType }, disabled);\n\t\t  }\n\t\n\t\t  function arrayOfCheckGetter(checker) {\n\t\t    var shortCheckerDisplay = getCheckerDisplay(checker, { short: true });\n\t\t    var shortType = 'arrayOf[' + shortCheckerDisplay + ']';\n\t\n\t\t    function type(options) {\n\t\t      if (options && options.short) {\n\t\t        return shortType;\n\t\t      }\n\t\t      return getCheckerDisplay(checker, options);\n\t\t    }\n\t\t    type.__apiCheckData = { optional: false, type: 'arrayOf' };\n\t\n\t\t    return setupChecker(function arrayOfCheckerDefinition(val, name, location) {\n\t\t      if (isError(checkers.array(val)) || !val.every(function (item) {\n\t\t        return !isError(checker(item));\n\t\t      })) {\n\t\t        return getError(name, location, shortType);\n\t\t      }\n\t\t    }, { type: type, shortType: shortType }, disabled);\n\t\t  }\n\t\n\t\t  function objectOfCheckGetter(checker) {\n\t\t    var checkerDisplay = getCheckerDisplay(checker, { short: true });\n\t\t    var shortType = 'objectOf[' + checkerDisplay + ']';\n\t\n\t\t    function type(options) {\n\t\t      if (options && options.short) {\n\t\t        return shortType;\n\t\t      }\n\t\t      return getCheckerDisplay(checker, options);\n\t\t    }\n\t\t    type.__apiCheckData = { optional: false, type: 'objectOf' };\n\t\n\t\t    return setupChecker(function objectOfCheckerDefinition(val, name, location) {\n\t\t      var notObject = checkers.object(val, name, location);\n\t\t      if (isError(notObject)) {\n\t\t        return notObject;\n\t\t      }\n\t\t      var allTypesSuccess = each(val, function (item, key) {\n\t\t        if (isError(checker(item, key, name))) {\n\t\t          return false;\n\t\t        }\n\t\t      });\n\t\t      if (!allTypesSuccess) {\n\t\t        return getError(name, location, shortType);\n\t\t      }\n\t\t    }, { type: type, shortType: shortType }, disabled);\n\t\t  }\n\t\n\t\t  function typeOrArrayOfCheckGetter(checker) {\n\t\t    var checkerDisplay = getCheckerDisplay(checker, { short: true });\n\t\t    var shortType = 'typeOrArrayOf[' + checkerDisplay + ']';\n\t\n\t\t    function type(options) {\n\t\t      if (options && options.short) {\n\t\t        return shortType;\n\t\t      }\n\t\t      return getCheckerDisplay(checker, options);\n\t\t    }\n\t\n\t\t    type.__apiCheckData = { optional: false, type: 'typeOrArrayOf' };\n\t\t    return setupChecker(function typeOrArrayOfDefinition(val, name, location, obj) {\n\t\t      if (isError(checkers.oneOfType([checker, checkers.arrayOf(checker)])(val, name, location, obj))) {\n\t\t        return getError(name, location, shortType);\n\t\t      }\n\t\t    }, { type: type, shortType: shortType }, disabled);\n\t\t  }\n\t\n\t\t  function getShapeCheckGetter() {\n\t\t    function shapeCheckGetter(shape, nonObject) {\n\t\t      var shapeTypes = {};\n\t\t      each(shape, function (checker, prop) {\n\t\t        shapeTypes[prop] = getCheckerDisplay(checker);\n\t\t      });\n\t\t      function type() {\n\t\t        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t\t        var ret = {};\n\t\t        var terse = options.terse;\n\t\t        var obj = options.obj;\n\t\t        var addHelpers = options.addHelpers;\n\t\n\t\t        var parentRequired = options.required;\n\t\t        each(shape, function (checker, prop) {\n\t\t          /* eslint complexity:[2, 6] */\n\t\t          var specified = obj && obj.hasOwnProperty(prop);\n\t\t          var required = undef(parentRequired) ? !checker.isOptional : parentRequired;\n\t\t          if (!terse || (specified || !checker.isOptional)) {\n\t\t            ret[prop] = getCheckerDisplay(checker, { terse: terse, obj: obj && obj[prop], required: required, addHelpers: addHelpers });\n\t\t          }\n\t\t          if (addHelpers) {\n\t\t            modifyTypeDisplayToHelpOut(ret, prop, specified, checker, required);\n\t\t          }\n\t\t        });\n\t\t        return ret;\n\t\n\t\t        function modifyTypeDisplayToHelpOut(theRet, prop, specified, checker, required) {\n\t\t          if (!specified && required && !checker.isOptional) {\n\t\t            var item = 'ITEM';\n\t\t            if (checker.type && checker.type.__apiCheckData) {\n\t\t              item = checker.type.__apiCheckData.type.toUpperCase();\n\t\t            }\n\t\t            addHelper('missing', 'MISSING THIS ' + item, ' <-- YOU ARE MISSING THIS');\n\t\t          } else if (specified) {\n\t\t            var error = checker(obj[prop], prop, null, obj);\n\t\t            if (isError(error)) {\n\t\t              addHelper('error', 'THIS IS THE PROBLEM: ' + error.message, ' <-- THIS IS THE PROBLEM: ' + error.message);\n\t\t            }\n\t\t          }\n\t\n\t\t          function addHelper(property, objectMessage, stringMessage) {\n\t\t            if (typeof theRet[prop] === 'string') {\n\t\t              theRet[prop] += stringMessage;\n\t\t            } else {\n\t\t              theRet[prop].__apiCheckData[property] = objectMessage;\n\t\t            }\n\t\t          }\n\t\t        }\n\t\t      }\n\t\n\t\t      type.__apiCheckData = { strict: false, optional: false, type: 'shape' };\n\t\t      var shapeChecker = setupChecker(function shapeCheckerDefinition(val, name, location) {\n\t\t        /* eslint complexity:[2, 6] */\n\t\t        var isObject = !nonObject && checkers.object(val, name, location);\n\t\t        if (isError(isObject)) {\n\t\t          return isObject;\n\t\t        }\n\t\t        var shapePropError = undefined;\n\t\t        location = location ? location + (name ? '/' : '') : '';\n\t\t        name = name || '';\n\t\t        each(shape, function (checker, prop) {\n\t\t          if (val.hasOwnProperty(prop) || !checker.isOptional) {\n\t\t            shapePropError = checker(val[prop], prop, '' + location + name, val);\n\t\t            return !isError(shapePropError);\n\t\t          }\n\t\t        });\n\t\t        if (isError(shapePropError)) {\n\t\t          return shapePropError;\n\t\t        }\n\t\t      }, { type: type, shortType: 'shape' }, disabled);\n\t\n\t\t      function strictType() {\n\t\t        return type.apply(undefined, arguments);\n\t\t      }\n\t\n\t\t      strictType.__apiCheckData = copy(shapeChecker.type.__apiCheckData);\n\t\t      strictType.__apiCheckData.strict = true;\n\t\t      shapeChecker.strict = setupChecker(function strictShapeCheckerDefinition(val, name, location) {\n\t\t        var shapeError = shapeChecker(val, name, location);\n\t\t        if (isError(shapeError)) {\n\t\t          return shapeError;\n\t\t        }\n\t\t        var allowedProperties = Object.keys(shape);\n\t\t        var extraProps = Object.keys(val).filter(function (prop) {\n\t\t          return allowedProperties.indexOf(prop) === -1;\n\t\t        });\n\t\t        if (extraProps.length) {\n\t\t          return new Error(nAtL(name, location) + ' cannot have extra properties: ' + t(extraProps.join('`, `')) + '.' + ('It is limited to ' + t(allowedProperties.join('`, `'))));\n\t\t        }\n\t\t      }, { type: strictType, shortType: 'strict shape' }, disabled);\n\t\n\t\t      return shapeChecker;\n\t\t    }\n\t\n\t\t    shapeCheckGetter.ifNot = function ifNot(otherProps, propChecker) {\n\t\t      if (!Array.isArray(otherProps)) {\n\t\t        otherProps = [otherProps];\n\t\t      }\n\t\t      var description = undefined;\n\t\t      if (otherProps.length === 1) {\n\t\t        description = 'specified only if ' + otherProps[0] + ' is not specified';\n\t\t      } else {\n\t\t        description = 'specified only if none of the following are specified: [' + list(otherProps, ', ', 'and ') + ']';\n\t\t      }\n\t\t      var shortType = 'ifNot[' + otherProps.join(', ') + ']';\n\t\t      var type = getTypeForShapeChild(propChecker, description, shortType);\n\t\t      return setupChecker(function ifNotChecker(prop, propName, location, obj) {\n\t\t        var propExists = obj && obj.hasOwnProperty(propName);\n\t\t        var otherPropsExist = otherProps.some(function (otherProp) {\n\t\t          return obj && obj.hasOwnProperty(otherProp);\n\t\t        });\n\t\t        if (propExists === otherPropsExist) {\n\t\t          return getError(propName, location, type);\n\t\t        } else if (propExists) {\n\t\t          return propChecker(prop, propName, location, obj);\n\t\t        }\n\t\t      }, { notRequired: true, type: type, shortType: shortType }, disabled);\n\t\t    };\n\t\n\t\t    shapeCheckGetter.onlyIf = function onlyIf(otherProps, propChecker) {\n\t\t      otherProps = arrayify(otherProps);\n\t\t      var description = undefined;\n\t\t      if (otherProps.length === 1) {\n\t\t        description = 'specified only if ' + otherProps[0] + ' is also specified';\n\t\t      } else {\n\t\t        description = 'specified only if all of the following are specified: [' + list(otherProps, ', ', 'and ') + ']';\n\t\t      }\n\t\t      var shortType = 'onlyIf[' + otherProps.join(', ') + ']';\n\t\t      var type = getTypeForShapeChild(propChecker, description, shortType);\n\t\t      return setupChecker(function onlyIfCheckerDefinition(prop, propName, location, obj) {\n\t\t        var othersPresent = otherProps.every(function (property) {\n\t\t          return obj.hasOwnProperty(property);\n\t\t        });\n\t\t        if (!othersPresent) {\n\t\t          return getError(propName, location, type);\n\t\t        } else {\n\t\t          return propChecker(prop, propName, location, obj);\n\t\t        }\n\t\t      }, { type: type, shortType: shortType }, disabled);\n\t\t    };\n\t\n\t\t    shapeCheckGetter.requiredIfNot = function shapeRequiredIfNot(otherProps, propChecker) {\n\t\t      if (!Array.isArray(otherProps)) {\n\t\t        otherProps = [otherProps];\n\t\t      }\n\t\t      return getRequiredIfNotChecker(false, otherProps, propChecker);\n\t\t    };\n\t\n\t\t    shapeCheckGetter.requiredIfNot.all = function shapeRequiredIfNotAll(otherProps, propChecker) {\n\t\t      if (!Array.isArray(otherProps)) {\n\t\t        throw new Error('requiredIfNot.all must be passed an array');\n\t\t      }\n\t\t      return getRequiredIfNotChecker(true, otherProps, propChecker);\n\t\t    };\n\t\n\t\t    function getRequiredIfNotChecker(all, otherProps, propChecker) {\n\t\t      var props = t(otherProps.join(', '));\n\t\t      var ifProps = 'if ' + (all ? 'all of' : 'at least one of');\n\t\t      var description = 'specified ' + ifProps + ' these are not specified: ' + props + ' (otherwise it\\'s optional)';\n\t\t      var shortType = 'requiredIfNot' + (all ? '.all' : '') + '[' + otherProps.join(', ') + '}]';\n\t\t      var type = getTypeForShapeChild(propChecker, description, shortType);\n\t\t      return setupChecker(function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t\t        var propExists = obj && obj.hasOwnProperty(propName);\n\t\t        var iteration = all ? 'every' : 'some';\n\t\t        var otherPropsExist = otherProps[iteration](function (otherProp) {\n\t\t          return obj && obj.hasOwnProperty(otherProp);\n\t\t        });\n\t\t        if (!otherPropsExist && !propExists) {\n\t\t          return getError(propName, location, type);\n\t\t        } else if (propExists) {\n\t\t          return propChecker(prop, propName, location, obj);\n\t\t        }\n\t\t      }, { type: type, notRequired: true }, disabled);\n\t\t    }\n\t\n\t\t    return shapeCheckGetter;\n\t\n\t\t    function getTypeForShapeChild(propChecker, description, shortType) {\n\t\t      function type(options) {\n\t\t        if (options && options.short) {\n\t\t          return shortType;\n\t\t        }\n\t\t        return getCheckerDisplay(propChecker);\n\t\t      }\n\t\t      type.__apiCheckData = { optional: false, type: 'ifNot', description: description };\n\t\t      return type;\n\t\t    }\n\t\t  }\n\t\n\t\t  function argumentsCheckerGetter() {\n\t\t    var type = 'function arguments';\n\t\t    return setupChecker(function argsCheckerDefinition(val, name, location) {\n\t\t      if (Array.isArray(val) || isError(checkers.object(val)) || isError(checkers.number(val.length))) {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\t  }\n\t\n\t\t  function anyCheckGetter() {\n\t\t    return setupChecker(function anyCheckerDefinition() {\n\t\t      // don't do anything\n\t\t    }, { type: 'any' }, disabled);\n\t\t  }\n\t\n\t\t  function nullCheckGetter() {\n\t\t    var type = 'null';\n\t\t    return setupChecker(function nullChecker(val, name, location) {\n\t\t      if (val !== null) {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\t  }\n\t\n\t\t  function rangeCheckGetter(min, max) {\n\t\t    var type = 'Range (' + min + ' - ' + max + ')';\n\t\t    return setupChecker(function rangeChecker(val, name, location) {\n\t\t      if (typeof val !== 'number' || val < min || val > max) {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\t  }\n\t\n\t\t  function lessThanCheckGetter(min) {\n\t\t    var type = 'lessThan[' + min + ']';\n\t\t    return setupChecker(function lessThanChecker(val, name, location) {\n\t\t      if (typeof val !== 'number' || val > min) {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\t  }\n\t\n\t\t  function greaterThanCheckGetter(max) {\n\t\t    var type = 'greaterThan[' + max + ']';\n\t\t    return setupChecker(function greaterThanChecker(val, name, location) {\n\t\t      if (typeof val !== 'number' || val < max) {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\t  }\n\t\n\t\t  function emptyObjectCheckGetter() {\n\t\t    var type = 'empty object';\n\t\t    return setupChecker(function emptyObjectChecker(val, name, location) {\n\t\t      if (typeOf(val) !== 'object' || val === null || Object.keys(val).length) {\n\t\t        return getError(name, location, type);\n\t\t      }\n\t\t    }, { type: type }, disabled);\n\t\t  }\n\t\t}\n\t\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _mdThemeManipulator = __webpack_require__(13);\n\t\n\tvar _mdThemeManipulator2 = _interopRequireDefault(_mdThemeManipulator);\n\t\n\texports['default'] = [_mdThemeManipulator2['default']];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t\n\t    function addIfNotPresent(nodes, attr, val) {\n\t        angular.forEach(nodes, function (node) {\n\t            if (!node.getAttribute(attr)) {\n\t                node.setAttribute(attr, val);\n\t            }\n\t        });\n\t    }\n\t\n\t    function getNgModelNodes(node) {\n\t        var query = \"[ng-model], [data-ng-model]\";\n\t\n\t        return node.querySelectorAll(query);\n\t    }\n\t\n\t    formlyConfigProvider.templateManipulators.preWrapper.push(function (template, options) {\n\t        if (angular.isDefined(options.templateOptions.theme)) {\n\t            var node = document.createElement('div');\n\t            var skip = options.extras && options.extras.skipNgModelAttrsManipulator;\n\t\n\t            if (skip === true) {\n\t                return template;\n\t            }\n\t            node.innerHTML = template;\n\t            var modelNodes = getNgModelNodes(node);\n\t\n\t            if (!modelNodes || !modelNodes.length) {\n\t                return template;\n\t            }\n\t\n\t            addIfNotPresent(modelNodes, 'md-theme', options.templateOptions.theme);\n\t\n\t            return node.innerHTML;\n\t        }\n\t        return template;\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _inputContainerInputContainer = __webpack_require__(15);\n\t\n\tvar _inputContainerInputContainer2 = _interopRequireDefault(_inputContainerInputContainer);\n\t\n\tvar _labelLabel = __webpack_require__(16);\n\t\n\tvar _labelLabel2 = _interopRequireDefault(_labelLabel);\n\t\n\tvar _messagesMessages = __webpack_require__(17);\n\t\n\tvar _messagesMessages2 = _interopRequireDefault(_messagesMessages);\n\t\n\texports['default'] = [_inputContainerInputContainer2['default'], _labelLabel2['default'], _messagesMessages2['default']];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setWrapper({\n\t        name: 'inputContainer',\n\t        template: '\\n        <md-input-container>\\n            <formly-transclude></formly-transclude>\\n        </md-input-container>\\n        '\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setWrapper({\n\t        name: 'label',\n\t        template: '\\n        <label for=\"{{id}}\">{{to.label}}{{to.required ? \\'*\\' : \\'\\'}}</label>\\n        <formly-transclude></formly-transclude>',\n\t        apiCheck: function apiCheck(check) {\n\t            return {\n\t                templateOptions: {\n\t                    label: check.string\n\t                }\n\t            };\n\t        }\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setWrapper({\n\t        name: 'messages',\n\t        template: '\\n        <formly-transclude></formly-transclude>\\n            <div ng-messages=\"fc.$error\">\\n                <div ng-repeat=\"(name, message) in ::options.validation.messages\" ng-message-exp=\"name\">\\n                {{message(fc.$viewValue, fc.$modelValue, this)}}\\n                </div>\\n            </div>\\n        '\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _checkboxCheckbox = __webpack_require__(19);\n\t\n\tvar _checkboxCheckbox2 = _interopRequireDefault(_checkboxCheckbox);\n\t\n\tvar _chipsChips = __webpack_require__(20);\n\t\n\tvar _chipsChips2 = _interopRequireDefault(_chipsChips);\n\t\n\tvar _datepickerDatepicker = __webpack_require__(21);\n\t\n\tvar _datepickerDatepicker2 = _interopRequireDefault(_datepickerDatepicker);\n\t\n\tvar _inputInput = __webpack_require__(22);\n\t\n\tvar _inputInput2 = _interopRequireDefault(_inputInput);\n\t\n\tvar _radioRadio = __webpack_require__(23);\n\t\n\tvar _radioRadio2 = _interopRequireDefault(_radioRadio);\n\t\n\tvar _selectSelect = __webpack_require__(24);\n\t\n\tvar _selectSelect2 = _interopRequireDefault(_selectSelect);\n\t\n\tvar _sliderSlider = __webpack_require__(25);\n\t\n\tvar _sliderSlider2 = _interopRequireDefault(_sliderSlider);\n\t\n\tvar _switchSwitch = __webpack_require__(26);\n\t\n\tvar _switchSwitch2 = _interopRequireDefault(_switchSwitch);\n\t\n\tvar _textareaTextarea = __webpack_require__(27);\n\t\n\tvar _textareaTextarea2 = _interopRequireDefault(_textareaTextarea);\n\t\n\texports['default'] = [_checkboxCheckbox2['default'], _chipsChips2['default'], _datepickerDatepicker2['default'], _inputInput2['default'], _radioRadio2['default'], _selectSelect2['default'], _sliderSlider2['default'], _switchSwitch2['default'], _textareaTextarea2['default']];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'checkbox',\n\t        template: '\\n            <div>\\n                <md-checkbox ng-model=\"model[options.key]\">\\n                    {{to.label}}\\n                </md-checkbox>\\n            </div>'\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'chips',\n\t        template: '<md-chips ng-model=\"model[options.key]\"></md-chips>',\n\t        defaultOptions: {\n\t            defaultValue: [],\n\t            ngModelAttrs: {\n\t                placeholder: { attribute: 'placeholder' },\n\t                secondaryPlaceholder: { attribute: 'secondary-placeholder' },\n\t                deleteButtonLabel: { attribute: 'delete-button-label' },\n\t                deleteHint: { attribute: 'delete-hint' }\n\t            }\n\t        },\n\t        apiCheck: function apiCheck(check) {\n\t            return {\n\t                templateOptions: {\n\t                    placeholder: check.string.optional,\n\t                    secondaryPlaceholder: check.string.optional,\n\t                    deleteButtonLabel: check.string.optional,\n\t                    deleteHint: check.string.optional\n\t                }\n\t            };\n\t        }\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'datepicker',\n\t        template: '\\n        <div>\\n            <md-datepicker ng-model=\"model[options.key]\"></md-datepicker>\\n        </div>',\n\t        wrapper: ['messages'],\n\t        defaultOptions: {\n\t            ngModelAttrs: {\n\t                placeholder: { attribute: 'md-placeholder' }\n\t            }\n\t        },\n\t        apiCheck: function apiCheck(check) {\n\t            return {\n\t                templateOptions: {\n\t                    placeholder: check.string.optional,\n\t                    minDate: check.instanceOf(Date).optional,\n\t                    maxDate: check.instanceOf(Date).optional,\n\t                    filterDate: check.func.optional\n\t                }\n\t            };\n\t        }\n\t    });\n\t\n\t    formlyConfigProvider.templateManipulators.preWrapper.push(function (template, options) {\n\t        if (angular.isDefined(options.templateOptions.minDate) || angular.isDefined(options.templateOptions.maxDate) || angular.isDefined(options.templateOptions.filterDate)) {\n\t\n\t            var dateConfig = {\n\t                min: options.templateOptions.minDate || undefined,\n\t                max: options.templateOptions.maxDate || undefined,\n\t                filter: options.templateOptions.filterDate || undefined\n\t            };\n\t            var node = document.createElement('div');\n\t\n\t            node.innerHTML = template;\n\t            var datepickerNode = node.querySelector('md-datepicker');\n\t\n\t            if (datepickerNode) {\n\t                if (dateConfig.min) {\n\t                    datepickerNode.setAttribute('md-min-date', 'to.minDate');\n\t                }\n\t                if (dateConfig.max) {\n\t                    datepickerNode.setAttribute('md-max-date', 'to.maxDate');\n\t                }\n\t                if (dateConfig.filter) {\n\t                    datepickerNode.setAttribute('md-date-filter', 'to.filterDate');\n\t                }\n\t            }\n\t            return node.innerHTML;\n\t        }\n\t\n\t        return template;\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'input',\n\t        template: '<input ng-model=\"model[options.key]\">',\n\t        wrapper: ['label', 'messages', 'inputContainer'],\n\t        defaultOptions: {\n\t            ngModelAttrs: {\n\t                mdMaxlength: {\n\t                    bound: 'md-maxlength'\n\t                }\n\t            }\n\t        }\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'radio',\n\t        template: '\\n        <md-radio-group ng-model=\"model[options.key]\">\\n            <md-radio-button\\n                ng-repeat=\"option in to.options\"\\n                ng-value=\"option[to.valueProp || \\'value\\']\">\\n                {{option[to.labelProp || \\'name\\']}}\\n            </md-radio-button>\\n        </md-radio-group>\\n        ',\n\t        apiCheck: function apiCheck(check) {\n\t            return {\n\t                templateOptions: {\n\t                    options: check.arrayOf(check.object),\n\t                    labelProp: check.string.optional,\n\t                    valueProp: check.string.optional\n\t                }\n\t            };\n\t        }\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'select',\n\t        template: '\\n        <md-select ng-model=\"model[options.key]\">\\n    <md-option ng-repeat=\"option in to.options\" ng-value=\"option[to.valueProp || \\'value\\']\">\\n        {{ option[to.labelProp || \\'name\\'] }}\\n    </md-option>\\n</md-select>\\n        ',\n\t        wrapper: ['label', 'messages', 'inputContainer'],\n\t        defaultOptions: {\n\t            ngModelAttrs: {\n\t                multiple: { bound: 'multiple' }\n\t            }\n\t        },\n\t        apiCheck: function apiCheck(check) {\n\t            return {\n\t                templateOptions: {\n\t                    options: check.arrayOf(check.object),\n\t                    multiple: check.bool.optional,\n\t                    labelProp: check.string.optional,\n\t                    valueProp: check.string.optional\n\t                }\n\t            };\n\t        }\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'slider',\n\t        template: '<md-slider ng-model=\"model[options.key]\"></md-slider>',\n\t        defaultOptions: {\n\t            ngModelAttrs: {\n\t                min: {\n\t                    bound: 'min',\n\t                    attribute: 'min'\n\t                },\n\t                max: {\n\t                    bound: 'max',\n\t                    attribute: 'max'\n\t                },\n\t                step: {\n\t                    bound: 'step',\n\t                    attribute: 'step'\n\t                },\n\t                discrete: {\n\t                    bound: 'md-discrete'\n\t                }\n\t            }\n\t        },\n\t        apiCheck: function apiCheck(check) {\n\t            return {\n\t                templateOptions: {\n\t                    min: check.number.optional,\n\t                    max: check.number.optional,\n\t                    step: check.number.optional,\n\t                    discrete: check.bool.optional\n\t                }\n\t            };\n\t        }\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'switch',\n\t        template: '<md-switch ng-model=\"model[options.key]\">{{to.label}}</md-switch>'\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function (formlyConfigProvider) {\n\t    formlyConfigProvider.setType({\n\t        name: 'textarea',\n\t        template: '<textarea ng-model=\"model[options.key]\"></textarea>',\n\t        wrapper: ['label', 'messages', 'inputContainer'],\n\t        defaultOptions: {\n\t            ngModelAttrs: {\n\t                rows: { attribute: 'rows' },\n\t                cols: { attribute: 'cols' }\n\t            }\n\t        },\n\t        apiCheck: function apiCheck(check) {\n\t            return {\n\t                templateOptions: {\n\t                    rows: check.number.optional,\n\t                    cols: check.number.optional\n\t                }\n\t            };\n\t        }\n\t    });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dist/formly-material.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 161ee6383ff177c1dfc7\n **/","import angular from 'angular';\r\nimport ngMessages from 'angular-messages';\r\nimport ngMaterial from 'angular-material';\r\nimport formly from 'angular-formly';\r\n\r\nimport runs from './runs';\r\nimport wrappers from './wrappers';\r\nimport types from './types';\r\n\r\nconst ngModuleName = 'formlyMaterial';\r\n\r\nangular.module(ngModuleName, [\r\n        'ngMessages',\r\n        'ngMaterial',\r\n        'formly'\r\n    ])\r\n    .config(['formlyConfigProvider', (formlyConfigProvider) => {\r\n        const configs = [runs, wrappers, types];\r\n\r\n        configs.forEach((config) => {\r\n            let i = 0;\r\n            for (; i < config.length; i++) {\r\n                config[i](formlyConfigProvider);\r\n            }\r\n        });\r\n    }]);\r\n\r\nexport default ngModuleName;\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/index.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 1\n ** module chunks = 0\n **/","require('./angular-messages');\nmodule.exports = 'ngMessages';\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-messages/index.js\n ** module id = 2\n ** module chunks = 0\n **/","/**\n * @license AngularJS v1.4.8\n * (c) 2010-2015 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* jshint ignore:start */\n// this code is in the core, but not in angular-messages.js\nvar isArray = angular.isArray;\nvar forEach = angular.forEach;\nvar isString = angular.isString;\nvar jqLite = angular.element;\n/* jshint ignore:end */\n\n/**\n * @ngdoc module\n * @name ngMessages\n * @description\n *\n * The `ngMessages` module provides enhanced support for displaying messages within templates\n * (typically within forms or when rendering message objects that return key/value data).\n * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to\n * show and hide error messages specific to the state of an input field, the `ngMessages` and\n * `ngMessage` directives are designed to handle the complexity, inheritance and priority\n * sequencing based on the order of how the messages are defined in the template.\n *\n * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`\n * `ngMessage` and `ngMessageExp` directives.\n *\n * # Usage\n * The `ngMessages` directive listens on a key/value collection which is set on the ngMessages attribute.\n * Since the {@link ngModel ngModel} directive exposes an `$error` object, this error object can be\n * used with `ngMessages` to display control error messages in an easier way than with just regular angular\n * template directives.\n *\n * ```html\n * <form name=\"myForm\">\n *   <label>\n *     Enter text:\n *     <input type=\"text\" ng-model=\"field\" name=\"myField\" required minlength=\"5\" />\n *   </label>\n *   <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n *     <div ng-message=\"required\">You did not enter a field</div>\n *     <div ng-message=\"minlength, maxlength\">\n *       Your email must be between 5 and 100 characters long\n *     </div>\n *   </div>\n * </form>\n * ```\n *\n * Now whatever key/value entries are present within the provided object (in this case `$error`) then\n * the ngMessages directive will render the inner first ngMessage directive (depending if the key values\n * match the attribute value present on each ngMessage directive). In other words, if your errors\n * object contains the following data:\n *\n * ```javascript\n * <!-- keep in mind that ngModel automatically sets these error flags -->\n * myField.$error = { minlength : true, required : true };\n * ```\n *\n * Then the `required` message will be displayed first. When required is false then the `minlength` message\n * will be displayed right after (since these messages are ordered this way in the template HTML code).\n * The prioritization of each message is determined by what order they're present in the DOM.\n * Therefore, instead of having custom JavaScript code determine the priority of what errors are\n * present before others, the presentation of the errors are handled within the template.\n *\n * By default, ngMessages will only display one error at a time. However, if you wish to display all\n * messages then the `ng-messages-multiple` attribute flag can be used on the element containing the\n * ngMessages directive to make this happen.\n *\n * ```html\n * <!-- attribute-style usage -->\n * <div ng-messages=\"myForm.myField.$error\" ng-messages-multiple>...</div>\n *\n * <!-- element-style usage -->\n * <ng-messages for=\"myForm.myField.$error\" multiple>...</ng-messages>\n * ```\n *\n * ## Reusing and Overriding Messages\n * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline\n * template. This allows for generic collection of messages to be reused across multiple parts of an\n * application.\n *\n * ```html\n * <script type=\"text/ng-template\" id=\"error-messages\">\n *   <div ng-message=\"required\">This field is required</div>\n *   <div ng-message=\"minlength\">This field is too short</div>\n * </script>\n *\n * <div ng-messages=\"myForm.myField.$error\" role=\"alert\">\n *   <div ng-messages-include=\"error-messages\"></div>\n * </div>\n * ```\n *\n * However, including generic messages may not be useful enough to match all input fields, therefore,\n * `ngMessages` provides the ability to override messages defined in the remote template by redefining\n * them within the directive container.\n *\n * ```html\n * <!-- a generic template of error messages known as \"my-custom-messages\" -->\n * <script type=\"text/ng-template\" id=\"my-custom-messages\">\n *   <div ng-message=\"required\">This field is required</div>\n *   <div ng-message=\"minlength\">This field is too short</div>\n * </script>\n *\n * <form name=\"myForm\">\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            id=\"email\"\n *            name=\"myEmail\"\n *            ng-model=\"email\"\n *            minlength=\"5\"\n *            required />\n *   </label>\n *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will\n *        override the messages present in the ng-messages-include template -->\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <!-- this required message has overridden the template message -->\n *     <div ng-message=\"required\">You did not enter your email address</div>\n *\n *     <!-- this is a brand new message and will appear last in the prioritization -->\n *     <div ng-message=\"email\">Your email address is invalid</div>\n *\n *     <!-- and here are the generic error messages -->\n *     <div ng-messages-include=\"my-custom-messages\"></div>\n *   </div>\n * </form>\n * ```\n *\n * In the example HTML code above the message that is set on required will override the corresponding\n * required message defined within the remote template. Therefore, with particular input fields (such\n * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied\n * while more generic messages can be used to handle other, more general input errors.\n *\n * ## Dynamic Messaging\n * ngMessages also supports using expressions to dynamically change key values. Using arrays and\n * repeaters to list messages is also supported. This means that the code below will be able to\n * fully adapt itself and display the appropriate message when any of the expression data changes:\n *\n * ```html\n * <form name=\"myForm\">\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            name=\"myEmail\"\n *            ng-model=\"email\"\n *            minlength=\"5\"\n *            required />\n *   </label>\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <div ng-message=\"required\">You did not enter your email address</div>\n *     <div ng-repeat=\"errorMessage in errorMessages\">\n *       <!-- use ng-message-exp for a message whose key is given by an expression -->\n *       <div ng-message-exp=\"errorMessage.type\">{{ errorMessage.text }}</div>\n *     </div>\n *   </div>\n * </form>\n * ```\n *\n * The `errorMessage.type` expression can be a string value or it can be an array so\n * that multiple errors can be associated with a single error message:\n *\n * ```html\n *   <label>\n *     Email address\n *     <input type=\"email\"\n *            ng-model=\"data.email\"\n *            name=\"myEmail\"\n *            ng-minlength=\"5\"\n *            ng-maxlength=\"100\"\n *            required />\n *   </label>\n *   <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *     <div ng-message-exp=\"'required'\">You did not enter your email address</div>\n *     <div ng-message-exp=\"['minlength', 'maxlength']\">\n *       Your email must be between 5 and 100 characters long\n *     </div>\n *   </div>\n * ```\n *\n * Feel free to use other structural directives such as ng-if and ng-switch to further control\n * what messages are active and when. Be careful, if you place ng-message on the same element\n * as these structural directives, Angular may not be able to determine if a message is active\n * or not. Therefore it is best to place the ng-message on a child element of the structural\n * directive.\n *\n * ```html\n * <div ng-messages=\"myForm.myEmail.$error\" role=\"alert\">\n *   <div ng-if=\"showRequiredError\">\n *     <div ng-message=\"required\">Please enter something</div>\n *   </div>\n * </div>\n * ```\n *\n * ## Animations\n * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and\n * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from\n * the DOM by the `ngMessages` directive.\n *\n * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS\n * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no\n * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can\n * hook into the animations whenever these classes are added/removed.\n *\n * Let's say that our HTML code for our messages container looks like so:\n *\n * ```html\n * <div ng-messages=\"myMessages\" class=\"my-messages\" role=\"alert\">\n *   <div ng-message=\"alert\" class=\"some-message\">...</div>\n *   <div ng-message=\"fail\" class=\"some-message\">...</div>\n * </div>\n * ```\n *\n * Then the CSS animation code for the message container looks like so:\n *\n * ```css\n * .my-messages {\n *   transition:1s linear all;\n * }\n * .my-messages.ng-active {\n *   // messages are visible\n * }\n * .my-messages.ng-inactive {\n *   // messages are hidden\n * }\n * ```\n *\n * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter\n * and leave animation is triggered for each particular element bound to the `ngMessage` directive.\n *\n * Therefore, the CSS code for the inner messages looks like so:\n *\n * ```css\n * .some-message {\n *   transition:1s linear all;\n * }\n *\n * .some-message.ng-enter {}\n * .some-message.ng-enter.ng-enter-active {}\n *\n * .some-message.ng-leave {}\n * .some-message.ng-leave.ng-leave-active {}\n * ```\n *\n * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.\n */\nangular.module('ngMessages', [])\n\n   /**\n    * @ngdoc directive\n    * @module ngMessages\n    * @name ngMessages\n    * @restrict AE\n    *\n    * @description\n    * `ngMessages` is a directive that is designed to show and hide messages based on the state\n    * of a key/value object that it listens on. The directive itself complements error message\n    * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).\n    *\n    * `ngMessages` manages the state of internal messages within its container element. The internal\n    * messages use the `ngMessage` directive and will be inserted/removed from the page depending\n    * on if they're present within the key/value object. By default, only one message will be displayed\n    * at a time and this depends on the prioritization of the messages within the template. (This can\n    * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)\n    *\n    * A remote template can also be used to promote message reusability and messages can also be\n    * overridden.\n    *\n    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\" role=\"alert\">\n    *   <ANY ng-message=\"stringValue\">...</ANY>\n    *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n    *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\" role=\"alert\">\n    *   <ng-message when=\"stringValue\">...</ng-message>\n    *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n    *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n    * </ng-messages>\n    * ```\n    *\n    * @param {string} ngMessages an angular expression evaluating to a key/value object\n    *                 (this is typically the $error object on an ngModel instance).\n    * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true\n    *\n    * @example\n    * <example name=\"ngMessages-directive\" module=\"ngMessagesExample\"\n    *          deps=\"angular-messages.js\"\n    *          animations=\"true\" fixBase=\"true\">\n    *   <file name=\"index.html\">\n    *     <form name=\"myForm\">\n    *       <label>\n    *         Enter your name:\n    *         <input type=\"text\"\n    *                name=\"myName\"\n    *                ng-model=\"name\"\n    *                ng-minlength=\"5\"\n    *                ng-maxlength=\"20\"\n    *                required />\n    *       </label>\n    *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>\n    *\n    *       <div ng-messages=\"myForm.myName.$error\" style=\"color:maroon\" role=\"alert\">\n    *         <div ng-message=\"required\">You did not enter a field</div>\n    *         <div ng-message=\"minlength\">Your field is too short</div>\n    *         <div ng-message=\"maxlength\">Your field is too long</div>\n    *       </div>\n    *     </form>\n    *   </file>\n    *   <file name=\"script.js\">\n    *     angular.module('ngMessagesExample', ['ngMessages']);\n    *   </file>\n    * </example>\n    */\n   .directive('ngMessages', ['$animate', function($animate) {\n     var ACTIVE_CLASS = 'ng-active';\n     var INACTIVE_CLASS = 'ng-inactive';\n\n     return {\n       require: 'ngMessages',\n       restrict: 'AE',\n       controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {\n         var ctrl = this;\n         var latestKey = 0;\n         var nextAttachId = 0;\n\n         this.getAttachId = function getAttachId() { return nextAttachId++; };\n\n         var messages = this.messages = {};\n         var renderLater, cachedCollection;\n\n         this.render = function(collection) {\n           collection = collection || {};\n\n           renderLater = false;\n           cachedCollection = collection;\n\n           // this is true if the attribute is empty or if the attribute value is truthy\n           var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) ||\n                          isAttrTruthy($scope, $attrs.multiple);\n\n           var unmatchedMessages = [];\n           var matchedKeys = {};\n           var messageItem = ctrl.head;\n           var messageFound = false;\n           var totalMessages = 0;\n\n           // we use != instead of !== to allow for both undefined and null values\n           while (messageItem != null) {\n             totalMessages++;\n             var messageCtrl = messageItem.message;\n\n             var messageUsed = false;\n             if (!messageFound) {\n               forEach(collection, function(value, key) {\n                 if (!messageUsed && truthy(value) && messageCtrl.test(key)) {\n                   // this is to prevent the same error name from showing up twice\n                   if (matchedKeys[key]) return;\n                   matchedKeys[key] = true;\n\n                   messageUsed = true;\n                   messageCtrl.attach();\n                 }\n               });\n             }\n\n             if (messageUsed) {\n               // unless we want to display multiple messages then we should\n               // set a flag here to avoid displaying the next message in the list\n               messageFound = !multiple;\n             } else {\n               unmatchedMessages.push(messageCtrl);\n             }\n\n             messageItem = messageItem.next;\n           }\n\n           forEach(unmatchedMessages, function(messageCtrl) {\n             messageCtrl.detach();\n           });\n\n           unmatchedMessages.length !== totalMessages\n              ? $animate.setClass($element, ACTIVE_CLASS, INACTIVE_CLASS)\n              : $animate.setClass($element, INACTIVE_CLASS, ACTIVE_CLASS);\n         };\n\n         $scope.$watchCollection($attrs.ngMessages || $attrs['for'], ctrl.render);\n\n         this.reRender = function() {\n           if (!renderLater) {\n             renderLater = true;\n             $scope.$evalAsync(function() {\n               if (renderLater) {\n                 cachedCollection && ctrl.render(cachedCollection);\n               }\n             });\n           }\n         };\n\n         this.register = function(comment, messageCtrl) {\n           var nextKey = latestKey.toString();\n           messages[nextKey] = {\n             message: messageCtrl\n           };\n           insertMessageNode($element[0], comment, nextKey);\n           comment.$$ngMessageNode = nextKey;\n           latestKey++;\n\n           ctrl.reRender();\n         };\n\n         this.deregister = function(comment) {\n           var key = comment.$$ngMessageNode;\n           delete comment.$$ngMessageNode;\n           removeMessageNode($element[0], comment, key);\n           delete messages[key];\n           ctrl.reRender();\n         };\n\n         function findPreviousMessage(parent, comment) {\n           var prevNode = comment;\n           var parentLookup = [];\n           while (prevNode && prevNode !== parent) {\n             var prevKey = prevNode.$$ngMessageNode;\n             if (prevKey && prevKey.length) {\n               return messages[prevKey];\n             }\n\n             // dive deeper into the DOM and examine its children for any ngMessage\n             // comments that may be in an element that appears deeper in the list\n             if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) == -1) {\n               parentLookup.push(prevNode);\n               prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];\n             } else {\n               prevNode = prevNode.previousSibling || prevNode.parentNode;\n             }\n           }\n         }\n\n         function insertMessageNode(parent, comment, key) {\n           var messageNode = messages[key];\n           if (!ctrl.head) {\n             ctrl.head = messageNode;\n           } else {\n             var match = findPreviousMessage(parent, comment);\n             if (match) {\n               messageNode.next = match.next;\n               match.next = messageNode;\n             } else {\n               messageNode.next = ctrl.head;\n               ctrl.head = messageNode;\n             }\n           }\n         }\n\n         function removeMessageNode(parent, comment, key) {\n           var messageNode = messages[key];\n\n           var match = findPreviousMessage(parent, comment);\n           if (match) {\n             match.next = messageNode.next;\n           } else {\n             ctrl.head = messageNode.next;\n           }\n         }\n       }]\n     };\n\n     function isAttrTruthy(scope, attr) {\n      return (isString(attr) && attr.length === 0) || //empty attribute\n             truthy(scope.$eval(attr));\n     }\n\n     function truthy(val) {\n       return isString(val) ? val.length : !!val;\n     }\n   }])\n\n   /**\n    * @ngdoc directive\n    * @name ngMessagesInclude\n    * @restrict AE\n    * @scope\n    *\n    * @description\n    * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template\n    * code from a remote template and place the downloaded template code into the exact spot\n    * that the ngMessagesInclude directive is placed within the ngMessages container. This allows\n    * for a series of pre-defined messages to be reused and also allows for the developer to\n    * determine what messages are overridden due to the placement of the ngMessagesInclude directive.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\" role=\"alert\">\n    *   <ANY ng-messages-include=\"remoteTplString\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\" role=\"alert\">\n    *   <ng-messages-include src=\"expressionValue1\">...</ng-messages-include>\n    * </ng-messages>\n    * ```\n    *\n    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n    *\n    * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.\n    */\n   .directive('ngMessagesInclude',\n     ['$templateRequest', '$document', '$compile', function($templateRequest, $document, $compile) {\n\n     return {\n       restrict: 'AE',\n       require: '^^ngMessages', // we only require this for validation sake\n       link: function($scope, element, attrs) {\n         var src = attrs.ngMessagesInclude || attrs.src;\n         $templateRequest(src).then(function(html) {\n           $compile(html)($scope, function(contents) {\n             element.after(contents);\n\n             // the anchor is placed for debugging purposes\n             var anchor = jqLite($document[0].createComment(' ngMessagesInclude: ' + src + ' '));\n             element.after(anchor);\n\n             // we don't want to pollute the DOM anymore by keeping an empty directive element\n             element.remove();\n           });\n         });\n       }\n     };\n   }])\n\n   /**\n    * @ngdoc directive\n    * @name ngMessage\n    * @restrict AE\n    * @scope\n    *\n    * @description\n    * `ngMessage` is a directive with the purpose to show and hide a particular message.\n    * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element\n    * must be situated since it determines which messages are visible based on the state\n    * of the provided key/value map that `ngMessages` listens on.\n    *\n    * More information about using `ngMessage` can be found in the\n    * {@link module:ngMessages `ngMessages` module documentation}.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\" role=\"alert\">\n    *   <ANY ng-message=\"stringValue\">...</ANY>\n    *   <ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\" role=\"alert\">\n    *   <ng-message when=\"stringValue\">...</ng-message>\n    *   <ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n    * </ng-messages>\n    * ```\n    *\n    * @param {expression} ngMessage|when a string value corresponding to the message key.\n    */\n  .directive('ngMessage', ngMessageDirectiveFactory('AE'))\n\n\n   /**\n    * @ngdoc directive\n    * @name ngMessageExp\n    * @restrict AE\n    * @scope\n    *\n    * @description\n    * `ngMessageExp` is a directive with the purpose to show and hide a particular message.\n    * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element\n    * must be situated since it determines which messages are visible based on the state\n    * of the provided key/value map that `ngMessages` listens on.\n    *\n    * @usage\n    * ```html\n    * <!-- using attribute directives -->\n    * <ANY ng-messages=\"expression\">\n    *   <ANY ng-message-exp=\"expressionValue\">...</ANY>\n    * </ANY>\n    *\n    * <!-- or by using element directives -->\n    * <ng-messages for=\"expression\">\n    *   <ng-message when-exp=\"expressionValue\">...</ng-message>\n    * </ng-messages>\n    * ```\n    *\n    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.\n    *\n    * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key.\n    */\n  .directive('ngMessageExp', ngMessageDirectiveFactory('A'));\n\nfunction ngMessageDirectiveFactory(restrict) {\n  return ['$animate', function($animate) {\n    return {\n      restrict: 'AE',\n      transclude: 'element',\n      terminal: true,\n      require: '^^ngMessages',\n      link: function(scope, element, attrs, ngMessagesCtrl, $transclude) {\n        var commentNode = element[0];\n\n        var records;\n        var staticExp = attrs.ngMessage || attrs.when;\n        var dynamicExp = attrs.ngMessageExp || attrs.whenExp;\n        var assignRecords = function(items) {\n          records = items\n              ? (isArray(items)\n                    ? items\n                    : items.split(/[\\s,]+/))\n              : null;\n          ngMessagesCtrl.reRender();\n        };\n\n        if (dynamicExp) {\n          assignRecords(scope.$eval(dynamicExp));\n          scope.$watchCollection(dynamicExp, assignRecords);\n        } else {\n          assignRecords(staticExp);\n        }\n\n        var currentElement, messageCtrl;\n        ngMessagesCtrl.register(commentNode, messageCtrl = {\n          test: function(name) {\n            return contains(records, name);\n          },\n          attach: function() {\n            if (!currentElement) {\n              $transclude(scope, function(elm) {\n                $animate.enter(elm, null, element);\n                currentElement = elm;\n\n                // Each time we attach this node to a message we get a new id that we can match\n                // when we are destroying the node later.\n                var $$attachId = currentElement.$$attachId = ngMessagesCtrl.getAttachId();\n\n                // in the event that the parent element is destroyed\n                // by any other structural directive then it's time\n                // to deregister the message from the controller\n                currentElement.on('$destroy', function() {\n                  if (currentElement && currentElement.$$attachId === $$attachId) {\n                    ngMessagesCtrl.deregister(commentNode);\n                    messageCtrl.detach();\n                  }\n                });\n              });\n            }\n          },\n          detach: function() {\n            if (currentElement) {\n              var elm = currentElement;\n              currentElement = null;\n              $animate.leave(elm);\n            }\n          }\n        });\n      }\n    };\n  }];\n\n  function contains(collection, key) {\n    if (collection) {\n      return isArray(collection)\n          ? collection.indexOf(key) >= 0\n          : collection.hasOwnProperty(key);\n    }\n  }\n}\n\n\n})(window, window.angular);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-messages/angular-messages.js\n ** module id = 3\n ** module chunks = 0\n **/","// Should already be required, here for clarity\nrequire('angular');\n\n// Load Angular and dependent libs\nrequire('angular-animate');\nrequire('angular-aria');\n\n// Now load Angular Material\nrequire('./angular-material');\n\n// Export namespace\nmodule.exports = 'ngMaterial';\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-material/index.js\n ** module id = 4\n ** module chunks = 0\n **/","require('./angular-animate');\nmodule.exports = 'ngAnimate';\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-animate/index.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * @license AngularJS v1.4.8\n * (c) 2010-2015 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* jshint ignore:start */\nvar noop        = angular.noop;\nvar extend      = angular.extend;\nvar jqLite      = angular.element;\nvar forEach     = angular.forEach;\nvar isArray     = angular.isArray;\nvar isString    = angular.isString;\nvar isObject    = angular.isObject;\nvar isUndefined = angular.isUndefined;\nvar isDefined   = angular.isDefined;\nvar isFunction  = angular.isFunction;\nvar isElement   = angular.isElement;\n\nvar ELEMENT_NODE = 1;\nvar COMMENT_NODE = 8;\n\nvar ADD_CLASS_SUFFIX = '-add';\nvar REMOVE_CLASS_SUFFIX = '-remove';\nvar EVENT_CLASS_PREFIX = 'ng-';\nvar ACTIVE_CLASS_SUFFIX = '-active';\n\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\n\n// Detect proper transitionend/animationend event names.\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n// Register both events in case `window.onanimationend` is not supported because of that,\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n// therefore there is no reason to test anymore for other vendor prefixes:\n// http://caniuse.com/#search=transition\nif (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {\n  CSS_PREFIX = '-webkit-';\n  TRANSITION_PROP = 'WebkitTransition';\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n} else {\n  TRANSITION_PROP = 'transition';\n  TRANSITIONEND_EVENT = 'transitionend';\n}\n\nif (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {\n  CSS_PREFIX = '-webkit-';\n  ANIMATION_PROP = 'WebkitAnimation';\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n} else {\n  ANIMATION_PROP = 'animation';\n  ANIMATIONEND_EVENT = 'animationend';\n}\n\nvar DURATION_KEY = 'Duration';\nvar PROPERTY_KEY = 'Property';\nvar DELAY_KEY = 'Delay';\nvar TIMING_KEY = 'TimingFunction';\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\nvar isPromiseLike = function(p) {\n  return p && p.then ? true : false;\n};\n\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', \"Argument '{0}' is {1}\", (name || '?'), (reason || \"required\"));\n  }\n  return arg;\n}\n\nfunction mergeClasses(a,b) {\n  if (!a && !b) return '';\n  if (!a) return b;\n  if (!b) return a;\n  if (isArray(a)) a = a.join(' ');\n  if (isArray(b)) b = b.join(' ');\n  return a + ' ' + b;\n}\n\nfunction packageStyles(options) {\n  var styles = {};\n  if (options && (options.to || options.from)) {\n    styles.to = options.to;\n    styles.from = options.from;\n  }\n  return styles;\n}\n\nfunction pendClasses(classes, fix, isPrefix) {\n  var className = '';\n  classes = isArray(classes)\n      ? classes\n      : classes && isString(classes) && classes.length\n          ? classes.split(/\\s+/)\n          : [];\n  forEach(classes, function(klass, i) {\n    if (klass && klass.length > 0) {\n      className += (i > 0) ? ' ' : '';\n      className += isPrefix ? fix + klass\n                            : klass + fix;\n    }\n  });\n  return className;\n}\n\nfunction removeFromArray(arr, val) {\n  var index = arr.indexOf(val);\n  if (val >= 0) {\n    arr.splice(index, 1);\n  }\n}\n\nfunction stripCommentsFromElement(element) {\n  if (element instanceof jqLite) {\n    switch (element.length) {\n      case 0:\n        return [];\n        break;\n\n      case 1:\n        // there is no point of stripping anything if the element\n        // is the only element within the jqLite wrapper.\n        // (it's important that we retain the element instance.)\n        if (element[0].nodeType === ELEMENT_NODE) {\n          return element;\n        }\n        break;\n\n      default:\n        return jqLite(extractElementNode(element));\n        break;\n    }\n  }\n\n  if (element.nodeType === ELEMENT_NODE) {\n    return jqLite(element);\n  }\n}\n\nfunction extractElementNode(element) {\n  if (!element[0]) return element;\n  for (var i = 0; i < element.length; i++) {\n    var elm = element[i];\n    if (elm.nodeType == ELEMENT_NODE) {\n      return elm;\n    }\n  }\n}\n\nfunction $$addClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.addClass(elm, className);\n  });\n}\n\nfunction $$removeClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.removeClass(elm, className);\n  });\n}\n\nfunction applyAnimationClassesFactory($$jqLite) {\n  return function(element, options) {\n    if (options.addClass) {\n      $$addClass($$jqLite, element, options.addClass);\n      options.addClass = null;\n    }\n    if (options.removeClass) {\n      $$removeClass($$jqLite, element, options.removeClass);\n      options.removeClass = null;\n    }\n  }\n}\n\nfunction prepareAnimationOptions(options) {\n  options = options || {};\n  if (!options.$$prepared) {\n    var domOperation = options.domOperation || noop;\n    options.domOperation = function() {\n      options.$$domOperationFired = true;\n      domOperation();\n      domOperation = noop;\n    };\n    options.$$prepared = true;\n  }\n  return options;\n}\n\nfunction applyAnimationStyles(element, options) {\n  applyAnimationFromStyles(element, options);\n  applyAnimationToStyles(element, options);\n}\n\nfunction applyAnimationFromStyles(element, options) {\n  if (options.from) {\n    element.css(options.from);\n    options.from = null;\n  }\n}\n\nfunction applyAnimationToStyles(element, options) {\n  if (options.to) {\n    element.css(options.to);\n    options.to = null;\n  }\n}\n\nfunction mergeAnimationOptions(element, target, newOptions) {\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\n\n  if (newOptions.preparationClasses) {\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\n    delete newOptions.preparationClasses;\n  }\n\n  // noop is basically when there is no callback; otherwise something has been set\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\n\n  extend(target, newOptions);\n\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\n  if (realDomOperation) {\n    target.domOperation = realDomOperation;\n  }\n\n  if (classes.addClass) {\n    target.addClass = classes.addClass;\n  } else {\n    target.addClass = null;\n  }\n\n  if (classes.removeClass) {\n    target.removeClass = classes.removeClass;\n  } else {\n    target.removeClass = null;\n  }\n\n  return target;\n}\n\nfunction resolveElementClasses(existing, toAdd, toRemove) {\n  var ADD_CLASS = 1;\n  var REMOVE_CLASS = -1;\n\n  var flags = {};\n  existing = splitClassesToLookup(existing);\n\n  toAdd = splitClassesToLookup(toAdd);\n  forEach(toAdd, function(value, key) {\n    flags[key] = ADD_CLASS;\n  });\n\n  toRemove = splitClassesToLookup(toRemove);\n  forEach(toRemove, function(value, key) {\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n  });\n\n  var classes = {\n    addClass: '',\n    removeClass: ''\n  };\n\n  forEach(flags, function(val, klass) {\n    var prop, allow;\n    if (val === ADD_CLASS) {\n      prop = 'addClass';\n      allow = !existing[klass];\n    } else if (val === REMOVE_CLASS) {\n      prop = 'removeClass';\n      allow = existing[klass];\n    }\n    if (allow) {\n      if (classes[prop].length) {\n        classes[prop] += ' ';\n      }\n      classes[prop] += klass;\n    }\n  });\n\n  function splitClassesToLookup(classes) {\n    if (isString(classes)) {\n      classes = classes.split(' ');\n    }\n\n    var obj = {};\n    forEach(classes, function(klass) {\n      // sometimes the split leaves empty string values\n      // incase extra spaces were applied to the options\n      if (klass.length) {\n        obj[klass] = true;\n      }\n    });\n    return obj;\n  }\n\n  return classes;\n}\n\nfunction getDomNode(element) {\n  return (element instanceof angular.element) ? element[0] : element;\n}\n\nfunction applyGeneratedPreparationClasses(element, event, options) {\n  var classes = '';\n  if (event) {\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n  }\n  if (options.addClass) {\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\n  }\n  if (options.removeClass) {\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\n  }\n  if (classes.length) {\n    options.preparationClasses = classes;\n    element.addClass(classes);\n  }\n}\n\nfunction clearGeneratedClasses(element, options) {\n  if (options.preparationClasses) {\n    element.removeClass(options.preparationClasses);\n    options.preparationClasses = null;\n  }\n  if (options.activeClasses) {\n    element.removeClass(options.activeClasses);\n    options.activeClasses = null;\n  }\n}\n\nfunction blockTransitions(node, duration) {\n  // we use a negative delay value since it performs blocking\n  // yet it doesn't kill any existing transitions running on the\n  // same element which makes this safe for class-based animations\n  var value = duration ? '-' + duration + 's' : '';\n  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n  return [TRANSITION_DELAY_PROP, value];\n}\n\nfunction blockKeyframeAnimations(node, applyBlock) {\n  var value = applyBlock ? 'paused' : '';\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n  applyInlineStyle(node, [key, value]);\n  return [key, value];\n}\n\nfunction applyInlineStyle(node, styleTuple) {\n  var prop = styleTuple[0];\n  var value = styleTuple[1];\n  node.style[prop] = value;\n}\n\nfunction concatWithSpace(a,b) {\n  if (!a) return b;\n  if (!b) return a;\n  return a + ' ' + b;\n}\n\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\n  var queue, cancelFn;\n\n  function scheduler(tasks) {\n    // we make a copy since RAFScheduler mutates the state\n    // of the passed in array variable and this would be difficult\n    // to track down on the outside code\n    queue = queue.concat(tasks);\n    nextTick();\n  }\n\n  queue = scheduler.queue = [];\n\n  /* waitUntilQuiet does two things:\n   * 1. It will run the FINAL `fn` value only when an uncancelled RAF has passed through\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\n   *\n   * The motivation here is that animation code can request more time from the scheduler\n   * before the next wave runs. This allows for certain DOM properties such as classes to\n   * be resolved in time for the next animation to run.\n   */\n  scheduler.waitUntilQuiet = function(fn) {\n    if (cancelFn) cancelFn();\n\n    cancelFn = $$rAF(function() {\n      cancelFn = null;\n      fn();\n      nextTick();\n    });\n  };\n\n  return scheduler;\n\n  function nextTick() {\n    if (!queue.length) return;\n\n    var items = queue.shift();\n    for (var i = 0; i < items.length; i++) {\n      items[i]();\n    }\n\n    if (!cancelFn) {\n      $$rAF(function() {\n        if (!cancelFn) nextTick();\n      });\n    }\n  }\n}];\n\nvar $$AnimateChildrenDirective = [function() {\n  return function(scope, element, attrs) {\n    var val = attrs.ngAnimateChildren;\n    if (angular.isString(val) && val.length === 0) { //empty attribute\n      element.data(NG_ANIMATE_CHILDREN_DATA, true);\n    } else {\n      attrs.$observe('ngAnimateChildren', function(value) {\n        value = value === 'on' || value === 'true';\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\n      });\n    }\n  };\n}];\n\nvar ANIMATE_TIMER_KEY = '$$animateCss';\n\n/**\n * @ngdoc service\n * @name $animateCss\n * @kind object\n *\n * @description\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\n * directives to create more complex animations that can be purely driven using CSS code.\n *\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\n *\n * ## Usage\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\n * any automatic control over cancelling animations and/or preventing animations from being run on\n * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\n * the CSS animation.\n *\n * The example below shows how we can create a folding animation on an element using `ng-if`:\n *\n * ```html\n * <!-- notice the `fold-animation` CSS class -->\n * <div ng-if=\"onOff\" class=\"fold-animation\">\n *   This element will go BOOM\n * </div>\n * <button ng-click=\"onOff=true\">Fold In</button>\n * ```\n *\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * ## More Advanced Uses\n *\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\n *\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\n * to provide a working animation that will run in CSS.\n *\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         addClass: 'red large-text pulse-twice',\n *         easing: 'ease-out',\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\n *\n * ```css\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\n * .red { background:red; }\n * .large-text { font-size:20px; }\n *\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\n * .pulse-twice {\n *   animation: 0.5s pulse linear 2;\n *   -webkit-animation: 0.5s pulse linear 2;\n * }\n *\n * @keyframes pulse {\n *   from { transform: scale(0.5); }\n *   to { transform: scale(1.5); }\n * }\n *\n * @-webkit-keyframes pulse {\n *   from { -webkit-transform: scale(0.5); }\n *   to { -webkit-transform: scale(1.5); }\n * }\n * ```\n *\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\n *\n * ## How the Options are handled\n *\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\n * styles using the `from` and `to` properties.\n *\n * ```js\n * var animator = $animateCss(element, {\n *   from: { background:'red' },\n *   to: { background:'blue' }\n * });\n * animator.start();\n * ```\n *\n * ```css\n * .rotating-animation {\n *   animation:0.5s rotate linear;\n *   -webkit-animation:0.5s rotate linear;\n * }\n *\n * @keyframes rotate {\n *   from { transform: rotate(0deg); }\n *   to { transform: rotate(360deg); }\n * }\n *\n * @-webkit-keyframes rotate {\n *   from { -webkit-transform: rotate(0deg); }\n *   to { -webkit-transform: rotate(360deg); }\n * }\n * ```\n *\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\n * and spread across the transition and keyframe animation.\n *\n * ## What is returned\n *\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\n *\n * ```js\n * var animator = $animateCss(element, { ... });\n * ```\n *\n * Now what do the contents of our `animator` variable look like:\n *\n * ```js\n * {\n *   // starts the animation\n *   start: Function,\n *\n *   // ends (aborts) the animation\n *   end: Function\n * }\n * ```\n *\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and stlyes may have been\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\n * and that changing them will not reconfigure the parameters of the animation.\n *\n * ### runner.done() vs runner.then()\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\n * unless you really need a digest to kick off afterwards.\n *\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\n *\n * @param {DOMElement} element the element that will be animated\n * @param {object} options the animation-related options that will be applied during the animation\n *\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\n * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\n * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\n * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\n * is provided then the animation will be skipped entirely.\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\n * CSS delay value.\n * * `stagger` - A numeric time value representing the delay between successively animated elements\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\n * * `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occuring on the classes being added and removed.)\n * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\n *    the animation is closed. This is useful for when the styles are used purely for the sake of\n *    the animation and do not have a lasting visual effect on the element (e.g. a colapse and open animation).\n *    By default this value is set to `false`.\n *\n * @return {object} an object with start and end methods and details about the animation.\n *\n * * `start` - The method to start the animation. This will return a `Promise` when called.\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\n */\nvar ONE_SECOND = 1000;\nvar BASE_TEN = 10;\n\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nvar CLOSING_TIME_BUFFER = 1.5;\n\nvar DETECT_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP,\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\n};\n\nvar DETECT_STAGGER_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP\n};\n\nfunction getCssKeyframeDurationStyle(duration) {\n  return [ANIMATION_DURATION_PROP, duration + 's'];\n}\n\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\n  return [prop, delay + 's'];\n}\n\nfunction computeCssStyles($window, element, properties) {\n  var styles = Object.create(null);\n  var detectedStyles = $window.getComputedStyle(element) || {};\n  forEach(properties, function(formalStyleName, actualStyleName) {\n    var val = detectedStyles[formalStyleName];\n    if (val) {\n      var c = val.charAt(0);\n\n      // only numerical-based values have a negative sign or digit as the first value\n      if (c === '-' || c === '+' || c >= 0) {\n        val = parseMaxTime(val);\n      }\n\n      // by setting this to null in the event that the delay is not set or is set directly as 0\n      // then we can still allow for zegative values to be used later on and not mistake this\n      // value for being greater than any other negative value.\n      if (val === 0) {\n        val = null;\n      }\n      styles[actualStyleName] = val;\n    }\n  });\n\n  return styles;\n}\n\nfunction parseMaxTime(str) {\n  var maxValue = 0;\n  var values = str.split(/\\s*,\\s*/);\n  forEach(values, function(value) {\n    // it's always safe to consider only second values and omit `ms` values since\n    // getComputedStyle will always handle the conversion for us\n    if (value.charAt(value.length - 1) == 's') {\n      value = value.substring(0, value.length - 1);\n    }\n    value = parseFloat(value) || 0;\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\n  });\n  return maxValue;\n}\n\nfunction truthyTimingValue(val) {\n  return val === 0 || val != null;\n}\n\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n  var style = TRANSITION_PROP;\n  var value = duration + 's';\n  if (applyOnlyDuration) {\n    style += DURATION_KEY;\n  } else {\n    value += ' linear all';\n  }\n  return [style, value];\n}\n\nfunction createLocalCacheLookup() {\n  var cache = Object.create(null);\n  return {\n    flush: function() {\n      cache = Object.create(null);\n    },\n\n    count: function(key) {\n      var entry = cache[key];\n      return entry ? entry.total : 0;\n    },\n\n    get: function(key) {\n      var entry = cache[key];\n      return entry && entry.value;\n    },\n\n    put: function(key, value) {\n      if (!cache[key]) {\n        cache[key] = { total: 1, value: value };\n      } else {\n        cache[key].total++;\n      }\n    }\n  };\n}\n\n// we do not reassign an already present style value since\n// if we detect the style property value again we may be\n// detecting styles that were added via the `from` styles.\n// We make use of `isDefined` here since an empty string\n// or null value (which is what getPropertyValue will return\n// for a non-existing style) will still be marked as a valid\n// value for the style (a falsy value implies that the style\n// is to be removed at the end of the animation). If we had a simple\n// \"OR\" statement then it would not be enough to catch that.\nfunction registerRestorableStyles(backup, node, properties) {\n  forEach(properties, function(prop) {\n    backup[prop] = isDefined(backup[prop])\n        ? backup[prop]\n        : node.style.getPropertyValue(prop);\n  });\n}\n\nvar $AnimateCssProvider = ['$animateProvider', function($animateProvider) {\n  var gcsLookup = createLocalCacheLookup();\n  var gcsStaggerLookup = createLocalCacheLookup();\n\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$animate',\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $animate) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    var parentCounter = 0;\n    function gcsHashFn(node, extraClasses) {\n      var KEY = \"$$ngAnimateParentKey\";\n      var parentNode = node.parentNode;\n      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\n      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\n    }\n\n    function computeCachedCssStyles(node, className, cacheKey, properties) {\n      var timings = gcsLookup.get(cacheKey);\n\n      if (!timings) {\n        timings = computeCssStyles($window, node, properties);\n        if (timings.animationIterationCount === 'infinite') {\n          timings.animationIterationCount = 1;\n        }\n      }\n\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\n      // because we're keeping an interal tally of how many duplicate animations are detected.\n      gcsLookup.put(cacheKey, timings);\n      return timings;\n    }\n\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\n      var stagger;\n\n      // if we have one or more existing matches of matching elements\n      // containing the same parent + CSS styles (which is how cacheKey works)\n      // then staggering is possible\n      if (gcsLookup.count(cacheKey) > 0) {\n        stagger = gcsStaggerLookup.get(cacheKey);\n\n        if (!stagger) {\n          var staggerClassName = pendClasses(className, '-stagger');\n\n          $$jqLite.addClass(node, staggerClassName);\n\n          stagger = computeCssStyles($window, node, properties);\n\n          // force the conversion of a null value to zero incase not set\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\n\n          $$jqLite.removeClass(node, staggerClassName);\n\n          gcsStaggerLookup.put(cacheKey, stagger);\n        }\n      }\n\n      return stagger || {};\n    }\n\n    var cancelLastRAFRequest;\n    var rafWaitQueue = [];\n    function waitUntilQuiet(callback) {\n      rafWaitQueue.push(callback);\n      $$rAFScheduler.waitUntilQuiet(function() {\n        gcsLookup.flush();\n        gcsStaggerLookup.flush();\n\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n        var pageWidth = $$forceReflow();\n\n        // we use a for loop to ensure that if the queue is changed\n        // during this looping then it will consider new requests\n        for (var i = 0; i < rafWaitQueue.length; i++) {\n          rafWaitQueue[i](pageWidth);\n        }\n        rafWaitQueue.length = 0;\n      });\n    }\n\n    function computeTimings(node, className, cacheKey) {\n      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\n      var aD = timings.animationDelay;\n      var tD = timings.transitionDelay;\n      timings.maxDelay = aD && tD\n          ? Math.max(aD, tD)\n          : (aD || tD);\n      timings.maxDuration = Math.max(\n          timings.animationDuration * timings.animationIterationCount,\n          timings.transitionDuration);\n\n      return timings;\n    }\n\n    return function init(element, options) {\n      var restoreStyles = {};\n      var node = getDomNode(element);\n      if (!node\n          || !node.parentNode\n          || !$animate.enabled()) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      options = prepareAnimationOptions(options);\n\n      var temporaryStyles = [];\n      var classes = element.attr('class');\n      var styles = packageStyles(options);\n      var animationClosed;\n      var animationPaused;\n      var animationCompleted;\n      var runner;\n      var runnerHost;\n      var maxDelay;\n      var maxDelayTime;\n      var maxDuration;\n      var maxDurationTime;\n\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var method = options.event && isArray(options.event)\n            ? options.event.join(' ')\n            : options.event;\n\n      var isStructural = method && options.structural;\n      var structuralClassName = '';\n      var addRemoveClassName = '';\n\n      if (isStructural) {\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n      } else if (method) {\n        structuralClassName = method;\n      }\n\n      if (options.addClass) {\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n      }\n\n      if (options.removeClass) {\n        if (addRemoveClassName.length) {\n          addRemoveClassName += ' ';\n        }\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\n      }\n\n      // there may be a situation where a structural animation is combined together\n      // with CSS classes that need to resolve before the animation is computed.\n      // However this means that there is no explicit CSS code to block the animation\n      // from happening (by setting 0s none in the class name). If this is the case\n      // we need to apply the classes before the first rAF so we know to continue if\n      // there actually is a detected transition or keyframe animation\n      if (options.applyClassesEarly && addRemoveClassName.length) {\n        applyAnimationClasses(element, options);\n      }\n\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\n      var fullClassName = classes + ' ' + preparationClasses;\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\n\n      // there is no way we can trigger an animation if no styles and\n      // no classes are being applied which would then trigger a transition,\n      // unless there a is raw keyframe value that is applied to the element.\n      if (!containsKeyframeAnimation\n           && !hasToStyles\n           && !preparationClasses) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var cacheKey, stagger;\n      if (options.stagger > 0) {\n        var staggerVal = parseFloat(options.stagger);\n        stagger = {\n          transitionDelay: staggerVal,\n          animationDelay: staggerVal,\n          transitionDuration: 0,\n          animationDuration: 0\n        };\n      } else {\n        cacheKey = gcsHashFn(node, fullClassName);\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\n      }\n\n      if (!options.$$skipPreparationClasses) {\n        $$jqLite.addClass(element, preparationClasses);\n      }\n\n      var applyOnlyDuration;\n\n      if (options.transitionStyle) {\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n        applyInlineStyle(node, transitionStyle);\n        temporaryStyles.push(transitionStyle);\n      }\n\n      if (options.duration >= 0) {\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\n\n        // we set the duration so that it will be picked up by getComputedStyle later\n        applyInlineStyle(node, durationStyle);\n        temporaryStyles.push(durationStyle);\n      }\n\n      if (options.keyframeStyle) {\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n        applyInlineStyle(node, keyframeStyle);\n        temporaryStyles.push(keyframeStyle);\n      }\n\n      var itemIndex = stagger\n          ? options.staggerIndex >= 0\n              ? options.staggerIndex\n              : gcsLookup.count(cacheKey)\n          : 0;\n\n      var isFirst = itemIndex === 0;\n\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n      // without causing any combination of transitions to kick in. By adding a negative delay value\n      // it forces the setup class' transition to end immediately. We later then remove the negative\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n      // that if there is no transition defined then nothing will happen and this will also allow\n      // other transitions to be stacked on top of each other without any chopping them out.\n      if (isFirst && !options.skipBlocking) {\n        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n      }\n\n      var timings = computeTimings(node, fullClassName, cacheKey);\n      var relativeDelay = timings.maxDelay;\n      maxDelay = Math.max(relativeDelay, 0);\n      maxDuration = timings.maxDuration;\n\n      var flags = {};\n      flags.hasTransitions          = timings.transitionDuration > 0;\n      flags.hasAnimations           = timings.animationDuration > 0;\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';\n      flags.applyTransitionDuration = hasToStyles && (\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\n                                         || (flags.hasAnimations && !flags.hasTransitions));\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\n\n        if (flags.applyTransitionDuration) {\n          flags.hasTransitions = true;\n          timings.transitionDuration = maxDuration;\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\n        }\n\n        if (flags.applyAnimationDuration) {\n          flags.hasAnimations = true;\n          timings.animationDuration = maxDuration;\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n        }\n      }\n\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      if (options.delay != null) {\n        var delayStyle = parseFloat(options.delay);\n\n        if (flags.applyTransitionDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\n        }\n\n        if (flags.applyAnimationDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n        }\n      }\n\n      // we need to recalculate the delay value since we used a pre-emptive negative\n      // delay value and the delay value is required for the final event checking. This\n      // property will ensure that this will happen after the RAF phase has passed.\n      if (options.duration == null && timings.transitionDuration > 0) {\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\n      }\n\n      maxDelayTime = maxDelay * ONE_SECOND;\n      maxDurationTime = maxDuration * ONE_SECOND;\n      if (!options.skipBlocking) {\n        flags.blockTransition = timings.transitionDuration > 0;\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\n                                       stagger.animationDelay > 0 &&\n                                       stagger.animationDuration === 0;\n      }\n\n      if (options.from) {\n        if (options.cleanupStyles) {\n          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\n        }\n        applyAnimationFromStyles(element, options);\n      }\n\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\n        applyBlocking(maxDuration);\n      } else if (!options.skipBlocking) {\n        blockTransitions(node, false);\n      }\n\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n      return {\n        $$willAnimate: true,\n        end: endFn,\n        start: function() {\n          if (animationClosed) return;\n\n          runnerHost = {\n            end: endFn,\n            cancel: cancelFn,\n            resume: null, //this will be set during the start() phase\n            pause: null\n          };\n\n          runner = new $$AnimateRunner(runnerHost);\n\n          waitUntilQuiet(start);\n\n          // we don't have access to pause/resume the animation\n          // since it hasn't run yet. AnimateRunner will therefore\n          // set noop functions for resume and pause and they will\n          // later be overridden once the animation is triggered\n          return runner;\n        }\n      };\n\n      function endFn() {\n        close();\n      }\n\n      function cancelFn() {\n        close(true);\n      }\n\n      function close(rejected) { // jshint ignore:line\n        // if the promise has been called already then we shouldn't close\n        // the animation again\n        if (animationClosed || (animationCompleted && animationPaused)) return;\n        animationClosed = true;\n        animationPaused = false;\n\n        if (!options.$$skipPreparationClasses) {\n          $$jqLite.removeClass(element, preparationClasses);\n        }\n        $$jqLite.removeClass(element, activeClasses);\n\n        blockKeyframeAnimations(node, false);\n        blockTransitions(node, false);\n\n        forEach(temporaryStyles, function(entry) {\n          // There is only one way to remove inline style properties entirely from elements.\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\n          // styles down to hyphenated values.\n          node.style[entry[0]] = '';\n        });\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n\n        if (Object.keys(restoreStyles).length) {\n          forEach(restoreStyles, function(value, prop) {\n            value ? node.style.setProperty(prop, value)\n                  : node.style.removeProperty(prop);\n          });\n        }\n\n        // the reason why we have this option is to allow a synchronous closing callback\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\n        // the animation never takes off at all. A good example is a leave animation since\n        // the element must be removed just after the animation is over or else the element\n        // will appear on screen for one animation frame causing an overbearing flicker.\n        if (options.onDone) {\n          options.onDone();\n        }\n\n        // if the preparation function fails then the promise is not setup\n        if (runner) {\n          runner.complete(!rejected);\n        }\n      }\n\n      function applyBlocking(duration) {\n        if (flags.blockTransition) {\n          blockTransitions(node, duration);\n        }\n\n        if (flags.blockKeyframeAnimation) {\n          blockKeyframeAnimations(node, !!duration);\n        }\n      }\n\n      function closeAndReturnNoopAnimator() {\n        runner = new $$AnimateRunner({\n          end: endFn,\n          cancel: cancelFn\n        });\n\n        // should flush the cache animation\n        waitUntilQuiet(noop);\n        close();\n\n        return {\n          $$willAnimate: false,\n          start: function() {\n            return runner;\n          },\n          end: endFn\n        };\n      }\n\n      function start() {\n        if (animationClosed) return;\n        if (!node.parentNode) {\n          close();\n          return;\n        }\n\n        var startTime, events = [];\n\n        // even though we only pause keyframe animations here the pause flag\n        // will still happen when transitions are used. Only the transition will\n        // not be paused since that is not possible. If the animation ends when\n        // paused then it will not complete until unpaused or cancelled.\n        var playPause = function(playAnimation) {\n          if (!animationCompleted) {\n            animationPaused = !playAnimation;\n            if (timings.animationDuration) {\n              var value = blockKeyframeAnimations(node, animationPaused);\n              animationPaused\n                  ? temporaryStyles.push(value)\n                  : removeFromArray(temporaryStyles, value);\n            }\n          } else if (animationPaused && playAnimation) {\n            animationPaused = false;\n            close();\n          }\n        };\n\n        // checking the stagger duration prevents an accidently cascade of the CSS delay style\n        // being inherited from the parent. If the transition duration is zero then we can safely\n        // rely that the delay value is an intential stagger delay style.\n        var maxStagger = itemIndex > 0\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n                            (timings.animationDuration && stagger.animationDuration === 0))\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\n        if (maxStagger) {\n          $timeout(triggerAnimationStart,\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\n                   false);\n        } else {\n          triggerAnimationStart();\n        }\n\n        // this will decorate the existing promise runner with pause/resume methods\n        runnerHost.resume = function() {\n          playPause(true);\n        };\n\n        runnerHost.pause = function() {\n          playPause(false);\n        };\n\n        function triggerAnimationStart() {\n          // just incase a stagger animation kicks in when the animation\n          // itself was cancelled entirely\n          if (animationClosed) return;\n\n          applyBlocking(false);\n\n          forEach(temporaryStyles, function(entry) {\n            var key = entry[0];\n            var value = entry[1];\n            node.style[key] = value;\n          });\n\n          applyAnimationClasses(element, options);\n          $$jqLite.addClass(element, activeClasses);\n\n          if (flags.recalculateTimingStyles) {\n            fullClassName = node.className + ' ' + preparationClasses;\n            cacheKey = gcsHashFn(node, fullClassName);\n\n            timings = computeTimings(node, fullClassName, cacheKey);\n            relativeDelay = timings.maxDelay;\n            maxDelay = Math.max(relativeDelay, 0);\n            maxDuration = timings.maxDuration;\n\n            if (maxDuration === 0) {\n              close();\n              return;\n            }\n\n            flags.hasTransitions = timings.transitionDuration > 0;\n            flags.hasAnimations = timings.animationDuration > 0;\n          }\n\n          if (flags.applyAnimationDelay) {\n            relativeDelay = typeof options.delay !== \"boolean\" && truthyTimingValue(options.delay)\n                  ? parseFloat(options.delay)\n                  : relativeDelay;\n\n            maxDelay = Math.max(relativeDelay, 0);\n            timings.animationDelay = relativeDelay;\n            delayStyle = getCssDelayStyle(relativeDelay, true);\n            temporaryStyles.push(delayStyle);\n            node.style[delayStyle[0]] = delayStyle[1];\n          }\n\n          maxDelayTime = maxDelay * ONE_SECOND;\n          maxDurationTime = maxDuration * ONE_SECOND;\n\n          if (options.easing) {\n            var easeProp, easeVal = options.easing;\n            if (flags.hasTransitions) {\n              easeProp = TRANSITION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n            if (flags.hasAnimations) {\n              easeProp = ANIMATION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n          }\n\n          if (timings.transitionDuration) {\n            events.push(TRANSITIONEND_EVENT);\n          }\n\n          if (timings.animationDuration) {\n            events.push(ANIMATIONEND_EVENT);\n          }\n\n          startTime = Date.now();\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n          var endTime = startTime + timerTime;\n\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\n          var setupFallbackTimer = true;\n          if (animationsData.length) {\n            var currentTimerData = animationsData[0];\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n            if (setupFallbackTimer) {\n              $timeout.cancel(currentTimerData.timer);\n            } else {\n              animationsData.push(close);\n            }\n          }\n\n          if (setupFallbackTimer) {\n            var timer = $timeout(onAnimationExpired, timerTime, false);\n            animationsData[0] = {\n              timer: timer,\n              expectedEndTime: endTime\n            };\n            animationsData.push(close);\n            element.data(ANIMATE_TIMER_KEY, animationsData);\n          }\n\n          element.on(events.join(' '), onAnimationProgress);\n          if (options.to) {\n            if (options.cleanupStyles) {\n              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\n            }\n            applyAnimationToStyles(element, options);\n          }\n        }\n\n        function onAnimationExpired() {\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\n\n          // this will be false in the event that the element was\n          // removed from the DOM (via a leave animation or something\n          // similar)\n          if (animationsData) {\n            for (var i = 1; i < animationsData.length; i++) {\n              animationsData[i]();\n            }\n            element.removeData(ANIMATE_TIMER_KEY);\n          }\n        }\n\n        function onAnimationProgress(event) {\n          event.stopPropagation();\n          var ev = event.originalEvent || event;\n          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();\n\n          /* Firefox (or possibly just Gecko) likes to not round values up\n           * when a ms measurement is used for the animation */\n          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\n          /* $manualTimeStamp is a mocked timeStamp value which is set\n           * within browserTrigger(). This is only here so that tests can\n           * mock animations properly. Real events fallback to event.timeStamp,\n           * or, if they don't, then a timeStamp is automatically created for them.\n           * We're checking to see if the timeStamp surpasses the expected delay,\n           * but we're using elapsedTime instead of the timeStamp on the 2nd\n           * pre-condition since animations sometimes close off early */\n          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n            // we set this flag to ensure that if the transition is paused then, when resumed,\n            // the animation will automatically close itself since transitions cannot be paused.\n            animationCompleted = true;\n            close();\n          }\n        }\n      }\n    };\n  }];\n}];\n\nvar $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateCssDriver');\n\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\n\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\n\n  function isDocumentFragment(node) {\n    return node.parentNode && node.parentNode.nodeType === 11;\n  }\n\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\n\n    // only browsers that support these properties can render animations\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\n\n    var bodyNode = $document[0].body;\n    var rootNode = getDomNode($rootElement);\n\n    var rootBodyElement = jqLite(\n      // this is to avoid using something that exists outside of the body\n      // we also special case the doc fragement case because our unit test code\n      // appends the $rootElement to the body after the app has been bootstrapped\n      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\n    );\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    return function initDriverFn(animationDetails) {\n      return animationDetails.from && animationDetails.to\n          ? prepareFromToAnchorAnimation(animationDetails.from,\n                                         animationDetails.to,\n                                         animationDetails.classes,\n                                         animationDetails.anchors)\n          : prepareRegularAnimation(animationDetails);\n    };\n\n    function filterCssClasses(classes) {\n      //remove all the `ng-` stuff\n      return classes.replace(/\\bng-\\S+\\b/g, '');\n    }\n\n    function getUniqueValues(a, b) {\n      if (isString(a)) a = a.split(' ');\n      if (isString(b)) b = b.split(' ');\n      return a.filter(function(val) {\n        return b.indexOf(val) === -1;\n      }).join(' ');\n    }\n\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\n      var startingClasses = filterCssClasses(getClassVal(clone));\n\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\n      rootBodyElement.append(clone);\n\n      var animatorIn, animatorOut = prepareOutAnimation();\n\n      // the user may not end up using the `out` animation and\n      // only making use of the `in` animation or vice-versa.\n      // In either case we should allow this and not assume the\n      // animation is over unless both animations are not used.\n      if (!animatorOut) {\n        animatorIn = prepareInAnimation();\n        if (!animatorIn) {\n          return end();\n        }\n      }\n\n      var startingAnimator = animatorOut || animatorIn;\n\n      return {\n        start: function() {\n          var runner;\n\n          var currentAnimation = startingAnimator.start();\n          currentAnimation.done(function() {\n            currentAnimation = null;\n            if (!animatorIn) {\n              animatorIn = prepareInAnimation();\n              if (animatorIn) {\n                currentAnimation = animatorIn.start();\n                currentAnimation.done(function() {\n                  currentAnimation = null;\n                  end();\n                  runner.complete();\n                });\n                return currentAnimation;\n              }\n            }\n            // in the event that there is no `in` animation\n            end();\n            runner.complete();\n          });\n\n          runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn\n          });\n\n          return runner;\n\n          function endFn() {\n            if (currentAnimation) {\n              currentAnimation.end();\n            }\n          }\n        }\n      };\n\n      function calculateAnchorStyles(anchor) {\n        var styles = {};\n\n        var coords = getDomNode(anchor).getBoundingClientRect();\n\n        // we iterate directly since safari messes up and doesn't return\n        // all the keys for the coods object when iterated\n        forEach(['width','height','top','left'], function(key) {\n          var value = coords[key];\n          switch (key) {\n            case 'top':\n              value += bodyNode.scrollTop;\n              break;\n            case 'left':\n              value += bodyNode.scrollLeft;\n              break;\n          }\n          styles[key] = Math.floor(value) + 'px';\n        });\n        return styles;\n      }\n\n      function prepareOutAnimation() {\n        var animator = $animateCss(clone, {\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\n          delay: true,\n          from: calculateAnchorStyles(outAnchor)\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function getClassVal(element) {\n        return element.attr('class') || '';\n      }\n\n      function prepareInAnimation() {\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\n\n        var animator = $animateCss(clone, {\n          to: calculateAnchorStyles(inAnchor),\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\n          delay: true\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function end() {\n        clone.remove();\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      }\n    }\n\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\n      var fromAnimation = prepareRegularAnimation(from, noop);\n      var toAnimation = prepareRegularAnimation(to, noop);\n\n      var anchorAnimations = [];\n      forEach(anchors, function(anchor) {\n        var outElement = anchor['out'];\n        var inElement = anchor['in'];\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\n        if (animator) {\n          anchorAnimations.push(animator);\n        }\n      });\n\n      // no point in doing anything when there are no elements to animate\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\n\n      return {\n        start: function() {\n          var animationRunners = [];\n\n          if (fromAnimation) {\n            animationRunners.push(fromAnimation.start());\n          }\n\n          if (toAnimation) {\n            animationRunners.push(toAnimation.start());\n          }\n\n          forEach(anchorAnimations, function(animation) {\n            animationRunners.push(animation.start());\n          });\n\n          var runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\n          });\n\n          $$AnimateRunner.all(animationRunners, function(status) {\n            runner.complete(status);\n          });\n\n          return runner;\n\n          function endFn() {\n            forEach(animationRunners, function(runner) {\n              runner.end();\n            });\n          }\n        }\n      };\n    }\n\n    function prepareRegularAnimation(animationDetails) {\n      var element = animationDetails.element;\n      var options = animationDetails.options || {};\n\n      if (animationDetails.structural) {\n        options.event = animationDetails.event;\n        options.structural = true;\n        options.applyClassesEarly = true;\n\n        // we special case the leave animation since we want to ensure that\n        // the element is removed as soon as the animation is over. Otherwise\n        // a flicker might appear or the element may not be removed at all\n        if (animationDetails.event === 'leave') {\n          options.onDone = options.domOperation;\n        }\n      }\n\n      // We assign the preparationClasses as the actual animation event since\n      // the internals of $animateCss will just suffix the event token values\n      // with `-active` to trigger the animation.\n      if (options.preparationClasses) {\n        options.event = concatWithSpace(options.event, options.preparationClasses);\n      }\n\n      var animator = $animateCss(element, options);\n\n      // the driver lookup code inside of $$animation attempts to spawn a\n      // driver one by one until a driver returns a.$$willAnimate animator object.\n      // $animateCss will always return an object, however, it will pass in\n      // a flag as a hint as to whether an animation was detected or not\n      return animator.$$willAnimate ? animator : null;\n    }\n  }];\n}];\n\n// TODO(matsko): use caching here to speed things up for detection\n// TODO(matsko): add documentation\n//  by the time...\n\nvar $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\n       function($injector,   $$AnimateRunner,   $$jqLite) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n         // $animateJs(element, 'enter');\n    return function(element, event, classes, options) {\n      // the `classes` argument is optional and if it is not used\n      // then the classes will be resolved from the element's className\n      // property as well as options.addClass/options.removeClass.\n      if (arguments.length === 3 && isObject(classes)) {\n        options = classes;\n        classes = null;\n      }\n\n      options = prepareAnimationOptions(options);\n      if (!classes) {\n        classes = element.attr('class') || '';\n        if (options.addClass) {\n          classes += ' ' + options.addClass;\n        }\n        if (options.removeClass) {\n          classes += ' ' + options.removeClass;\n        }\n      }\n\n      var classesToAdd = options.addClass;\n      var classesToRemove = options.removeClass;\n\n      // the lookupAnimations function returns a series of animation objects that are\n      // matched up with one or more of the CSS classes. These animation objects are\n      // defined via the module.animation factory function. If nothing is detected then\n      // we don't return anything which then makes $animation query the next driver.\n      var animations = lookupAnimations(classes);\n      var before, after;\n      if (animations.length) {\n        var afterFn, beforeFn;\n        if (event == 'leave') {\n          beforeFn = 'leave';\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\n        } else {\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\n          afterFn = event;\n        }\n\n        if (event !== 'enter' && event !== 'move') {\n          before = packageAnimations(element, event, options, animations, beforeFn);\n        }\n        after  = packageAnimations(element, event, options, animations, afterFn);\n      }\n\n      // no matching animations\n      if (!before && !after) return;\n\n      function applyOptions() {\n        options.domOperation();\n        applyAnimationClasses(element, options);\n      }\n\n      return {\n        start: function() {\n          var closeActiveAnimations;\n          var chain = [];\n\n          if (before) {\n            chain.push(function(fn) {\n              closeActiveAnimations = before(fn);\n            });\n          }\n\n          if (chain.length) {\n            chain.push(function(fn) {\n              applyOptions();\n              fn(true);\n            });\n          } else {\n            applyOptions();\n          }\n\n          if (after) {\n            chain.push(function(fn) {\n              closeActiveAnimations = after(fn);\n            });\n          }\n\n          var animationClosed = false;\n          var runner = new $$AnimateRunner({\n            end: function() {\n              endAnimations();\n            },\n            cancel: function() {\n              endAnimations(true);\n            }\n          });\n\n          $$AnimateRunner.chain(chain, onComplete);\n          return runner;\n\n          function onComplete(success) {\n            animationClosed = true;\n            applyOptions();\n            applyAnimationStyles(element, options);\n            runner.complete(success);\n          }\n\n          function endAnimations(cancelled) {\n            if (!animationClosed) {\n              (closeActiveAnimations || noop)(cancelled);\n              onComplete(cancelled);\n            }\n          }\n        }\n      };\n\n      function executeAnimationFn(fn, element, event, options, onDone) {\n        var args;\n        switch (event) {\n          case 'animate':\n            args = [element, options.from, options.to, onDone];\n            break;\n\n          case 'setClass':\n            args = [element, classesToAdd, classesToRemove, onDone];\n            break;\n\n          case 'addClass':\n            args = [element, classesToAdd, onDone];\n            break;\n\n          case 'removeClass':\n            args = [element, classesToRemove, onDone];\n            break;\n\n          default:\n            args = [element, onDone];\n            break;\n        }\n\n        args.push(options);\n\n        var value = fn.apply(fn, args);\n        if (value) {\n          if (isFunction(value.start)) {\n            value = value.start();\n          }\n\n          if (value instanceof $$AnimateRunner) {\n            value.done(onDone);\n          } else if (isFunction(value)) {\n            // optional onEnd / onCancel callback\n            return value;\n          }\n        }\n\n        return noop;\n      }\n\n      function groupEventedAnimations(element, event, options, animations, fnName) {\n        var operations = [];\n        forEach(animations, function(ani) {\n          var animation = ani[fnName];\n          if (!animation) return;\n\n          // note that all of these animations will run in parallel\n          operations.push(function() {\n            var runner;\n            var endProgressCb;\n\n            var resolved = false;\n            var onAnimationComplete = function(rejected) {\n              if (!resolved) {\n                resolved = true;\n                (endProgressCb || noop)(rejected);\n                runner.complete(!rejected);\n              }\n            };\n\n            runner = new $$AnimateRunner({\n              end: function() {\n                onAnimationComplete();\n              },\n              cancel: function() {\n                onAnimationComplete(true);\n              }\n            });\n\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\n              var cancelled = result === false;\n              onAnimationComplete(cancelled);\n            });\n\n            return runner;\n          });\n        });\n\n        return operations;\n      }\n\n      function packageAnimations(element, event, options, animations, fnName) {\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\n        if (operations.length === 0) {\n          var a,b;\n          if (fnName === 'beforeSetClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\n          } else if (fnName === 'setClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\n          }\n\n          if (a) {\n            operations = operations.concat(a);\n          }\n          if (b) {\n            operations = operations.concat(b);\n          }\n        }\n\n        if (operations.length === 0) return;\n\n        // TODO(matsko): add documentation\n        return function startAnimation(callback) {\n          var runners = [];\n          if (operations.length) {\n            forEach(operations, function(animateFn) {\n              runners.push(animateFn());\n            });\n          }\n\n          runners.length ? $$AnimateRunner.all(runners, callback) : callback();\n\n          return function endFn(reject) {\n            forEach(runners, function(runner) {\n              reject ? runner.cancel() : runner.end();\n            });\n          };\n        };\n      }\n    };\n\n    function lookupAnimations(classes) {\n      classes = isArray(classes) ? classes : classes.split(' ');\n      var matches = [], flagMap = {};\n      for (var i=0; i < classes.length; i++) {\n        var klass = classes[i],\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\n        if (animationFactory && !flagMap[klass]) {\n          matches.push($injector.get(animationFactory));\n          flagMap[klass] = true;\n        }\n      }\n      return matches;\n    }\n  }];\n}];\n\nvar $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateJsDriver');\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\n    return function initDriverFn(animationDetails) {\n      if (animationDetails.from && animationDetails.to) {\n        var fromAnimation = prepareAnimation(animationDetails.from);\n        var toAnimation = prepareAnimation(animationDetails.to);\n        if (!fromAnimation && !toAnimation) return;\n\n        return {\n          start: function() {\n            var animationRunners = [];\n\n            if (fromAnimation) {\n              animationRunners.push(fromAnimation.start());\n            }\n\n            if (toAnimation) {\n              animationRunners.push(toAnimation.start());\n            }\n\n            $$AnimateRunner.all(animationRunners, done);\n\n            var runner = new $$AnimateRunner({\n              end: endFnFactory(),\n              cancel: endFnFactory()\n            });\n\n            return runner;\n\n            function endFnFactory() {\n              return function() {\n                forEach(animationRunners, function(runner) {\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\n                  runner.end();\n                });\n              };\n            }\n\n            function done(status) {\n              runner.complete(status);\n            }\n          }\n        };\n      } else {\n        return prepareAnimation(animationDetails);\n      }\n    };\n\n    function prepareAnimation(animationDetails) {\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n      var element = animationDetails.element;\n      var event = animationDetails.event;\n      var options = animationDetails.options;\n      var classes = animationDetails.classes;\n      return $$animateJs(element, event, classes, options);\n    }\n  }];\n}];\n\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\nvar $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {\n  var PRE_DIGEST_STATE = 1;\n  var RUNNING_STATE = 2;\n\n  var rules = this.rules = {\n    skip: [],\n    cancel: [],\n    join: []\n  };\n\n  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {\n    return rules[ruleType].some(function(fn) {\n      return fn(element, currentAnimation, previousAnimation);\n    });\n  }\n\n  function hasAnimationClasses(options, and) {\n    options = options || {};\n    var a = (options.addClass || '').length > 0;\n    var b = (options.removeClass || '').length > 0;\n    return and ? a && b : a || b;\n  }\n\n  rules.join.push(function(element, newAnimation, currentAnimation) {\n    // if the new animation is class-based then we can just tack that on\n    return !newAnimation.structural && hasAnimationClasses(newAnimation.options);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // there is no need to animate anything if no classes are being added and\n    // there is no structural animation that will be triggered\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // why should we trigger a new structural animation if the element will\n    // be removed from the DOM anyway?\n    return currentAnimation.event == 'leave' && newAnimation.structural;\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // if there is an ongoing current animation then don't even bother running the class-based animation\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // there can never be two structural animations running at the same time\n    return currentAnimation.structural && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // if the previous animation is already running, but the new animation will\n    // be triggered, but the new animation is structural\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    var nO = newAnimation.options;\n    var cO = currentAnimation.options;\n\n    // if the exact same CSS class is added/removed then it's safe to cancel it\n    return (nO.addClass && nO.addClass === cO.removeClass) || (nO.removeClass && nO.removeClass === cO.addClass);\n  });\n\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {\n\n    var activeAnimationsLookup = new $$HashMap();\n    var disabledElementsLookup = new $$HashMap();\n    var animationsEnabled = null;\n\n    function postDigestTaskFactory() {\n      var postDigestCalled = false;\n      return function(fn) {\n        // we only issue a call to postDigest before\n        // it has first passed. This prevents any callbacks\n        // from not firing once the animation has completed\n        // since it will be out of the digest cycle.\n        if (postDigestCalled) {\n          fn();\n        } else {\n          $rootScope.$$postDigest(function() {\n            postDigestCalled = true;\n            fn();\n          });\n        }\n      };\n    }\n\n    // Wait until all directive and route-related templates are downloaded and\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n    // all of the remote templates being currently downloaded. If there are no\n    // templates currently downloading then the watcher will still fire anyway.\n    var deregisterWatch = $rootScope.$watch(\n      function() { return $templateRequest.totalPendingRequests === 0; },\n      function(isEmpty) {\n        if (!isEmpty) return;\n        deregisterWatch();\n\n        // Now that all templates have been downloaded, $animate will wait until\n        // the post digest queue is empty before enabling animations. By having two\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\n        // very end of the post digest queue. Since all of the animations in $animate\n        // use $postDigest, it's important that the code below executes at the end.\n        // This basically means that the page is fully downloaded and compiled before\n        // any animations are triggered.\n        $rootScope.$$postDigest(function() {\n          $rootScope.$$postDigest(function() {\n            // we check for null directly in the event that the application already called\n            // .enabled() with whatever arguments that it provided it with\n            if (animationsEnabled === null) {\n              animationsEnabled = true;\n            }\n          });\n        });\n      }\n    );\n\n    var callbackRegistry = {};\n\n    // remember that the classNameFilter is set during the provider/config\n    // stage therefore we can optimize here and setup a helper function\n    var classNameFilter = $animateProvider.classNameFilter();\n    var isAnimatableClassName = !classNameFilter\n              ? function() { return true; }\n              : function(className) {\n                return classNameFilter.test(className);\n              };\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function normalizeAnimationOptions(element, options) {\n      return mergeAnimationOptions(element, options, {});\n    }\n\n    function findCallbacks(parent, element, event) {\n      var targetNode = getDomNode(element);\n      var targetParentNode = getDomNode(parent);\n\n      var matches = [];\n      var entries = callbackRegistry[event];\n      if (entries) {\n        forEach(entries, function(entry) {\n          if (entry.node.contains(targetNode)) {\n            matches.push(entry.callback);\n          } else if (event === 'leave' && entry.node.contains(targetParentNode)) {\n            matches.push(entry.callback);\n          }\n        });\n      }\n\n      return matches;\n    }\n\n    return {\n      on: function(event, container, callback) {\n        var node = extractElementNode(container);\n        callbackRegistry[event] = callbackRegistry[event] || [];\n        callbackRegistry[event].push({\n          node: node,\n          callback: callback\n        });\n      },\n\n      off: function(event, container, callback) {\n        var entries = callbackRegistry[event];\n        if (!entries) return;\n\n        callbackRegistry[event] = arguments.length === 1\n            ? null\n            : filterFromRegistry(entries, container, callback);\n\n        function filterFromRegistry(list, matchContainer, matchCallback) {\n          var containerNode = extractElementNode(matchContainer);\n          return list.filter(function(entry) {\n            var isMatch = entry.node === containerNode &&\n                            (!matchCallback || entry.callback === matchCallback);\n            return !isMatch;\n          });\n        }\n      },\n\n      pin: function(element, parentElement) {\n        assertArg(isElement(element), 'element', 'not an element');\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\n      },\n\n      push: function(element, event, options, domOperation) {\n        options = options || {};\n        options.domOperation = domOperation;\n        return queueAnimation(element, event, options);\n      },\n\n      // this method has four signatures:\n      //  () - global getter\n      //  (bool) - global setter\n      //  (element) - element getter\n      //  (element, bool) - element setter<F37>\n      enabled: function(element, bool) {\n        var argCount = arguments.length;\n\n        if (argCount === 0) {\n          // () - Global getter\n          bool = !!animationsEnabled;\n        } else {\n          var hasElement = isElement(element);\n\n          if (!hasElement) {\n            // (bool) - Global setter\n            bool = animationsEnabled = !!element;\n          } else {\n            var node = getDomNode(element);\n            var recordExists = disabledElementsLookup.get(node);\n\n            if (argCount === 1) {\n              // (element) - Element getter\n              bool = !recordExists;\n            } else {\n              // (element, bool) - Element setter\n              bool = !!bool;\n              if (!bool) {\n                disabledElementsLookup.put(node, true);\n              } else if (recordExists) {\n                disabledElementsLookup.remove(node);\n              }\n            }\n          }\n        }\n\n        return bool;\n      }\n    };\n\n    function queueAnimation(element, event, options) {\n      var node, parent;\n      element = stripCommentsFromElement(element);\n      if (element) {\n        node = getDomNode(element);\n        parent = element.parent();\n      }\n\n      options = prepareAnimationOptions(options);\n\n      // we create a fake runner with a working promise.\n      // These methods will become available after the digest has passed\n      var runner = new $$AnimateRunner();\n\n      // this is used to trigger callbacks in postDigest mode\n      var runInNextPostDigestOrNow = postDigestTaskFactory();\n\n      if (isArray(options.addClass)) {\n        options.addClass = options.addClass.join(' ');\n      }\n\n      if (options.addClass && !isString(options.addClass)) {\n        options.addClass = null;\n      }\n\n      if (isArray(options.removeClass)) {\n        options.removeClass = options.removeClass.join(' ');\n      }\n\n      if (options.removeClass && !isString(options.removeClass)) {\n        options.removeClass = null;\n      }\n\n      if (options.from && !isObject(options.from)) {\n        options.from = null;\n      }\n\n      if (options.to && !isObject(options.to)) {\n        options.to = null;\n      }\n\n      // there are situations where a directive issues an animation for\n      // a jqLite wrapper that contains only comment nodes... If this\n      // happens then there is no way we can perform an animation\n      if (!node) {\n        close();\n        return runner;\n      }\n\n      var className = [node.className, options.addClass, options.removeClass].join(' ');\n      if (!isAnimatableClassName(className)) {\n        close();\n        return runner;\n      }\n\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // this is a hard disable of all animations for the application or on\n      // the element itself, therefore  there is no need to continue further\n      // past this point if not enabled\n      var skipAnimations = !animationsEnabled || disabledElementsLookup.get(node);\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n      var hasExistingAnimation = !!existingAnimation.state;\n\n      // there is no point in traversing the same collection of parent ancestors if a followup\n      // animation will be run on the same element that already did all that checking work\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {\n        skipAnimations = !areAnimationsAllowed(element, parent, event);\n      }\n\n      if (skipAnimations) {\n        close();\n        return runner;\n      }\n\n      if (isStructural) {\n        closeChildAnimations(element);\n      }\n\n      var newAnimation = {\n        structural: isStructural,\n        element: element,\n        event: event,\n        close: close,\n        options: options,\n        runner: runner\n      };\n\n      if (hasExistingAnimation) {\n        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);\n        if (skipAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            close();\n            return runner;\n          } else {\n            mergeAnimationOptions(element, existingAnimation.options, options);\n            return existingAnimation.runner;\n          }\n        }\n\n        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);\n        if (cancelAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            // this will end the animation right away and it is safe\n            // to do so since the animation is already running and the\n            // runner callback code will run in async\n            existingAnimation.runner.end();\n          } else if (existingAnimation.structural) {\n            // this means that the animation is queued into a digest, but\n            // hasn't started yet. Therefore it is safe to run the close\n            // method which will call the runner methods in async.\n            existingAnimation.close();\n          } else {\n            // this will merge the new animation options into existing animation options\n            mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);\n            return existingAnimation.runner;\n          }\n        } else {\n          // a joined animation means that this animation will take over the existing one\n          // so an example would involve a leave animation taking over an enter. Then when\n          // the postDigest kicks in the enter will be ignored.\n          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);\n          if (joinAnimationFlag) {\n            if (existingAnimation.state === RUNNING_STATE) {\n              normalizeAnimationOptions(element, options);\n            } else {\n              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\n\n              event = newAnimation.event = existingAnimation.event;\n              options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);\n\n              //we return the same runner since only the option values of this animation will\n              //be fed into the `existingAnimation`.\n              return existingAnimation.runner;\n            }\n          }\n        }\n      } else {\n        // normalization in this case means that it removes redundant CSS classes that\n        // already exist (addClass) or do not exist (removeClass) on the element\n        normalizeAnimationOptions(element, options);\n      }\n\n      // when the options are merged and cleaned up we may end up not having to do\n      // an animation at all, therefore we should check this before issuing a post\n      // digest callback. Structural animations will always run no matter what.\n      var isValidAnimation = newAnimation.structural;\n      if (!isValidAnimation) {\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\n                            || hasAnimationClasses(newAnimation.options);\n      }\n\n      if (!isValidAnimation) {\n        close();\n        clearElementAnimationState(element);\n        return runner;\n      }\n\n      // the counter keeps track of cancelled animations\n      var counter = (existingAnimation.counter || 0) + 1;\n      newAnimation.counter = counter;\n\n      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);\n\n      $rootScope.$$postDigest(function() {\n        var animationDetails = activeAnimationsLookup.get(node);\n        var animationCancelled = !animationDetails;\n        animationDetails = animationDetails || {};\n\n        // if addClass/removeClass is called before something like enter then the\n        // registered parent element may not be present. The code below will ensure\n        // that a final value for parent element is obtained\n        var parentElement = element.parent() || [];\n\n        // animate/structural/class-based animations all have requirements. Otherwise there\n        // is no point in performing an animation. The parent node must also be set.\n        var isValidAnimation = parentElement.length > 0\n                                && (animationDetails.event === 'animate'\n                                    || animationDetails.structural\n                                    || hasAnimationClasses(animationDetails.options));\n\n        // this means that the previous animation was cancelled\n        // even if the follow-up animation is the same event\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\n          // if another animation did not take over then we need\n          // to make sure that the domOperation and options are\n          // handled accordingly\n          if (animationCancelled) {\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n          }\n\n          // if the event changed from something like enter to leave then we do\n          // it, otherwise if it's the same then the end result will be the same too\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\n            options.domOperation();\n            runner.end();\n          }\n\n          // in the event that the element animation was not cancelled or a follow-up animation\n          // isn't allowed to animate from here then we need to clear the state of the element\n          // so that any future animations won't read the expired animation data.\n          if (!isValidAnimation) {\n            clearElementAnimationState(element);\n          }\n\n          return;\n        }\n\n        // this combined multiple class to addClass / removeClass into a setClass event\n        // so long as a structural event did not take over the animation\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, true)\n            ? 'setClass'\n            : animationDetails.event;\n\n        markElementAnimationState(element, RUNNING_STATE);\n        var realRunner = $$animation(element, event, animationDetails.options);\n\n        realRunner.done(function(status) {\n          close(!status);\n          var animationDetails = activeAnimationsLookup.get(node);\n          if (animationDetails && animationDetails.counter === counter) {\n            clearElementAnimationState(getDomNode(element));\n          }\n          notifyProgress(runner, event, 'close', {});\n        });\n\n        // this will update the runner's flow-control events based on\n        // the `realRunner` object.\n        runner.setHost(realRunner);\n        notifyProgress(runner, event, 'start', {});\n      });\n\n      return runner;\n\n      function notifyProgress(runner, event, phase, data) {\n        runInNextPostDigestOrNow(function() {\n          var callbacks = findCallbacks(parent, element, event);\n          if (callbacks.length) {\n            // do not optimize this call here to RAF because\n            // we don't know how heavy the callback code here will\n            // be and if this code is buffered then this can\n            // lead to a performance regression.\n            $$rAF(function() {\n              forEach(callbacks, function(callback) {\n                callback(element, phase, data);\n              });\n            });\n          }\n        });\n        runner.progress(event, phase, data);\n      }\n\n      function close(reject) { // jshint ignore:line\n        clearGeneratedClasses(element, options);\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n        runner.complete(!reject);\n      }\n    }\n\n    function closeChildAnimations(element) {\n      var node = getDomNode(element);\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\n      forEach(children, function(child) {\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));\n        var animationDetails = activeAnimationsLookup.get(child);\n        switch (state) {\n          case RUNNING_STATE:\n            animationDetails.runner.end();\n            /* falls through */\n          case PRE_DIGEST_STATE:\n            if (animationDetails) {\n              activeAnimationsLookup.remove(child);\n            }\n            break;\n        }\n      });\n    }\n\n    function clearElementAnimationState(element) {\n      var node = getDomNode(element);\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n      activeAnimationsLookup.remove(node);\n    }\n\n    function isMatchingElement(nodeOrElmA, nodeOrElmB) {\n      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);\n    }\n\n    function areAnimationsAllowed(element, parentElement, event) {\n      var bodyElement = jqLite($document[0].body);\n      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';\n      var rootElementDetected = isMatchingElement(element, $rootElement);\n      var parentAnimationDetected = false;\n      var animateChildren;\n\n      var parentHost = element.data(NG_ANIMATE_PIN_DATA);\n      if (parentHost) {\n        parentElement = parentHost;\n      }\n\n      while (parentElement && parentElement.length) {\n        if (!rootElementDetected) {\n          // angular doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n        }\n\n        var parentNode = parentElement[0];\n        if (parentNode.nodeType !== ELEMENT_NODE) {\n          // no point in inspecting the #document element\n          break;\n        }\n\n        var details = activeAnimationsLookup.get(parentNode) || {};\n        // either an enter, leave or move animation will commence\n        // therefore we can't allow any animations to take place\n        // but if a parent animation is class-based then that's ok\n        if (!parentAnimationDetected) {\n          parentAnimationDetected = details.structural || disabledElementsLookup.get(parentNode);\n        }\n\n        if (isUndefined(animateChildren) || animateChildren === true) {\n          var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);\n          if (isDefined(value)) {\n            animateChildren = value;\n          }\n        }\n\n        // there is no need to continue traversing at this point\n        if (parentAnimationDetected && animateChildren === false) break;\n\n        if (!rootElementDetected) {\n          // angular doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n          if (!rootElementDetected) {\n            parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);\n            if (parentHost) {\n              parentElement = parentHost;\n            }\n          }\n        }\n\n        if (!bodyElementDetected) {\n          // we also need to ensure that the element is or will be apart of the body element\n          // otherwise it is pointless to even issue an animation to be rendered\n          bodyElementDetected = isMatchingElement(parentElement, bodyElement);\n        }\n\n        parentElement = parentElement.parent();\n      }\n\n      var allowAnimation = !parentAnimationDetected || animateChildren;\n      return allowAnimation && rootElementDetected && bodyElementDetected;\n    }\n\n    function markElementAnimationState(element, state, details) {\n      details = details || {};\n      details.state = state;\n\n      var node = getDomNode(element);\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\n      var oldValue = activeAnimationsLookup.get(node);\n      var newValue = oldValue\n          ? extend(oldValue, details)\n          : details;\n      activeAnimationsLookup.put(node, newValue);\n    }\n  }];\n}];\n\nvar $$AnimateAsyncRunFactory = ['$$rAF', function($$rAF) {\n  var waitQueue = [];\n\n  function waitForTick(fn) {\n    waitQueue.push(fn);\n    if (waitQueue.length > 1) return;\n    $$rAF(function() {\n      for (var i = 0; i < waitQueue.length; i++) {\n        waitQueue[i]();\n      }\n      waitQueue = [];\n    });\n  }\n\n  return function() {\n    var passed = false;\n    waitForTick(function() {\n      passed = true;\n    });\n    return function(callback) {\n      passed ? callback() : waitForTick(callback);\n    };\n  };\n}];\n\nvar $$AnimateRunnerFactory = ['$q', '$sniffer', '$$animateAsyncRun',\n                      function($q,   $sniffer,   $$animateAsyncRun) {\n\n  var INITIAL_STATE = 0;\n  var DONE_PENDING_STATE = 1;\n  var DONE_COMPLETE_STATE = 2;\n\n  AnimateRunner.chain = function(chain, callback) {\n    var index = 0;\n\n    next();\n    function next() {\n      if (index === chain.length) {\n        callback(true);\n        return;\n      }\n\n      chain[index](function(response) {\n        if (response === false) {\n          callback(false);\n          return;\n        }\n        index++;\n        next();\n      });\n    }\n  };\n\n  AnimateRunner.all = function(runners, callback) {\n    var count = 0;\n    var status = true;\n    forEach(runners, function(runner) {\n      runner.done(onProgress);\n    });\n\n    function onProgress(response) {\n      status = status && response;\n      if (++count === runners.length) {\n        callback(status);\n      }\n    }\n  };\n\n  function AnimateRunner(host) {\n    this.setHost(host);\n\n    this._doneCallbacks = [];\n    this._runInAnimationFrame = $$animateAsyncRun();\n    this._state = 0;\n  }\n\n  AnimateRunner.prototype = {\n    setHost: function(host) {\n      this.host = host || {};\n    },\n\n    done: function(fn) {\n      if (this._state === DONE_COMPLETE_STATE) {\n        fn();\n      } else {\n        this._doneCallbacks.push(fn);\n      }\n    },\n\n    progress: noop,\n\n    getPromise: function() {\n      if (!this.promise) {\n        var self = this;\n        this.promise = $q(function(resolve, reject) {\n          self.done(function(status) {\n            status === false ? reject() : resolve();\n          });\n        });\n      }\n      return this.promise;\n    },\n\n    then: function(resolveHandler, rejectHandler) {\n      return this.getPromise().then(resolveHandler, rejectHandler);\n    },\n\n    'catch': function(handler) {\n      return this.getPromise()['catch'](handler);\n    },\n\n    'finally': function(handler) {\n      return this.getPromise()['finally'](handler);\n    },\n\n    pause: function() {\n      if (this.host.pause) {\n        this.host.pause();\n      }\n    },\n\n    resume: function() {\n      if (this.host.resume) {\n        this.host.resume();\n      }\n    },\n\n    end: function() {\n      if (this.host.end) {\n        this.host.end();\n      }\n      this._resolve(true);\n    },\n\n    cancel: function() {\n      if (this.host.cancel) {\n        this.host.cancel();\n      }\n      this._resolve(false);\n    },\n\n    complete: function(response) {\n      var self = this;\n      if (self._state === INITIAL_STATE) {\n        self._state = DONE_PENDING_STATE;\n        self._runInAnimationFrame(function() {\n          self._resolve(response);\n        });\n      }\n    },\n\n    _resolve: function(response) {\n      if (this._state !== DONE_COMPLETE_STATE) {\n        forEach(this._doneCallbacks, function(fn) {\n          fn(response);\n        });\n        this._doneCallbacks.length = 0;\n        this._state = DONE_COMPLETE_STATE;\n      }\n    }\n  };\n\n  return AnimateRunner;\n}];\n\nvar $$AnimationProvider = ['$animateProvider', function($animateProvider) {\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\n\n  var drivers = this.drivers = [];\n\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\n\n  function setRunner(element, runner) {\n    element.data(RUNNER_STORAGE_KEY, runner);\n  }\n\n  function removeRunner(element) {\n    element.removeData(RUNNER_STORAGE_KEY);\n  }\n\n  function getRunner(element) {\n    return element.data(RUNNER_STORAGE_KEY);\n  }\n\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {\n\n    var animationQueue = [];\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function sortAnimations(animations) {\n      var tree = { children: [] };\n      var i, lookup = new $$HashMap();\n\n      // this is done first beforehand so that the hashmap\n      // is filled with a list of the elements that will be animated\n      for (i = 0; i < animations.length; i++) {\n        var animation = animations[i];\n        lookup.put(animation.domNode, animations[i] = {\n          domNode: animation.domNode,\n          fn: animation.fn,\n          children: []\n        });\n      }\n\n      for (i = 0; i < animations.length; i++) {\n        processNode(animations[i]);\n      }\n\n      return flatten(tree);\n\n      function processNode(entry) {\n        if (entry.processed) return entry;\n        entry.processed = true;\n\n        var elementNode = entry.domNode;\n        var parentNode = elementNode.parentNode;\n        lookup.put(elementNode, entry);\n\n        var parentEntry;\n        while (parentNode) {\n          parentEntry = lookup.get(parentNode);\n          if (parentEntry) {\n            if (!parentEntry.processed) {\n              parentEntry = processNode(parentEntry);\n            }\n            break;\n          }\n          parentNode = parentNode.parentNode;\n        }\n\n        (parentEntry || tree).children.push(entry);\n        return entry;\n      }\n\n      function flatten(tree) {\n        var result = [];\n        var queue = [];\n        var i;\n\n        for (i = 0; i < tree.children.length; i++) {\n          queue.push(tree.children[i]);\n        }\n\n        var remainingLevelEntries = queue.length;\n        var nextLevelEntries = 0;\n        var row = [];\n\n        for (i = 0; i < queue.length; i++) {\n          var entry = queue[i];\n          if (remainingLevelEntries <= 0) {\n            remainingLevelEntries = nextLevelEntries;\n            nextLevelEntries = 0;\n            result.push(row);\n            row = [];\n          }\n          row.push(entry.fn);\n          entry.children.forEach(function(childEntry) {\n            nextLevelEntries++;\n            queue.push(childEntry);\n          });\n          remainingLevelEntries--;\n        }\n\n        if (row.length) {\n          result.push(row);\n        }\n\n        return result;\n      }\n    }\n\n    // TODO(matsko): document the signature in a better way\n    return function(element, event, options) {\n      options = prepareAnimationOptions(options);\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // there is no animation at the current moment, however\n      // these runner methods will get later updated with the\n      // methods leading into the driver's end/cancel methods\n      // for now they just stop the animation from starting\n      var runner = new $$AnimateRunner({\n        end: function() { close(); },\n        cancel: function() { close(true); }\n      });\n\n      if (!drivers.length) {\n        close();\n        return runner;\n      }\n\n      setRunner(element, runner);\n\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\n      var tempClasses = options.tempClasses;\n      if (tempClasses) {\n        classes += ' ' + tempClasses;\n        options.tempClasses = null;\n      }\n\n      animationQueue.push({\n        // this data is used by the postDigest code and passed into\n        // the driver step function\n        element: element,\n        classes: classes,\n        event: event,\n        structural: isStructural,\n        options: options,\n        beforeStart: beforeStart,\n        close: close\n      });\n\n      element.on('$destroy', handleDestroyedElement);\n\n      // we only want there to be one function called within the post digest\n      // block. This way we can group animations for all the animations that\n      // were apart of the same postDigest flush call.\n      if (animationQueue.length > 1) return runner;\n\n      $rootScope.$$postDigest(function() {\n        var animations = [];\n        forEach(animationQueue, function(entry) {\n          // the element was destroyed early on which removed the runner\n          // form its storage. This means we can't animate this element\n          // at all and it already has been closed due to destruction.\n          if (getRunner(entry.element)) {\n            animations.push(entry);\n          } else {\n            entry.close();\n          }\n        });\n\n        // now any future animations will be in another postDigest\n        animationQueue.length = 0;\n\n        var groupedAnimations = groupAnimations(animations);\n        var toBeSortedAnimations = [];\n\n        forEach(groupedAnimations, function(animationEntry) {\n          toBeSortedAnimations.push({\n            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\n            fn: function triggerAnimationStart() {\n              // it's important that we apply the `ng-animate` CSS class and the\n              // temporary classes before we do any driver invoking since these\n              // CSS classes may be required for proper CSS detection.\n              animationEntry.beforeStart();\n\n              var startAnimationFn, closeFn = animationEntry.close;\n\n              // in the event that the element was removed before the digest runs or\n              // during the RAF sequencing then we should not trigger the animation.\n              var targetElement = animationEntry.anchors\n                  ? (animationEntry.from.element || animationEntry.to.element)\n                  : animationEntry.element;\n\n              if (getRunner(targetElement)) {\n                var operation = invokeFirstDriver(animationEntry);\n                if (operation) {\n                  startAnimationFn = operation.start;\n                }\n              }\n\n              if (!startAnimationFn) {\n                closeFn();\n              } else {\n                var animationRunner = startAnimationFn();\n                animationRunner.done(function(status) {\n                  closeFn(!status);\n                });\n                updateAnimationRunners(animationEntry, animationRunner);\n              }\n            }\n          });\n        });\n\n        // we need to sort each of the animations in order of parent to child\n        // relationships. This ensures that the child classes are applied at the\n        // right time.\n        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\n      });\n\n      return runner;\n\n      // TODO(matsko): change to reference nodes\n      function getAnchorNodes(node) {\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n              ? [node]\n              : node.querySelectorAll(SELECTOR);\n        var anchors = [];\n        forEach(items, function(node) {\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n          if (attr && attr.length) {\n            anchors.push(node);\n          }\n        });\n        return anchors;\n      }\n\n      function groupAnimations(animations) {\n        var preparedAnimations = [];\n        var refLookup = {};\n        forEach(animations, function(animation, index) {\n          var element = animation.element;\n          var node = getDomNode(element);\n          var event = animation.event;\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\n\n          if (anchorNodes.length) {\n            var direction = enterOrMove ? 'to' : 'from';\n\n            forEach(anchorNodes, function(anchor) {\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n              refLookup[key] = refLookup[key] || {};\n              refLookup[key][direction] = {\n                animationID: index,\n                element: jqLite(anchor)\n              };\n            });\n          } else {\n            preparedAnimations.push(animation);\n          }\n        });\n\n        var usedIndicesLookup = {};\n        var anchorGroups = {};\n        forEach(refLookup, function(operations, key) {\n          var from = operations.from;\n          var to = operations.to;\n\n          if (!from || !to) {\n            // only one of these is set therefore we can't have an\n            // anchor animation since all three pieces are required\n            var index = from ? from.animationID : to.animationID;\n            var indexKey = index.toString();\n            if (!usedIndicesLookup[indexKey]) {\n              usedIndicesLookup[indexKey] = true;\n              preparedAnimations.push(animations[index]);\n            }\n            return;\n          }\n\n          var fromAnimation = animations[from.animationID];\n          var toAnimation = animations[to.animationID];\n          var lookupKey = from.animationID.toString();\n          if (!anchorGroups[lookupKey]) {\n            var group = anchorGroups[lookupKey] = {\n              structural: true,\n              beforeStart: function() {\n                fromAnimation.beforeStart();\n                toAnimation.beforeStart();\n              },\n              close: function() {\n                fromAnimation.close();\n                toAnimation.close();\n              },\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\n              from: fromAnimation,\n              to: toAnimation,\n              anchors: [] // TODO(matsko): change to reference nodes\n            };\n\n            // the anchor animations require that the from and to elements both have at least\n            // one shared CSS class which effictively marries the two elements together to use\n            // the same animation driver and to properly sequence the anchor animation.\n            if (group.classes.length) {\n              preparedAnimations.push(group);\n            } else {\n              preparedAnimations.push(fromAnimation);\n              preparedAnimations.push(toAnimation);\n            }\n          }\n\n          anchorGroups[lookupKey].anchors.push({\n            'out': from.element, 'in': to.element\n          });\n        });\n\n        return preparedAnimations;\n      }\n\n      function cssClassesIntersection(a,b) {\n        a = a.split(' ');\n        b = b.split(' ');\n        var matches = [];\n\n        for (var i = 0; i < a.length; i++) {\n          var aa = a[i];\n          if (aa.substring(0,3) === 'ng-') continue;\n\n          for (var j = 0; j < b.length; j++) {\n            if (aa === b[j]) {\n              matches.push(aa);\n              break;\n            }\n          }\n        }\n\n        return matches.join(' ');\n      }\n\n      function invokeFirstDriver(animationDetails) {\n        // we loop in reverse order since the more general drivers (like CSS and JS)\n        // may attempt more elements, but custom drivers are more particular\n        for (var i = drivers.length - 1; i >= 0; i--) {\n          var driverName = drivers[i];\n          if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check\n\n          var factory = $injector.get(driverName);\n          var driver = factory(animationDetails);\n          if (driver) {\n            return driver;\n          }\n        }\n      }\n\n      function beforeStart() {\n        element.addClass(NG_ANIMATE_CLASSNAME);\n        if (tempClasses) {\n          $$jqLite.addClass(element, tempClasses);\n        }\n      }\n\n      function updateAnimationRunners(animation, newRunner) {\n        if (animation.from && animation.to) {\n          update(animation.from.element);\n          update(animation.to.element);\n        } else {\n          update(animation.element);\n        }\n\n        function update(element) {\n          getRunner(element).setHost(newRunner);\n        }\n      }\n\n      function handleDestroyedElement() {\n        var runner = getRunner(element);\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\n          runner.end();\n        }\n      }\n\n      function close(rejected) { // jshint ignore:line\n        element.off('$destroy', handleDestroyedElement);\n        removeRunner(element);\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n\n        if (tempClasses) {\n          $$jqLite.removeClass(element, tempClasses);\n        }\n\n        element.removeClass(NG_ANIMATE_CLASSNAME);\n        runner.complete(!rejected);\n      }\n    };\n  }];\n}];\n\n/* global angularAnimateModule: true,\n\n   $$AnimateAsyncRunFactory,\n   $$rAFSchedulerFactory,\n   $$AnimateChildrenDirective,\n   $$AnimateRunnerFactory,\n   $$AnimateQueueProvider,\n   $$AnimationProvider,\n   $AnimateCssProvider,\n   $$AnimateCssDriverProvider,\n   $$AnimateJsProvider,\n   $$AnimateJsDriverProvider,\n*/\n\n/**\n * @ngdoc module\n * @name ngAnimate\n * @description\n *\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.\n *\n * <div doc-module-components=\"ngAnimate\"></div>\n *\n * # Usage\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\n * the HTML element that the animation will be triggered on.\n *\n * ## Directive Support\n * The following directives are \"animation aware\":\n *\n * | Directive                                                                                                | Supported Animations                                                     |\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\n * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\n *\n * (More information can be found by visiting each the documentation associated with each directive.)\n *\n * ## CSS-based Animations\n *\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\n * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.\n *\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"fade\">\n *    Fade me in out\n * </div>\n * <button ng-click=\"bool=true\">Fade In!</button>\n * <button ng-click=\"bool=false\">Fade Out!</button>\n * ```\n *\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\n *\n * ```css\n * /&#42; The starting CSS styles for the enter animation &#42;/\n * .fade.ng-enter {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n *\n * /&#42; The finishing CSS styles for the enter animation &#42;/\n * .fade.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * ```\n *\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\n *\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\n *\n * ```css\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\n * .fade.ng-leave {\n *   transition:0.5s linear all;\n *   opacity:1;\n * }\n * .fade.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\n *\n * ```css\n * /&#42; there is no need to define anything inside of the destination\n * CSS class since the keyframe will take charge of the animation &#42;/\n * .fade.ng-leave {\n *   animation: my_fade_animation 0.5s linear;\n *   -webkit-animation: my_fade_animation 0.5s linear;\n * }\n *\n * @keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n *\n * @-webkit-keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n * ```\n *\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\n *\n * ### CSS Class-based Animations\n *\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\n * and removed.\n *\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\n *\n * ```html\n * <div ng-show=\"bool\" class=\"fade\">\n *   Show and hide me\n * </div>\n * <button ng-click=\"bool=true\">Toggle</button>\n *\n * <style>\n * .fade.ng-hide {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n * </style>\n * ```\n *\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\n *\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\n * with CSS styles.\n *\n * ```html\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\n *   Highlight this box\n * </div>\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\n *\n * <style>\n * .highlight {\n *   transition:0.5s linear all;\n * }\n * .highlight.on-add {\n *   background:white;\n * }\n * .highlight.on {\n *   background:yellow;\n * }\n * .highlight.on-remove {\n *   background:black;\n * }\n * </style>\n * ```\n *\n * We can also make use of CSS keyframes by placing them within the CSS classes.\n *\n *\n * ### CSS Staggering Animations\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n *\n * ```css\n * .my-animation.ng-enter {\n *   /&#42; standard transition code &#42;/\n *   transition: 1s linear all;\n *   opacity:0;\n * }\n * .my-animation.ng-enter-stagger {\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n *   transition-delay: 0.1s;\n *\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\n *     to not accidentally inherit a delay property from another CSS class &#42;/\n *   transition-duration: 0s;\n * }\n * .my-animation.ng-enter.ng-enter-active {\n *   /&#42; standard transition styles &#42;/\n *   opacity:1;\n * }\n * ```\n *\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\n *\n * The following code will issue the **ng-leave-stagger** event on the element provided:\n *\n * ```js\n * var kids = parent.children();\n *\n * $animate.leave(kids[0]); //stagger index=0\n * $animate.leave(kids[1]); //stagger index=1\n * $animate.leave(kids[2]); //stagger index=2\n * $animate.leave(kids[3]); //stagger index=3\n * $animate.leave(kids[4]); //stagger index=4\n *\n * window.requestAnimationFrame(function() {\n *   //stagger has reset itself\n *   $animate.leave(kids[5]); //stagger index=0\n *   $animate.leave(kids[6]); //stagger index=1\n *\n *   $scope.$digest();\n * });\n * ```\n *\n * Stagger animations are currently only supported within CSS-defined animations.\n *\n * ### The `ng-animate` CSS class\n *\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\n *\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\n *\n * ```css\n * .zipper.ng-animate {\n *   transition:0.5s linear all;\n * }\n * .zipper.ng-enter {\n *   opacity:0;\n * }\n * .zipper.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * .zipper.ng-leave {\n *   opacity:1;\n * }\n * .zipper.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\n * the CSS class once an animation has completed.)\n *\n *\n * ## JavaScript-based Animations\n *\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\n * `module.animation()` module function we can register the ainmation.\n *\n * Let's see an example of a enter/leave animation using `ngRepeat`:\n *\n * ```html\n * <div ng-repeat=\"item in items\" class=\"slide\">\n *   {{ item }}\n * </div>\n * ```\n *\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     // make note that other events (like addClass/removeClass)\n *     // have different function input parameters\n *     enter: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *\n *       // remember to call doneFn so that angular\n *       // knows that the animation has concluded\n *     },\n *\n *     move: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *     },\n *\n *     leave: function(element, doneFn) {\n *       jQuery(element).fadeOut(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\n * greensock.js and velocity.js.\n *\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\n *\n * ```html\n * <div ng-class=\"color\" class=\"colorful\">\n *   this box is moody\n * </div>\n * <button ng-click=\"color='red'\">Change to red</button>\n * <button ng-click=\"color='blue'\">Change to blue</button>\n * <button ng-click=\"color='green'\">Change to green</button>\n * ```\n *\n * ```js\n * myModule.animation('.colorful', [function() {\n *   return {\n *     addClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     removeClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     setClass: function(element, addedClass, removedClass, doneFn) {\n *       // do some cool animation and call the doneFn\n *     }\n *   }\n * }]);\n * ```\n *\n * ## CSS + JS Animations Together\n *\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\n * charge of the animation**:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"slide\">\n *   Slide in and out\n * </div>\n * ```\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     enter: function(element, doneFn) {\n *       jQuery(element).slideIn(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * ```css\n * .slide.ng-enter {\n *   transition:0.5s linear all;\n *   transform:translateY(-100px);\n * }\n * .slide.ng-enter.ng-enter-active {\n *   transform:translateY(0);\n * }\n * ```\n *\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\n * our own JS-based animation code:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\n *\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\n * data into `$animateCss` directly:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true,\n *         addClass: 'maroon-setting',\n *         from: { height:0 },\n *         to: { height: 200 }\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Now we can fill in the rest via our transition CSS code:\n *\n * ```css\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\n * .slide.ng-enter { transition:0.5s linear all; }\n *\n * /&#42; this extra CSS class will be absorbed into the transition\n * since the $animateCss code is adding the class &#42;/\n * .maroon-setting { background:red; }\n * ```\n *\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\n *\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\n *\n * ## Animation Anchoring (via `ng-animate-ref`)\n *\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\n * structural areas of an application (like views) by pairing up elements using an attribute\n * called `ng-animate-ref`.\n *\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\n * that there is a relationship between two components situated in within these views. By using the\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\n * can then attach an animation, which is triggered when the view changes.\n *\n * Say for example we have the following template code:\n *\n * ```html\n * <!-- index.html -->\n * <div ng-view class=\"view-animation\">\n * </div>\n *\n * <!-- home.html -->\n * <a href=\"#/banner-page\">\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * </a>\n *\n * <!-- banner-page.html -->\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * ```\n *\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\n * HTML contents to see if there is a match reference between any components in the view\n * that is leaving and the view that is entering. It will scan both the view which is being\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\n * contain a matching ref value.\n *\n * The two images match since they share the same ref value. ngAnimate will now create a\n * transport element (which is a clone of the first image element) and it will then attempt\n * to animate to the position of the second image element in the next view. For the animation to\n * work a special CSS class called `ng-anchor` will be added to the transported element.\n *\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\n * any changes of CSS classes between the elements:\n *\n * ```css\n * .banner.ng-anchor {\n *   /&#42; this animation will last for 1 second since there are\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\n *   transition:0.5s linear all;\n * }\n * ```\n *\n * We also **must** include animations for the views that are being entered and removed\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\n *\n * ```css\n * .view-animation.ng-enter, .view-animation.ng-leave {\n *   transition:0.5s linear all;\n *   position:fixed;\n *   left:0;\n *   top:0;\n *   width:100%;\n * }\n * .view-animation.ng-enter {\n *   transform:translateX(100%);\n * }\n * .view-animation.ng-leave,\n * .view-animation.ng-enter.ng-enter-active {\n *   transform:translateX(0%);\n * }\n * .view-animation.ng-leave.ng-leave-active {\n *   transform:translateX(-100%);\n * }\n * ```\n *\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\n * element to its destination. The reason why there are two animations is to give enough time\n * for the enter animation on the new element to be ready.\n *\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\n *\n * ```css\n * .banner.ng-anchor-out {\n *   transition: 0.5s linear all;\n *\n *   /&#42; the scale will be applied during the out animation,\n *          but will be animated away when the in animation runs &#42;/\n *   transform: scale(1.2);\n * }\n *\n * .banner.ng-anchor-in {\n *   transition: 1s linear all;\n * }\n * ```\n *\n *\n *\n *\n * ### Anchoring Demo\n *\n  <example module=\"anchoringExample\"\n           name=\"anchoringExample\"\n           id=\"anchoringExample\"\n           deps=\"angular-animate.js;angular-route.js\"\n           animations=\"true\">\n    <file name=\"index.html\">\n      <a href=\"#/\">Home</a>\n      <hr />\n      <div class=\"view-container\">\n        <div ng-view class=\"view\"></div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\n        .config(['$routeProvider', function($routeProvider) {\n          $routeProvider.when('/', {\n            templateUrl: 'home.html',\n            controller: 'HomeController as home'\n          });\n          $routeProvider.when('/profile/:id', {\n            templateUrl: 'profile.html',\n            controller: 'ProfileController as profile'\n          });\n        }])\n        .run(['$rootScope', function($rootScope) {\n          $rootScope.records = [\n            { id:1, title: \"Miss Beulah Roob\" },\n            { id:2, title: \"Trent Morissette\" },\n            { id:3, title: \"Miss Ava Pouros\" },\n            { id:4, title: \"Rod Pouros\" },\n            { id:5, title: \"Abdul Rice\" },\n            { id:6, title: \"Laurie Rutherford Sr.\" },\n            { id:7, title: \"Nakia McLaughlin\" },\n            { id:8, title: \"Jordon Blanda DVM\" },\n            { id:9, title: \"Rhoda Hand\" },\n            { id:10, title: \"Alexandrea Sauer\" }\n          ];\n        }])\n        .controller('HomeController', [function() {\n          //empty\n        }])\n        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {\n          var index = parseInt($routeParams.id, 10);\n          var record = $rootScope.records[index - 1];\n\n          this.title = record.title;\n          this.id = record.id;\n        }]);\n    </file>\n    <file name=\"home.html\">\n      <h2>Welcome to the home page</h1>\n      <p>Please click on an element</p>\n      <a class=\"record\"\n         ng-href=\"#/profile/{{ record.id }}\"\n         ng-animate-ref=\"{{ record.id }}\"\n         ng-repeat=\"record in records\">\n        {{ record.title }}\n      </a>\n    </file>\n    <file name=\"profile.html\">\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\n        {{ profile.title }}\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .record {\n        display:block;\n        font-size:20px;\n      }\n      .profile {\n        background:black;\n        color:white;\n        font-size:100px;\n      }\n      .view-container {\n        position:relative;\n      }\n      .view-container > .view.ng-animate {\n        position:absolute;\n        top:0;\n        left:0;\n        width:100%;\n        min-height:500px;\n      }\n      .view.ng-enter, .view.ng-leave,\n      .record.ng-anchor {\n        transition:0.5s linear all;\n      }\n      .view.ng-enter {\n        transform:translateX(100%);\n      }\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\n        transform:translateX(0%);\n      }\n      .view.ng-leave.ng-leave-active {\n        transform:translateX(-100%);\n      }\n      .record.ng-anchor-out {\n        background:red;\n      }\n    </file>\n  </example>\n *\n * ### How is the element transported?\n *\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\n * will become visible since the shim class will be removed.\n *\n * ### How is the morphing handled?\n *\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\n * the cloned element is placed inside of root element which is likely close to the body element).\n *\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\n *\n *\n * ## Using $animate in your directive code\n *\n * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\n * imagine we have a greeting box that shows and hides itself when the data changes\n *\n * ```html\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\n * ```\n *\n * ```js\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\n *   return function(scope, element, attrs) {\n *     attrs.$observe('active', function(value) {\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\n *     });\n *   });\n * }]);\n * ```\n *\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\n * in our HTML code then we can trigger a CSS or JS animation to happen.\n *\n * ```css\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\n * ```\n *\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\n *\n *\n * ### Preventing Collisions With Third Party Libraries\n *\n * Some third-party frameworks place animation duration defaults across many element or className\n * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which\n * is expecting actual animations on these elements and has to wait for their completion.\n *\n * You can prevent this unwanted behavior by using a prefix on all your animation classes:\n *\n * ```css\n * /&#42; prefixed with animate- &#42;/\n * .animate-fade-add.animate-fade-add-active {\n *   transition:1s linear all;\n *   opacity:0;\n * }\n * ```\n *\n * You then configure `$animate` to enforce this prefix:\n *\n * ```js\n * $animateProvider.classNameFilter(/animate-/);\n * ```\n *\n * This also may provide your application with a speed boost since only specific elements containing CSS class prefix\n * will be evaluated for animation when any DOM changes occur in the application.\n *\n * ## Callbacks and Promises\n *\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\n * ended by chaining onto the returned promise that animation method returns.\n *\n * ```js\n * // somewhere within the depths of the directive\n * $animate.enter(element, parent).then(function() {\n *   //the animation has completed\n * });\n * ```\n *\n * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\n * anymore.)\n *\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\n * routing controller to hook into that:\n *\n * ```js\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\n *   $animate.on('enter', ngViewElement, function(element) {\n *     // the animation for this route has completed\n *   }]);\n * }])\n * ```\n *\n * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)\n */\n\n/**\n * @ngdoc service\n * @name $animate\n * @kind object\n *\n * @description\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\n *\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\n */\nangular.module('ngAnimate', [])\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\n\n  .factory('$$AnimateRunner', $$AnimateRunnerFactory)\n  .factory('$$animateAsyncRun', $$AnimateAsyncRunFactory)\n\n  .provider('$$animateQueue', $$AnimateQueueProvider)\n  .provider('$$animation', $$AnimationProvider)\n\n  .provider('$animateCss', $AnimateCssProvider)\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\n\n  .provider('$$animateJs', $$AnimateJsProvider)\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\n\n\n})(window, window.angular);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-animate/angular-animate.js\n ** module id = 6\n ** module chunks = 0\n **/","require('./angular-aria');\nmodule.exports = 'ngAria';\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-aria/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * @license AngularJS v1.4.8\n * (c) 2010-2015 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngAria\n * @description\n *\n * The `ngAria` module provides support for common\n * [<abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)\n * attributes that convey state or semantic information about the application for users\n * of assistive technologies, such as screen readers.\n *\n * <div doc-module-components=\"ngAria\"></div>\n *\n * ## Usage\n *\n * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following\n * directives are supported:\n * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.\n *\n * Below is a more detailed breakdown of the attributes handled by ngAria:\n *\n * | Directive                                   | Supported Attributes                                                                   |\n * |---------------------------------------------|----------------------------------------------------------------------------------------|\n * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |\n * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |\n * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |\n * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |\n * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |\n *\n * Find out more information about each directive by reading the\n * {@link guide/accessibility ngAria Developer Guide}.\n *\n * ##Example\n * Using ngDisabled with ngAria:\n * ```html\n * <md-checkbox ng-disabled=\"disabled\">\n * ```\n * Becomes:\n * ```html\n * <md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\">\n * ```\n *\n * ##Disabling Attributes\n * It's possible to disable individual attributes added by ngAria with the\n * {@link ngAria.$ariaProvider#config config} method. For more details, see the\n * {@link guide/accessibility Developer Guide}.\n */\n /* global -ngAriaModule */\nvar ngAriaModule = angular.module('ngAria', ['ng']).\n                        provider('$aria', $AriaProvider);\n\n/**\n* Internal Utilities\n*/\nvar nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY'];\n\nvar isNodeOneOf = function(elem, nodeTypeArray) {\n  if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {\n    return true;\n  }\n};\n/**\n * @ngdoc provider\n * @name $ariaProvider\n *\n * @description\n *\n * Used for configuring the ARIA attributes injected and managed by ngAria.\n *\n * ```js\n * angular.module('myApp', ['ngAria'], function config($ariaProvider) {\n *   $ariaProvider.config({\n *     ariaValue: true,\n *     tabindex: false\n *   });\n * });\n *```\n *\n * ## Dependencies\n * Requires the {@link ngAria} module to be installed.\n *\n */\nfunction $AriaProvider() {\n  var config = {\n    ariaHidden: true,\n    ariaChecked: true,\n    ariaDisabled: true,\n    ariaRequired: true,\n    ariaInvalid: true,\n    ariaMultiline: true,\n    ariaValue: true,\n    tabindex: true,\n    bindKeypress: true,\n    bindRoleForClick: true\n  };\n\n  /**\n   * @ngdoc method\n   * @name $ariaProvider#config\n   *\n   * @param {object} config object to enable/disable specific ARIA attributes\n   *\n   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags\n   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags\n   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags\n   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags\n   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags\n   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags\n   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags\n   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags\n   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and\n   *    `&lt;li&gt;` elements with ng-click\n   *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements like `div`\n   *    using ng-click, making them more accessible to users of assistive technologies\n   *\n   * @description\n   * Enables/disables various ARIA attributes\n   */\n  this.config = function(newConfig) {\n    config = angular.extend(config, newConfig);\n  };\n\n  function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {\n    return function(scope, elem, attr) {\n      var ariaCamelName = attr.$normalize(ariaAttr);\n      if (config[ariaCamelName] && !isNodeOneOf(elem, nodeBlackList) && !attr[ariaCamelName]) {\n        scope.$watch(attr[attrName], function(boolVal) {\n          // ensure boolean value\n          boolVal = negate ? !boolVal : !!boolVal;\n          elem.attr(ariaAttr, boolVal);\n        });\n      }\n    };\n  }\n  /**\n   * @ngdoc service\n   * @name $aria\n   *\n   * @description\n   * @priority 200\n   *\n   * The $aria service contains helper methods for applying common\n   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.\n   *\n   * ngAria injects common accessibility attributes that tell assistive technologies when HTML\n   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,\n   * let's review a code snippet from ngAria itself:\n   *\n   *```js\n   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {\n   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');\n   * }])\n   *```\n   * Shown above, the ngAria module creates a directive with the same signature as the\n   * traditional `ng-disabled` directive. But this ngAria version is dedicated to\n   * solely managing accessibility attributes. The internal `$aria` service is used to watch the\n   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,\n   * `aria-disabled` is injected as an attribute with its value synchronized to the value in\n   * `ngDisabled`.\n   *\n   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do\n   * anything to enable this feature. The `aria-disabled` attribute is automatically managed\n   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.\n   *\n   * The full list of directives that interface with ngAria:\n   * * **ngModel**\n   * * **ngShow**\n   * * **ngHide**\n   * * **ngClick**\n   * * **ngDblclick**\n   * * **ngMessages**\n   * * **ngDisabled**\n   *\n   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each\n   * directive.\n   *\n   *\n   * ## Dependencies\n   * Requires the {@link ngAria} module to be installed.\n   */\n  this.$get = function() {\n    return {\n      config: function(key) {\n        return config[key];\n      },\n      $$watchExpr: watchExpr\n    };\n  };\n}\n\n\nngAriaModule.directive('ngShow', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true);\n}])\n.directive('ngHide', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false);\n}])\n.directive('ngModel', ['$aria', function($aria) {\n\n  function shouldAttachAttr(attr, normalizedAttr, elem) {\n    return $aria.config(normalizedAttr) && !elem.attr(attr);\n  }\n\n  function shouldAttachRole(role, elem) {\n    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');\n  }\n\n  function getShape(attr, elem) {\n    var type = attr.type,\n        role = attr.role;\n\n    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :\n           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :\n           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' :\n           (type || role) === 'textbox'   || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';\n  }\n\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value\n    compile: function(elem, attr) {\n      var shape = getShape(attr, elem);\n\n      return {\n        pre: function(scope, elem, attr, ngModel) {\n          if (shape === 'checkbox' && attr.type !== 'checkbox') {\n            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles\n            ngModel.$isEmpty = function(value) {\n              return value === false;\n            };\n          }\n        },\n        post: function(scope, elem, attr, ngModel) {\n          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem)\n                                && !isNodeOneOf(elem, nodeBlackList);\n\n          function ngAriaWatchModelValue() {\n            return ngModel.$modelValue;\n          }\n\n          function getRadioReaction() {\n            if (needsTabIndex) {\n              needsTabIndex = false;\n              return function ngAriaRadioReaction(newVal) {\n                var boolVal = (attr.value == ngModel.$viewValue);\n                elem.attr('aria-checked', boolVal);\n                elem.attr('tabindex', 0 - !boolVal);\n              };\n            } else {\n              return function ngAriaRadioReaction(newVal) {\n                elem.attr('aria-checked', (attr.value == ngModel.$viewValue));\n              };\n            }\n          }\n\n          function ngAriaCheckboxReaction() {\n            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));\n          }\n\n          switch (shape) {\n            case 'radio':\n            case 'checkbox':\n              if (shouldAttachRole(shape, elem)) {\n                elem.attr('role', shape);\n              }\n              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {\n                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?\n                    getRadioReaction() : ngAriaCheckboxReaction);\n              }\n              if (needsTabIndex) {\n                elem.attr('tabindex', 0);\n              }\n              break;\n            case 'range':\n              if (shouldAttachRole(shape, elem)) {\n                elem.attr('role', 'slider');\n              }\n              if ($aria.config('ariaValue')) {\n                var needsAriaValuemin = !elem.attr('aria-valuemin') &&\n                    (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));\n                var needsAriaValuemax = !elem.attr('aria-valuemax') &&\n                    (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));\n                var needsAriaValuenow = !elem.attr('aria-valuenow');\n\n                if (needsAriaValuemin) {\n                  attr.$observe('min', function ngAriaValueMinReaction(newVal) {\n                    elem.attr('aria-valuemin', newVal);\n                  });\n                }\n                if (needsAriaValuemax) {\n                  attr.$observe('max', function ngAriaValueMinReaction(newVal) {\n                    elem.attr('aria-valuemax', newVal);\n                  });\n                }\n                if (needsAriaValuenow) {\n                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {\n                    elem.attr('aria-valuenow', newVal);\n                  });\n                }\n              }\n              if (needsTabIndex) {\n                elem.attr('tabindex', 0);\n              }\n              break;\n            case 'multiline':\n              if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {\n                elem.attr('aria-multiline', true);\n              }\n              break;\n          }\n\n          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {\n            scope.$watch(function ngAriaRequiredWatch() {\n              return ngModel.$error.required;\n            }, function ngAriaRequiredReaction(newVal) {\n              elem.attr('aria-required', !!newVal);\n            });\n          }\n\n          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {\n            scope.$watch(function ngAriaInvalidWatch() {\n              return ngModel.$invalid;\n            }, function ngAriaInvalidReaction(newVal) {\n              elem.attr('aria-invalid', !!newVal);\n            });\n          }\n        }\n      };\n    }\n  };\n}])\n.directive('ngDisabled', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngDisabled', 'aria-disabled', []);\n}])\n.directive('ngMessages', function() {\n  return {\n    restrict: 'A',\n    require: '?ngMessages',\n    link: function(scope, elem, attr, ngMessages) {\n      if (!elem.attr('aria-live')) {\n        elem.attr('aria-live', 'assertive');\n      }\n    }\n  };\n})\n.directive('ngClick',['$aria', '$parse', function($aria, $parse) {\n  return {\n    restrict: 'A',\n    compile: function(elem, attr) {\n      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);\n      return function(scope, elem, attr) {\n\n        if (!isNodeOneOf(elem, nodeBlackList)) {\n\n          if ($aria.config('bindRoleForClick') && !elem.attr('role')) {\n            elem.attr('role', 'button');\n          }\n\n          if ($aria.config('tabindex') && !elem.attr('tabindex')) {\n            elem.attr('tabindex', 0);\n          }\n\n          if ($aria.config('bindKeypress') && !attr.ngKeypress) {\n            elem.on('keypress', function(event) {\n              var keyCode = event.which || event.keyCode;\n              if (keyCode === 32 || keyCode === 13) {\n                scope.$apply(callback);\n              }\n\n              function callback() {\n                fn(scope, { $event: event });\n              }\n            });\n          }\n        }\n      };\n    }\n  };\n}])\n.directive('ngDblclick', ['$aria', function($aria) {\n  return function(scope, elem, attr) {\n    if ($aria.config('tabindex') && !elem.attr('tabindex') && !isNodeOneOf(elem, nodeBlackList)) {\n      elem.attr('tabindex', 0);\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-aria/angular-aria.js\n ** module id = 8\n ** module chunks = 0\n **/","/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.11.4\n */\n(function( window, angular, undefined ){\n\"use strict\";\n\n(function(){\n\"use strict\";\n\nangular.module('ngMaterial', [\"ng\",\"ngAnimate\",\"ngAria\",\"material.core\",\"material.core.gestures\",\"material.core.layout\",\"material.core.theming.palette\",\"material.core.theming\",\"material.core.animate\",\"material.components.autocomplete\",\"material.components.backdrop\",\"material.components.bottomSheet\",\"material.components.button\",\"material.components.card\",\"material.components.checkbox\",\"material.components.chips\",\"material.components.content\",\"material.components.dialog\",\"material.components.divider\",\"material.components.datepicker\",\"material.components.fabActions\",\"material.components.fabShared\",\"material.components.fabSpeedDial\",\"material.components.fabToolbar\",\"material.components.fabTrigger\",\"material.components.gridList\",\"material.components.icon\",\"material.components.input\",\"material.components.list\",\"material.components.menu\",\"material.components.menuBar\",\"material.components.progressCircular\",\"material.components.radioButton\",\"material.components.progressLinear\",\"material.components.select\",\"material.components.sidenav\",\"material.components.slider\",\"material.components.sticky\",\"material.components.subheader\",\"material.components.swipe\",\"material.components.switch\",\"material.components.toast\",\"material.components.tabs\",\"material.components.toolbar\",\"material.components.tooltip\",\"material.components.virtualRepeat\",\"material.components.whiteframe\"]);\n})();\n(function(){\n\"use strict\";\n\n/**\n * Initialization function that validates environment\n * requirements.\n */\nangular\n  .module('material.core', [\n    'ngAnimate',\n    'material.core.animate',\n    'material.core.layout',\n    'material.core.gestures',\n    'material.core.theming'\n  ])\n  .directive('mdTemplate', MdTemplateDirective)\n  .config(MdCoreConfigure);\n\nfunction MdCoreConfigure($provide, $mdThemingProvider) {\n\n  $provide.decorator('$$rAF', [\"$delegate\", rAFDecorator]);\n\n  $mdThemingProvider.theme('default')\n    .primaryPalette('indigo')\n    .accentPalette('pink')\n    .warnPalette('red')\n    .backgroundPalette('grey');\n}\nMdCoreConfigure.$inject = [\"$provide\", \"$mdThemingProvider\"];\n\nfunction MdTemplateDirective($compile) {\n  return {\n    restrict: 'A',\n    scope: {\n      template: '=mdTemplate'\n    },\n    link: function postLink(scope, element) {\n      scope.$watch('template', assignSafeHTML);\n\n      /**\n       * To add safe HTML: assign and compile in\n       * isolated scope.\n       */\n      function assignSafeHTML(value) {\n        // when the 'compile' expression changes\n        // assign it into the current DOM\n        element.html(value);\n\n        // Compile the new DOM and link it to the current scope.\n        // NOTE: we only compile .childNodes so that we don't get\n        //       into infinite loop compiling ourselves\n        $compile(element.contents())(scope);\n      }\n    }\n  };\n\n}\nMdTemplateDirective.$inject = [\"$compile\"];\n\nfunction rAFDecorator($delegate) {\n  /**\n   * Use this to throttle events that come in often.\n   * The throttled function will always use the *last* invocation before the\n   * coming frame.\n   *\n   * For example, window resize events that fire many times a second:\n   * If we set to use an raf-throttled callback on window resize, then\n   * our callback will only be fired once per frame, with the last resize\n   * event that happened before that frame.\n   *\n   * @param {function} callback function to debounce\n   */\n  $delegate.throttle = function(cb) {\n    var queuedArgs, alreadyQueued, queueCb, context;\n    return function debounced() {\n      queuedArgs = arguments;\n      context = this;\n      queueCb = cb;\n      if (!alreadyQueued) {\n        alreadyQueued = true;\n        $delegate(function() {\n          queueCb.apply(context, Array.prototype.slice.call(queuedArgs));\n          alreadyQueued = false;\n        });\n      }\n    };\n  };\n  return $delegate;\n}\n\n})();\n(function(){\n\"use strict\";\n\nangular.module('material.core')\n.factory('$mdConstant', MdConstantFactory);\n\n/**\n * Factory function that creates the grab-bag $mdConstant service.\n * @ngInject\n */\nfunction MdConstantFactory($sniffer) {\n\n  var webkit = /webkit/i.test($sniffer.vendorPrefix);\n  function vendorProperty(name) {\n    return webkit ?  ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;\n  }\n\n  return {\n    KEY_CODE: {\n      ENTER: 13,\n      ESCAPE: 27,\n      SPACE: 32,\n      PAGE_UP: 33,\n      PAGE_DOWN: 34,\n      END: 35,\n      HOME: 36,\n      LEFT_ARROW : 37,\n      UP_ARROW : 38,\n      RIGHT_ARROW : 39,\n      DOWN_ARROW : 40,\n      TAB : 9,\n      BACKSPACE: 8,\n      DELETE: 46\n    },\n    CSS: {\n      /* Constants */\n      TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),\n      ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),\n\n      TRANSFORM: vendorProperty('transform'),\n      TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),\n      TRANSITION: vendorProperty('transition'),\n      TRANSITION_DURATION: vendorProperty('transitionDuration'),\n      ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),\n      ANIMATION_DURATION: vendorProperty('animationDuration'),\n      ANIMATION_NAME: vendorProperty('animationName'),\n      ANIMATION_TIMING: vendorProperty('animationTimingFunction'),\n      ANIMATION_DIRECTION: vendorProperty('animationDirection')\n    },\n    MEDIA: {\n      'sm': '(max-width: 599px)',\n      'gt-sm': '(min-width: 600px)',\n      'md': '(min-width: 600px) and (max-width: 959px)',\n      'gt-md': '(min-width: 960px)',\n      'lg': '(min-width: 960px) and (max-width: 1199px)',\n      'gt-lg': '(min-width: 1200px)'\n    },\n    MEDIA_PRIORITY: [\n      'gt-lg',\n      'lg',\n      'gt-md',\n      'md',\n      'gt-sm',\n      'sm'\n    ]\n  };\n}\nMdConstantFactory.$inject = [\"$sniffer\"];\n\n})();\n(function(){\n\"use strict\";\n\n  angular\n    .module('material.core')\n    .config( [\"$provide\", function($provide){\n       $provide.decorator('$mdUtil', ['$delegate', function ($delegate){\n           /**\n            * Inject the iterator facade to easily support iteration and accessors\n            * @see iterator below\n            */\n           $delegate.iterator = MdIterator;\n\n           return $delegate;\n         }\n       ]);\n     }]);\n\n  /**\n   * iterator is a list facade to easily support iteration and accessors\n   *\n   * @param items Array list which this iterator will enumerate\n   * @param reloop Boolean enables iterator to consider the list as an endless reloop\n   */\n  function MdIterator(items, reloop) {\n    var trueFn = function() { return true; };\n\n    if (items && !angular.isArray(items)) {\n      items = Array.prototype.slice.call(items);\n    }\n\n    reloop = !!reloop;\n    var _items = items || [ ];\n\n    // Published API\n    return {\n      items: getItems,\n      count: count,\n\n      inRange: inRange,\n      contains: contains,\n      indexOf: indexOf,\n      itemAt: itemAt,\n\n      findBy: findBy,\n\n      add: add,\n      remove: remove,\n\n      first: first,\n      last: last,\n      next: angular.bind(null, findSubsequentItem, false),\n      previous: angular.bind(null, findSubsequentItem, true),\n\n      hasPrevious: hasPrevious,\n      hasNext: hasNext\n\n    };\n\n    /**\n     * Publish copy of the enumerable set\n     * @returns {Array|*}\n     */\n    function getItems() {\n      return [].concat(_items);\n    }\n\n    /**\n     * Determine length of the list\n     * @returns {Array.length|*|number}\n     */\n    function count() {\n      return _items.length;\n    }\n\n    /**\n     * Is the index specified valid\n     * @param index\n     * @returns {Array.length|*|number|boolean}\n     */\n    function inRange(index) {\n      return _items.length && ( index > -1 ) && (index < _items.length );\n    }\n\n    /**\n     * Can the iterator proceed to the next item in the list; relative to\n     * the specified item.\n     *\n     * @param item\n     * @returns {Array.length|*|number|boolean}\n     */\n    function hasNext(item) {\n      return item ? inRange(indexOf(item) + 1) : false;\n    }\n\n    /**\n     * Can the iterator proceed to the previous item in the list; relative to\n     * the specified item.\n     *\n     * @param item\n     * @returns {Array.length|*|number|boolean}\n     */\n    function hasPrevious(item) {\n      return item ? inRange(indexOf(item) - 1) : false;\n    }\n\n    /**\n     * Get item at specified index/position\n     * @param index\n     * @returns {*}\n     */\n    function itemAt(index) {\n      return inRange(index) ? _items[index] : null;\n    }\n\n    /**\n     * Find all elements matching the key/value pair\n     * otherwise return null\n     *\n     * @param val\n     * @param key\n     *\n     * @return array\n     */\n    function findBy(key, val) {\n      return _items.filter(function(item) {\n        return item[key] === val;\n      });\n    }\n\n    /**\n     * Add item to list\n     * @param item\n     * @param index\n     * @returns {*}\n     */\n    function add(item, index) {\n      if ( !item ) return -1;\n\n      if (!angular.isNumber(index)) {\n        index = _items.length;\n      }\n\n      _items.splice(index, 0, item);\n\n      return indexOf(item);\n    }\n\n    /**\n     * Remove item from list...\n     * @param item\n     */\n    function remove(item) {\n      if ( contains(item) ){\n        _items.splice(indexOf(item), 1);\n      }\n    }\n\n    /**\n     * Get the zero-based index of the target item\n     * @param item\n     * @returns {*}\n     */\n    function indexOf(item) {\n      return _items.indexOf(item);\n    }\n\n    /**\n     * Boolean existence check\n     * @param item\n     * @returns {boolean}\n     */\n    function contains(item) {\n      return item && (indexOf(item) > -1);\n    }\n\n    /**\n     * Return first item in the list\n     * @returns {*}\n     */\n    function first() {\n      return _items.length ? _items[0] : null;\n    }\n\n    /**\n     * Return last item in the list...\n     * @returns {*}\n     */\n    function last() {\n      return _items.length ? _items[_items.length - 1] : null;\n    }\n\n    /**\n     * Find the next item. If reloop is true and at the end of the list, it will go back to the\n     * first item. If given, the `validate` callback will be used to determine whether the next item\n     * is valid. If not valid, it will try to find the next item again.\n     *\n     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)\n     * @param {*} item The item whose subsequent item we are looking for\n     * @param {Function=} validate The `validate` function\n     * @param {integer=} limit The recursion limit\n     *\n     * @returns {*} The subsequent item or null\n     */\n    function findSubsequentItem(backwards, item, validate, limit) {\n      validate = validate || trueFn;\n\n      var curIndex = indexOf(item);\n      while (true) {\n        if (!inRange(curIndex)) return null;\n\n        var nextIndex = curIndex + (backwards ? -1 : 1);\n        var foundItem = null;\n        if (inRange(nextIndex)) {\n          foundItem = _items[nextIndex];\n        } else if (reloop) {\n          foundItem = backwards ? last() : first();\n          nextIndex = indexOf(foundItem);\n        }\n\n        if ((foundItem === null) || (nextIndex === limit)) return null;\n        if (validate(foundItem)) return foundItem;\n\n        if (angular.isUndefined(limit)) limit = nextIndex;\n\n        curIndex = nextIndex;\n      }\n    }\n  }\n\n\n})();\n(function(){\n\"use strict\";\n\nangular.module('material.core')\n.factory('$mdMedia', mdMediaFactory);\n\n/**\n * @ngdoc service\n * @name $mdMedia\n * @module material.core\n *\n * @description\n * `$mdMedia` is used to evaluate whether a given media query is true or false given the\n * current device's screen / window size. The media query will be re-evaluated on resize, allowing\n * you to register a watch.\n *\n * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints.\n *  (`sm`, `gt-sm`, `md`, `gt-md`, `lg`, `gt-lg`).\n *\n * @returns {boolean} a boolean representing whether or not the given media query is true or false.\n *\n * @usage\n * <hljs lang=\"js\">\n * app.controller('MyController', function($mdMedia, $scope) {\n *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {\n *     $scope.bigScreen = big;\n *   });\n *\n *   $scope.screenIsSmall = $mdMedia('sm');\n *   $scope.customQuery = $mdMedia('(min-width: 1234px)');\n *   $scope.anotherCustom = $mdMedia('max-width: 300px');\n * });\n * </hljs>\n */\n\nfunction mdMediaFactory($mdConstant, $rootScope, $window) {\n  var queries = {};\n  var mqls = {};\n  var results = {};\n  var normalizeCache = {};\n\n  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;\n  $mdMedia.getQuery = getQuery;\n  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;\n\n  return $mdMedia;\n\n  function $mdMedia(query) {\n    var validated = queries[query];\n    if (angular.isUndefined(validated)) {\n      validated = queries[query] = validate(query);\n    }\n\n    var result = results[validated];\n    if (angular.isUndefined(result)) {\n      result = add(validated);\n    }\n\n    return result;\n  }\n\n  function validate(query) {\n    return $mdConstant.MEDIA[query] ||\n           ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);\n  }\n\n  function add(query) {\n    var result = mqls[query] = $window.matchMedia(query);\n    result.addListener(onQueryChange);\n    return (results[result.media] = !!result.matches);\n  }\n\n  function onQueryChange(query) {\n    $rootScope.$evalAsync(function() {\n      results[query.media] = !!query.matches;\n    });\n  }\n\n  function getQuery(name) {\n    return mqls[name];\n  }\n\n  function getResponsiveAttribute(attrs, attrName) {\n    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {\n      var mediaName = $mdConstant.MEDIA_PRIORITY[i];\n      if (!mqls[queries[mediaName]].matches) {\n        continue;\n      }\n\n      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);\n      if (attrs[normalizedName]) {\n        return attrs[normalizedName];\n      }\n    }\n\n    // fallback on unprefixed\n    return attrs[getNormalizedName(attrs, attrName)];\n  }\n\n  function watchResponsiveAttributes(attrNames, attrs, watchFn) {\n    var unwatchFns = [];\n    attrNames.forEach(function(attrName) {\n      var normalizedName = getNormalizedName(attrs, attrName);\n      if (angular.isDefined(attrs[normalizedName])) {\n        unwatchFns.push(\n            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));\n      }\n\n      for (var mediaName in $mdConstant.MEDIA) {\n        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);\n        if (angular.isDefined(attrs[normalizedName])) {\n          unwatchFns.push(\n              attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));\n        }\n      }\n    });\n\n    return function unwatch() {\n      unwatchFns.forEach(function(fn) { fn(); })\n    };\n  }\n\n  // Improves performance dramatically\n  function getNormalizedName(attrs, attrName) {\n    return normalizeCache[attrName] ||\n        (normalizeCache[attrName] = attrs.$normalize(attrName));\n  }\n}\nmdMediaFactory.$inject = [\"$mdConstant\", \"$rootScope\", \"$window\"];\n\n})();\n(function(){\n\"use strict\";\n\n/*\n * This var has to be outside the angular factory, otherwise when\n * there are multiple material apps on the same page, each app\n * will create its own instance of this array and the app's IDs\n * will not be unique.\n */\nvar nextUniqueId = 0;\n\nangular\n  .module('material.core')\n  .factory('$mdUtil', UtilFactory);\n\nfunction UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log) {\n  // Setup some core variables for the processTemplate method\n  var startSymbol = $interpolate.startSymbol(),\n    endSymbol = $interpolate.endSymbol(),\n    usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}'));\n\n  var $mdUtil = {\n    dom: {},\n    now: window.performance ?\n      angular.bind(window.performance, window.performance.now) : Date.now || function() {\n      return new Date().getTime();\n    },\n\n    clientRect: function(element, offsetParent, isOffsetRect) {\n      var node = getNode(element);\n      offsetParent = getNode(offsetParent || node.offsetParent || document.body);\n      var nodeRect = node.getBoundingClientRect();\n\n      // The user can ask for an offsetRect: a rect relative to the offsetParent,\n      // or a clientRect: a rect relative to the page\n      var offsetRect = isOffsetRect ?\n        offsetParent.getBoundingClientRect() :\n      {left: 0, top: 0, width: 0, height: 0};\n      return {\n        left: nodeRect.left - offsetRect.left,\n        top: nodeRect.top - offsetRect.top,\n        width: nodeRect.width,\n        height: nodeRect.height\n      };\n    },\n    offsetRect: function(element, offsetParent) {\n      return $mdUtil.clientRect(element, offsetParent, true);\n    },\n\n    // Annoying method to copy nodes to an array, thanks to IE\n    nodesToArray: function(nodes) {\n      nodes = nodes || [];\n\n      var results = [];\n      for (var i = 0; i < nodes.length; ++i) {\n        results.push(nodes.item(i));\n      }\n      return results;\n    },\n\n    /**\n     * Calculate the positive scroll offset\n     * TODO: Check with pinch-zoom in IE/Chrome;\n     *       https://code.google.com/p/chromium/issues/detail?id=496285\n     */\n    scrollTop: function(element) {\n      element = angular.element(element || $document[0].body);\n\n      var body = (element[0] == $document[0].body) ? $document[0].body : undefined;\n      var scrollTop = body ? body.scrollTop + body.parentElement.scrollTop : 0;\n\n      // Calculate the positive scroll offset\n      return scrollTop || Math.abs(element[0].getBoundingClientRect().top);\n    },\n\n    /**\n     * `findFocusTarget()` provides an optional way to identify the focused element when a dialog, bottomsheet, sideNav\n     * or other element opens. This is optional attribute finds a nested element with the mdAutoFocus attribute and optional\n     * expression. An expression may be specified as the directive value; to enable conditional activation of the autoFocus.\n     *\n     * NOTE: It is up to the component logic to use the '$mdUtil.findFocusTarget()'\n     *\n     * @usage\n     * <hljs lang=\"html\">\n     * <md-dialog>\n     *   <form>\n     *     <md-input-container>\n     *       <label for=\"testInput\">Label</label>\n     *       <input id=\"testInput\" type=\"text\" md-autofocus>\n     *     </md-input-container>\n     *   </form>\n     * </md-dialog>\n     * </hljs>\n     *\n     *<hljs lang=\"html\">\n     * <md-bottom-sheet class=\"md-list md-has-header\">\n     *  <md-subheader>Comment Actions</md-subheader>\n     *  <md-list>\n     *    <md-list-item ng-repeat=\"item in items\">\n     *\n     *      <md-button md-autofocus=\"$index == 2\">\n     *        <md-icon md-svg-src=\"{{item.icon}}\"></md-icon>\n     *        <span class=\"md-inline-list-icon-label\">{{ item.name }}</span>\n     *      </md-button>\n     *\n     *    </md-list-item>\n     *  </md-list>\n     * </md-bottom-sheet>\n     *</hljs>\n     **/\n    findFocusTarget: function(containerEl, attributeVal) {\n      var AUTO_FOCUS = '[md-autofocus]';\n      var elToFocus;\n\n      elToFocus = scanForFocusable(containerEl, attributeVal || AUTO_FOCUS);\n\n      if ( !elToFocus && attributeVal != AUTO_FOCUS) {\n        // Scan for deprecated attribute\n        elToFocus = scanForFocusable(containerEl, '[md-auto-focus]');\n\n        if ( !elToFocus ) {\n          // Scan for fallback to 'universal' API\n          elToFocus = scanForFocusable(containerEl, AUTO_FOCUS);\n        }\n      }\n\n      return elToFocus;\n\n      /**\n       * Can target and nested children for specified Selector (attribute)\n       * whose value may be an expression that evaluates to True/False.\n       */\n      function scanForFocusable(target, selector) {\n        var elFound, items = target[0].querySelectorAll(selector);\n\n        // Find the last child element with the focus attribute\n        if ( items && items.length ){\n          var EXP_ATTR = /\\s*\\[?([\\-a-z]*)\\]?\\s*/i;\n          var matches = EXP_ATTR.exec(selector);\n          var attribute = matches ? matches[1] : null;\n\n          items.length && angular.forEach(items, function(it) {\n            it = angular.element(it);\n\n            // If the expression evaluates to FALSE, then it is not focusable target\n            var focusExpression = it[0].getAttribute(attribute);\n            var isFocusable = !focusExpression || !$mdUtil.validateScope(it) ? true :\n                              (it.scope().$eval(focusExpression) !== false );\n\n            if (isFocusable) elFound = it;\n          });\n        }\n        return elFound;\n      }\n    },\n\n    // Disables scroll around the passed element.\n    disableScrollAround: function(element, parent) {\n      $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;\n      ++$mdUtil.disableScrollAround._count;\n      if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;\n      element = angular.element(element);\n      var body = $document[0].body,\n        restoreBody = disableBodyScroll(),\n        restoreElement = disableElementScroll(parent);\n\n      return $mdUtil.disableScrollAround._enableScrolling = function() {\n        if (!--$mdUtil.disableScrollAround._count) {\n          restoreBody();\n          restoreElement();\n          delete $mdUtil.disableScrollAround._enableScrolling;\n        }\n      };\n\n      // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events\n      function disableElementScroll(element) {\n        element = angular.element(element || body)[0];\n        var zIndex = 50;\n        var scrollMask = angular.element(\n          '<div class=\"md-scroll-mask\" style=\"z-index: ' + zIndex + '\">' +\n          '  <div class=\"md-scroll-mask-bar\"></div>' +\n          '</div>');\n        element.appendChild(scrollMask[0]);\n\n        scrollMask.on('wheel', preventDefault);\n        scrollMask.on('touchmove', preventDefault);\n        $document.on('keydown', disableKeyNav);\n\n        return function restoreScroll() {\n          scrollMask.off('wheel');\n          scrollMask.off('touchmove');\n          scrollMask[0].parentNode.removeChild(scrollMask[0]);\n          $document.off('keydown', disableKeyNav);\n          delete $mdUtil.disableScrollAround._enableScrolling;\n        };\n\n        // Prevent keypresses from elements inside the body\n        // used to stop the keypresses that could cause the page to scroll\n        // (arrow keys, spacebar, tab, etc).\n        function disableKeyNav(e) {\n          //-- temporarily removed this logic, will possibly re-add at a later date\n          //if (!element[0].contains(e.target)) {\n          //  e.preventDefault();\n          //  e.stopImmediatePropagation();\n          //}\n        }\n\n        function preventDefault(e) {\n          e.preventDefault();\n        }\n      }\n\n      // Converts the body to a position fixed block and translate it to the proper scroll\n      // position\n      function disableBodyScroll() {\n        var htmlNode = body.parentNode;\n        var restoreHtmlStyle = htmlNode.getAttribute('style') || '';\n        var restoreBodyStyle = body.getAttribute('style') || '';\n        var scrollOffset = $mdUtil.scrollTop(body);\n        var clientWidth = body.clientWidth;\n\n        if (body.scrollHeight > body.clientHeight) {\n          applyStyles(body, {\n            position: 'fixed',\n            width: '100%',\n            top: -scrollOffset + 'px'\n          });\n\n          applyStyles(htmlNode, {\n            overflowY: 'scroll'\n          });\n        }\n\n        if (body.clientWidth < clientWidth) applyStyles(body, {overflow: 'hidden'});\n\n        return function restoreScroll() {\n          body.setAttribute('style', restoreBodyStyle);\n          htmlNode.setAttribute('style', restoreHtmlStyle);\n          body.scrollTop = scrollOffset;\n        };\n      }\n\n      function applyStyles(el, styles) {\n        for (var key in styles) {\n          el.style[key] = styles[key];\n        }\n      }\n    },\n    enableScrolling: function() {\n      var method = this.disableScrollAround._enableScrolling;\n      method && method();\n    },\n    floatingScrollbars: function() {\n      if (this.floatingScrollbars.cached === undefined) {\n        var tempNode = angular.element('<div style=\"width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll\"><div style=\"height: 60;\"></div></div>');\n        $document[0].body.appendChild(tempNode[0]);\n        this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);\n        tempNode.remove();\n      }\n      return this.floatingScrollbars.cached;\n    },\n\n    // Mobile safari only allows you to set focus in click event listeners...\n    forceFocus: function(element) {\n      var node = element[0] || element;\n\n      document.addEventListener('click', function focusOnClick(ev) {\n        if (ev.target === node && ev.$focus) {\n          node.focus();\n          ev.stopImmediatePropagation();\n          ev.preventDefault();\n          node.removeEventListener('click', focusOnClick);\n        }\n      }, true);\n\n      var newEvent = document.createEvent('MouseEvents');\n      newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,\n        false, false, false, false, 0, null);\n      newEvent.$material = true;\n      newEvent.$focus = true;\n      node.dispatchEvent(newEvent);\n    },\n\n    /**\n     * facade to build md-backdrop element with desired styles\n     * NOTE: Use $compile to trigger backdrop postLink function\n     */\n    createBackdrop: function(scope, addClass) {\n      return $compile($mdUtil.supplant('<md-backdrop class=\"{0}\">', [addClass]))(scope);\n    },\n\n    /**\n     * supplant() method from Crockford's `Remedial Javascript`\n     * Equivalent to use of $interpolate; without dependency on\n     * interpolation symbols and scope. Note: the '{<token>}' can\n     * be property names, property chains, or array indices.\n     */\n    supplant: function(template, values, pattern) {\n      pattern = pattern || /\\{([^\\{\\}]*)\\}/g;\n      return template.replace(pattern, function(a, b) {\n        var p = b.split('.'),\n          r = values;\n        try {\n          for (var s in p) {\n            if (p.hasOwnProperty(s) ) {\n              r = r[p[s]];\n            }\n          }\n        } catch (e) {\n          r = a;\n        }\n        return (typeof r === 'string' || typeof r === 'number') ? r : a;\n      });\n    },\n\n    fakeNgModel: function() {\n      return {\n        $fake: true,\n        $setTouched: angular.noop,\n        $setViewValue: function(value) {\n          this.$viewValue = value;\n          this.$render(value);\n          this.$viewChangeListeners.forEach(function(cb) {\n            cb();\n          });\n        },\n        $isEmpty: function(value) {\n          return ('' + value).length === 0;\n        },\n        $parsers: [],\n        $formatters: [],\n        $viewChangeListeners: [],\n        $render: angular.noop\n      };\n    },\n\n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds.\n    // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs\n    // @param invokeApply should the $timeout trigger $digest() dirty checking\n    debounce: function(func, wait, scope, invokeApply) {\n      var timer;\n\n      return function debounced() {\n        var context = scope,\n          args = Array.prototype.slice.call(arguments);\n\n        $timeout.cancel(timer);\n        timer = $timeout(function() {\n\n          timer = undefined;\n          func.apply(context, args);\n\n        }, wait || 10, invokeApply);\n      };\n    },\n\n    // Returns a function that can only be triggered every `delay` milliseconds.\n    // In other words, the function will not be called unless it has been more\n    // than `delay` milliseconds since the last call.\n    throttle: function throttle(func, delay) {\n      var recent;\n      return function throttled() {\n        var context = this;\n        var args = arguments;\n        var now = $mdUtil.now();\n\n        if (!recent || (now - recent > delay)) {\n          func.apply(context, args);\n          recent = now;\n        }\n      };\n    },\n\n    /**\n     * Measures the number of milliseconds taken to run the provided callback\n     * function. Uses a high-precision timer if available.\n     */\n    time: function time(cb) {\n      var start = $mdUtil.now();\n      cb();\n      return $mdUtil.now() - start;\n    },\n\n    /**\n     * Create an implicit getter that caches its `getter()`\n     * lookup value\n     */\n    valueOnUse : function (scope, key, getter) {\n      var value = null, args = Array.prototype.slice.call(arguments);\n      var params = (args.length > 3) ? args.slice(3) : [ ];\n\n      Object.defineProperty(scope, key, {\n        get: function () {\n          if (value === null) value = getter.apply(scope, params);\n          return value;\n        }\n      });\n    },\n\n    /**\n     * Get a unique ID.\n     *\n     * @returns {string} an unique numeric string\n     */\n    nextUid: function() {\n      return '' + nextUniqueId++;\n    },\n\n    /**\n     * By default AngularJS attaches information about binding and scopes to DOM nodes,\n     * and adds CSS classes to data-bound elements. But this information is NOT available\n     * when `$compileProvider.debugInfoEnabled(false);`\n     *\n     * @see https://docs.angularjs.org/guide/production\n     */\n    validateScope : function(element) {\n      var hasScope = element && angular.isDefined(element.scope());\n      if ( !hasScope ) {\n        $log.warn(\"element.scope() is not available when 'debug mode' == false. @see https://docs.angularjs.org/guide/production!\");\n      }\n\n      return hasScope;\n    },\n\n    // Stop watchers and events from firing on a scope without destroying it,\n    // by disconnecting it from its parent and its siblings' linked lists.\n    disconnectScope: function disconnectScope(scope) {\n      if (!scope) return;\n\n      // we can't destroy the root scope or a scope that has been already destroyed\n      if (scope.$root === scope) return;\n      if (scope.$$destroyed) return;\n\n      var parent = scope.$parent;\n      scope.$$disconnected = true;\n\n      // See Scope.$destroy\n      if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;\n      if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;\n      if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;\n      if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;\n\n      scope.$$nextSibling = scope.$$prevSibling = null;\n\n    },\n\n    // Undo the effects of disconnectScope above.\n    reconnectScope: function reconnectScope(scope) {\n      if (!scope) return;\n\n      // we can't disconnect the root node or scope already disconnected\n      if (scope.$root === scope) return;\n      if (!scope.$$disconnected) return;\n\n      var child = scope;\n\n      var parent = child.$parent;\n      child.$$disconnected = false;\n      // See Scope.$new for this logic...\n      child.$$prevSibling = parent.$$childTail;\n      if (parent.$$childHead) {\n        parent.$$childTail.$$nextSibling = child;\n        parent.$$childTail = child;\n      } else {\n        parent.$$childHead = parent.$$childTail = child;\n      }\n    },\n\n    /*\n     * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName\n     *\n     * @param el Element to start walking the DOM from\n     * @param tagName Tag name to find closest to el, such as 'form'\n     */\n    getClosest: function getClosest(el, tagName, onlyParent) {\n      if (el instanceof angular.element) el = el[0];\n      tagName = tagName.toUpperCase();\n      if (onlyParent) el = el.parentNode;\n      if (!el) return null;\n      do {\n        if (el.nodeName === tagName) {\n          return el;\n        }\n      } while (el = el.parentNode);\n      return null;\n    },\n\n    /**\n     * Build polyfill for the Node.contains feature (if needed)\n     */\n    elementContains: function(node, child) {\n      var hasContains = (window.Node && window.Node.prototype && Node.prototype.contains);\n      var findFn = hasContains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {\n        // compares the positions of two nodes and returns a bitmask\n        return (node === child) || !!(this.compareDocumentPosition(arg) & 16)\n      });\n\n      return findFn(child);\n    },\n\n    /**\n     * Functional equivalent for $element.filter(‘md-bottom-sheet’)\n     * useful with interimElements where the element and its container are important...\n     *\n     * @param {[]} elements to scan\n     * @param {string} name of node to find (e.g. 'md-dialog')\n     * @param {boolean=} optional flag to allow deep scans; defaults to 'false'.\n     * @param {boolean=} optional flag to enable log warnings; defaults to false\n     */\n    extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {\n      var found = scanTree(element);\n      if (!found && !!warnNotFound) {\n        $log.warn( $mdUtil.supplant(\"Unable to find node '{0}' in element '{1}'.\",[nodeName, element[0].outerHTML]) );\n      }\n\n      return angular.element(found || element);\n\n      /**\n       * Breadth-First tree scan for element with matching `nodeName`\n       */\n      function scanTree(element) {\n        return scanLevel(element) || (!!scanDeep ? scanChildren(element) : null);\n      }\n\n      /**\n       * Case-insensitive scan of current elements only (do not descend).\n       */\n      function scanLevel(element) {\n        if ( element ) {\n          for (var i = 0, len = element.length; i < len; i++) {\n            if (element[i].nodeName.toLowerCase() === nodeName) {\n              return element[i];\n            }\n          }\n        }\n        return null;\n      }\n\n      /**\n       * Scan children of specified node\n       */\n      function scanChildren(element) {\n        var found;\n        if ( element ) {\n          for (var i = 0, len = element.length; i < len; i++) {\n            var target = element[i];\n            if ( !found ) {\n              for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) {\n                found = found || scanTree([target.childNodes[j]]);\n              }\n            }\n          }\n        }\n        return found;\n      }\n\n    },\n\n    /**\n     * Give optional properties with no value a boolean true if attr provided or false otherwise\n     */\n    initOptionalProperties: function(scope, attr, defaults) {\n      defaults = defaults || {};\n      angular.forEach(scope.$$isolateBindings, function(binding, key) {\n        if (binding.optional && angular.isUndefined(scope[key])) {\n          var attrIsDefined = angular.isDefined(attr[binding.attrName]);\n          scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;\n        }\n      });\n    },\n\n    /**\n     * Alternative to $timeout calls with 0 delay.\n     * nextTick() coalesces all calls within a single frame\n     * to minimize $digest thrashing\n     *\n     * @param callback\n     * @param digest\n     * @returns {*}\n     */\n    nextTick: function(callback, digest, scope) {\n      //-- grab function reference for storing state details\n      var nextTick = $mdUtil.nextTick;\n      var timeout = nextTick.timeout;\n      var queue = nextTick.queue || [];\n\n      //-- add callback to the queue\n      queue.push(callback);\n\n      //-- set default value for digest\n      if (digest == null) digest = true;\n\n      //-- store updated digest/queue values\n      nextTick.digest = nextTick.digest || digest;\n      nextTick.queue = queue;\n\n      //-- either return existing timeout or create a new one\n      return timeout || (nextTick.timeout = $timeout(processQueue, 0, false));\n\n      /**\n       * Grab a copy of the current queue\n       * Clear the queue for future use\n       * Process the existing queue\n       * Trigger digest if necessary\n       */\n      function processQueue() {\n        var skip = scope && scope.$$destroyed;\n        var queue = !skip ? nextTick.queue : [];\n        var digest = !skip ? nextTick.digest : null;\n\n        nextTick.queue = [];\n        nextTick.timeout = null;\n        nextTick.digest = false;\n\n        queue.forEach(function(callback) {\n          callback();\n        });\n\n        if (digest) $rootScope.$digest();\n      }\n    },\n\n    /**\n     * Processes a template and replaces the start/end symbols if the application has\n     * overriden them.\n     *\n     * @param template The template to process whose start/end tags may be replaced.\n     * @returns {*}\n     */\n    processTemplate: function(template) {\n      if (usesStandardSymbols) {\n        return template;\n      } else {\n        if (!template || !angular.isString(template)) return template;\n        return template.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n      }\n    }\n  };\n\n// Instantiate other namespace utility methods\n\n  $mdUtil.dom.animator = $$mdAnimate($mdUtil);\n\n  return $mdUtil;\n\n  function getNode(el) {\n    return el[0] || el;\n  }\n\n}\nUtilFactory.$inject = [\"$document\", \"$timeout\", \"$compile\", \"$rootScope\", \"$$mdAnimate\", \"$interpolate\", \"$log\"];\n\n/*\n * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.\n * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.\n */\n\nangular.element.prototype.focus = angular.element.prototype.focus || function() {\n    if (this.length) {\n      this[0].focus();\n    }\n    return this;\n  };\nangular.element.prototype.blur = angular.element.prototype.blur || function() {\n    if (this.length) {\n      this[0].blur();\n    }\n    return this;\n  };\n\n\n})();\n(function(){\n\"use strict\";\n\n\nangular.module('material.core')\n  .service('$mdAria', AriaService);\n\n/*\n * @ngInject\n */\nfunction AriaService($$rAF, $log, $window) {\n\n  return {\n    expect: expect,\n    expectAsync: expectAsync,\n    expectWithText: expectWithText\n  };\n\n  /**\n   * Check if expected attribute has been specified on the target element or child\n   * @param element\n   * @param attrName\n   * @param {optional} defaultValue What to set the attr to if no value is found\n   */\n  function expect(element, attrName, defaultValue) {\n\n    var node = angular.element(element)[0] || element;\n\n    // if node exists and neither it nor its children have the attribute\n    if (node &&\n       ((!node.hasAttribute(attrName) ||\n        node.getAttribute(attrName).length === 0) &&\n        !childHasAttribute(node, attrName))) {\n\n      defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';\n      if (defaultValue.length) {\n        element.attr(attrName, defaultValue);\n      } else {\n        $log.warn('ARIA: Attribute \"', attrName, '\", required for accessibility, is missing on node:', node);\n      }\n\n    }\n  }\n\n  function expectAsync(element, attrName, defaultValueGetter) {\n    // Problem: when retrieving the element's contents synchronously to find the label,\n    // the text may not be defined yet in the case of a binding.\n    // There is a higher chance that a binding will be defined if we wait one frame.\n    $$rAF(function() {\n      expect(element, attrName, defaultValueGetter());\n    });\n  }\n\n  function expectWithText(element, attrName) {\n    expectAsync(element, attrName, function() {\n      return getText(element);\n    });\n  }\n\n  function getText(element) {\n    return element.text().trim();\n  }\n\n  function childHasAttribute(node, attrName) {\n    var hasChildren = node.hasChildNodes(),\n        hasAttr = false;\n\n    function isHidden(el) {\n      var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);\n      return (style.display === 'none');\n    }\n\n    if(hasChildren) {\n      var children = node.childNodes;\n      for(var i=0; i<children.length; i++){\n        var child = children[i];\n        if(child.nodeType === 1 && child.hasAttribute(attrName)) {\n          if(!isHidden(child)){\n            hasAttr = true;\n          }\n        }\n      }\n    }\n    return hasAttr;\n  }\n}\nAriaService.$inject = [\"$$rAF\", \"$log\", \"$window\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n  .module('material.core')\n  .service('$mdCompiler', mdCompilerService);\n\nfunction mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n  /* jshint validthis: true */\n\n  /*\n   * @ngdoc service\n   * @name $mdCompiler\n   * @module material.core\n   * @description\n   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $mdCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $mdCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is \n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties: \n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function(options) {\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.extend({}, options.resolve || {});\n    var locals = angular.extend({}, options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.  \n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function(value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    //Add the locals, which are just straight values to inject\n    //eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (templateUrl) {\n      resolve.$template = $http.get(templateUrl, {cache: $templateCache})\n        .then(function(response) {\n          return response.data;\n        });\n    } else {\n      resolve.$template = $q.when(template);\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function(locals) {\n\n      var compiledData;\n      var template = transformTemplate(locals.$template);\n      var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return compiledData = {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          //Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            var ctrl = invokeCtrl();\n            //See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n\n            // Publish reference to this controller\n            compiledData.controller = ctrl;\n          }\n          return linkFn(scope);\n        }\n      };\n    });\n\n  };\n}\nmdCompilerService.$inject = [\"$q\", \"$http\", \"$injector\", \"$compile\", \"$controller\", \"$templateCache\"];\n\n})();\n(function(){\n\"use strict\";\n\n  var HANDLERS = {};\n  /* The state of the current 'pointer'\n   * The pointer represents the state of the current touch.\n   * It contains normalized x and y coordinates from DOM events,\n   * as well as other information abstracted from the DOM.\n   */\n  var pointer, lastPointer, forceSkipClickHijack = false;\n\n  /**\n   * The position of the most recent click if that click was on a label element.\n   * @type {{x: number, y: number}?}\n   */\n  var lastLabelClickPos = null;\n\n  // Used to attach event listeners once when multiple ng-apps are running.\n  var isInitialized = false;\n  \n  angular\n    .module('material.core.gestures', [ ])\n    .provider('$mdGesture', MdGestureProvider)\n    .factory('$$MdGestureHandler', MdGestureHandler)\n    .run( attachToDocument );\n\n  /**\n     * @ngdoc service\n     * @name $mdGestureProvider\n     * @module material.core.gestures\n     *\n     * @description\n     * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.\n     * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile\n     * devices.\n     *\n     * <hljs lang=\"js\">\n     *   app.config(function($mdGestureProvider) {\n     *\n     *     // For mobile devices without jQuery loaded, do not\n     *     // intercept click events during the capture phase.\n     *     $mdGestureProvider.skipClickHijack();\n     *\n     *   });\n     * </hljs>\n     *\n     */\n  function MdGestureProvider() { }\n\n  MdGestureProvider.prototype = {\n\n    // Publish access to setter to configure a variable  BEFORE the\n    // $mdGesture service is instantiated...\n    skipClickHijack: function() {\n      return forceSkipClickHijack = true;\n    },\n\n    /**\n     * $get is used to build an instance of $mdGesture\n     * @ngInject\n     */\n    $get : [\"$$MdGestureHandler\", \"$$rAF\", \"$timeout\", function($$MdGestureHandler, $$rAF, $timeout) {\n         return new MdGesture($$MdGestureHandler, $$rAF, $timeout);\n    }]\n  };\n\n\n\n  /**\n   * MdGesture factory construction function\n   * @ngInject\n   */\n  function MdGesture($$MdGestureHandler, $$rAF, $timeout) {\n    var userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    var isIos = userAgent.match(/ipad|iphone|ipod/i);\n    var isAndroid = userAgent.match(/android/i);\n    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);\n\n    var self = {\n      handler: addHandler,\n      register: register,\n      // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?\n      isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack\n    };\n\n    if (self.isHijackingClicks) {\n      self.handler('click', {\n        options: {\n          maxDistance: 6\n        },\n        onEnd: function (ev, pointer) {\n          if (pointer.distance < this.state.options.maxDistance) {\n            this.dispatchEvent(ev, 'click');\n          }\n        }\n      });\n    }\n\n    /*\n     * Register an element to listen for a handler.\n     * This allows an element to override the default options for a handler.\n     * Additionally, some handlers like drag and hold only dispatch events if\n     * the domEvent happens inside an element that's registered to listen for these events.\n     *\n     * @see GestureHandler for how overriding of default options works.\n     * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })\n     */\n    function register(element, handlerName, options) {\n      var handler = HANDLERS[handlerName.replace(/^\\$md./, '')];\n      if (!handler) {\n        throw new Error('Failed to register element with handler ' + handlerName + '. ' +\n        'Available handlers: ' + Object.keys(HANDLERS).join(', '));\n      }\n      return handler.registerElement(element, options);\n    }\n\n    /*\n     * add a handler to $mdGesture. see below.\n     */\n    function addHandler(name, definition) {\n      var handler = new $$MdGestureHandler(name);\n      angular.extend(handler, definition);\n      HANDLERS[name] = handler;\n\n      return self;\n    }\n\n    /*\n     * Register handlers. These listen to touch/start/move events, interpret them,\n     * and dispatch gesture events depending on options & conditions. These are all\n     * instances of GestureHandler.\n     * @see GestureHandler \n     */\n    return self\n      /*\n       * The press handler dispatches an event on touchdown/touchend.\n       * It's a simple abstraction of touch/mouse/pointer start and end.\n       */\n      .handler('press', {\n        onStart: function (ev, pointer) {\n          this.dispatchEvent(ev, '$md.pressdown');\n        },\n        onEnd: function (ev, pointer) {\n          this.dispatchEvent(ev, '$md.pressup');\n        }\n      })\n\n      /*\n       * The hold handler dispatches an event if the user keeps their finger within\n       * the same <maxDistance> area for <delay> ms.\n       * The hold handler will only run if a parent of the touch target is registered\n       * to listen for hold events through $mdGesture.register()\n       */\n      .handler('hold', {\n        options: {\n          maxDistance: 6,\n          delay: 500\n        },\n        onCancel: function () {\n          $timeout.cancel(this.state.timeout);\n        },\n        onStart: function (ev, pointer) {\n          // For hold, require a parent to be registered with $mdGesture.register()\n          // Because we prevent scroll events, this is necessary.\n          if (!this.state.registeredParent) return this.cancel();\n\n          this.state.pos = {x: pointer.x, y: pointer.y};\n          this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {\n            this.dispatchEvent(ev, '$md.hold');\n            this.cancel(); //we're done!\n          }), this.state.options.delay, false);\n        },\n        onMove: function (ev, pointer) {\n          // Don't scroll while waiting for hold.\n          // If we don't preventDefault touchmove events here, Android will assume we don't\n          // want to listen to anymore touch events. It will start scrolling and stop sending\n          // touchmove events.\n          ev.preventDefault();\n\n          // If the user moves greater than <maxDistance> pixels, stop the hold timer\n          // set in onStart\n          var dx = this.state.pos.x - pointer.x;\n          var dy = this.state.pos.y - pointer.y;\n          if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {\n            this.cancel();\n          }\n        },\n        onEnd: function () {\n          this.onCancel();\n        }\n      })\n\n      /*\n       * The drag handler dispatches a drag event if the user holds and moves his finger greater than\n       * <minDistance> px in the x or y direction, depending on options.horizontal.\n       * The drag will be cancelled if the user moves his finger greater than <minDistance>*<cancelMultiplier> in\n       * the perpindicular direction. Eg if the drag is horizontal and the user moves his finger <minDistance>*<cancelMultiplier>\n       * pixels vertically, this handler won't consider the move part of a drag.\n       */\n      .handler('drag', {\n        options: {\n          minDistance: 6,\n          horizontal: true,\n          cancelMultiplier: 1.5\n        },\n        onStart: function (ev) {\n          // For drag, require a parent to be registered with $mdGesture.register()\n          if (!this.state.registeredParent) this.cancel();\n        },\n        onMove: function (ev, pointer) {\n          var shouldStartDrag, shouldCancel;\n          // Don't scroll while deciding if this touchmove qualifies as a drag event.\n          // If we don't preventDefault touchmove events here, Android will assume we don't\n          // want to listen to anymore touch events. It will start scrolling and stop sending\n          // touchmove events.\n          ev.preventDefault();\n\n          if (!this.state.dragPointer) {\n            if (this.state.options.horizontal) {\n              shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;\n              shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;\n            } else {\n              shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;\n              shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;\n            }\n\n            if (shouldStartDrag) {\n              // Create a new pointer representing this drag, starting at this point where the drag started.\n              this.state.dragPointer = makeStartPointer(ev);\n              updatePointerState(ev, this.state.dragPointer);\n              this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);\n\n            } else if (shouldCancel) {\n              this.cancel();\n            }\n          } else {\n            this.dispatchDragMove(ev);\n          }\n        },\n        // Only dispatch dragmove events every frame; any more is unnecessray\n        dispatchDragMove: $$rAF.throttle(function (ev) {\n          // Make sure the drag didn't stop while waiting for the next frame\n          if (this.state.isRunning) {\n            updatePointerState(ev, this.state.dragPointer);\n            this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);\n          }\n        }),\n        onEnd: function (ev, pointer) {\n          if (this.state.dragPointer) {\n            updatePointerState(ev, this.state.dragPointer);\n            this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);\n          }\n        }\n      })\n\n      /*\n       * The swipe handler will dispatch a swipe event if, on the end of a touch,\n       * the velocity and distance were high enough.\n       * TODO: add vertical swiping with a `horizontal` option similar to the drag handler.\n       */\n      .handler('swipe', {\n        options: {\n          minVelocity: 0.65,\n          minDistance: 10\n        },\n        onEnd: function (ev, pointer) {\n          if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&\n            Math.abs(pointer.distanceX) > this.state.options.minDistance) {\n            var eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';\n            this.dispatchEvent(ev, eventType);\n          }\n        }\n      });\n\n  }\n  MdGesture.$inject = [\"$$MdGestureHandler\", \"$$rAF\", \"$timeout\"];\n\n  /**\n   * MdGestureHandler\n   * A GestureHandler is an object which is able to dispatch custom dom events\n   * based on native dom {touch,pointer,mouse}{start,move,end} events.\n   *\n   * A gesture will manage its lifecycle through the start,move,end, and cancel\n   * functions, which are called by native dom events.\n   *\n   * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be\n   * overridden by elements registering through $mdGesture.register()\n   */\n  function GestureHandler (name) {\n    this.name = name;\n    this.state = {};\n  }\n\n  function MdGestureHandler() {\n    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);\n\n    GestureHandler.prototype = {\n      options: {},\n      // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events\n      // differently when jQuery is loaded\n      dispatchEvent: hasJQuery ?  jQueryDispatchEvent : nativeDispatchEvent,\n\n      // These are overridden by the registered handler\n      onStart: angular.noop,\n      onMove: angular.noop,\n      onEnd: angular.noop,\n      onCancel: angular.noop,\n\n      // onStart sets up a new state for the handler, which includes options from the\n      // nearest registered parent element of ev.target.\n      start: function (ev, pointer) {\n        if (this.state.isRunning) return;\n        var parentTarget = this.getNearestParent(ev.target);\n        // Get the options from the nearest registered parent\n        var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};\n\n        this.state = {\n          isRunning: true,\n          // Override the default options with the nearest registered parent's options\n          options: angular.extend({}, this.options, parentTargetOptions),\n          // Pass in the registered parent node to the state so the onStart listener can use\n          registeredParent: parentTarget\n        };\n        this.onStart(ev, pointer);\n      },\n      move: function (ev, pointer) {\n        if (!this.state.isRunning) return;\n        this.onMove(ev, pointer);\n      },\n      end: function (ev, pointer) {\n        if (!this.state.isRunning) return;\n        this.onEnd(ev, pointer);\n        this.state.isRunning = false;\n      },\n      cancel: function (ev, pointer) {\n        this.onCancel(ev, pointer);\n        this.state = {};\n      },\n\n      // Find and return the nearest parent element that has been registered to\n      // listen for this handler via $mdGesture.register(element, 'handlerName').\n      getNearestParent: function (node) {\n        var current = node;\n        while (current) {\n          if ((current.$mdGesture || {})[this.name]) {\n            return current;\n          }\n          current = current.parentNode;\n        }\n        return null;\n      },\n\n      // Called from $mdGesture.register when an element reigsters itself with a handler.\n      // Store the options the user gave on the DOMElement itself. These options will\n      // be retrieved with getNearestParent when the handler starts.\n      registerElement: function (element, options) {\n        var self = this;\n        element[0].$mdGesture = element[0].$mdGesture || {};\n        element[0].$mdGesture[this.name] = options || {};\n        element.on('$destroy', onDestroy);\n\n        return onDestroy;\n\n        function onDestroy() {\n          delete element[0].$mdGesture[self.name];\n          element.off('$destroy', onDestroy);\n        }\n      }\n    };\n\n    return GestureHandler;\n\n    /*\n     * Dispatch an event with jQuery\n     * TODO: Make sure this sends bubbling events\n     *\n     * @param srcEvent the original DOM touch event that started this.\n     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')\n     * @param eventPointer the pointer object that matches this event.\n     */\n    function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {\n      eventPointer = eventPointer || pointer;\n      var eventObj = new angular.element.Event(eventType);\n\n      eventObj.$material = true;\n      eventObj.pointer = eventPointer;\n      eventObj.srcEvent = srcEvent;\n\n      angular.extend(eventObj, {\n        clientX: eventPointer.x,\n        clientY: eventPointer.y,\n        screenX: eventPointer.x,\n        screenY: eventPointer.y,\n        pageX: eventPointer.x,\n        pageY: eventPointer.y,\n        ctrlKey: srcEvent.ctrlKey,\n        altKey: srcEvent.altKey,\n        shiftKey: srcEvent.shiftKey,\n        metaKey: srcEvent.metaKey\n      });\n      angular.element(eventPointer.target).trigger(eventObj);\n    }\n\n    /*\n     * NOTE: nativeDispatchEvent is very performance sensitive.\n     * @param srcEvent the original DOM touch event that started this.\n     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')\n     * @param eventPointer the pointer object that matches this event.\n     */\n    function nativeDispatchEvent(srcEvent, eventType, eventPointer) {\n      eventPointer = eventPointer || pointer;\n      var eventObj;\n\n      if (eventType === 'click') {\n        eventObj = document.createEvent('MouseEvents');\n        eventObj.initMouseEvent(\n          'click', true, true, window, srcEvent.detail,\n          eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,\n          srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,\n          srcEvent.button, srcEvent.relatedTarget || null\n        );\n\n      } else {\n        eventObj = document.createEvent('CustomEvent');\n        eventObj.initCustomEvent(eventType, true, true, {});\n      }\n      eventObj.$material = true;\n      eventObj.pointer = eventPointer;\n      eventObj.srcEvent = srcEvent;\n      eventPointer.target.dispatchEvent(eventObj);\n    }\n\n  }\n\n  /**\n   * Attach Gestures: hook document and check shouldHijack clicks\n   * @ngInject\n   */\n  function attachToDocument( $mdGesture, $$MdGestureHandler ) {\n\n    // Polyfill document.contains for IE11.\n    // TODO: move to util\n    document.contains || (document.contains = function (node) {\n      return document.body.contains(node);\n    });\n\n    if (!isInitialized && $mdGesture.isHijackingClicks ) {\n      /*\n       * If hijack clicks is true, we preventDefault any click that wasn't\n       * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',\n       * click event will be sent ~400ms after a touchend event happens.\n       * The only way to know if this click is real is to prevent any normal\n       * click events, and add a flag to events sent by material so we know not to prevent those.\n       * \n       * Two exceptions to click events that should be prevented are:\n       *  - click events sent by the keyboard (eg form submit)\n       *  - events that originate from an Ionic app\n       */\n      document.addEventListener('click', function clickHijacker(ev) {\n        var isKeyClick = ev.clientX === 0 && ev.clientY === 0;\n        if (!isKeyClick && !ev.$material && !ev.isIonicTap\n            && !isInputEventFromLabelClick(ev)) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          lastLabelClickPos = null;\n        } else {\n          lastLabelClickPos = null;\n          if (ev.target.tagName.toLowerCase() == 'label') {\n            lastLabelClickPos = {x: ev.x, y: ev.y};\n          }\n        }\n      }, true);\n      \n      isInitialized = true;\n    }\n\n    // Listen to all events to cover all platforms.\n    var START_EVENTS = 'mousedown touchstart pointerdown';\n    var MOVE_EVENTS = 'mousemove touchmove pointermove';\n    var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';\n\n    angular.element(document)\n      .on(START_EVENTS, gestureStart)\n      .on(MOVE_EVENTS, gestureMove)\n      .on(END_EVENTS, gestureEnd)\n      // For testing\n      .on('$$mdGestureReset', function gestureClearCache () {\n        lastPointer = pointer = null;\n      });\n\n    /*\n     * When a DOM event happens, run all registered gesture handlers' lifecycle\n     * methods which match the DOM event.\n     * Eg when a 'touchstart' event happens, runHandlers('start') will call and\n     * run `handler.cancel()` and `handler.start()` on all registered handlers.\n     */\n    function runHandlers(handlerEvent, event) {\n      var handler;\n      for (var name in HANDLERS) {\n        handler = HANDLERS[name];\n        if( handler instanceof $$MdGestureHandler ) {\n\n          if (handlerEvent === 'start') {\n            // Run cancel to reset any handlers' state\n            handler.cancel();\n          }\n          handler[handlerEvent](event, pointer);\n\n        }\n      }\n    }\n\n    /*\n     * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)\n     * If it is legitimate, we initiate the pointer state and mark the current pointer's type\n     * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events\n     * won't effect it.\n     */\n    function gestureStart(ev) {\n      // If we're already touched down, abort\n      if (pointer) return;\n\n      var now = +Date.now();\n\n      // iOS & old android bug: after a touch event, a click event is sent 350 ms later.\n      // If <400ms have passed, don't allow an event of a different type than the previous event\n      if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {\n        return;\n      }\n\n      pointer = makeStartPointer(ev);\n\n      runHandlers('start', ev);\n    }\n    /*\n     * If a move event happens of the right type, update the pointer and run all the move handlers.\n     * \"of the right type\": if a mousemove happens but our pointer started with a touch event, do nothing.\n     */\n    function gestureMove(ev) {\n      if (!pointer || !typesMatch(ev, pointer)) return;\n\n      updatePointerState(ev, pointer);\n      runHandlers('move', ev);\n    }\n    /*\n     * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'\n     */\n    function gestureEnd(ev) {\n      if (!pointer || !typesMatch(ev, pointer)) return;\n\n      updatePointerState(ev, pointer);\n      pointer.endTime = +Date.now();\n\n      runHandlers('end', ev);\n\n      lastPointer = pointer;\n      pointer = null;\n    }\n\n  }\n  attachToDocument.$inject = [\"$mdGesture\", \"$$MdGestureHandler\"];\n\n  // ********************\n  // Module Functions\n  // ********************\n\n  /*\n   * Initiate the pointer. x, y, and the pointer's type.\n   */\n  function makeStartPointer(ev) {\n    var point = getEventPoint(ev);\n    var startPointer = {\n      startTime: +Date.now(),\n      target: ev.target,\n      // 'p' for pointer events, 'm' for mouse, 't' for touch\n      type: ev.type.charAt(0)\n    };\n    startPointer.startX = startPointer.x = point.pageX;\n    startPointer.startY = startPointer.y = point.pageY;\n    return startPointer;\n  }\n\n  /*\n   * return whether the pointer's type matches the event's type.\n   * Eg if a touch event happens but the pointer has a mouse type, return false.\n   */\n  function typesMatch(ev, pointer) {\n    return ev && pointer && ev.type.charAt(0) === pointer.type;\n  }\n\n  /**\n   * Gets whether the given event is an input event that was caused by clicking on an\n   * associated label element.\n   *\n   * This is necessary because the browser will, upon clicking on a label element, fire an\n   * *extra* click event on its associated input (if any). mdGesture is able to flag the label\n   * click as with `$material` correctly, but not the second input click.\n   *\n   * In order to determine whether an input event is from a label click, we compare the (x, y) for\n   * the event to the (x, y) for the most recent label click (which is cleared whenever a non-label\n   * click occurs). Unfortunately, there are no event properties that tie the input and the label\n   * together (such as relatedTarget).\n   *\n   * @param {MouseEvent} event\n   * @returns {boolean}\n   */\n  function isInputEventFromLabelClick(event) {\n    return lastLabelClickPos\n        && lastLabelClickPos.x == event.x\n        && lastLabelClickPos.y == event.y;\n  }\n\n  /*\n   * Update the given pointer based upon the given DOMEvent.\n   * Distance, velocity, direction, duration, etc\n   */\n  function updatePointerState(ev, pointer) {\n    var point = getEventPoint(ev);\n    var x = pointer.x = point.pageX;\n    var y = pointer.y = point.pageY;\n\n    pointer.distanceX = x - pointer.startX;\n    pointer.distanceY = y - pointer.startY;\n    pointer.distance = Math.sqrt(\n      pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY\n    );\n\n    pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';\n    pointer.directionY = pointer.distanceY > 0 ? 'up' : pointer.distanceY < 0 ? 'down' : '';\n\n    pointer.duration = +Date.now() - pointer.startTime;\n    pointer.velocityX = pointer.distanceX / pointer.duration;\n    pointer.velocityY = pointer.distanceY / pointer.duration;\n  }\n\n  /*\n   * Normalize the point where the DOM event happened whether it's touch or mouse.\n   * @returns point event obj with pageX and pageY on it.\n   */\n  function getEventPoint(ev) {\n    ev = ev.originalEvent || ev; // support jQuery events\n    return (ev.touches && ev.touches[0]) ||\n      (ev.changedTouches && ev.changedTouches[0]) ||\n      ev;\n  }\n\n})();\n(function(){\n\"use strict\";\n\nangular.module('material.core')\n  .provider('$$interimElement', InterimElementProvider);\n\n/*\n * @ngdoc service\n * @name $$interimElement\n * @module material.core\n *\n * @description\n *\n * Factory that contructs `$$interimElement.$service` services.\n * Used internally in material design for elements that appear on screen temporarily.\n * The service provides a promise-like API for interacting with the temporary\n * elements.\n *\n * ```js\n * app.service('$mdToast', function($$interimElement) {\n *   var $mdToast = $$interimElement(toastDefaultOptions);\n *   return $mdToast;\n * });\n * ```\n * @param {object=} defaultOptions Options used by default for the `show` method on the service.\n *\n * @returns {$$interimElement.$service}\n *\n */\n\nfunction InterimElementProvider() {\n  createInterimElementProvider.$get = InterimElementFactory;\n  InterimElementFactory.$inject = [\"$document\", \"$q\", \"$$q\", \"$rootScope\", \"$timeout\", \"$rootElement\", \"$animate\", \"$mdUtil\", \"$mdCompiler\", \"$mdTheming\", \"$log\"];\n  return createInterimElementProvider;\n\n  /**\n   * Returns a new provider which allows configuration of a new interimElement\n   * service. Allows configuration of default options & methods for options,\n   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)\n   */\n  function createInterimElementProvider(interimFactoryName) {\n    var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];\n\n    var customMethods = {};\n    var providerConfig = {\n      presets: {}\n    };\n\n    var provider = {\n      setDefaults: setDefaults,\n      addPreset: addPreset,\n      addMethod: addMethod,\n      $get: factory\n    };\n\n    /**\n     * all interim elements will come with the 'build' preset\n     */\n    provider.addPreset('build', {\n      methods: ['controller', 'controllerAs', 'resolve',\n        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent']\n    });\n\n    factory.$inject = [\"$$interimElement\", \"$injector\"];\n    return provider;\n\n    /**\n     * Save the configured defaults to be used when the factory is instantiated\n     */\n    function setDefaults(definition) {\n      providerConfig.optionsFactory = definition.options;\n      providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);\n      return provider;\n    }\n\n    /**\n     * Add a method to the factory that isn't specific to any interim element operations\n     */\n\n    function addMethod(name, fn) {\n      customMethods[name] = fn;\n      return provider;\n    }\n\n    /**\n     * Save the configured preset to be used when the factory is instantiated\n     */\n    function addPreset(name, definition) {\n      definition = definition || {};\n      definition.methods = definition.methods || [];\n      definition.options = definition.options || function() { return {}; };\n\n      if (/^cancel|hide|show$/.test(name)) {\n        throw new Error(\"Preset '\" + name + \"' in \" + interimFactoryName + \" is reserved!\");\n      }\n      if (definition.methods.indexOf('_options') > -1) {\n        throw new Error(\"Method '_options' in \" + interimFactoryName + \" is reserved!\");\n      }\n      providerConfig.presets[name] = {\n        methods: definition.methods.concat(EXPOSED_METHODS),\n        optionsFactory: definition.options,\n        argOption: definition.argOption\n      };\n      return provider;\n    }\n\n    /**\n     * Create a factory that has the given methods & defaults implementing interimElement\n     */\n    /* @ngInject */\n    function factory($$interimElement, $injector) {\n      var defaultMethods;\n      var defaultOptions;\n      var interimElementService = $$interimElement();\n\n      /*\n       * publicService is what the developer will be using.\n       * It has methods hide(), cancel(), show(), build(), and any other\n       * presets which were set during the config phase.\n       */\n      var publicService = {\n        hide: interimElementService.hide,\n        cancel: interimElementService.cancel,\n        show: showInterimElement,\n\n        // Special internal method to destroy an interim element without animations\n        // used when navigation changes causes a $scope.$destroy() action\n        destroy : destroyInterimElement\n      };\n\n\n      defaultMethods = providerConfig.methods || [];\n      // This must be invoked after the publicService is initialized\n      defaultOptions = invokeFactory(providerConfig.optionsFactory, {});\n\n      // Copy over the simple custom methods\n      angular.forEach(customMethods, function(fn, name) {\n        publicService[name] = fn;\n      });\n\n      angular.forEach(providerConfig.presets, function(definition, name) {\n        var presetDefaults = invokeFactory(definition.optionsFactory, {});\n        var presetMethods = (definition.methods || []).concat(defaultMethods);\n\n        // Every interimElement built with a preset has a field called `$type`,\n        // which matches the name of the preset.\n        // Eg in preset 'confirm', options.$type === 'confirm'\n        angular.extend(presetDefaults, { $type: name });\n\n        // This creates a preset class which has setter methods for every\n        // method given in the `.addPreset()` function, as well as every\n        // method given in the `.setDefaults()` function.\n        //\n        // @example\n        // .setDefaults({\n        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],\n        //   options: dialogDefaultOptions\n        // })\n        // .addPreset('alert', {\n        //   methods: ['title', 'ok'],\n        //   options: alertDialogOptions\n        // })\n        //\n        // Set values will be passed to the options when interimElement.show() is called.\n        function Preset(opts) {\n          this._options = angular.extend({}, presetDefaults, opts);\n        }\n        angular.forEach(presetMethods, function(name) {\n          Preset.prototype[name] = function(value) {\n            this._options[name] = value;\n            return this;\n          };\n        });\n\n        // Create shortcut method for one-linear methods\n        if (definition.argOption) {\n          var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);\n          publicService[methodName] = function(arg) {\n            var config = publicService[name](arg);\n            return publicService.show(config);\n          };\n        }\n\n        // eg $mdDialog.alert() will return a new alert preset\n        publicService[name] = function(arg) {\n          // If argOption is supplied, eg `argOption: 'content'`, then we assume\n          // if the argument is not an options object then it is the `argOption` option.\n          //\n          // @example `$mdToast.simple('hello')` // sets options.content to hello\n          //                                     // because argOption === 'content'\n          if (arguments.length && definition.argOption &&\n              !angular.isObject(arg) && !angular.isArray(arg))  {\n\n            return (new Preset())[definition.argOption](arg);\n\n          } else {\n            return new Preset(arg);\n          }\n\n        };\n      });\n\n      return publicService;\n\n      /**\n       *\n       */\n      function showInterimElement(opts) {\n        // opts is either a preset which stores its options on an _options field,\n        // or just an object made up of options\n        opts = opts || { };\n        if (opts._options) opts = opts._options;\n\n        return interimElementService.show(\n          angular.extend({}, defaultOptions, opts)\n        );\n      }\n\n      /**\n       *  Special method to hide and destroy an interimElement WITHOUT\n       *  any 'leave` or hide animations ( an immediate force hide/remove )\n       *\n       *  NOTE: This calls the onRemove() subclass method for each component...\n       *  which must have code to respond to `options.$destroy == true`\n       */\n      function destroyInterimElement(opts) {\n          return interimElementService.destroy(opts);\n      }\n\n      /**\n       * Helper to call $injector.invoke with a local of the factory name for\n       * this provider.\n       * If an $mdDialog is providing options for a dialog and tries to inject\n       * $mdDialog, a circular dependency error will happen.\n       * We get around that by manually injecting $mdDialog as a local.\n       */\n      function invokeFactory(factory, defaultVal) {\n        var locals = {};\n        locals[interimFactoryName] = publicService;\n        return $injector.invoke(factory || function() { return defaultVal; }, {}, locals);\n      }\n\n    }\n\n  }\n\n  /* @ngInject */\n  function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate,\n                                 $mdUtil, $mdCompiler, $mdTheming, $log ) {\n    return function createInterimElementService() {\n      var SHOW_CANCELLED = false;\n\n      /*\n       * @ngdoc service\n       * @name $$interimElement.$service\n       *\n       * @description\n       * A service used to control inserting and removing an element into the DOM.\n       *\n       */\n      var service, stack = [];\n\n      // Publish instance $$interimElement service;\n      // ... used as $mdDialog, $mdToast, $mdMenu, and $mdSelect\n\n      return service = {\n        show: show,\n        hide: hide,\n        cancel: cancel,\n        destroy : destroy\n      };\n\n      /*\n       * @ngdoc method\n       * @name $$interimElement.$service#show\n       * @kind function\n       *\n       * @description\n       * Adds the `$interimElement` to the DOM and returns a special promise that will be resolved or rejected\n       * with hide or cancel, respectively. To external cancel/hide, developers should use the\n       *\n       * @param {*} options is hashMap of settings\n       * @returns a Promise\n       *\n       */\n      function show(options) {\n        options = options || {};\n        var interimElement = new InterimElement(options || {});\n        var hideExisting = !options.skipHide && stack.length ? service.hide() : $q.when(true);\n\n        // This hide()s only the current interim element before showing the next, new one\n        // NOTE: this is not reversible (e.g. interim elements are not stackable)\n\n        hideExisting.finally(function() {\n\n          stack.push(interimElement);\n          interimElement\n            .show()\n            .catch(function( reason ) {\n              //$log.error(\"InterimElement.show() error: \" + reason );\n              return reason;\n            });\n\n        });\n\n        // Return a promise that will be resolved when the interim\n        // element is hidden or cancelled...\n\n        return interimElement.deferred.promise;\n      }\n\n      /*\n       * @ngdoc method\n       * @name $$interimElement.$service#hide\n       * @kind function\n       *\n       * @description\n       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`\n       *\n       * @param {*} resolveParam Data to resolve the promise with\n       * @returns a Promise that will be resolved after the element has been removed.\n       *\n       */\n      function hide(reason, options) {\n        if ( !stack.length ) return $q.when(reason);\n        options = options || {};\n\n        if (options.closeAll) {\n          var promise = $q.all(stack.reverse().map(closeElement));\n          stack = [];\n          return promise;\n        } else if (options.closeTo !== undefined) {\n          return $q.all(stack.splice(options.closeTo).map(closeElement));\n        } else {\n          var interim = stack.pop();\n          return closeElement(interim);\n        }\n\n        function closeElement(interim) {\n          interim\n            .remove(reason, false, options || { })\n            .catch(function( reason ) {\n              //$log.error(\"InterimElement.hide() error: \" + reason );\n              return reason;\n            });\n          return interim.deferred.promise;\n        }\n      }\n\n      /*\n       * @ngdoc method\n       * @name $$interimElement.$service#cancel\n       * @kind function\n       *\n       * @description\n       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`\n       *\n       * @param {*} reason Data to reject the promise with\n       * @returns Promise that will be resolved after the element has been removed.\n       *\n       */\n      function cancel(reason, options) {\n        var interim = stack.shift();\n        if ( !interim ) return $q.when(reason);\n\n        interim\n          .remove(reason, true, options || { })\n          .catch(function( reason ) {\n            //$log.error(\"InterimElement.cancel() error: \" + reason );\n            return reason;\n          });\n\n        return interim.deferred.promise;\n      }\n\n      /*\n       * Special method to quick-remove the interim element without animations\n       */\n      function destroy() {\n        var interim = stack.shift();\n\n        return interim ? interim.remove(SHOW_CANCELLED, false, {'$destroy':true}) :\n               $q.when(SHOW_CANCELLED);\n      }\n\n\n      /*\n       * Internal Interim Element Object\n       * Used internally to manage the DOM element and related data\n       */\n      function InterimElement(options) {\n        var self, element, showAction = $q.when(true);\n\n        options = configureScopeAndTransitions(options);\n\n        return self = {\n          options : options,\n          deferred: $q.defer(),\n          show    : createAndTransitionIn,\n          remove  : transitionOutAndRemove\n        };\n\n        /**\n         * Compile, link, and show this interim element\n         * Use optional autoHided and transition-in effects\n         */\n        function createAndTransitionIn() {\n          return $q(function(resolve, reject){\n\n            compileElement(options)\n              .then(function( compiledData ) {\n                element = linkElement( compiledData, options );\n\n                showAction = showElement(element, options, compiledData.controller)\n                  .then(resolve, rejectAll );\n\n              }, rejectAll);\n\n            function rejectAll(fault) {\n              // Force the '$md<xxx>.show()' promise to reject\n              self.deferred.reject(fault);\n\n              // Continue rejection propagation\n              reject(fault);\n            }\n          });\n        }\n\n        /**\n         * After the show process has finished/rejected:\n         * - announce 'removing',\n         * - perform the transition-out, and\n         * - perform optional clean up scope.\n         */\n        function transitionOutAndRemove(response, isCancelled, opts) {\n\n          // abort if the show() and compile failed\n          if ( !element ) return $q.when(false);\n\n          options = angular.extend(options || {}, opts || {});\n          options.cancelAutoHide && options.cancelAutoHide();\n          options.element.triggerHandler('$mdInterimElementRemove');\n\n          if ( options.$destroy === true ) {\n\n            return hideElement(options.element, options);\n\n          } else {\n\n            $q.when(showAction)\n                .finally(function() {\n                  hideElement(options.element, options).then(function() {\n\n                    (isCancelled && rejectAll(response)) || resolveAll(response);\n\n                  }, rejectAll);\n                });\n\n            return self.deferred.promise;\n          }\n\n\n          /**\n           * The `show()` returns a promise that will be resolved when the interim\n           * element is hidden or cancelled...\n           */\n          function resolveAll(response) {\n            self.deferred.resolve(response);\n          }\n\n          /**\n           * Force the '$md<xxx>.show()' promise to reject\n           */\n          function rejectAll(fault) {\n            self.deferred.reject(fault);\n          }\n        }\n\n        /**\n         * Prepare optional isolated scope and prepare $animate with default enter and leave\n         * transitions for the new element instance.\n         */\n        function configureScopeAndTransitions(options) {\n          options = options || { };\n          if ( options.template ) {\n            options.template = $mdUtil.processTemplate(options.template);\n          }\n\n          return angular.extend({\n            preserveScope: false,\n            cancelAutoHide : angular.noop,\n            scope: options.scope || $rootScope.$new(options.isolateScope),\n\n            /**\n             * Default usage to enable $animate to transition-in; can be easily overridden via 'options'\n             */\n            onShow: function transitionIn(scope, element, options) {\n              return $animate.enter(element, options.parent);\n            },\n\n            /**\n             * Default usage to enable $animate to transition-out; can be easily overridden via 'options'\n             */\n            onRemove: function transitionOut(scope, element) {\n              // Element could be undefined if a new element is shown before\n              // the old one finishes compiling.\n              return element && $animate.leave(element) || $q.when();\n            }\n          }, options );\n\n        }\n\n        /**\n         * Compile an element with a templateUrl, controller, and locals\n         */\n        function compileElement(options) {\n\n          var compiled = !options.skipCompile ? $mdCompiler.compile(options) : null;\n\n          return compiled || $q(function (resolve) {\n              resolve({\n                locals: {},\n                link: function () {\n                  return options.element;\n                }\n              });\n            });\n        }\n\n        /**\n         *  Link an element with compiled configuration\n         */\n        function linkElement(compileData, options){\n          angular.extend(compileData.locals, options);\n\n          var element = compileData.link(options.scope);\n\n          // Search for parent at insertion time, if not specified\n          options.element = element;\n          options.parent = findParent(element, options);\n          if (options.themable) $mdTheming(element);\n\n          return element;\n        }\n\n        /**\n         * Search for parent at insertion time, if not specified\n         */\n        function findParent(element, options) {\n          var parent = options.parent;\n\n          // Search for parent at insertion time, if not specified\n          if (angular.isFunction(parent)) {\n            parent = parent(options.scope, element, options);\n          } else if (angular.isString(parent)) {\n            parent = angular.element($document[0].querySelector(parent));\n          } else {\n            parent = angular.element(parent);\n          }\n\n          // If parent querySelector/getter function fails, or it's just null,\n          // find a default.\n          if (!(parent || {}).length) {\n            var el;\n            if ($rootElement[0] && $rootElement[0].querySelector) {\n              el = $rootElement[0].querySelector(':not(svg) > body');\n            }\n            if (!el) el = $rootElement[0];\n            if (el.nodeName == '#comment') {\n              el = $document[0].body;\n            }\n            return angular.element(el);\n          }\n\n          return parent;\n        }\n\n        /**\n         * If auto-hide is enabled, start timer and prepare cancel function\n         */\n        function startAutoHide() {\n          var autoHideTimer, cancelAutoHide = angular.noop;\n\n          if (options.hideDelay) {\n            autoHideTimer = $timeout(service.hide, options.hideDelay) ;\n            cancelAutoHide = function() {\n              $timeout.cancel(autoHideTimer);\n            }\n          }\n\n          // Cache for subsequent use\n          options.cancelAutoHide = function() {\n            cancelAutoHide();\n            options.cancelAutoHide = undefined;\n          }\n        }\n\n        /**\n         * Show the element ( with transitions), notify complete and start\n         * optional auto-Hide\n         */\n        function showElement(element, options, controller) {\n          // Trigger onShowing callback before the `show()` starts\n          var notifyShowing = options.onShowing || angular.noop;\n          // Trigger onComplete callback when the `show()` finishes\n          var notifyComplete = options.onComplete || angular.noop;\n\n          return $q(function (resolve, reject) {\n            try {\n              notifyShowing(options.scope, element, options);\n\n              // Start transitionIn\n              $q.when(options.onShow(options.scope, element, options, controller))\n                .then(function () {\n                  notifyComplete(options.scope, element, options);\n                  startAutoHide();\n\n                  resolve(element);\n\n                }, reject );\n\n            } catch(e) {\n              reject(e.message);\n            }\n          });\n        }\n\n        function hideElement(element, options) {\n          var announceRemoving = options.onRemoving || angular.noop;\n\n          return $$q(function (resolve, reject) {\n            try {\n              // Start transitionIn\n              var action = $$q.when( options.onRemove(options.scope, element, options) || true );\n\n              // Trigger callback *before* the remove operation starts\n              announceRemoving(element, action);\n\n              if ( options.$destroy == true ) {\n\n                // For $destroy, onRemove should be synchronous\n                resolve(element);\n\n              } else {\n\n                // Wait until transition-out is done\n                action.then(function () {\n\n                  if (!options.preserveScope && options.scope ) {\n                    options.scope.$destroy();\n                  }\n\n                  resolve(element);\n\n                }, reject );\n              }\n\n            } catch(e) {\n              reject(e.message);\n            }\n          });\n        }\n\n      }\n    };\n\n  }\n\n}\n\n})();\n(function(){\n\"use strict\";\n\n  /**\n   * @ngdoc module\n   * @name material.core.componentRegistry\n   *\n   * @description\n   * A component instance registration service.\n   * Note: currently this as a private service in the SideNav component.\n   */\n  angular.module('material.core')\n    .factory('$mdComponentRegistry', ComponentRegistry);\n\n  /*\n   * @private\n   * @ngdoc factory\n   * @name ComponentRegistry\n   * @module material.core.componentRegistry\n   *\n   */\n  function ComponentRegistry($log, $q) {\n\n    var self;\n    var instances = [ ];\n    var pendings = { };\n\n    return self = {\n      /**\n       * Used to print an error when an instance for a handle isn't found.\n       */\n      notFoundError: function(handle) {\n        $log.error('No instance found for handle', handle);\n      },\n      /**\n       * Return all registered instances as an array.\n       */\n      getInstances: function() {\n        return instances;\n      },\n\n      /**\n       * Get a registered instance.\n       * @param handle the String handle to look up for a registered instance.\n       */\n      get: function(handle) {\n        if ( !isValidID(handle) ) return null;\n\n        var i, j, instance;\n        for(i = 0, j = instances.length; i < j; i++) {\n          instance = instances[i];\n          if(instance.$$mdHandle === handle) {\n            return instance;\n          }\n        }\n        return null;\n      },\n\n      /**\n       * Register an instance.\n       * @param instance the instance to register\n       * @param handle the handle to identify the instance under.\n       */\n      register: function(instance, handle) {\n        if ( !handle ) return angular.noop;\n\n        instance.$$mdHandle = handle;\n        instances.push(instance);\n        resolveWhen();\n\n        return deregister;\n\n        /**\n         * Remove registration for an instance\n         */\n        function deregister() {\n          var index = instances.indexOf(instance);\n          if (index !== -1) {\n            instances.splice(index, 1);\n          }\n        }\n\n        /**\n         * Resolve any pending promises for this instance\n         */\n        function resolveWhen() {\n          var dfd = pendings[handle];\n          if ( dfd ) {\n            dfd.resolve( instance );\n            delete pendings[handle];\n          }\n        }\n      },\n\n      /**\n       * Async accessor to registered component instance\n       * If not available then a promise is created to notify\n       * all listeners when the instance is registered.\n       */\n      when : function(handle) {\n        if ( isValidID(handle) ) {\n          var deferred = $q.defer();\n          var instance = self.get(handle);\n\n          if ( instance )  {\n            deferred.resolve( instance );\n          } else {\n            pendings[handle] = deferred;\n          }\n\n          return deferred.promise;\n        }\n        return $q.reject(\"Invalid `md-component-id` value.\");\n      }\n\n    };\n\n    function isValidID(handle){\n      return handle && (handle !== \"\");\n    }\n\n  }\n  ComponentRegistry.$inject = [\"$log\", \"$q\"];\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  var $mdUtil, $interpolate;\n\n  var SUFFIXES = /(-gt)?-(sm|md|lg)/g;\n  var WHITESPACE = /\\s+/g;\n\n  var FLEX_OPTIONS = ['grow', 'initial', 'auto', 'none'];\n  var LAYOUT_OPTIONS = ['row', 'column'];\n  var ALIGNMENT_OPTIONS = [\n        \"start start\", \"start center\", \"start end\",\n        \"center\", \"center center\", \"center start\", \"center end\",\n        \"end\", \"end center\", \"end start\", \"end end\",\n        \"space-around\", \"space-around center\", \"space-around start\", \"space-around end\",\n        \"space-between\", \"space-between center\", \"space-between start\", \"space-between end\"\n      ];\n\n\n  var config = {\n    /**\n     * Enable directive attribute-to-class conversions\n     */\n    enabled: true,\n\n    /**\n     * After translation to classname equivalents, remove the\n     * original Layout attribute\n     */\n    removeAttributes : true,\n\n    /**\n     * List of mediaQuery breakpoints and associated suffixes\n     *\n     *   [\n     *    { suffix: \"sm\", mediaQuery: \"screen and (max-width: 599px)\" },\n     *    { suffix: \"md\", mediaQuery: \"screen and (min-width: 600px) and (max-width: 959px)\" }\n     *   ]\n     */\n    breakpoints: []\n  };\n\n  /**\n   *   The original ngMaterial Layout solution used attribute selectors and CSS.\n   *\n   *  ```html\n   *  <div layout=\"column\"> My Content </div>\n   *  ```\n   *\n   *  ```css\n   *  [layout] {\n     *    box-sizing: border-box;\n     *    display:flex;\n     *  }\n   *  [layout=column] {\n     *    flex-direction : column\n     *  }\n   *  ```\n   *\n   *  Use of attribute selectors creates significant performance impacts in some\n   *  browsers... mainly IE.\n   *\n   *  This module registers directives that allow the same layout attributes to be\n   *  interpreted and converted to class selectors. The directive will add equivalent classes to each element that\n   *  contains a Layout directive.\n   *\n   * ```html\n   *   <div layout=\"column\" class=\"layout layout-column\"> My Content </div>\n   *```\n   *\n   *  ```css\n   *  .layout {\n     *    box-sizing: border-box;\n     *    display:flex;\n     *  }\n   *  .layout-column {\n     *    flex-direction : column\n     *  }\n   *  ```\n   */\n  angular.module('material.core.layout', ['ng'])\n\n    .directive('mdLayoutCss', disableLayoutDirective )\n\n    .directive('layout', attributeWithObserve('layout'))\n    .directive('layoutSm', attributeWithObserve('layout-sm'))\n    .directive('layoutGtSm', attributeWithObserve('layout-gt-sm'))\n    .directive('layoutMd', attributeWithObserve('layout-md'))\n    .directive('layoutGtMd', attributeWithObserve('layout-gt-md'))\n    .directive('layoutLg', attributeWithObserve('layout-lg'))\n    .directive('layoutGtLg', attributeWithObserve('layout-gt-lg'))\n\n    .directive('flex', attributeWithObserve('flex'))\n    .directive('flexSm', attributeWithObserve('flex-sm'))\n    .directive('flexGtSm', attributeWithObserve('flex-gt-sm'))\n    .directive('flexMd', attributeWithObserve('flex-md'))\n    .directive('flexGtMd', attributeWithObserve('flex-gt-md'))\n    .directive('flexLg', attributeWithObserve('flex-lg'))\n    .directive('flexGtLg', attributeWithObserve('flex-gt-lg'))\n\n    .directive('flexOrder', attributeWithObserve('flex-order'))\n    .directive('flexOrderSm', attributeWithObserve('flex-order-sm'))\n    .directive('flexOrderGtSm', attributeWithObserve('flex-order-gt-sm'))\n    .directive('flexOrderMd', attributeWithObserve('flex-order-md'))\n    .directive('flexOrderGtMd', attributeWithObserve('flex-order-gt-md'))\n    .directive('flexOrderLg', attributeWithObserve('flex-order-lg'))\n    .directive('flexOrderGtLg', attributeWithObserve('flex-order-gt-lg'))\n\n    .directive('flexOffset', attributeWithObserve('flex-offset'))\n    .directive('flexOffsetSm', attributeWithObserve('flex-offset-sm'))\n    .directive('flexOffsetGtSm', attributeWithObserve('flex-offset-gt-sm'))\n    .directive('flexOffsetMd', attributeWithObserve('flex-offset-md'))\n    .directive('flexOffsetGtMd', attributeWithObserve('flex-offset-gt-md'))\n    .directive('flexOffsetLg', attributeWithObserve('flex-offset-lg'))\n    .directive('flexOffsetGtLg', attributeWithObserve('flex-offset-gt-lg'))\n\n    .directive('layoutAlign', attributeWithObserve('layout-align'))\n    .directive('layoutAlignSm', attributeWithObserve('layout-align-sm'))\n    .directive('layoutAlignGtSm', attributeWithObserve('layout-align-gt-sm'))\n    .directive('layoutAlignMd', attributeWithObserve('layout-align-md'))\n    .directive('layoutAlignGtMd', attributeWithObserve('layout-align-gt-md'))\n    .directive('layoutAlignLg', attributeWithObserve('layout-align-lg'))\n    .directive('layoutAlignGtLg', attributeWithObserve('layout-align-gt-lg'))\n\n    // Attribute directives with no value(s)\n\n    .directive('hide', attributeWithoutValue('hide'))\n    .directive('hideSm', attributeWithoutValue('hide-sm'))\n    .directive('hideGtSm', attributeWithoutValue('hide-gt-sm'))\n    .directive('hideMd', attributeWithoutValue('hide-md'))\n    .directive('hideGtMd', attributeWithoutValue('hide-gt-md'))\n    .directive('hideLg', attributeWithoutValue('hide-lg'))\n    .directive('hideGtLg', attributeWithoutValue('hide-gt-lg'))\n    .directive('show', attributeWithoutValue('show'))\n    .directive('showSm', attributeWithoutValue('show-sm'))\n    .directive('showGtSm', attributeWithoutValue('show-gt-sm'))\n    .directive('showMd', attributeWithoutValue('show-md'))\n    .directive('showGtMd', attributeWithoutValue('show-gt-md'))\n    .directive('showLg', attributeWithoutValue('show-lg'))\n    .directive('showGtLg', attributeWithoutValue('show-gt-lg'))\n\n    // Attribute directives with no value(s) and NO breakpoints\n\n    .directive('layoutMargin', attributeWithoutValue('layout-margin'))\n    .directive('layoutPadding', attributeWithoutValue('layout-padding'))\n    .directive('layoutWrap', attributeWithoutValue('layout-wrap'))\n    .directive('layoutNoWrap', attributeWithoutValue('layout-no-wrap'))\n    .directive('layoutFill', attributeWithoutValue('layout-fill'))\n\n    // !! Deprecated attributes: use the `-lt` (aka less-than) notations\n\n    .directive('layoutLtMd', warnAttrNotSupported('layout-lt-md', true))\n    .directive('layoutLtLg', warnAttrNotSupported('layout-lt-lg', true))\n    .directive('flexLtMd', warnAttrNotSupported('flex-lt-md', true))\n    .directive('flexLtLg', warnAttrNotSupported('flex-lt-lg', true))\n\n    .directive('layoutAlignLtMd', warnAttrNotSupported('layout-align-lt-md'))\n    .directive('layoutAlignLtLg', warnAttrNotSupported('layout-align-lt-lg'))\n    .directive('flexOrderLtMd', warnAttrNotSupported('flex-order-lt-md'))\n    .directive('flexOrderLtLg', warnAttrNotSupported('flex-order-lt-lg'))\n    .directive('offsetLtMd', warnAttrNotSupported('flex-offset-lt-md'))\n    .directive('offsetLtLg', warnAttrNotSupported('flex-offset-lt-lg'))\n\n    .directive('hideLtMd', warnAttrNotSupported('hide-lt-md'))\n    .directive('hideLtLg', warnAttrNotSupported('hide-lt-lg'))\n    .directive('showLtMd', warnAttrNotSupported('show-lt-md'))\n    .directive('showLtLg', warnAttrNotSupported('show-lt-lg'));\n\n  /**\n   * Special directive that will disable ALL Layout conversions of layout\n   * attribute(s) to classname(s).\n   *\n   * <link rel=\"stylesheet\" href=\"angular-material.min.css\">\n   * <link rel=\"stylesheet\" href=\"angular-material.layout.css\">\n   *\n   * <body md-layout-css>\n   *  ...\n   * </body>\n   *\n   * Note: Using md-layout-css directive requires the developer to load the Material\n   * Layout Attribute stylesheet (which only uses attribute selectors):\n   *\n   *       `angular-material.layout.css`\n   *\n   * Another option is to use the LayoutProvider to configure and disable the attribute\n   * conversions; this would obviate the use of the `md-layout-css` directive\n   *\n   */\n  function disableLayoutDirective() {\n    return {\n      restrict : 'A',\n      priority : '900',\n      compile  : function(element, attr) {\n        config.enabled = false;\n        return angular.noop;\n      }\n    };\n  }\n\n  // *********************************************************************************\n  //\n  // These functions create registration functions for ngMaterial Layout attribute directives\n  // This provides easy translation to switch ngMaterial attribute selectors to\n  // CLASS selectors and directives; which has huge performance implications\n  // for IE Browsers\n  //\n  // *********************************************************************************\n\n\n  /**\n   * Creates a directive registration function where a possible dynamic attribute\n   * value will be observed/watched.\n   * @param {string} className attribute name; eg `layout-gt-md` with value =\"row\"\n   */\n  function attributeWithObserve(className) {\n\n    return ['$mdUtil', '$interpolate', function(_$mdUtil_, _$interpolate_) {\n      $mdUtil = _$mdUtil_;\n      $interpolate = _$interpolate_;\n\n      return {\n        restrict: 'A',\n        compile: function(element, attr) {\n          var linkFn;\n          if (config.enabled) {\n            // immediately replace static (non-interpolated) invalid values...\n\n            validateAttributeValue( className,\n              getNormalizedAttrValue(className, attr, \"\"),\n              buildUpdateFn(element, className, attr)\n            );\n\n            linkFn = translateWithValueToCssClass;\n          }\n\n          // Use for postLink to account for transforms after ng-transclude.\n          return linkFn || angular.noop;\n        }\n      };\n    }];\n\n    /**\n     * Add as transformed class selector(s), then\n     * remove the deprecated attribute selector\n     */\n    function translateWithValueToCssClass(scope, element, attrs) {\n      var updateFn = updateClassWithValue(element, className, attrs);\n      var unwatch = attrs.$observe(attrs.$normalize(className), updateFn);\n\n      updateFn(getNormalizedAttrValue(className, attrs, \"\"));\n      scope.$on(\"$destroy\", function() { unwatch() });\n\n      if (config.removeAttributes) element.removeAttr(className);\n    }\n  }\n\n  /**\n   * Creates a registration function for ngMaterial Layout attribute directive.\n   * This is a `simple` transpose of attribute usage to class usage; where we ignore\n   * any attribute value\n   */\n  function attributeWithoutValue(className) {\n    return ['$interpolate', function(_$interpolate_) {\n      $interpolate = _$interpolate_;\n\n      return {\n        restrict: 'A',\n        compile: function(element, attr) {\n          var linkFn;\n          if (config.enabled) {\n            // immediately replace static (non-interpolated) invalid values...\n\n            validateAttributeValue( className,\n              getNormalizedAttrValue(className, attr, \"\"),\n              buildUpdateFn(element, className, attr)\n            );\n\n            translateToCssClass(null, element);\n\n            // Use for postLink to account for transforms after ng-transclude.\n            linkFn = translateToCssClass;\n          }\n\n          return linkFn || angular.noop;\n        }\n      };\n    }];\n\n    /**\n     * Add as transformed class selector, then\n     * remove the deprecated attribute selector\n     */\n    function translateToCssClass(scope, element) {\n      element.addClass(className);\n\n      if (config.removeAttributes) {\n        // After link-phase, remove deprecated layout attribute selector\n        element.removeAttr(className);\n      }\n    }\n  }\n\n\n\n  /**\n   * After link-phase, do NOT remove deprecated layout attribute selector.\n   * Instead watch the attribute so interpolated data-bindings to layout\n   * selectors will continue to be supported.\n   *\n   * $observe() the className and update with new class (after removing the last one)\n   *\n   * e.g. `layout=\"{{layoutDemo.direction}}\"` will update...\n   *\n   * NOTE: The value must match one of the specified styles in the CSS.\n   * For example `flex-gt-md=\"{{size}}`  where `scope.size == 47` will NOT work since\n   * only breakpoints for 0, 5, 10, 15... 100, 33, 34, 66, 67 are defined.\n   *\n   */\n  function updateClassWithValue(element, className) {\n    var lastClass;\n\n    return function updateClassFn(newValue) {\n      var value = validateAttributeValue(className, newValue || \"\");\n      if ( angular.isDefined(value) ) {\n        element.removeClass(lastClass);\n        lastClass = !value ? className : className + \"-\" + value.replace(WHITESPACE, \"-\")\n        element.addClass(lastClass);\n      }\n    };\n  }\n\n  /**\n   * Provide console warning that this layout attribute has been deprecated\n   *\n   */\n  function warnAttrNotSupported(className) {\n    var parts = className.split(\"-\");\n    return [\"$log\", function($log) {\n      $log.warn(className + \"has been deprecated. Please use a `\" + parts[0] + \"-gt-<xxx>` variant.\");\n      return angular.noop;\n    }];\n  }\n\n  /**\n   * For the Layout attribute value, validate or replace with default\n   * fallback value\n   */\n  function validateAttributeValue(className, value, updateFn) {\n    var origValue = value;\n\n    if (!needsInterpolation(value)) {\n      switch (className.replace(SUFFIXES,\"\")) {\n        case 'layout'        :\n          if ( !findIn(value, LAYOUT_OPTIONS) ) {\n            value = LAYOUT_OPTIONS[0];    // 'row';\n          }\n          break;\n\n        case 'flex'          :\n          if (!findIn(value, FLEX_OPTIONS)) {\n            if (isNaN(value)) {\n              value = '';\n            }\n          }\n          break;\n\n        case 'flex-offset' :\n        case 'flex-order'    :\n          if (!value || isNaN(+value)) {\n            value = '0';\n          }\n          break;\n\n        case 'layout-align'  :\n          if (!findIn(value, ALIGNMENT_OPTIONS, \"-\")) {\n            value = ALIGNMENT_OPTIONS[0];   // 'start-start';\n          }\n          break;\n\n        case 'layout-padding' :\n        case 'layout-margin'  :\n        case 'layout-fill'    :\n        case 'layout-wrap'    :\n        case 'layout-no-wrap' :\n          value = '';\n          break;\n      }\n\n      if (value != origValue) {\n        (updateFn || angular.noop)(value);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Replace current attribute value with fallback value\n   */\n  function buildUpdateFn(element, className, attrs) {\n    return function updateAttrValue(fallback) {\n      if (!needsInterpolation(fallback)) {\n        element.attr(className, fallback);\n        attrs[attrs.$normalize(className)] = fallback;\n      }\n    };\n  }\n\n  /**\n   * See if the original value has interpolation symbols:\n   * e.g.  flex-gt-md=\"{{triggerPoint}}\"\n   */\n  function needsInterpolation(value) {\n    return (value || \"\").indexOf($interpolate.startSymbol()) > -1;\n  }\n\n  function getNormalizedAttrValue(className, attrs, defaultVal) {\n    var normalizedAttr = attrs.$normalize(className);\n    return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, \"-\") : defaultVal || null;\n  }\n\n  function findIn(item, list, replaceWith) {\n    item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;\n\n    var found = false;\n    if (item) {\n      list.forEach(function(it) {\n        it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;\n        found = found || (it === item);\n      });\n    }\n    return found;\n  }\n\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name $mdButtonInkRipple\n   * @module material.core\n   *\n   * @description\n   * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.\n   *\n   * @param {object=} scope Scope within the current context\n   * @param {object=} element The element the ripple effect should be applied to\n   * @param {object=} options (Optional) Configuration options to override the default ripple configuration\n   */\n\n  angular.module('material.core')\n    .factory('$mdButtonInkRipple', MdButtonInkRipple);\n\n  function MdButtonInkRipple($mdInkRipple) {\n    return {\n      attach: function attachRipple(scope, element, options) {\n        options = angular.extend(optionsForElement(element), options);\n\n        return $mdInkRipple.attach(scope, element, options);\n      }\n    };\n\n    function optionsForElement(element) {\n      if (element.hasClass('md-icon-button')) {\n        return {\n          isMenuItem: element.hasClass('md-menu-item'),\n          fitRipple: true,\n          center: true\n        };\n      } else {\n        return {\n          isMenuItem: element.hasClass('md-menu-item'),\n          dimBackground: true\n        }\n      }\n    };\n  }\n  MdButtonInkRipple.$inject = [\"$mdInkRipple\"];;\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n    /**\n   * @ngdoc service\n   * @name $mdCheckboxInkRipple\n   * @module material.core\n   *\n   * @description\n   * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.\n   *\n   * @param {object=} scope Scope within the current context\n   * @param {object=} element The element the ripple effect should be applied to\n   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration\n   */\n\n  angular.module('material.core')\n    .factory('$mdCheckboxInkRipple', MdCheckboxInkRipple);\n\n  function MdCheckboxInkRipple($mdInkRipple) {\n    return {\n      attach: attach\n    };\n\n    function attach(scope, element, options) {\n      return $mdInkRipple.attach(scope, element, angular.extend({\n        center: true,\n        dimBackground: false,\n        fitRipple: true\n      }, options));\n    };\n  }\n  MdCheckboxInkRipple.$inject = [\"$mdInkRipple\"];;\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name $mdListInkRipple\n   * @module material.core\n   *\n   * @description\n   * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.\n   *\n   * @param {object=} scope Scope within the current context\n   * @param {object=} element The element the ripple effect should be applied to\n   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration\n   */\n\n  angular.module('material.core')\n    .factory('$mdListInkRipple', MdListInkRipple);\n\n  function MdListInkRipple($mdInkRipple) {\n    return {\n      attach: attach\n    };\n\n    function attach(scope, element, options) {\n      return $mdInkRipple.attach(scope, element, angular.extend({\n        center: false,\n        dimBackground: true,\n        outline: false,\n        rippleSize: 'full'\n      }, options));\n    };\n  }\n  MdListInkRipple.$inject = [\"$mdInkRipple\"];;\n})();\n\n})();\n(function(){\n\"use strict\";\n\nangular.module('material.core')\n    .factory('$mdInkRipple', InkRippleService)\n    .directive('mdInkRipple', InkRippleDirective)\n    .directive('mdNoInk', attrNoDirective)\n    .directive('mdNoBar', attrNoDirective)\n    .directive('mdNoStretch', attrNoDirective);\n\nvar DURATION = 450;\n\n/**\n * Directive used to add ripples to any element\n * @ngInject\n */\nfunction InkRippleDirective ($mdButtonInkRipple, $mdCheckboxInkRipple) {\n  return {\n    controller: angular.noop,\n    link:       function (scope, element, attr) {\n      attr.hasOwnProperty('mdInkRippleCheckbox')\n          ? $mdCheckboxInkRipple.attach(scope, element)\n          : $mdButtonInkRipple.attach(scope, element);\n    }\n  };\n}\nInkRippleDirective.$inject = [\"$mdButtonInkRipple\", \"$mdCheckboxInkRipple\"];\n\n/**\n * Service for adding ripples to any element\n * @ngInject\n */\nfunction InkRippleService ($injector) {\n  return { attach: attach };\n  function attach (scope, element, options) {\n    if (element.controller('mdNoInk')) return angular.noop;\n    return $injector.instantiate(InkRippleCtrl, {\n      $scope:        scope,\n      $element:      element,\n      rippleOptions: options\n    });\n  }\n}\nInkRippleService.$inject = [\"$injector\"];\n\n/**\n * Controller used by the ripple service in order to apply ripples\n * @ngInject\n */\nfunction InkRippleCtrl ($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {\n  this.$window    = $window;\n  this.$timeout   = $timeout;\n  this.$mdUtil    = $mdUtil;\n  this.$scope     = $scope;\n  this.$element   = $element;\n  this.options    = rippleOptions;\n  this.mousedown  = false;\n  this.ripples    = [];\n  this.timeout    = null; // Stores a reference to the most-recent ripple timeout\n  this.lastRipple = null;\n\n  $mdUtil.valueOnUse(this, 'container', this.createContainer);\n  $mdUtil.valueOnUse(this, 'background', this.getColor, 0.5);\n\n  this.color = this.getColor(1);\n  this.$element.addClass('md-ink-ripple');\n\n  // attach method for unit tests\n  ($element.controller('mdInkRipple') || {}).createRipple = angular.bind(this, this.createRipple);\n  ($element.controller('mdInkRipple') || {}).setColor = angular.bind(this, this.setColor);\n\n  this.bindEvents();\n}\nInkRippleCtrl.$inject = [\"$scope\", \"$element\", \"rippleOptions\", \"$window\", \"$timeout\", \"$mdUtil\"];\n\n/**\n * Returns the color that the ripple should be (either based on CSS or hard-coded)\n * @returns {string}\n */\nInkRippleCtrl.prototype.getColor = function () {\n  return this._parseColor(this.$element.attr('md-ink-ripple'))\n      || this._parseColor(getElementColor.call(this));\n\n  /**\n   * Finds the color element and returns its text color for use as default ripple color\n   * @returns {string}\n   */\n  function getElementColor () {\n    var colorElement = this.options.colorElement && this.options.colorElement[ 0 ];\n    colorElement     = colorElement || this.$element[ 0 ];\n    return colorElement ? this.$window.getComputedStyle(colorElement).color : 'rgb(0,0,0)';\n  }\n};\n/**\n * Takes a string color and converts it to RGBA format\n * @param color {string}\n * @param [multiplier] {int}\n * @returns {string}\n */\n\nInkRippleCtrl.prototype._parseColor = function parseColor (color, multiplier) {\n  multiplier = multiplier || 1;\n\n  if (!color) return;\n  if (color.indexOf('rgba') === 0) return color.replace(/\\d?\\.?\\d*\\s*\\)\\s*$/, (0.1 * multiplier).toString() + ')');\n  if (color.indexOf('rgb') === 0) return rgbToRGBA(color);\n  if (color.indexOf('#') === 0) return hexToRGBA(color);\n\n  /**\n   * Converts hex value to RGBA string\n   * @param color {string}\n   * @returns {string}\n   */\n  function hexToRGBA (color) {\n    var hex   = color[ 0 ] === '#' ? color.substr(1) : color,\n      dig   = hex.length / 3,\n      red   = hex.substr(0, dig),\n      green = hex.substr(dig, dig),\n      blue  = hex.substr(dig * 2);\n    if (dig === 1) {\n      red += red;\n      green += green;\n      blue += blue;\n    }\n    return 'rgba(' + parseInt(red, 16) + ',' + parseInt(green, 16) + ',' + parseInt(blue, 16) + ',0.1)';\n  }\n\n  /**\n   * Converts an RGB color to RGBA\n   * @param color {string}\n   * @returns {string}\n   */\n  function rgbToRGBA (color) {\n    return color.replace(')', ', 0.1)').replace('(', 'a(');\n  }\n\n};\n\n/**\n * Binds events to the root element for\n */\nInkRippleCtrl.prototype.bindEvents = function () {\n  this.$element.on('mousedown', angular.bind(this, this.handleMousedown));\n  this.$element.on('mouseup', angular.bind(this, this.handleMouseup));\n  this.$element.on('mouseleave', angular.bind(this, this.handleMouseup));\n};\n\n/**\n * Create a new ripple on every mousedown event from the root element\n * @param event {MouseEvent}\n */\nInkRippleCtrl.prototype.handleMousedown = function (event) {\n  if ( this.mousedown ) return;\n\n  this.setColor(window.getComputedStyle(this.$element[0])['color']);\n\n  // When jQuery is loaded, we have to get the original event\n  if (event.hasOwnProperty('originalEvent')) event = event.originalEvent;\n  this.mousedown = true;\n  if (this.options.center) {\n    this.createRipple(this.container.prop('clientWidth') / 2, this.container.prop('clientWidth') / 2);\n  } else {\n    this.createRipple(event.layerX, event.layerY);\n  }\n};\n\n/**\n * Either remove or unlock any remaining ripples when the user mouses off of the element (either by\n * mouseup or mouseleave event)\n */\nInkRippleCtrl.prototype.handleMouseup = function () {\n  if ( this.mousedown || this.lastRipple ) {\n    var ctrl       = this;\n    this.mousedown = false;\n    this.$mdUtil.nextTick(function () {\n      ctrl.clearRipples();\n    }, false);\n  }\n};\n\n/**\n * Cycles through all ripples and attempts to remove them.\n * Depending on logic within `fadeInComplete`, some removals will be postponed.\n */\nInkRippleCtrl.prototype.clearRipples = function () {\n  for (var i = 0; i < this.ripples.length; i++) {\n    this.fadeInComplete(this.ripples[ i ]);\n  }\n};\n\n/**\n * Creates the ripple container element\n * @returns {*}\n */\nInkRippleCtrl.prototype.createContainer = function () {\n  var container = angular.element('<div class=\"md-ripple-container\"></div>');\n  this.$element.append(container);\n  return container;\n};\n\nInkRippleCtrl.prototype.clearTimeout = function () {\n  if (this.timeout) {\n    this.$timeout.cancel(this.timeout);\n    this.timeout = null;\n  }\n};\n\nInkRippleCtrl.prototype.isRippleAllowed = function () {\n  var element = this.$element[0];\n  do {\n    if (!element.tagName || element.tagName === 'BODY') break;\n    if (element && element.hasAttribute && element.hasAttribute('disabled')) return false;\n  } while (element = element.parentNode);\n  return true;\n};\n\n/**\n * Creates a new ripple and adds it to the container.  Also tracks ripple in `this.ripples`.\n * @param left\n * @param top\n */\nInkRippleCtrl.prototype.createRipple = function (left, top) {\n  if (!this.isRippleAllowed()) return;\n\n  var ctrl        = this;\n  var ripple      = angular.element('<div class=\"md-ripple\"></div>');\n  var width       = this.$element.prop('clientWidth');\n  var height      = this.$element.prop('clientHeight');\n  var x           = Math.max(Math.abs(width - left), left) * 2;\n  var y           = Math.max(Math.abs(height - top), top) * 2;\n  var size        = getSize(this.options.fitRipple, x, y);\n\n  ripple.css({\n    left:            left + 'px',\n    top:             top + 'px',\n    background:      'black',\n    width:           size + 'px',\n    height:          size + 'px',\n    backgroundColor: rgbaToRGB(this.color),\n    borderColor:     rgbaToRGB(this.color)\n  });\n  this.lastRipple = ripple;\n\n  // we only want one timeout to be running at a time\n  this.clearTimeout();\n  this.timeout    = this.$timeout(function () {\n    ctrl.clearTimeout();\n    if (!ctrl.mousedown) ctrl.fadeInComplete(ripple);\n  }, DURATION * 0.35, false);\n\n  if (this.options.dimBackground) this.container.css({ backgroundColor: this.background });\n  this.container.append(ripple);\n  this.ripples.push(ripple);\n  ripple.addClass('md-ripple-placed');\n\n  this.$mdUtil.nextTick(function () {\n\n    ripple.addClass('md-ripple-scaled md-ripple-active');\n    ctrl.$timeout(function () {\n      ctrl.clearRipples();\n    }, DURATION, false);\n\n  }, false);\n\n  function rgbaToRGB (color) {\n    return color\n        ? color.replace('rgba', 'rgb').replace(/,[^\\),]+\\)/, ')')\n        : 'rgb(0,0,0)';\n  }\n\n  function getSize (fit, x, y) {\n    return fit\n        ? Math.max(x, y)\n        : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n  }\n};\n\nInkRippleCtrl.prototype.setColor = function (color) {\n  this.color = this._parseColor(color);\n};\n\n/**\n * Either kicks off the fade-out animation or queues the element for removal on mouseup\n * @param ripple\n */\nInkRippleCtrl.prototype.fadeInComplete = function (ripple) {\n  if (this.lastRipple === ripple) {\n    if (!this.timeout && !this.mousedown) {\n      this.removeRipple(ripple);\n    }\n  } else {\n    this.removeRipple(ripple);\n  }\n};\n\n/**\n * Kicks off the animation for removing a ripple\n * @param ripple {Element}\n */\nInkRippleCtrl.prototype.removeRipple = function (ripple) {\n  var ctrl  = this;\n  var index = this.ripples.indexOf(ripple);\n  if (index < 0) return;\n  this.ripples.splice(this.ripples.indexOf(ripple), 1);\n  ripple.removeClass('md-ripple-active');\n  if (this.ripples.length === 0) this.container.css({ backgroundColor: '' });\n  // use a 2-second timeout in order to allow for the animation to finish\n  // we don't actually care how long the animation takes\n  this.$timeout(function () {\n    ctrl.fadeOutComplete(ripple);\n  }, DURATION, false);\n};\n\n/**\n * Removes the provided ripple from the DOM\n * @param ripple\n */\nInkRippleCtrl.prototype.fadeOutComplete = function (ripple) {\n  ripple.remove();\n  this.lastRipple = null;\n};\n\n/**\n * Used to create an empty directive.  This is used to track flag-directives whose children may have\n * functionality based on them.\n *\n * Example: `md-no-ink` will potentially be used by all child directives.\n */\nfunction attrNoDirective () {\n  return { controller: angular.noop };\n}\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n    /**\n   * @ngdoc service\n   * @name $mdTabInkRipple\n   * @module material.core\n   *\n   * @description\n   * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.\n   *\n   * @param {object=} scope Scope within the current context\n   * @param {object=} element The element the ripple effect should be applied to\n   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration\n   */\n\n  angular.module('material.core')\n    .factory('$mdTabInkRipple', MdTabInkRipple);\n\n  function MdTabInkRipple($mdInkRipple) {\n    return {\n      attach: attach\n    };\n\n    function attach(scope, element, options) {\n      return $mdInkRipple.attach(scope, element, angular.extend({\n        center: false,\n        dimBackground: true,\n        outline: false,\n        rippleSize: 'full'\n      }, options));\n    };\n  }\n  MdTabInkRipple.$inject = [\"$mdInkRipple\"];;\n})();\n\n})();\n(function(){\n\"use strict\";\n\nangular.module('material.core.theming.palette', [])\n.constant('$mdColorPalette', {\n  'red': {\n    '50': '#ffebee',\n    '100': '#ffcdd2',\n    '200': '#ef9a9a',\n    '300': '#e57373',\n    '400': '#ef5350',\n    '500': '#f44336',\n    '600': '#e53935',\n    '700': '#d32f2f',\n    '800': '#c62828',\n    '900': '#b71c1c',\n    'A100': '#ff8a80',\n    'A200': '#ff5252',\n    'A400': '#ff1744',\n    'A700': '#d50000',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300 A100',\n    'contrastStrongLightColors': '400 500 600 700 A200 A400 A700'\n  },\n  'pink': {\n    '50': '#fce4ec',\n    '100': '#f8bbd0',\n    '200': '#f48fb1',\n    '300': '#f06292',\n    '400': '#ec407a',\n    '500': '#e91e63',\n    '600': '#d81b60',\n    '700': '#c2185b',\n    '800': '#ad1457',\n    '900': '#880e4f',\n    'A100': '#ff80ab',\n    'A200': '#ff4081',\n    'A400': '#f50057',\n    'A700': '#c51162',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 A100',\n    'contrastStrongLightColors': '500 600 A200 A400 A700'\n  },\n  'purple': {\n    '50': '#f3e5f5',\n    '100': '#e1bee7',\n    '200': '#ce93d8',\n    '300': '#ba68c8',\n    '400': '#ab47bc',\n    '500': '#9c27b0',\n    '600': '#8e24aa',\n    '700': '#7b1fa2',\n    '800': '#6a1b9a',\n    '900': '#4a148c',\n    'A100': '#ea80fc',\n    'A200': '#e040fb',\n    'A400': '#d500f9',\n    'A700': '#aa00ff',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 A100',\n    'contrastStrongLightColors': '300 400 A200 A400 A700'\n  },\n  'deep-purple': {\n    '50': '#ede7f6',\n    '100': '#d1c4e9',\n    '200': '#b39ddb',\n    '300': '#9575cd',\n    '400': '#7e57c2',\n    '500': '#673ab7',\n    '600': '#5e35b1',\n    '700': '#512da8',\n    '800': '#4527a0',\n    '900': '#311b92',\n    'A100': '#b388ff',\n    'A200': '#7c4dff',\n    'A400': '#651fff',\n    'A700': '#6200ea',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 A100',\n    'contrastStrongLightColors': '300 400 A200'\n  },\n  'indigo': {\n    '50': '#e8eaf6',\n    '100': '#c5cae9',\n    '200': '#9fa8da',\n    '300': '#7986cb',\n    '400': '#5c6bc0',\n    '500': '#3f51b5',\n    '600': '#3949ab',\n    '700': '#303f9f',\n    '800': '#283593',\n    '900': '#1a237e',\n    'A100': '#8c9eff',\n    'A200': '#536dfe',\n    'A400': '#3d5afe',\n    'A700': '#304ffe',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 A100',\n    'contrastStrongLightColors': '300 400 A200 A400'\n  },\n  'blue': {\n    '50': '#e3f2fd',\n    '100': '#bbdefb',\n    '200': '#90caf9',\n    '300': '#64b5f6',\n    '400': '#42a5f5',\n    '500': '#2196f3',\n    '600': '#1e88e5',\n    '700': '#1976d2',\n    '800': '#1565c0',\n    '900': '#0d47a1',\n    'A100': '#82b1ff',\n    'A200': '#448aff',\n    'A400': '#2979ff',\n    'A700': '#2962ff',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300 400 A100',\n    'contrastStrongLightColors': '500 600 700 A200 A400 A700'\n  },\n  'light-blue': {\n    '50': '#e1f5fe',\n    '100': '#b3e5fc',\n    '200': '#81d4fa',\n    '300': '#4fc3f7',\n    '400': '#29b6f6',\n    '500': '#03a9f4',\n    '600': '#039be5',\n    '700': '#0288d1',\n    '800': '#0277bd',\n    '900': '#01579b',\n    'A100': '#80d8ff',\n    'A200': '#40c4ff',\n    'A400': '#00b0ff',\n    'A700': '#0091ea',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '600 700 800 900 A700',\n    'contrastStrongLightColors': '600 700 800 A700'\n  },\n  'cyan': {\n    '50': '#e0f7fa',\n    '100': '#b2ebf2',\n    '200': '#80deea',\n    '300': '#4dd0e1',\n    '400': '#26c6da',\n    '500': '#00bcd4',\n    '600': '#00acc1',\n    '700': '#0097a7',\n    '800': '#00838f',\n    '900': '#006064',\n    'A100': '#84ffff',\n    'A200': '#18ffff',\n    'A400': '#00e5ff',\n    'A700': '#00b8d4',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '700 800 900',\n    'contrastStrongLightColors': '700 800 900'\n  },\n  'teal': {\n    '50': '#e0f2f1',\n    '100': '#b2dfdb',\n    '200': '#80cbc4',\n    '300': '#4db6ac',\n    '400': '#26a69a',\n    '500': '#009688',\n    '600': '#00897b',\n    '700': '#00796b',\n    '800': '#00695c',\n    '900': '#004d40',\n    'A100': '#a7ffeb',\n    'A200': '#64ffda',\n    'A400': '#1de9b6',\n    'A700': '#00bfa5',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '500 600 700 800 900',\n    'contrastStrongLightColors': '500 600 700'\n  },\n  'green': {\n    '50': '#e8f5e9',\n    '100': '#c8e6c9',\n    '200': '#a5d6a7',\n    '300': '#81c784',\n    '400': '#66bb6a',\n    '500': '#4caf50',\n    '600': '#43a047',\n    '700': '#388e3c',\n    '800': '#2e7d32',\n    '900': '#1b5e20',\n    'A100': '#b9f6ca',\n    'A200': '#69f0ae',\n    'A400': '#00e676',\n    'A700': '#00c853',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '600 700 800 900',\n    'contrastStrongLightColors': '600 700'\n  },\n  'light-green': {\n    '50': '#f1f8e9',\n    '100': '#dcedc8',\n    '200': '#c5e1a5',\n    '300': '#aed581',\n    '400': '#9ccc65',\n    '500': '#8bc34a',\n    '600': '#7cb342',\n    '700': '#689f38',\n    '800': '#558b2f',\n    '900': '#33691e',\n    'A100': '#ccff90',\n    'A200': '#b2ff59',\n    'A400': '#76ff03',\n    'A700': '#64dd17',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '700 800 900',\n    'contrastStrongLightColors': '700 800 900'\n  },\n  'lime': {\n    '50': '#f9fbe7',\n    '100': '#f0f4c3',\n    '200': '#e6ee9c',\n    '300': '#dce775',\n    '400': '#d4e157',\n    '500': '#cddc39',\n    '600': '#c0ca33',\n    '700': '#afb42b',\n    '800': '#9e9d24',\n    '900': '#827717',\n    'A100': '#f4ff81',\n    'A200': '#eeff41',\n    'A400': '#c6ff00',\n    'A700': '#aeea00',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '900',\n    'contrastStrongLightColors': '900'\n  },\n  'yellow': {\n    '50': '#fffde7',\n    '100': '#fff9c4',\n    '200': '#fff59d',\n    '300': '#fff176',\n    '400': '#ffee58',\n    '500': '#ffeb3b',\n    '600': '#fdd835',\n    '700': '#fbc02d',\n    '800': '#f9a825',\n    '900': '#f57f17',\n    'A100': '#ffff8d',\n    'A200': '#ffff00',\n    'A400': '#ffea00',\n    'A700': '#ffd600',\n    'contrastDefaultColor': 'dark'\n  },\n  'amber': {\n    '50': '#fff8e1',\n    '100': '#ffecb3',\n    '200': '#ffe082',\n    '300': '#ffd54f',\n    '400': '#ffca28',\n    '500': '#ffc107',\n    '600': '#ffb300',\n    '700': '#ffa000',\n    '800': '#ff8f00',\n    '900': '#ff6f00',\n    'A100': '#ffe57f',\n    'A200': '#ffd740',\n    'A400': '#ffc400',\n    'A700': '#ffab00',\n    'contrastDefaultColor': 'dark'\n  },\n  'orange': {\n    '50': '#fff3e0',\n    '100': '#ffe0b2',\n    '200': '#ffcc80',\n    '300': '#ffb74d',\n    '400': '#ffa726',\n    '500': '#ff9800',\n    '600': '#fb8c00',\n    '700': '#f57c00',\n    '800': '#ef6c00',\n    '900': '#e65100',\n    'A100': '#ffd180',\n    'A200': '#ffab40',\n    'A400': '#ff9100',\n    'A700': '#ff6d00',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '800 900',\n    'contrastStrongLightColors': '800 900'\n  },\n  'deep-orange': {\n    '50': '#fbe9e7',\n    '100': '#ffccbc',\n    '200': '#ffab91',\n    '300': '#ff8a65',\n    '400': '#ff7043',\n    '500': '#ff5722',\n    '600': '#f4511e',\n    '700': '#e64a19',\n    '800': '#d84315',\n    '900': '#bf360c',\n    'A100': '#ff9e80',\n    'A200': '#ff6e40',\n    'A400': '#ff3d00',\n    'A700': '#dd2c00',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300 400 A100 A200',\n    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'\n  },\n  'brown': {\n    '50': '#efebe9',\n    '100': '#d7ccc8',\n    '200': '#bcaaa4',\n    '300': '#a1887f',\n    '400': '#8d6e63',\n    '500': '#795548',\n    '600': '#6d4c41',\n    '700': '#5d4037',\n    '800': '#4e342e',\n    '900': '#3e2723',\n    'A100': '#d7ccc8',\n    'A200': '#bcaaa4',\n    'A400': '#8d6e63',\n    'A700': '#5d4037',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200',\n    'contrastStrongLightColors': '300 400'\n  },\n  'grey': {\n    '50': '#fafafa',\n    '100': '#f5f5f5',\n    '200': '#eeeeee',\n    '300': '#e0e0e0',\n    '400': '#bdbdbd',\n    '500': '#9e9e9e',\n    '600': '#757575',\n    '700': '#616161',\n    '800': '#424242',\n    '900': '#212121',\n    '1000': '#000000',\n    'A100': '#ffffff',\n    'A200': '#eeeeee',\n    'A400': '#bdbdbd',\n    'A700': '#616161',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '600 700 800 900'\n  },\n  'blue-grey': {\n    '50': '#eceff1',\n    '100': '#cfd8dc',\n    '200': '#b0bec5',\n    '300': '#90a4ae',\n    '400': '#78909c',\n    '500': '#607d8b',\n    '600': '#546e7a',\n    '700': '#455a64',\n    '800': '#37474f',\n    '900': '#263238',\n    'A100': '#cfd8dc',\n    'A200': '#b0bec5',\n    'A400': '#78909c',\n    'A700': '#455a64',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300',\n    'contrastStrongLightColors': '400 500'\n  }\n});\n\n})();\n(function(){\n\"use strict\";\n\nangular.module('material.core.theming', ['material.core.theming.palette'])\n  .directive('mdTheme', ThemingDirective)\n  .directive('mdThemable', ThemableDirective)\n  .provider('$mdTheming', ThemingProvider)\n  .run(generateThemes);\n\n/**\n * @ngdoc service\n * @name $mdThemingProvider\n * @module material.core.theming\n *\n * @description Provider to configure the `$mdTheming` service.\n */\n\n/**\n * @ngdoc method\n * @name $mdThemingProvider#setDefaultTheme\n * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.\n */\n\n/**\n * @ngdoc method\n * @name $mdThemingProvider#alwaysWatchTheme\n * @param {boolean} watch Whether or not to always watch themes for changes and re-apply\n * classes when they change. Default is `false`. Enabling can reduce performance.\n */\n\n/* Some Example Valid Theming Expressions\n * =======================================\n *\n * Intention group expansion: (valid for primary, accent, warn, background)\n *\n * {{primary-100}} - grab shade 100 from the primary palette\n * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7\n * {{primary-100-contrast}} - grab shade 100's contrast color\n * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette\n * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1\n * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue\n * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules\n * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue\n * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules\n *\n * Foreground expansion: Applies rgba to black/white foreground text\n *\n * {{foreground-1}} - used for primary text\n * {{foreground-2}} - used for secondary text/divider\n * {{foreground-3}} - used for disabled text\n * {{foreground-4}} - used for dividers\n *\n */\n\n// In memory generated CSS rules; registered by theme.name\nvar GENERATED = { };\n\n// In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)\nvar PALETTES;\nvar THEMES;\n\nvar DARK_FOREGROUND = {\n  name: 'dark',\n  '1': 'rgba(0,0,0,0.87)',\n  '2': 'rgba(0,0,0,0.54)',\n  '3': 'rgba(0,0,0,0.26)',\n  '4': 'rgba(0,0,0,0.12)'\n};\nvar LIGHT_FOREGROUND = {\n  name: 'light',\n  '1': 'rgba(255,255,255,1.0)',\n  '2': 'rgba(255,255,255,0.7)',\n  '3': 'rgba(255,255,255,0.3)',\n  '4': 'rgba(255,255,255,0.12)'\n};\n\nvar DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';\nvar LIGHT_SHADOW = '';\n\nvar DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');\nvar LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87');\nvar STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');\n\nvar THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];\nvar DEFAULT_COLOR_TYPE = 'primary';\n\n// A color in a theme will use these hues by default, if not specified by user.\nvar LIGHT_DEFAULT_HUES = {\n  'accent': {\n    'default': 'A200',\n    'hue-1': 'A100',\n    'hue-2': 'A400',\n    'hue-3': 'A700'\n  },\n  'background': {\n    'default': 'A100',\n    'hue-1': '300',\n    'hue-2': '800',\n    'hue-3': '900'\n  }\n};\n\nvar DARK_DEFAULT_HUES = {\n  'background': {\n    'default': '800',\n    'hue-1': '600',\n    'hue-2': '300',\n    'hue-3': '900'\n  }\n};\nTHEME_COLOR_TYPES.forEach(function(colorType) {\n  // Color types with unspecified default hues will use these default hue values\n  var defaultDefaultHues = {\n    'default': '500',\n    'hue-1': '300',\n    'hue-2': '800',\n    'hue-3': 'A100'\n  };\n  if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;\n  if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;\n});\n\nvar VALID_HUE_VALUES = [\n  '50', '100', '200', '300', '400', '500', '600',\n  '700', '800', '900', 'A100', 'A200', 'A400', 'A700'\n];\n\nfunction ThemingProvider($mdColorPalette) {\n  PALETTES = { };\n  THEMES = { };\n\n  var themingProvider;\n  var defaultTheme = 'default';\n  var alwaysWatchTheme = false;\n\n  // Load JS Defined Palettes\n  angular.extend(PALETTES, $mdColorPalette);\n\n  // Default theme defined in core.js\n\n  ThemingService.$inject = [\"$rootScope\", \"$log\"];\n  return themingProvider = {\n    definePalette: definePalette,\n    extendPalette: extendPalette,\n    theme: registerTheme,\n\n    setDefaultTheme: function(theme) {\n      defaultTheme = theme;\n    },\n    alwaysWatchTheme: function(alwaysWatch) {\n      alwaysWatchTheme = alwaysWatch;\n    },\n    $get: ThemingService,\n    _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,\n    _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,\n    _PALETTES: PALETTES,\n    _THEMES: THEMES,\n    _parseRules: parseRules,\n    _rgba: rgba\n  };\n\n  // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });\n  function definePalette(name, map) {\n    map = map || {};\n    PALETTES[name] = checkPaletteValid(name, map);\n    return themingProvider;\n  }\n\n  // Returns an new object which is a copy of a given palette `name` with variables from\n  // `map` overwritten\n  // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });\n  function extendPalette(name, map) {\n    return checkPaletteValid(name,  angular.extend({}, PALETTES[name] || {}, map) );\n  }\n\n  // Make sure that palette has all required hues\n  function checkPaletteValid(name, map) {\n    var missingColors = VALID_HUE_VALUES.filter(function(field) {\n      return !map[field];\n    });\n    if (missingColors.length) {\n      throw new Error(\"Missing colors %1 in palette %2!\"\n                      .replace('%1', missingColors.join(', '))\n                      .replace('%2', name));\n    }\n\n    return map;\n  }\n\n  // Register a theme (which is a collection of color palettes to use with various states\n  // ie. warn, accent, primary )\n  // Optionally inherit from an existing theme\n  // $mdThemingProvider.theme('custom-theme').primaryPalette('red');\n  function registerTheme(name, inheritFrom) {\n    if (THEMES[name]) return THEMES[name];\n\n    inheritFrom = inheritFrom || 'default';\n\n    var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;\n    var theme = new Theme(name);\n\n    if (parentTheme) {\n      angular.forEach(parentTheme.colors, function(color, colorType) {\n        theme.colors[colorType] = {\n          name: color.name,\n          // Make sure a COPY of the hues is given to the child color,\n          // not the same reference.\n          hues: angular.extend({}, color.hues)\n        };\n      });\n    }\n    THEMES[name] = theme;\n\n    return theme;\n  }\n\n  function Theme(name) {\n    var self = this;\n    self.name = name;\n    self.colors = {};\n\n    self.dark = setDark;\n    setDark(false);\n\n    function setDark(isDark) {\n      isDark = arguments.length === 0 ? true : !!isDark;\n\n      // If no change, abort\n      if (isDark === self.isDark) return;\n\n      self.isDark = isDark;\n\n      self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;\n      self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;\n\n      // Light and dark themes have different default hues.\n      // Go through each existing color type for this theme, and for every\n      // hue value that is still the default hue value from the previous light/dark setting,\n      // set it to the default hue value from the new light/dark setting.\n      var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;\n      var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;\n      angular.forEach(newDefaultHues, function(newDefaults, colorType) {\n        var color = self.colors[colorType];\n        var oldDefaults = oldDefaultHues[colorType];\n        if (color) {\n          for (var hueName in color.hues) {\n            if (color.hues[hueName] === oldDefaults[hueName]) {\n              color.hues[hueName] = newDefaults[hueName];\n            }\n          }\n        }\n      });\n\n      return self;\n    }\n\n    THEME_COLOR_TYPES.forEach(function(colorType) {\n      var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];\n      self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {\n        var color = self.colors[colorType] = {\n          name: paletteName,\n          hues: angular.extend({}, defaultHues, hues)\n        };\n\n        Object.keys(color.hues).forEach(function(name) {\n          if (!defaultHues[name]) {\n            throw new Error(\"Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4\"\n              .replace('%1', name)\n              .replace('%2', self.name)\n              .replace('%3', paletteName)\n              .replace('%4', Object.keys(defaultHues).join(', '))\n            );\n          }\n        });\n        Object.keys(color.hues).map(function(key) {\n          return color.hues[key];\n        }).forEach(function(hueValue) {\n          if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {\n            throw new Error(\"Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5\"\n              .replace('%1', hueValue)\n              .replace('%2', self.name)\n              .replace('%3', colorType)\n              .replace('%4', paletteName)\n              .replace('%5', VALID_HUE_VALUES.join(', '))\n            );\n          }\n        });\n        return self;\n      };\n\n      self[colorType + 'Color'] = function() {\n        var args = Array.prototype.slice.call(arguments);\n        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +\n                     'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');\n        return self[colorType + 'Palette'].apply(self, args);\n      };\n    });\n  }\n\n  /**\n   * @ngdoc service\n   * @name $mdTheming\n   *\n   * @description\n   *\n   * Service that makes an element apply theming related classes to itself.\n   *\n   * ```js\n   * app.directive('myFancyDirective', function($mdTheming) {\n   *   return {\n   *     restrict: 'e',\n   *     link: function(scope, el, attrs) {\n   *       $mdTheming(el);\n   *     }\n   *   };\n   * });\n   * ```\n   * @param {el=} element to apply theming to\n   */\n  /* @ngInject */\n  function ThemingService($rootScope, $log) {\n\n    applyTheme.inherit = function(el, parent) {\n      var ctrl = parent.controller('mdTheme');\n\n      var attrThemeValue = el.attr('md-theme-watch');\n      if ( (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {\n        var deregisterWatch = $rootScope.$watch(function() {\n          return ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);\n        }, changeTheme);\n        el.on('$destroy', deregisterWatch);\n      } else {\n        var theme = ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);\n        changeTheme(theme);\n      }\n\n      function changeTheme(theme) {\n        if (!theme) return;\n        if (!registered(theme)) {\n          $log.warn('Attempted to use unregistered theme \\'' + theme + '\\'. ' +\n                    'Register it with $mdThemingProvider.theme().');\n        }\n        var oldTheme = el.data('$mdThemeName');\n        if (oldTheme) el.removeClass('md-' + oldTheme +'-theme');\n        el.addClass('md-' + theme + '-theme');\n        el.data('$mdThemeName', theme);\n        if (ctrl) {\n          el.data('$mdThemeController', ctrl);\n        }\n      }\n    };\n\n    applyTheme.THEMES = angular.extend({}, THEMES);\n    applyTheme.defaultTheme = function() { return defaultTheme; };\n    applyTheme.registered = registered;\n\n    return applyTheme;\n\n    function registered(themeName) {\n      if (themeName === undefined || themeName === '') return true;\n      return applyTheme.THEMES[themeName] !== undefined;\n    }\n\n    function applyTheme(scope, el) {\n      // Allow us to be invoked via a linking function signature.\n      if (el === undefined) {\n        el = scope;\n        scope = undefined;\n      }\n      if (scope === undefined) {\n        scope = $rootScope;\n      }\n      applyTheme.inherit(el, el);\n    }\n  }\n}\nThemingProvider.$inject = [\"$mdColorPalette\"];\n\nfunction ThemingDirective($mdTheming, $interpolate, $log) {\n  return {\n    priority: 100,\n    link: {\n      pre: function(scope, el, attrs) {\n        var ctrl = {\n          $setTheme: function(theme) {\n            if (!$mdTheming.registered(theme)) {\n              $log.warn('attempted to use unregistered theme \\'' + theme + '\\'');\n            }\n            ctrl.$mdTheme = theme;\n          }\n        };\n        el.data('$mdThemeController', ctrl);\n        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));\n        attrs.$observe('mdTheme', ctrl.$setTheme);\n      }\n    }\n  };\n}\nThemingDirective.$inject = [\"$mdTheming\", \"$interpolate\", \"$log\"];\n\nfunction ThemableDirective($mdTheming) {\n  return $mdTheming;\n}\nThemableDirective.$inject = [\"$mdTheming\"];\n\nfunction parseRules(theme, colorType, rules) {\n  checkValidPalette(theme, colorType);\n\n  rules = rules.replace(/THEME_NAME/g, theme.name);\n  var generatedRules = [];\n  var color = theme.colors[colorType];\n\n  var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');\n  // Matches '{{ primary-color }}', etc\n  var hueRegex = new RegExp('(\\'|\")?{{\\\\s*(' + colorType + ')-(color|contrast)-?(\\\\d\\\\.?\\\\d*)?\\\\s*}}(\\\"|\\')?','g');\n  var simpleVariableRegex = /'?\"?\\{\\{\\s*([a-zA-Z]+)-(A?\\d+|hue\\-[0-3]|shadow)-?(\\d\\.?\\d*)?(contrast)?\\s*\\}\\}'?\"?/g;\n  var palette = PALETTES[color.name];\n\n  // find and replace simple variables where we use a specific hue, not an entire palette\n  // eg. \"{{primary-100}}\"\n  //\\(' + THEME_COLOR_TYPES.join('\\|') + '\\)'\n  rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity, contrast) {\n    if (colorType === 'foreground') {\n      if (hue == 'shadow') {\n        return theme.foregroundShadow;\n      } else {\n        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];\n      }\n    }\n    if (hue.indexOf('hue') === 0) {\n      hue = theme.colors[colorType].hues[hue];\n    }\n    return rgba( (PALETTES[ theme.colors[colorType].name ][hue] || '')[contrast ? 'contrast' : 'value'], opacity );\n  });\n\n  // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)\n  angular.forEach(color.hues, function(hueValue, hueName) {\n    var newRule = rules\n      .replace(hueRegex, function(match, _, colorType, hueType, opacity) {\n        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);\n      });\n    if (hueName !== 'default') {\n      newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);\n    }\n\n    // Don't apply a selector rule to the default theme, making it easier to override\n    // styles of the base-component\n    if (theme.name == 'default') {\n      newRule = newRule.replace(/((\\w|\\.|-)+)\\.md-default-theme((\\.|\\w|-|:|\\(|\\)|\\[|\\]|\"|'|=)*)/g, '$&, $1$3');\n    }\n    generatedRules.push(newRule);\n  });\n\n  return generatedRules;\n}\n\n// Generate our themes at run time given the state of THEMES and PALETTES\nfunction generateThemes($injector) {\n\n  var head = document.getElementsByTagName('head')[0];\n  var firstChild = head ? head.firstElementChild : null;\n  var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';\n\n  if ( !firstChild ) return;\n  if (themeCss.length === 0) return; // no rules, so no point in running this expensive task\n\n  // Expose contrast colors for palettes to ensure that text is always readable\n  angular.forEach(PALETTES, sanitizePalette);\n\n  // MD_THEME_CSS is a string generated by the build process that includes all the themable\n  // components as templates\n\n  // Break the CSS into individual rules\n  var rulesByType = {};\n  var rules = themeCss\n                  .split(/\\}(?!(\\}|'|\"|;))/)\n                  .filter(function(rule) { return rule && rule.length; })\n                  .map(function(rule) { return rule.trim() + '}'; });\n\n\n  var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');\n\n  THEME_COLOR_TYPES.forEach(function(type) {\n    rulesByType[type] = '';\n  });\n\n\n  // Sort the rules based on type, allowing us to do color substitution on a per-type basis\n  rules.forEach(function(rule) {\n    var match = rule.match(ruleMatchRegex);\n    // First: test that if the rule has '.md-accent', it goes into the accent set of rules\n    for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {\n      if (rule.indexOf('.md-' + type) > -1) {\n        return rulesByType[type] += rule;\n      }\n    }\n\n    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from\n    // there\n    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {\n      if (rule.indexOf(type) > -1) {\n        return rulesByType[type] += rule;\n      }\n    }\n\n    // Default to the primary array\n    return rulesByType[DEFAULT_COLOR_TYPE] += rule;\n  });\n\n    // For each theme, use the color palettes specified for\n    // `primary`, `warn` and `accent` to generate CSS rules.\n\n    angular.forEach(THEMES, function(theme) {\n      if ( !GENERATED[theme.name] ) {\n\n\n        THEME_COLOR_TYPES.forEach(function(colorType) {\n          var styleStrings = parseRules(theme, colorType, rulesByType[colorType]);\n          while (styleStrings.length) {\n            var style = document.createElement('style');\n                style.setAttribute('type', 'text/css');\n            style.appendChild(document.createTextNode(styleStrings.shift()));\n            head.insertBefore(style, firstChild);\n          }\n        });\n\n\n        if (theme.colors.primary.name == theme.colors.accent.name) {\n          console.warn(\"$mdThemingProvider: Using the same palette for primary and\" +\n                       \" accent. This violates the material design spec.\");\n        }\n\n        GENERATED[theme.name] = true;\n      }\n    });\n\n\n  // *************************\n  // Internal functions\n  // *************************\n\n  // The user specifies a 'default' contrast color as either light or dark,\n  // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)\n  function sanitizePalette(palette) {\n    var defaultContrast = palette.contrastDefaultColor;\n    var lightColors = palette.contrastLightColors || [];\n    var strongLightColors = palette.contrastStrongLightColors || [];\n    var darkColors = palette.contrastDarkColors || [];\n\n    // These colors are provided as space-separated lists\n    if (typeof lightColors === 'string') lightColors = lightColors.split(' ');\n    if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');\n    if (typeof darkColors === 'string') darkColors = darkColors.split(' ');\n\n    // Cleanup after ourselves\n    delete palette.contrastDefaultColor;\n    delete palette.contrastLightColors;\n    delete palette.contrastStrongLightColors;\n    delete palette.contrastDarkColors;\n\n    // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }\n    angular.forEach(palette, function(hueValue, hueName) {\n      if (angular.isObject(hueValue)) return; // Already converted\n      // Map everything to rgb colors\n      var rgbValue = colorToRgbaArray(hueValue);\n      if (!rgbValue) {\n        throw new Error(\"Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.\"\n                        .replace('%1', hueValue)\n                        .replace('%2', palette.name)\n                        .replace('%3', hueName));\n      }\n\n      palette[hueName] = {\n        value: rgbValue,\n        contrast: getContrastColor()\n      };\n      function getContrastColor() {\n        if (defaultContrast === 'light') {\n          if (darkColors.indexOf(hueName) > -1) {\n            return DARK_CONTRAST_COLOR;\n          } else {\n            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR\n              : LIGHT_CONTRAST_COLOR;\n          }\n        } else {\n          if (lightColors.indexOf(hueName) > -1) {\n            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR\n              : LIGHT_CONTRAST_COLOR;\n          } else {\n            return DARK_CONTRAST_COLOR;\n          }\n        }\n      }\n    });\n  }\n\n\n}\ngenerateThemes.$inject = [\"$injector\"];\n\nfunction checkValidPalette(theme, colorType) {\n  // If theme attempts to use a palette that doesnt exist, throw error\n  if (!PALETTES[ (theme.colors[colorType] || {}).name ]) {\n    throw new Error(\n      \"You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3\"\n                    .replace('%1', theme.name)\n                    .replace('%2', colorType)\n                    .replace('%3', Object.keys(PALETTES).join(', '))\n    );\n  }\n}\n\nfunction colorToRgbaArray(clr) {\n  if (angular.isArray(clr) && clr.length == 3) return clr;\n  if (/^rgb/.test(clr)) {\n    return clr.replace(/(^\\s*rgba?\\(|\\)\\s*$)/g, '').split(',').map(function(value, i) {\n      return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);\n    });\n  }\n  if (clr.charAt(0) == '#') clr = clr.substring(1);\n  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;\n\n  var dig = clr.length / 3;\n  var red = clr.substr(0, dig);\n  var grn = clr.substr(dig, dig);\n  var blu = clr.substr(dig * 2);\n  if (dig === 1) {\n    red += red;\n    grn += grn;\n    blu += blu;\n  }\n  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];\n}\n\nfunction rgba(rgbArray, opacity) {\n  if ( !rgbArray ) return \"rgb('0,0,0')\";\n\n  if (rgbArray.length == 4) {\n    rgbArray = angular.copy(rgbArray);\n    opacity ? rgbArray.pop() : opacity = rgbArray.pop();\n  }\n  return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?\n    'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :\n    'rgb(' + rgbArray.join(',') + ')';\n}\n\n\n})();\n(function(){\n\"use strict\";\n\n// Polyfill angular < 1.4 (provide $animateCss)\nangular\n  .module('material.core')\n  .factory('$$mdAnimate', [\"$q\", \"$timeout\", \"$mdConstant\", \"$animateCss\", function($q, $timeout, $mdConstant, $animateCss){\n\n     // Since $$mdAnimate is injected into $mdUtil... use a wrapper function\n     // to subsequently inject $mdUtil as an argument to the AnimateDomUtils\n\n     return function($mdUtil) {\n       return AnimateDomUtils( $mdUtil, $q, $timeout, $mdConstant, $animateCss);\n     };\n   }]);\n\n/**\n * Factory function that requires special injections\n */\nfunction AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss) {\n  var self;\n  return self = {\n    /**\n     *\n     */\n    translate3d : function( target, from, to, options ) {\n      return $animateCss(target,{\n        from:from,\n        to:to,\n        addClass:options.transitionInClass\n      })\n      .start()\n      .then(function(){\n          // Resolve with reverser function...\n          return reverseTranslate;\n      });\n\n      /**\n       * Specific reversal of the request translate animation above...\n       */\n      function reverseTranslate (newFrom) {\n        return $animateCss(target, {\n           to: newFrom || from,\n           addClass: options.transitionOutClass,\n           removeClass: options.transitionInClass\n        }).start();\n\n      }\n  },\n\n    /**\n     * Listen for transitionEnd event (with optional timeout)\n     * Announce completion or failure via promise handlers\n     */\n    waitTransitionEnd: function (element, opts) {\n        var TIMEOUT = 3000; // fallback is 3 secs\n\n        return $q(function(resolve, reject){\n          opts = opts || { };\n\n          var timer = $timeout(finished, opts.timeout || TIMEOUT);\n          element.on($mdConstant.CSS.TRANSITIONEND, finished);\n\n          /**\n           * Upon timeout or transitionEnd, reject or resolve (respectively) this promise.\n           * NOTE: Make sure this transitionEnd didn't bubble up from a child\n           */\n          function finished(ev) {\n            if ( ev && ev.target !== element[0]) return;\n\n            if ( ev  ) $timeout.cancel(timer);\n            element.off($mdConstant.CSS.TRANSITIONEND, finished);\n\n            // Never reject since ngAnimate may cause timeouts due missed transitionEnd events\n            resolve();\n\n          }\n\n        });\n      },\n\n    /**\n     * Calculate the zoom transform from dialog to origin.\n     *\n     * We use this to set the dialog position immediately;\n     * then the md-transition-in actually translates back to\n     * `translate3d(0,0,0) scale(1.0)`...\n     *\n     * NOTE: all values are rounded to the nearest integer\n     */\n    calculateZoomToOrigin: function (element, originator) {\n      var origin = originator.element;\n      var zoomTemplate = \"translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )\";\n      var buildZoom = angular.bind(null, $mdUtil.supplant, zoomTemplate);\n      var zoomStyle = buildZoom({centerX: 0, centerY: 0, scaleX: 0.5, scaleY: 0.5});\n\n      if (origin) {\n        var originBnds = self.clientRect(origin) || self.copyRect(originator.bounds);\n        var dialogRect = self.copyRect(element[0].getBoundingClientRect());\n        var dialogCenterPt = self.centerPointFor(dialogRect);\n        var originCenterPt = self.centerPointFor(originBnds);\n\n        // Build the transform to zoom from the dialog center to the origin center\n\n        zoomStyle = buildZoom({\n          centerX: originCenterPt.x - dialogCenterPt.x,\n          centerY: originCenterPt.y - dialogCenterPt.y,\n          scaleX: Math.round(100 * Math.min(0.5, originBnds.width / dialogRect.width))/100,\n          scaleY: Math.round(100 * Math.min(0.5, originBnds.height / dialogRect.height))/100\n        });\n      }\n\n      return zoomStyle;\n    },\n\n    /**\n     * Enhance raw values to represent valid css stylings...\n     */\n    toCss : function( raw ) {\n      var css = { };\n      var lookups = 'left top right bottom width height x y min-width min-height max-width max-height';\n\n      angular.forEach(raw, function(value,key) {\n        if ( angular.isUndefined(value) ) return;\n\n        if ( lookups.indexOf(key) >= 0 ) {\n          css[key] = value + 'px';\n        } else {\n          switch (key) {\n            case 'transition':\n              convertToVendor(key, $mdConstant.CSS.TRANSITION, value);\n              break;\n            case 'transform':\n              convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);\n              break;\n            case 'transformOrigin':\n              convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);\n              break;\n          }\n        }\n      });\n\n      return css;\n\n      function convertToVendor(key, vendor, value) {\n        angular.forEach(vendor.split(' '), function (key) {\n          css[key] = value;\n        });\n      }\n    },\n\n    /**\n     * Convert the translate CSS value to key/value pair(s).\n     */\n    toTransformCss: function (transform, addTransition, transition) {\n      var css = {};\n      angular.forEach($mdConstant.CSS.TRANSFORM.split(' '), function (key) {\n        css[key] = transform;\n      });\n\n      if (addTransition) {\n        transition = transition || \"all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important\";\n        css['transition'] = transition;\n      }\n\n      return css;\n    },\n\n    /**\n     *  Clone the Rect and calculate the height/width if needed\n     */\n    copyRect: function (source, destination) {\n      if (!source) return null;\n\n      destination = destination || {};\n\n      angular.forEach('left top right bottom width height'.split(' '), function (key) {\n        destination[key] = Math.round(source[key])\n      });\n\n      destination.width = destination.width || (destination.right - destination.left);\n      destination.height = destination.height || (destination.bottom - destination.top);\n\n      return destination;\n    },\n\n    /**\n     * Calculate ClientRect of element; return null if hidden or zero size\n     */\n    clientRect: function (element) {\n      var bounds = angular.element(element)[0].getBoundingClientRect();\n      var isPositiveSizeClientRect = function (rect) {\n        return rect && (rect.width > 0) && (rect.height > 0);\n      };\n\n      // If the event origin element has zero size, it has probably been hidden.\n      return isPositiveSizeClientRect(bounds) ? self.copyRect(bounds) : null;\n    },\n\n    /**\n     *  Calculate 'rounded' center point of Rect\n     */\n    centerPointFor: function (targetRect) {\n      return {\n        x: Math.round(targetRect.left + (targetRect.width / 2)),\n        y: Math.round(targetRect.top + (targetRect.height / 2))\n      }\n    }\n\n  };\n};\n\n\n})();\n(function(){\n\"use strict\";\n\n\"use strict\";\n\nif (angular.version.minor >= 4) {\n  angular.module('material.core.animate', []);\n} else {\n(function() {\n\n  var forEach = angular.forEach;\n\n  var WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance);\n  var TRANSITION_PROP = WEBKIT ? 'WebkitTransition' : 'transition';\n  var ANIMATION_PROP = WEBKIT ? 'WebkitAnimation' : 'animation';\n  var PREFIX = WEBKIT ? '-webkit-' : '';\n\n  var TRANSITION_EVENTS = (WEBKIT ? 'webkitTransitionEnd ' : '') + 'transitionend';\n  var ANIMATION_EVENTS = (WEBKIT ? 'webkitAnimationEnd ' : '') + 'animationend';\n\n  var $$ForceReflowFactory = ['$document', function($document) {\n    return function() {\n      return $document[0].body.clientWidth + 1;\n    }\n  }];\n\n  var $$rAFMutexFactory = ['$$rAF', function($$rAF) {\n    return function() {\n      var passed = false;\n      $$rAF(function() {\n        passed = true;\n      });\n      return function(fn) {\n        passed ? fn() : $$rAF(fn);\n      };\n    };\n  }];\n\n  var $$AnimateRunnerFactory = ['$q', '$$rAFMutex', function($q, $$rAFMutex) {\n    var INITIAL_STATE = 0;\n    var DONE_PENDING_STATE = 1;\n    var DONE_COMPLETE_STATE = 2;\n\n    function AnimateRunner(host) {\n      this.setHost(host);\n\n      this._doneCallbacks = [];\n      this._runInAnimationFrame = $$rAFMutex();\n      this._state = 0;\n    }\n\n    AnimateRunner.prototype = {\n      setHost: function(host) {\n        this.host = host || {};\n      },\n\n      done: function(fn) {\n        if (this._state === DONE_COMPLETE_STATE) {\n          fn();\n        } else {\n          this._doneCallbacks.push(fn);\n        }\n      },\n\n      progress: angular.noop,\n\n      getPromise: function() {\n        if (!this.promise) {\n          var self = this;\n          this.promise = $q(function(resolve, reject) {\n            self.done(function(status) {\n              status === false ? reject() : resolve();\n            });\n          });\n        }\n        return this.promise;\n      },\n\n      then: function(resolveHandler, rejectHandler) {\n        return this.getPromise().then(resolveHandler, rejectHandler);\n      },\n\n      'catch': function(handler) {\n        return this.getPromise()['catch'](handler);\n      },\n\n      'finally': function(handler) {\n        return this.getPromise()['finally'](handler);\n      },\n\n      pause: function() {\n        if (this.host.pause) {\n          this.host.pause();\n        }\n      },\n\n      resume: function() {\n        if (this.host.resume) {\n          this.host.resume();\n        }\n      },\n\n      end: function() {\n        if (this.host.end) {\n          this.host.end();\n        }\n        this._resolve(true);\n      },\n\n      cancel: function() {\n        if (this.host.cancel) {\n          this.host.cancel();\n        }\n        this._resolve(false);\n      },\n\n      complete: function(response) {\n        var self = this;\n        if (self._state === INITIAL_STATE) {\n          self._state = DONE_PENDING_STATE;\n          self._runInAnimationFrame(function() {\n            self._resolve(response);\n          });\n        }\n      },\n\n      _resolve: function(response) {\n        if (this._state !== DONE_COMPLETE_STATE) {\n          forEach(this._doneCallbacks, function(fn) {\n            fn(response);\n          });\n          this._doneCallbacks.length = 0;\n          this._state = DONE_COMPLETE_STATE;\n        }\n      }\n    };\n\n    return AnimateRunner;\n  }];\n\n  angular\n    .module('material.core.animate', [])\n    .factory('$$forceReflow', $$ForceReflowFactory)\n    .factory('$$AnimateRunner', $$AnimateRunnerFactory)\n    .factory('$$rAFMutex', $$rAFMutexFactory)\n    .factory('$animateCss', ['$window', '$$rAF', '$$AnimateRunner', '$$forceReflow', '$$jqLite', '$timeout',\n                     function($window,   $$rAF,   $$AnimateRunner,   $$forceReflow,   $$jqLite,   $timeout) {\n\n      function init(element, options) {\n\n        var temporaryStyles = [];\n        var node = getDomNode(element);\n\n        if (options.transitionStyle) {\n          temporaryStyles.push([PREFIX + 'transition', options.transitionStyle]);\n        }\n\n        if (options.keyframeStyle) {\n          temporaryStyles.push([PREFIX + 'animation', options.keyframeStyle]);\n        }\n\n        if (options.delay) {\n          temporaryStyles.push([PREFIX + 'transition-delay', options.delay + 's']);\n        }\n\n        if (options.duration) {\n          temporaryStyles.push([PREFIX + 'transition-duration', options.duration + 's']);\n        }\n\n        var hasCompleteStyles = options.keyframeStyle ||\n                                (options.to && (options.duration > 0 || options.transitionStyle));\n        var hasCompleteClasses = !!options.addClass || !!options.removeClass;\n        var hasCompleteAnimation = hasCompleteStyles || hasCompleteClasses;\n\n        blockTransition(element, true);\n        applyAnimationFromStyles(element, options);\n\n        var animationClosed = false;\n        var events, eventFn;\n\n        return {\n          close: $window.close,\n          start: function() {\n            var runner = new $$AnimateRunner();\n            waitUntilQuiet(function() {\n              blockTransition(element, false);\n              if (!hasCompleteAnimation) {\n                return close();\n              }\n\n              forEach(temporaryStyles, function(entry) {\n                var key = entry[0];\n                var value = entry[1];\n                node.style[camelCase(key)] = value;\n              });\n\n              applyClasses(element, options);\n\n              var timings = computeTimings(element);\n              if (timings.duration === 0) {\n                return close();\n              }\n\n              var moreStyles = [];\n\n              if (options.easing) {\n                if (timings.transitionDuration) {\n                  moreStyles.push([PREFIX + 'transition-timing-function', options.easing]);\n                }\n                if (timings.animationDuration) {\n                  moreStyles.push([PREFIX + 'animation-timing-function', options.easing]);\n                }\n              }\n\n              if (options.delay && timings.animationDelay) {\n                moreStyles.push([PREFIX + 'animation-delay', options.delay + 's']);\n              }\n\n              if (options.duration && timings.animationDuration) {\n                moreStyles.push([PREFIX + 'animation-duration', options.duration + 's']);\n              }\n\n              forEach(moreStyles, function(entry) {\n                var key = entry[0];\n                var value = entry[1];\n                node.style[camelCase(key)] = value;\n                temporaryStyles.push(entry);\n              });\n\n              var maxDelay = timings.delay;\n              var maxDelayTime = maxDelay * 1000;\n              var maxDuration = timings.duration;\n              var maxDurationTime = maxDuration * 1000;\n              var startTime = Date.now();\n\n              events = [];\n              if (timings.transitionDuration) {\n                events.push(TRANSITION_EVENTS);\n              }\n              if (timings.animationDuration) {\n                events.push(ANIMATION_EVENTS);\n              }\n              events = events.join(' ');\n              eventFn = function(event) {\n                event.stopPropagation();\n                var ev = event.originalEvent || event;\n                var timeStamp = ev.timeStamp || Date.now();\n                var elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));\n                if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n                  close();\n                }\n              };\n              element.on(events, eventFn);\n\n              applyAnimationToStyles(element, options);\n\n              $timeout(close, maxDelayTime + maxDurationTime * 1.5, false);\n            });\n\n            return runner;\n\n            function close() {\n              if (animationClosed) return;\n              animationClosed = true;\n\n              if (events && eventFn) {\n                element.off(events, eventFn);\n              }\n              applyClasses(element, options);\n              applyAnimationStyles(element, options);\n              forEach(temporaryStyles, function(entry) {\n                node.style[camelCase(entry[0])] = '';\n              });\n              runner.complete(true);\n              return runner;\n            }\n          }\n        }\n      }\n\n      function applyClasses(element, options) {\n        if (options.addClass) {\n          $$jqLite.addClass(element, options.addClass);\n          options.addClass = null;\n        }\n        if (options.removeClass) {\n          $$jqLite.removeClass(element, options.removeClass);\n          options.removeClass = null;\n        }\n      }\n\n      function computeTimings(element) {\n        var node = getDomNode(element);\n        var cs = $window.getComputedStyle(node)\n        var tdr = parseMaxTime(cs[prop('transitionDuration')]);\n        var adr = parseMaxTime(cs[prop('animationDuration')]);\n        var tdy = parseMaxTime(cs[prop('transitionDelay')]);\n        var ady = parseMaxTime(cs[prop('animationDelay')]);\n\n        adr *= (parseInt(cs[prop('animationIterationCount')], 10) || 1);\n        var duration = Math.max(adr, tdr);\n        var delay = Math.max(ady, tdy);\n\n        return {\n          duration: duration,\n          delay: delay,\n          animationDuration: adr,\n          transitionDuration: tdr,\n          animationDelay: ady,\n          transitionDelay: tdy\n        };\n\n        function prop(key) {\n          return WEBKIT ? 'Webkit' + key.charAt(0).toUpperCase() + key.substr(1)\n                        : key;\n        }\n      }\n\n      function parseMaxTime(str) {\n        var maxValue = 0;\n        var values = (str || \"\").split(/\\s*,\\s*/);\n        forEach(values, function(value) {\n          // it's always safe to consider only second values and omit `ms` values since\n          // getComputedStyle will always handle the conversion for us\n          if (value.charAt(value.length - 1) == 's') {\n            value = value.substring(0, value.length - 1);\n          }\n          value = parseFloat(value) || 0;\n          maxValue = maxValue ? Math.max(value, maxValue) : value;\n        });\n        return maxValue;\n      }\n\n      var cancelLastRAFRequest;\n      var rafWaitQueue = [];\n      function waitUntilQuiet(callback) {\n        if (cancelLastRAFRequest) {\n          cancelLastRAFRequest(); //cancels the request\n        }\n        rafWaitQueue.push(callback);\n        cancelLastRAFRequest = $$rAF(function() {\n          cancelLastRAFRequest = null;\n\n          // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n          // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n          var pageWidth = $$forceReflow();\n\n          // we use a for loop to ensure that if the queue is changed\n          // during this looping then it will consider new requests\n          for (var i = 0; i < rafWaitQueue.length; i++) {\n            rafWaitQueue[i](pageWidth);\n          }\n          rafWaitQueue.length = 0;\n        });\n      }\n\n      function applyAnimationStyles(element, options) {\n        applyAnimationFromStyles(element, options);\n        applyAnimationToStyles(element, options);\n      }\n\n      function applyAnimationFromStyles(element, options) {\n        if (options.from) {\n          element.css(options.from);\n          options.from = null;\n        }\n      }\n\n      function applyAnimationToStyles(element, options) {\n        if (options.to) {\n          element.css(options.to);\n          options.to = null;\n        }\n      }\n\n      function getDomNode(element) {\n        for (var i = 0; i < element.length; i++) {\n          if (element[i].nodeType === 1) return element[i];\n        }\n      }\n\n      function blockTransition(element, bool) {\n        var node = getDomNode(element);\n        var key = camelCase(PREFIX + 'transition-delay');\n        node.style[key] = bool ? '-9999s' : '';\n      }\n\n      return init;\n    }]);\n\n  /**\n   * Older browsers [FF31] expect camelCase\n   * property keys.\n   * e.g.\n   *  animation-duration --> animationDuration\n   */\n  function camelCase(str) {\n    return str.replace(/-[a-z]/g, function(str) {\n      return str.charAt(1).toUpperCase();\n    });\n  }\n\n})();\n\n}\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.autocomplete\n */\n/*\n * @see js folder for autocomplete implementation\n */\nangular.module('material.components.autocomplete', [\n  'material.core',\n  'material.components.icon',\n  'material.components.virtualRepeat'\n]);\n\n})();\n(function(){\n\"use strict\";\n\n/*\n * @ngdoc module\n * @name material.components.backdrop\n * @description Backdrop\n */\n\n/**\n * @ngdoc directive\n * @name mdBackdrop\n * @module material.components.backdrop\n *\n * @restrict E\n *\n * @description\n * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.\n * Apply class `opaque` to make the backdrop use the theme backdrop color.\n *\n */\n\nangular\n  .module('material.components.backdrop', ['material.core'])\n  .directive('mdBackdrop', [\"$mdTheming\", \"$animate\", \"$rootElement\", \"$window\", \"$log\", \"$$rAF\", \"$document\", function BackdropDirective($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {\n    var ERROR_CSS_POSITION = \"<md-backdrop> may not work properly in a scrolled, static-positioned parent container.\";\n\n    return {\n      restrict: 'E',\n      link: postLink\n    };\n\n    function postLink(scope, element, attrs) {\n\n      // If body scrolling has been disabled using mdUtil.disableBodyScroll(),\n      // adjust the 'backdrop' height to account for the fixed 'body' top offset\n      var body = $window.getComputedStyle($document[0].body);\n      if (body.position == 'fixed') {\n        var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));\n        element.css({\n          height: hViewport + 'px'\n        });\n      }\n\n      // backdrop may be outside the $rootElement, tell ngAnimate to animate regardless\n      if ($animate.pin) $animate.pin(element, $rootElement);\n\n      $$rAF(function () {\n\n        // Often $animate.enter() is used to append the backDrop element\n        // so let's wait until $animate is done...\n        var parent = element.parent()[0];\n        if (parent) {\n          var styles = $window.getComputedStyle(parent);\n          if (styles.position == 'static') {\n            // backdrop uses position:absolute and will not work properly with parent position:static (default)\n            $log.warn(ERROR_CSS_POSITION);\n          }\n        }\n\n        $mdTheming.inherit(element, element.parent());\n      });\n\n    }\n\n  }]);\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.bottomSheet\n * @description\n * BottomSheet\n */\nangular\n  .module('material.components.bottomSheet', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .directive('mdBottomSheet', MdBottomSheetDirective)\n  .provider('$mdBottomSheet', MdBottomSheetProvider);\n\n/* @ngInject */\nfunction MdBottomSheetDirective($mdBottomSheet) {\n  return {\n    restrict: 'E',\n    link : function postLink(scope, element, attr) {\n      // When navigation force destroys an interimElement, then\n      // listen and $destroy() that interim instance...\n      scope.$on('$destroy', function() {\n        $mdBottomSheet.destroy();\n      });\n    }\n  };\n}\nMdBottomSheetDirective.$inject = [\"$mdBottomSheet\"];\n\n\n/**\n * @ngdoc service\n * @name $mdBottomSheet\n * @module material.components.bottomSheet\n *\n * @description\n * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.\n *\n * ## Restrictions\n *\n * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.\n * - Add the `md-grid` class to the bottom sheet for a grid layout.\n * - Add the `md-list` class to the bottom sheet for a list layout.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div ng-controller=\"MyController\">\n *   <md-button ng-click=\"openBottomSheet()\">\n *     Open a Bottom Sheet!\n *   </md-button>\n * </div>\n * </hljs>\n * <hljs lang=\"js\">\n * var app = angular.module('app', ['ngMaterial']);\n * app.controller('MyController', function($scope, $mdBottomSheet) {\n *   $scope.openBottomSheet = function() {\n *     $mdBottomSheet.show({\n *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'\n *     });\n *   };\n * });\n * </hljs>\n */\n\n /**\n * @ngdoc method\n * @name $mdBottomSheet#show\n *\n * @description\n * Show a bottom sheet with the specified options.\n *\n * @param {object} options An options object, with the following properties:\n *\n *   - `templateUrl` - `{string=}`: The url of an html template file that will\n *   be used as the content of the bottom sheet. Restrictions: the template must\n *   have an outer `md-bottom-sheet` element.\n *   - `template` - `{string=}`: Same as templateUrl, except this is an actual\n *   template string.\n *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.\n *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.\n *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.\n *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will\n *   be used as names of values to inject into the controller. For example,\n *   `locals: {three: 3}` would inject `three` into the controller with the value\n *   of 3.\n *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the bottom sheet to\n *     close it. Default true.\n *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the bottom sheet.\n *     Default true.\n *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values\n *   and the bottom sheet will not open until the promises resolve.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`,\n *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.\n *   e.g. angular.element(document.getElementById('content')) or \"#content\"\n *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.\n *     Default true.\n *\n * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or\n * rejected with `$mdBottomSheet.cancel()`.\n */\n\n/**\n * @ngdoc method\n * @name $mdBottomSheet#hide\n *\n * @description\n * Hide the existing bottom sheet and resolve the promise returned from\n * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).\n *\n * @param {*=} response An argument for the resolved promise.\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdBottomSheet#cancel\n *\n * @description\n * Hide the existing bottom sheet and reject the promise returned from\n * `$mdBottomSheet.show()`.\n *\n * @param {*=} response An argument for the rejected promise.\n *\n */\n\nfunction MdBottomSheetProvider($$interimElementProvider) {\n  // how fast we need to flick down to close the sheet, pixels/ms\n  var CLOSING_VELOCITY = 0.5;\n  var PADDING = 80; // same as css\n\n  bottomSheetDefaults.$inject = [\"$animate\", \"$mdConstant\", \"$mdUtil\", \"$mdTheming\", \"$mdBottomSheet\", \"$rootElement\", \"$mdGesture\"];\n  return $$interimElementProvider('$mdBottomSheet')\n    .setDefaults({\n      methods: ['disableParentScroll', 'escapeToClose', 'clickOutsideToClose'],\n      options: bottomSheetDefaults\n    });\n\n  /* @ngInject */\n  function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {\n    var backdrop;\n\n    return {\n      themable: true,\n      onShow: onShow,\n      onRemove: onRemove,\n      escapeToClose: true,\n      clickOutsideToClose: true,\n      disableParentScroll: true\n    };\n\n\n    function onShow(scope, element, options, controller) {\n\n      element = $mdUtil.extractElementByName(element, 'md-bottom-sheet');\n\n      // Add a backdrop that will close on click\n      backdrop = $mdUtil.createBackdrop(scope, \"md-bottom-sheet-backdrop md-opaque\");\n\n      if (options.clickOutsideToClose) {\n        backdrop.on('click', function() {\n          $mdUtil.nextTick($mdBottomSheet.cancel,true);\n        });\n      }\n\n      $mdTheming.inherit(backdrop, options.parent);\n\n      $animate.enter(backdrop, options.parent, null);\n\n      var bottomSheet = new BottomSheet(element, options.parent);\n      options.bottomSheet = bottomSheet;\n\n      $mdTheming.inherit(bottomSheet.element, options.parent);\n\n      if (options.disableParentScroll) {\n        options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent);\n      }\n\n      return $animate.enter(bottomSheet.element, options.parent)\n        .then(function() {\n          var focusable = $mdUtil.findFocusTarget(element) || angular.element(\n            element[0].querySelector('button') ||\n            element[0].querySelector('a') ||\n            element[0].querySelector('[ng-click]')\n          );\n          focusable.focus();\n\n          if (options.escapeToClose) {\n            options.rootElementKeyupCallback = function(e) {\n              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {\n                $mdUtil.nextTick($mdBottomSheet.cancel,true);\n              }\n            };\n            $rootElement.on('keyup', options.rootElementKeyupCallback);\n          }\n        });\n\n    }\n\n    function onRemove(scope, element, options) {\n\n      var bottomSheet = options.bottomSheet;\n\n      $animate.leave(backdrop);\n      return $animate.leave(bottomSheet.element).then(function() {\n        if (options.disableParentScroll) {\n          options.restoreScroll();\n          delete options.restoreScroll;\n        }\n\n        bottomSheet.cleanup();\n      });\n    }\n\n    /**\n     * BottomSheet class to apply bottom-sheet behavior to an element\n     */\n    function BottomSheet(element, parent) {\n      var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });\n      parent.on('$md.dragstart', onDragStart)\n        .on('$md.drag', onDrag)\n        .on('$md.dragend', onDragEnd);\n\n      return {\n        element: element,\n        cleanup: function cleanup() {\n          deregister();\n          parent.off('$md.dragstart', onDragStart);\n          parent.off('$md.drag', onDrag);\n          parent.off('$md.dragend', onDragEnd);\n        }\n      };\n\n      function onDragStart(ev) {\n        // Disable transitions on transform so that it feels fast\n        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');\n      }\n\n      function onDrag(ev) {\n        var transform = ev.pointer.distanceY;\n        if (transform < 5) {\n          // Slow down drag when trying to drag up, and stop after PADDING\n          transform = Math.max(-PADDING, transform / 2);\n        }\n        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');\n      }\n\n      function onDragEnd(ev) {\n        if (ev.pointer.distanceY > 0 &&\n            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {\n          var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;\n          var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);\n          element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');\n          $mdUtil.nextTick($mdBottomSheet.cancel,true);\n        } else {\n          element.css($mdConstant.CSS.TRANSITION_DURATION, '');\n          element.css($mdConstant.CSS.TRANSFORM, '');\n        }\n      }\n    }\n\n  }\n\n}\nMdBottomSheetProvider.$inject = [\"$$interimElementProvider\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.button\n * @description\n *\n * Button\n */\nangular\n    .module('material.components.button', [ 'material.core' ])\n    .directive('mdButton', MdButtonDirective);\n\n/**\n * @ngdoc directive\n * @name mdButton\n * @module material.components.button\n *\n * @restrict E\n *\n * @description\n * `<md-button>` is a button directive with optional ink ripples (default enabled).\n *\n * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will\n * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {boolean=} md-no-ink If present, disable ripple ink effects.\n * @param {expression=} ng-disabled En/Disable based on the expression\n * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`\n * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.\n * If no default text is found, a warning will be logged.\n *\n * @usage\n *\n * Regular buttons:\n *\n * <hljs lang=\"html\">\n *  <md-button> Flat Button </md-button>\n *  <md-button href=\"http://google.com\"> Flat link </md-button>\n *  <md-button class=\"md-raised\"> Raised Button </md-button>\n *  <md-button ng-disabled=\"true\"> Disabled Button </md-button>\n *  <md-button>\n *    <md-icon md-svg-src=\"your/icon.svg\"></md-icon>\n *    Register Now\n *  </md-button>\n * </hljs>\n *\n * FAB buttons:\n *\n * <hljs lang=\"html\">\n *  <md-button class=\"md-fab\" aria-label=\"FAB\">\n *    <md-icon md-svg-src=\"your/icon.svg\"></md-icon>\n *  </md-button>\n *  <!-- mini-FAB -->\n *  <md-button class=\"md-fab md-mini\" aria-label=\"Mini FAB\">\n *    <md-icon md-svg-src=\"your/icon.svg\"></md-icon>\n *  </md-button>\n *  <!-- Button with SVG Icon -->\n *  <md-button class=\"md-icon-button\" aria-label=\"Custom Icon Button\">\n *    <md-icon md-svg-icon=\"path/to/your.svg\"></md-icon>\n *  </md-button>\n * </hljs>\n */\nfunction MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {\n\n  return {\n    restrict: 'EA',\n    replace: true,\n    transclude: true,\n    template: getTemplate,\n    link: postLink\n  };\n\n  function isAnchor(attr) {\n    return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);\n  }\n\n  function getTemplate(element, attr) {\n    return isAnchor(attr) ?\n           '<a class=\"md-button\" ng-transclude></a>' :\n           '<button class=\"md-button\" ng-transclude></button>';\n  }\n\n  function postLink(scope, element, attr) {\n    var node = element[0];\n    $mdTheming(element);\n    $mdButtonInkRipple.attach(scope, element);\n\n    var elementHasText = node.textContent.trim();\n    if (!elementHasText) {\n      $mdAria.expect(element, 'aria-label');\n    }\n\n    // For anchor elements, we have to set tabindex manually when the\n    // element is disabled\n    if (isAnchor(attr) && angular.isDefined(attr.ngDisabled) ) {\n      scope.$watch(attr.ngDisabled, function(isDisabled) {\n        element.attr('tabindex', isDisabled ? -1 : 0);\n      });\n    }\n\n    // disabling click event when disabled is true\n    element.on('click', function(e){\n      if (attr.disabled === true) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    });\n\n    // restrict focus styles to the keyboard\n    scope.mouseActive = false;\n    element.on('mousedown', function() {\n        scope.mouseActive = true;\n        $timeout(function(){\n          scope.mouseActive = false;\n        }, 100);\n      })\n      .on('focus', function() {\n        if (scope.mouseActive === false) {\n          element.addClass('md-focused');\n        }\n      })\n      .on('blur', function(ev) {\n        element.removeClass('md-focused');\n      });\n  }\n\n}\nMdButtonDirective.$inject = [\"$mdButtonInkRipple\", \"$mdTheming\", \"$mdAria\", \"$timeout\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.card\n *\n * @description\n * Card components.\n */\nangular.module('material.components.card', [\n  'material.core'\n])\n  .directive('mdCard', mdCardDirective);\n\n\n\n/**\n * @ngdoc directive\n * @name mdCard\n * @module material.components.card\n *\n * @restrict E\n *\n * @description\n * The `<md-card>` directive is a container element used within `<md-content>` containers.\n *\n * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`\n * container will wrap text content and provide padding. An `<md-card-footer>` element can be\n * optionally included to put content flush against the bottom edge of the card.\n *\n * Action buttons can be included in an element with the `.md-actions` class, also used in `md-dialog`.\n * You can then position buttons using layout attributes.\n *\n * Cards have constant width and variable heights; where the maximum height is limited to what can\n * fit within a single view on a platform, but it can temporarily expand as needed.\n *\n * @usage\n * ### Card with optional footer\n * <hljs lang=\"html\">\n * <md-card>\n *  <img src=\"card-image.png\" class=\"md-card-image\" alt=\"image caption\">\n *  <md-card-content>\n *    <h2>Card headline</h2>\n *    <p>Card content</p>\n *  </md-card-content>\n *  <md-card-footer>\n *    Card footer\n *  </md-card-footer>\n * </md-card>\n * </hljs>\n *\n * ### Card with actions\n * <hljs lang=\"html\">\n * <md-card>\n *  <img src=\"card-image.png\" class=\"md-card-image\" alt=\"image caption\">\n *  <md-card-content>\n *    <h2>Card headline</h2>\n *    <p>Card content</p>\n *  </md-card-content>\n *  <div class=\"md-actions\" layout=\"row\" layout-align=\"end center\">\n *    <md-button>Action 1</md-button>\n *    <md-button>Action 2</md-button>\n *  </div>\n * </md-card>\n * </hljs>\n *\n */\nfunction mdCardDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    link: function($scope, $element, $attr) {\n      $mdTheming($element);\n    }\n  };\n}\nmdCardDirective.$inject = [\"$mdTheming\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.checkbox\n * @description Checkbox module!\n */\nangular\n  .module('material.components.checkbox', ['material.core'])\n  .directive('mdCheckbox', MdCheckboxDirective);\n\n/**\n * @ngdoc directive\n * @name mdCheckbox\n * @module material.components.checkbox\n * @restrict E\n *\n * @description\n * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the checkbox is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects\n * @param {string=} aria-label Adds label to checkbox for accessibility.\n * Defaults to checkbox's text. If no default text is found, a warning will be logged.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-checkbox ng-model=\"isChecked\" aria-label=\"Finished?\">\n *   Finished ?\n * </md-checkbox>\n *\n * <md-checkbox md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n *   No Ink Effects\n * </md-checkbox>\n *\n * <md-checkbox ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n *   Disabled\n * </md-checkbox>\n *\n * </hljs>\n *\n */\nfunction MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {\n  inputDirective = inputDirective[0];\n  var CHECKED_CSS = 'md-checked';\n\n  return {\n    restrict: 'E',\n    transclude: true,\n    require: '?ngModel',\n    priority: 210, // Run before ngAria\n    template: \n      '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n        '<div class=\"md-icon\"></div>' +\n      '</div>' +\n      '<div ng-transclude class=\"md-label\"></div>',\n    compile: compile\n  };\n\n  // **********************************************************\n  // Private Methods\n  // **********************************************************\n\n  function compile (tElement, tAttrs) {\n\n    tAttrs.type = 'checkbox';\n    tAttrs.tabindex = tAttrs.tabindex || '0';\n    tElement.attr('role', tAttrs.type);\n\n    // Attach a click handler in compile in order to immediately stop propagation\n    // (especially for ng-click) when the checkbox is disabled.\n    tElement.on('click', function(event) {\n      if (this.hasAttribute('disabled')) {\n        event.stopImmediatePropagation();\n      }\n    });\n\n    return function postLink(scope, element, attr, ngModelCtrl) {\n      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();\n      $mdTheming(element);\n\n      if (attr.ngChecked) {\n        scope.$watch(\n            scope.$eval.bind(scope, attr.ngChecked),\n            ngModelCtrl.$setViewValue.bind(ngModelCtrl)\n        );\n      }\n\n      $$watchExpr('ngDisabled', 'tabindex', {\n        true: '-1',\n        false: attr.tabindex\n      });\n\n      $mdAria.expectWithText(element, 'aria-label');\n\n      // Reuse the original input[type=checkbox] directive from Angular core.\n      // This is a bit hacky as we need our own event listener and own render\n      // function.\n      inputDirective.link.pre(scope, {\n        on: angular.noop,\n        0: {}\n      }, attr, [ngModelCtrl]);\n\n      scope.mouseActive = false;\n      element.on('click', listener)\n        .on('keypress', keypressHandler)\n        .on('mousedown', function() {\n          scope.mouseActive = true;\n          $timeout(function() {\n            scope.mouseActive = false;\n          }, 100);\n        })\n        .on('focus', function() {\n          if (scope.mouseActive === false) {\n            element.addClass('md-focused');\n          }\n        })\n        .on('blur', function() {\n          element.removeClass('md-focused');\n        });\n\n      ngModelCtrl.$render = render;\n\n      function $$watchExpr(expr, htmlAttr, valueOpts) {\n        if (attr[expr]) {\n          scope.$watch(attr[expr], function(val) {\n            if (valueOpts[val]) {\n              element.attr(htmlAttr, valueOpts[val]);\n            }\n          });\n        }\n      }\n\n      function keypressHandler(ev) {\n        var keyCode = ev.which || ev.keyCode;\n        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {\n          ev.preventDefault();\n\n          if (!element.hasClass('md-focused')) {\n            element.addClass('md-focused');\n          }\n\n          listener(ev);\n        }\n      }\n      function listener(ev) {\n        if (element[0].hasAttribute('disabled')) {\n          return;\n        }\n\n        scope.$apply(function() {\n          // Toggle the checkbox value...\n          var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;\n\n          ngModelCtrl.$setViewValue( viewValue, ev && ev.type);\n          ngModelCtrl.$render();\n        });\n      }\n\n      function render() {\n        if(ngModelCtrl.$viewValue) {\n          element.addClass(CHECKED_CSS);\n        } else {\n          element.removeClass(CHECKED_CSS);\n        }\n      }\n    };\n  }\n}\nMdCheckboxDirective.$inject = [\"inputDirective\", \"$mdAria\", \"$mdConstant\", \"$mdTheming\", \"$mdUtil\", \"$timeout\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.chips\n */\n/*\n * @see js folder for chips implementation\n */\nangular.module('material.components.chips', [\n  'material.core',\n  'material.components.autocomplete'\n]);\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.content\n *\n * @description\n * Scrollable content\n */\nangular.module('material.components.content', [\n  'material.core'\n])\n  .directive('mdContent', mdContentDirective);\n\n/**\n * @ngdoc directive\n * @name mdContent\n * @module material.components.content\n *\n * @restrict E\n *\n * @description\n * The `<md-content>` directive is a container element useful for scrollable content\n *\n * @usage\n *\n * - Add the `[layout-padding]` attribute to make the content padded.\n *\n * <hljs lang=\"html\">\n *  <md-content layout-padding>\n *      Lorem ipsum dolor sit amet, ne quod novum mei.\n *  </md-content>\n * </hljs>\n *\n */\n\nfunction mdContentDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    controller: ['$scope', '$element', ContentController],\n    link: function(scope, element, attr) {\n      var node = element[0];\n\n      $mdTheming(element);\n      scope.$broadcast('$mdContentLoaded', element);\n\n      iosScrollFix(element[0]);\n    }\n  };\n\n  function ContentController($scope, $element) {\n    this.$scope = $scope;\n    this.$element = $element;\n  }\n}\nmdContentDirective.$inject = [\"$mdTheming\"];\n\nfunction iosScrollFix(node) {\n  // IOS FIX:\n  // If we scroll where there is no more room for the webview to scroll,\n  // by default the webview itself will scroll up and down, this looks really\n  // bad.  So if we are scrolling to the very top or bottom, add/subtract one\n  angular.element(node).on('$md.pressdown', function(ev) {\n    // Only touch events\n    if (ev.pointer.type !== 't') return;\n    // Don't let a child content's touchstart ruin it for us.\n    if (ev.$materialScrollFixed) return;\n    ev.$materialScrollFixed = true;\n\n    if (node.scrollTop === 0) {\n      node.scrollTop = 1;\n    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {\n      node.scrollTop -= 1;\n    }\n  });\n}\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.dialog\n */\nangular\n  .module('material.components.dialog', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .directive('mdDialog', MdDialogDirective)\n  .provider('$mdDialog', MdDialogProvider);\n\nfunction MdDialogDirective($$rAF, $mdTheming, $mdDialog) {\n  return {\n    restrict: 'E',\n    link: function(scope, element, attr) {\n      $mdTheming(element);\n      $$rAF(function() {\n        var images;\n        var content = element[0].querySelector('md-dialog-content');\n\n        if (content) {\n          images = content.getElementsByTagName('img');\n          addOverflowClass();\n          //-- delayed image loading may impact scroll height, check after images are loaded\n          angular.element(images).on('load', addOverflowClass);\n        }\n\n        scope.$on('$destroy', function() {\n          $mdDialog.destroy();\n        });\n\n        /**\n         *\n         */\n        function addOverflowClass() {\n          element.toggleClass('md-content-overflow', content.scrollHeight > content.clientHeight);\n        }\n\n\n      });\n    }\n  };\n}\nMdDialogDirective.$inject = [\"$$rAF\", \"$mdTheming\", \"$mdDialog\"];\n\n/**\n * @ngdoc service\n * @name $mdDialog\n * @module material.components.dialog\n *\n * @description\n * `$mdDialog` opens a dialog over the app to inform users about critical information or require\n *  them to make decisions. There are two approaches for setup: a simple promise API\n *  and regular object syntax.\n *\n * ## Restrictions\n *\n * - The dialog is always given an isolate scope.\n * - The dialog's template must have an outer `<md-dialog>` element.\n *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use\n *   an element with class `md-actions` for the dialog's actions.\n * - Dialogs must cover the entire application to keep interactions inside of them.\n * Use the `parent` option to change where dialogs are appended.\n *\n * ## Sizing\n * - Complex dialogs can be sized with `flex=\"percentage\"`, i.e. `flex=\"66\"`.\n * - Default max-width is 80% of the `rootElement` or `parent`.\n *\n * ## Css\n * - `.md-dialog-content` - class that sets the padding on the content as the spec file\n *\n * @usage\n * <hljs lang=\"html\">\n * <div  ng-app=\"demoApp\" ng-controller=\"EmployeeController\">\n *   <div>\n *     <md-button ng-click=\"showAlert()\" class=\"md-raised md-warn\">\n *       Employee Alert!\n *       </md-button>\n *   </div>\n *   <div>\n *     <md-button ng-click=\"showDialog($event)\" class=\"md-raised\">\n *       Custom Dialog\n *       </md-button>\n *   </div>\n *   <div>\n *     <md-button ng-click=\"closeAlert()\" ng-disabled=\"!hasAlert()\" class=\"md-raised\">\n *       Close Alert\n *     </md-button>\n *   </div>\n *   <div>\n *     <md-button ng-click=\"showGreeting($event)\" class=\"md-raised md-primary\" >\n *       Greet Employee\n *       </md-button>\n *   </div>\n * </div>\n * </hljs>\n *\n * ### JavaScript: object syntax\n * <hljs lang=\"js\">\n * (function(angular, undefined){\n *   \"use strict\";\n *\n *   angular\n *    .module('demoApp', ['ngMaterial'])\n *    .controller('AppCtrl', AppController);\n *\n *   function AppController($scope, $mdDialog) {\n *     var alert;\n *     $scope.showAlert = showAlert;\n *     $scope.showDialog = showDialog;\n *     $scope.items = [1, 2, 3];\n *\n *     // Internal method\n *     function showAlert() {\n *       alert = $mdDialog.alert({\n *         title: 'Attention',\n *         content: 'This is an example of how easy dialogs can be!',\n *         ok: 'Close'\n *       });\n *\n *       $mdDialog\n *         .show( alert )\n *         .finally(function() {\n *           alert = undefined;\n *         });\n *     }\n *\n *     function showDialog($event) {\n *        var parentEl = angular.element(document.body);\n *        $mdDialog.show({\n *          parent: parentEl,\n *          targetEvent: $event,\n *          template:\n *            '<md-dialog aria-label=\"List dialog\">' +\n *            '  <md-dialog-content>'+\n *            '    <md-list>'+\n *            '      <md-list-item ng-repeat=\"item in items\">'+\n *            '       <p>Number {{item}}</p>' +\n *            '      </md-item>'+\n *            '    </md-list>'+\n *            '  </md-dialog-content>' +\n *            '  <div class=\"md-actions\">' +\n *            '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n *            '      Close Dialog' +\n *            '    </md-button>' +\n *            '  </div>' +\n *            '</md-dialog>',\n *          locals: {\n *            items: $scope.items\n *          },\n *          controller: DialogController\n *       });\n *       function DialogController($scope, $mdDialog, items) {\n *         $scope.items = items;\n *         $scope.closeDialog = function() {\n *           $mdDialog.hide();\n *         }\n *       }\n *     }\n *   }\n * })(angular);\n * </hljs>\n *\n * ### JavaScript: promise API syntax, custom dialog template\n * <hljs lang=\"js\">\n * (function(angular, undefined){\n *   \"use strict\";\n *\n *   angular\n *     .module('demoApp', ['ngMaterial'])\n *     .controller('EmployeeController', EmployeeEditor)\n *     .controller('GreetingController', GreetingController);\n *\n *   // Fictitious Employee Editor to show how to use simple and complex dialogs.\n *\n *   function EmployeeEditor($scope, $mdDialog) {\n *     var alert;\n *\n *     $scope.showAlert = showAlert;\n *     $scope.closeAlert = closeAlert;\n *     $scope.showGreeting = showCustomGreeting;\n *\n *     $scope.hasAlert = function() { return !!alert };\n *     $scope.userName = $scope.userName || 'Bobby';\n *\n *     // Dialog #1 - Show simple alert dialog and cache\n *     // reference to dialog instance\n *\n *     function showAlert() {\n *       alert = $mdDialog.alert()\n *         .title('Attention, ' + $scope.userName)\n *         .content('This is an example of how easy dialogs can be!')\n *         .ok('Close');\n *\n *       $mdDialog\n *           .show( alert )\n *           .finally(function() {\n *             alert = undefined;\n *           });\n *     }\n *\n *     // Close the specified dialog instance and resolve with 'finished' flag\n *     // Normally this is not needed, just use '$mdDialog.hide()' to close\n *     // the most recent dialog popup.\n *\n *     function closeAlert() {\n *       $mdDialog.hide( alert, \"finished\" );\n *       alert = undefined;\n *     }\n *\n *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.\n *\n *     function showCustomGreeting($event) {\n *         $mdDialog.show({\n *           targetEvent: $event,\n *           template:\n *             '<md-dialog>' +\n *\n *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +\n *\n *             '  <div class=\"md-actions\">' +\n *             '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n *             '      Close Greeting' +\n *             '    </md-button>' +\n *             '  </div>' +\n *             '</md-dialog>',\n *           controller: 'GreetingController',\n *           onComplete: afterShowAnimation,\n *           locals: { employee: $scope.userName }\n *         });\n *\n *         // When the 'enter' animation finishes...\n *\n *         function afterShowAnimation(scope, element, options) {\n *            // post-show code here: DOM element focus, etc.\n *         }\n *     }\n *\n *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog\n *     //             Here we used ng-controller=\"GreetingController as vm\" and\n *     //             $scope.vm === <controller instance>\n *\n *     function showCustomGreeting() {\n *\n *        $mdDialog.show({\n *           clickOutsideToClose: true,\n *\n *           scope: $scope,        // use parent scope in template\n *           preserveScope: true,  // do not forget this if use parent scope\n\n *           // Since GreetingController is instantiated with ControllerAs syntax\n *           // AND we are passing the parent '$scope' to the dialog, we MUST\n *           // use 'vm.<xxx>' in the template markup\n *\n *           template: '<md-dialog>' +\n *                     '  <md-dialog-content>' +\n *                     '     Hi There {{vm.employee}}' +\n *                     '  </md-dialog-content>' +\n *                     '</md-dialog>',\n *\n *           controller: function DialogController($scope, $mdDialog) {\n *             $scope.closeDialog = function() {\n *               $mdDialog.hide();\n *             }\n *           }\n *        });\n *     }\n *\n *   }\n *\n *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog\n *\n *   function GreetingController($scope, $mdDialog, employee) {\n *     // Assigned from construction <code>locals</code> options...\n *     $scope.employee = employee;\n *\n *     $scope.closeDialog = function() {\n *       // Easily hides most recent dialog shown...\n *       // no specific instance reference is needed.\n *       $mdDialog.hide();\n *     };\n *   }\n *\n * })(angular);\n * </hljs>\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#alert\n *\n * @description\n * Builds a preconfigured dialog with the specified message.\n *\n * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n *\n * - $mdDialogPreset#title(string) - sets title to string\n * - $mdDialogPreset#content(string) - sets content / message to string\n * - $mdDialogPreset#ok(string) - sets okay button text to string\n * - $mdDialogPreset#theme(string) - sets the theme of the dialog\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#confirm\n *\n * @description\n * Builds a preconfigured dialog with the specified message. You can call show and the promise returned\n * will be resolved only if the user clicks the confirm action on the dialog.\n *\n * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n *\n * Additionally, it supports the following methods:\n *\n * - $mdDialogPreset#title(string) - sets title to string\n * - $mdDialogPreset#content(string) - sets content / message to string\n * - $mdDialogPreset#ok(string) - sets okay button text to string\n * - $mdDialogPreset#cancel(string) - sets cancel button text to string\n * - $mdDialogPreset#theme(string) - sets the theme of the dialog\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#show\n *\n * @description\n * Show a dialog with the specified options.\n *\n * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and\n * `confirm()`, or an options object with the following properties:\n *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content\n *   of the dialog.\n *   - `template` - `{string=}`: Same as templateUrl, except this is an actual template string.\n *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,\n *     the location of the click will be used as the starting point for the opening animation\n *     of the the dialog.\n *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,\n *     it will create a new isolate scope.\n *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.\n *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.\n *     Default true.\n *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.\n *     Default true.\n *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to\n *     close it. Default false.\n *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.\n *     Default true.\n *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if\n *     focusing some other way, as focus management is required for dialogs to be accessible.\n *     Defaults to true.\n *   - `controller` - `{string=}`: The controller to associate with the dialog. The controller\n *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.\n *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names\n *     of values to inject into the controller. For example, `locals: {three: 3}` would inject\n *     `three` into the controller, with the value 3. If `bindToController` is true, they will be\n *     copied to the controller instead.\n *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n *     These values will not be available until after initialization.\n *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the\n *     dialog will not open until all of the promises resolve.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending\n *     to the root element of the application.\n *   - `onShowing` `{function=} Callback function used to announce the show() action is\n *     starting.\n *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is\n *     finished.\n *   - `onRemoving` `{function=} Callback function used to announce the close/hide() action is\n *     starting. This allows developers to run custom animations in parallel the close animations.\n *\n * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or\n * rejected with `$mdDialog.cancel()`.\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#hide\n *\n * @description\n * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.\n *\n * @param {*=} response An argument for the resolved promise.\n *\n * @returns {promise} A promise that is resolved when the dialog has been closed.\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#cancel\n *\n * @description\n * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.\n *\n * @param {*=} response An argument for the rejected promise.\n *\n * @returns {promise} A promise that is resolved when the dialog has been closed.\n */\n\nfunction MdDialogProvider($$interimElementProvider) {\n\n  advancedDialogOptions.$inject = [\"$mdDialog\", \"$mdTheming\"];\n  dialogDefaultOptions.$inject = [\"$mdDialog\", \"$mdAria\", \"$mdUtil\", \"$mdConstant\", \"$animate\", \"$document\", \"$window\", \"$rootElement\"];\n  return $$interimElementProvider('$mdDialog')\n    .setDefaults({\n      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent', 'parent'],\n      options: dialogDefaultOptions\n    })\n    .addPreset('alert', {\n      methods: ['title', 'content', 'ariaLabel', 'ok', 'theme', 'css'],\n      options: advancedDialogOptions\n    })\n    .addPreset('confirm', {\n      methods: ['title', 'content', 'ariaLabel', 'ok', 'cancel', 'theme', 'css'],\n      options: advancedDialogOptions\n    });\n\n  /* @ngInject */\n  function advancedDialogOptions($mdDialog, $mdTheming) {\n    return {\n      template: [\n        '<md-dialog md-theme=\"{{ dialog.theme }}\" aria-label=\"{{ dialog.ariaLabel }}\" ng-class=\"dialog.css\">',\n        ' <md-dialog-content class=\"md-dialog-content\" role=\"document\" tabIndex=\"-1\">',\n        '   <h2 class=\"md-title\">{{ dialog.title }}</h2>',\n        '   <div class=\"md-dialog-content-body\" md-template=\"::dialog.mdContent\"></div>',\n        ' </md-dialog-content>',\n        ' <div class=\"md-actions\">',\n        '   <md-button ng-if=\"dialog.$type == \\'confirm\\'\"' +\n        '     ng-click=\"dialog.abort()\" class=\"md-primary\">',\n        '     {{ dialog.cancel }}',\n        '   </md-button>',\n        '   <md-button ng-click=\"dialog.hide()\" class=\"md-primary\" md-autofocus=\"dialog.$type!=\\'confirm\\'\">',\n        '     {{ dialog.ok }}',\n        '   </md-button>',\n        ' </div>',\n        '</md-dialog>'\n      ].join('').replace(/\\s\\s+/g, ''),\n      controller: function mdDialogCtrl() {\n        this.hide = function() {\n          $mdDialog.hide(true);\n        };\n        this.abort = function() {\n          $mdDialog.cancel();\n        };\n      },\n      controllerAs: 'dialog',\n      bindToController: true,\n      theme: $mdTheming.defaultTheme()\n    };\n  }\n\n  /* @ngInject */\n  function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement) {\n    return {\n      hasBackdrop: true,\n      isolateScope: true,\n      onShow: onShow,\n      onRemove: onRemove,\n      clickOutsideToClose: false,\n      escapeToClose: true,\n      targetEvent: null,\n      focusOnOpen: true,\n      disableParentScroll: true,\n      transformTemplate: function(template) {\n        return '<div class=\"md-dialog-container\">' + validatedTemplate(template) + '</div>';\n\n        /**\n         * The specified template should contain a <md-dialog> wrapper element....\n         */\n        function validatedTemplate(template) {\n          template || \"\"\n          return /<\\/md-dialog>/g.test(template) ? template : \"<md-dialog>\" + template + \"</md-dialog>\";\n        }\n      }\n    };\n\n    /**\n     * Show method for dialogs\n     */\n    function onShow(scope, element, options, controller) {\n      angular.element($document[0].body).addClass('md-dialog-is-showing');\n\n      wrapSimpleContent();\n\n      captureSourceAndParent(element, options);\n      configureAria(element.find('md-dialog'), options);\n      showBackdrop(scope, element, options);\n\n      return dialogPopIn(element, options)\n        .then(function() {\n          activateListeners(element, options);\n          lockScreenReader(element, options);\n          focusOnOpen();\n        });\n\n      /**\n       * For alerts, focus on content... otherwise focus on\n       * the close button (or equivalent)\n       */\n      function focusOnOpen() {\n        if (options.focusOnOpen) {\n          var target = $mdUtil.findFocusTarget(element) || findCloseButton();\n          target.focus();\n        }\n\n        /**\n         *  If no element with class dialog-close, try to find the last\n         *  button child in md-actions and assume it is a close button\n         */\n        function findCloseButton() {\n          var closeButton = element[0].querySelector('.dialog-close');\n          if (!closeButton) {\n            var actionButtons = element[0].querySelectorAll('.md-actions button');\n            closeButton = actionButtons[actionButtons.length - 1];\n          }\n          return angular.element(closeButton);\n        }\n      }\n\n      /**\n       * Wrap any simple content [specified via .content(\"\")] in <p></p> tags.\n       * otherwise accept HTML content within the dialog content area...\n       * NOTE: Dialog uses the md-template directive to safely inject HTML content.\n       */\n      function wrapSimpleContent() {\n        if ( controller ) {\n          var HTML_END_TAG = /<\\/[\\w-]*>/gm;\n          var content = controller.content || options.content || \"\";\n\n          var hasHTML = HTML_END_TAG.test(content);\n          if (!hasHTML) {\n            content = $mdUtil.supplant(\"<p>{0}</p>\", [content]);\n          }\n\n          // Publish updated dialog content body... to be compiled by mdTemplate directive\n          controller.mdContent = content;\n        }\n      }\n\n    }\n\n    /**\n     * Remove function for all dialogs\n     */\n    function onRemove(scope, element, options) {\n      options.deactivateListeners();\n      options.unlockScreenReader();\n      options.hideBackdrop(options.$destroy);\n\n      // For navigation $destroy events, do a quick, non-animated removal,\n      // but for normal closes (from clicks, etc) animate the removal\n\n      return !!options.$destroy ? detachAndClean() : animateRemoval().then( detachAndClean );\n\n      /**\n       * For normal closes, animate the removal.\n       * For forced closes (like $destroy events), skip the animations\n       */\n      function animateRemoval() {\n        return dialogPopOut(element, options);\n      }\n\n      /**\n       * Detach the element\n       */\n      function detachAndClean() {\n        angular.element($document[0].body).removeClass('md-dialog-is-showing');\n        element.remove();\n\n        if (!options.$destroy) options.origin.focus();\n      }\n    }\n\n    /**\n     * Capture originator/trigger element information (if available)\n     * and the parent container for the dialog; defaults to the $rootElement\n     * unless overridden in the options.parent\n     */\n    function captureSourceAndParent(element, options) {\n      options.origin = angular.extend({\n        element: null,\n        bounds: null,\n        focus: angular.noop\n      }, options.origin || {});\n\n      var source = angular.element((options.targetEvent || {}).target);\n      if (source && source.length) {\n        // Compute and save the target element's bounding rect, so that if the\n        // element is hidden when the dialog closes, we can shrink the dialog\n        // back to the same position it expanded from.\n        options.origin.element = source;\n        options.origin.bounds = source[0].getBoundingClientRect();\n        options.origin.focus = function() {\n          source.focus();\n        }\n      }\n\n      // If the parent specifier is a simple string selector, then query for\n      // the DOM element.\n      if ( angular.isString(options.parent) ) {\n        var simpleSelector = options.parent,\n            container = $document[0].querySelectorAll(simpleSelector);\n        options.parent = container.length ? container[0] : null;\n      }\n      // If we have a reference to a raw dom element, always wrap it in jqLite\n      options.parent = angular.element(options.parent || $rootElement);\n\n    }\n\n    /**\n     * Listen for escape keys and outside clicks to auto close\n     */\n    function activateListeners(element, options) {\n      var window = angular.element($window);\n      var onWindowResize = $mdUtil.debounce(function(){\n        stretchDialogContainerToViewport(element, options);\n      }, 60);\n\n      var removeListeners = [];\n      var smartClose = function() {\n        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will\n        // cancel or fallback to hide.\n        var closeFn = ( options.$type == 'alert' ) ? $mdDialog.hide : $mdDialog.cancel;\n        $mdUtil.nextTick(closeFn, true);\n      };\n\n      if (options.escapeToClose) {\n        var target = options.parent;\n        var keyHandlerFn = function(ev) {\n          if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {\n            ev.stopPropagation();\n            ev.preventDefault();\n\n            smartClose();\n          }\n        };\n\n        // Add keydown listeners\n        element.on('keydown', keyHandlerFn);\n        target.on('keydown', keyHandlerFn);\n        window.on('resize', onWindowResize);\n\n        // Queue remove listeners function\n        removeListeners.push(function() {\n\n          element.off('keydown', keyHandlerFn);\n          target.off('keydown', keyHandlerFn);\n          window.off('resize', onWindowResize);\n\n        });\n      }\n      if (options.clickOutsideToClose) {\n        var target = element;\n        var sourceElem;\n\n        // Keep track of the element on which the mouse originally went down\n        // so that we can only close the backdrop when the 'click' started on it.\n        // A simple 'click' handler does not work,\n        // it sets the target object as the element the mouse went down on.\n        var mousedownHandler = function(ev) {\n          sourceElem = ev.target;\n        };\n\n        // We check if our original element and the target is the backdrop\n        // because if the original was the backdrop and the target was inside the dialog\n        // we don't want to dialog to close.\n        var mouseupHandler = function(ev) {\n          if (sourceElem === target[0] && ev.target === target[0]) {\n            ev.stopPropagation();\n            ev.preventDefault();\n\n            smartClose();\n          }\n        };\n\n        // Add listeners\n        target.on('mousedown', mousedownHandler);\n        target.on('mouseup', mouseupHandler);\n\n        // Queue remove listeners function\n        removeListeners.push(function() {\n          target.off('mousedown', mousedownHandler);\n          target.off('mouseup', mouseupHandler);\n        });\n      }\n\n      // Attach specific `remove` listener handler\n      options.deactivateListeners = function() {\n        removeListeners.forEach(function(removeFn) {\n          removeFn();\n        });\n        options.deactivateListeners = null;\n      };\n    }\n\n    /**\n     * Show modal backdrop element...\n     */\n    function showBackdrop(scope, element, options) {\n\n      if (options.disableParentScroll) {\n        // !! DO this before creating the backdrop; since disableScrollAround()\n        //    configures the scroll offset; which is used by mdBackDrop postLink()\n        options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent);\n      }\n\n      if (options.hasBackdrop) {\n        options.backdrop = $mdUtil.createBackdrop(scope, \"md-dialog-backdrop md-opaque\");\n        $animate.enter(options.backdrop, options.parent);\n      }\n\n      /**\n       * Hide modal backdrop element...\n       */\n      options.hideBackdrop = function hideBackdrop($destroy) {\n        if (options.backdrop) {\n          if ( !!$destroy ) options.backdrop.remove();\n          else              $animate.leave(options.backdrop);\n        }\n\n        if (options.disableParentScroll) {\n          options.restoreScroll();\n          delete options.restoreScroll;\n        }\n\n        options.hideBackdrop = null;\n      }\n    }\n\n    /**\n     * Inject ARIA-specific attributes appropriate for Dialogs\n     */\n    function configureAria(element, options) {\n\n      var role = (options.$type === 'alert') ? 'alertdialog' : 'dialog';\n      var dialogContent = element.find('md-dialog-content');\n      var dialogId = element.attr('id') || ('dialog_' + $mdUtil.nextUid());\n\n      element.attr({\n        'role': role,\n        'tabIndex': '-1'\n      });\n\n      if (dialogContent.length === 0) {\n        dialogContent = element;\n      }\n\n      dialogContent.attr('id', dialogId);\n      element.attr('aria-describedby', dialogId);\n\n      if (options.ariaLabel) {\n        $mdAria.expect(element, 'aria-label', options.ariaLabel);\n      }\n      else {\n        $mdAria.expectAsync(element, 'aria-label', function() {\n          var words = dialogContent.text().split(/\\s+/);\n          if (words.length > 3) words = words.slice(0, 3).concat('...');\n          return words.join(' ');\n        });\n      }\n    }\n\n    /**\n     * Prevents screen reader interaction behind modal window\n     * on swipe interfaces\n     */\n    function lockScreenReader(element, options) {\n      var isHidden = true;\n\n      // get raw DOM node\n      walkDOM(element[0]);\n\n      options.unlockScreenReader = function() {\n        isHidden = false;\n        walkDOM(element[0]);\n\n        options.unlockScreenReader = null;\n      };\n\n      /**\n       * Walk DOM to apply or remove aria-hidden on sibling nodes\n       * and parent sibling nodes\n       *\n       */\n      function walkDOM(element) {\n        while (element.parentNode) {\n          if (element === document.body) {\n            return;\n          }\n          var children = element.parentNode.children;\n          for (var i = 0; i < children.length; i++) {\n            // skip over child if it is an ascendant of the dialog\n            // or a script or style tag\n            if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {\n              children[i].setAttribute('aria-hidden', isHidden);\n            }\n          }\n\n          walkDOM(element = element.parentNode);\n        }\n      }\n    }\n\n    /**\n     * Ensure the dialog container fill-stretches to the viewport\n     */\n    function stretchDialogContainerToViewport(container, options) {\n\n      var isFixed = $window.getComputedStyle($document[0].body).position == 'fixed';\n      var backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null;\n      var height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;\n\n      container.css({\n        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + 'px',\n        height: height ? height + 'px' : '100%'\n      });\n\n      return container;\n    }\n\n    /**\n     *  Dialog open and pop-in animation\n     */\n    function dialogPopIn(container, options) {\n\n      // Add the `md-dialog-container` to the DOM\n      options.parent.append(container);\n      stretchDialogContainerToViewport(container, options);\n\n      var dialogEl = container.find('md-dialog');\n      var animator = $mdUtil.dom.animator;\n      var buildTranslateToOrigin = animator.calculateZoomToOrigin;\n      var translateOptions = {transitionInClass: 'md-transition-in', transitionOutClass: 'md-transition-out'};\n      var from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.origin));\n      var to = animator.toTransformCss(\"\");  // defaults to center display (or parent or $rootElement)\n\n      return animator\n        .translate3d(dialogEl, from, to, translateOptions)\n        .then(function(animateReversal) {\n\n\n\n          // Build a reversal translate function synched to this translation...\n          options.reverseAnimate = function() {\n\n            delete options.reverseAnimate;\n            return animateReversal(\n              animator.toTransformCss(\n                // in case the origin element has moved or is hidden,\n                // let's recalculate the translateCSS\n                buildTranslateToOrigin(dialogEl, options.origin)\n              )\n            );\n\n          };\n          return true;\n        });\n    }\n\n    /**\n     * Dialog close and pop-out animation\n     */\n    function dialogPopOut(container, options) {\n      return options.reverseAnimate();\n    }\n\n    /**\n     * Utility function to filter out raw DOM nodes\n     */\n    function isNodeOneOf(elem, nodeTypeArray) {\n      if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {\n        return true;\n      }\n    }\n\n  }\n}\nMdDialogProvider.$inject = [\"$$interimElementProvider\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.divider\n * @description Divider module!\n */\nangular.module('material.components.divider', [\n  'material.core'\n])\n  .directive('mdDivider', MdDividerDirective);\n\n/**\n * @ngdoc directive\n * @name mdDivider\n * @module material.components.divider\n * @restrict E\n *\n * @description\n * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.\n *\n * @param {boolean=} md-inset Add this attribute to activate the inset divider style.\n * @usage\n * <hljs lang=\"html\">\n * <md-divider></md-divider>\n *\n * <md-divider md-inset></md-divider>\n * </hljs>\n *\n */\nfunction MdDividerDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    link: $mdTheming\n  };\n}\nMdDividerDirective.$inject = [\"$mdTheming\"];\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc module\n   * @name material.components.datepicker\n   * @description Datepicker\n   */\n  angular.module('material.components.datepicker', [\n    'material.core',\n    'material.components.icon',\n    'material.components.virtualRepeat'\n  ]).directive('mdCalendar', calendarDirective);\n\n\n  // POST RELEASE\n  // TODO(jelbourn): Mac Cmd + left / right == Home / End\n  // TODO(jelbourn): Clicking on the month label opens the month-picker.\n  // TODO(jelbourn): Minimum and maximum date\n  // TODO(jelbourn): Refactor month element creation to use cloneNode (performance).\n  // TODO(jelbourn): Define virtual scrolling constants (compactness) users can override.\n  // TODO(jelbourn): Animated month transition on ng-model change (virtual-repeat)\n  // TODO(jelbourn): Scroll snapping (virtual repeat)\n  // TODO(jelbourn): Remove superfluous row from short months (virtual-repeat)\n  // TODO(jelbourn): Month headers stick to top when scrolling.\n  // TODO(jelbourn): Previous month opacity is lowered when partially scrolled out of view.\n  // TODO(jelbourn): Support md-calendar standalone on a page (as a tabstop w/ aria-live\n  //     announcement and key handling).\n  // Read-only calendar (not just date-picker).\n\n  /**\n   * Height of one calendar month tbody. This must be made known to the virtual-repeat and is\n   * subsequently used for scrolling to specific months.\n   */\n  var TBODY_HEIGHT = 265;\n\n  /**\n   * Height of a calendar month with a single row. This is needed to calculate the offset for\n   * rendering an extra month in virtual-repeat that only contains one row.\n   */\n  var TBODY_SINGLE_ROW_HEIGHT = 45;\n\n  function calendarDirective() {\n    return {\n      template:\n          '<table aria-hidden=\"true\" class=\"md-calendar-day-header\"><thead></thead></table>' +\n          '<div class=\"md-calendar-scroll-mask\">' +\n          '<md-virtual-repeat-container class=\"md-calendar-scroll-container\" ' +\n                'md-offset-size=\"' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '\">' +\n              '<table role=\"grid\" tabindex=\"0\" class=\"md-calendar\" aria-readonly=\"true\">' +\n                '<tbody role=\"rowgroup\" md-virtual-repeat=\"i in ctrl.items\" md-calendar-month ' +\n                    'md-month-offset=\"$index\" class=\"md-calendar-month\" ' +\n                    'md-start-index=\"ctrl.getSelectedMonthIndex()\" ' +\n                    'md-item-size=\"' + TBODY_HEIGHT + '\"></tbody>' +\n              '</table>' +\n            '</md-virtual-repeat-container>' +\n          '</div>',\n      scope: {\n        minDate: '=mdMinDate',\n        maxDate: '=mdMaxDate',\n      },\n      require: ['ngModel', 'mdCalendar'],\n      controller: CalendarCtrl,\n      controllerAs: 'ctrl',\n      bindToController: true,\n      link: function(scope, element, attrs, controllers) {\n        var ngModelCtrl = controllers[0];\n        var mdCalendarCtrl = controllers[1];\n        mdCalendarCtrl.configureNgModel(ngModelCtrl);\n      }\n    };\n  }\n\n  /** Class applied to the selected date cell/. */\n  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';\n\n  /** Class applied to the focused date cell/. */\n  var FOCUSED_DATE_CLASS = 'md-focus';\n\n  /** Next identifier for calendar instance. */\n  var nextUniqueId = 0;\n\n  /** The first renderable date in the virtual-scrolling calendar (for all instances). */\n  var firstRenderableDate = null;\n\n  /**\n   * Controller for the mdCalendar component.\n   * @ngInject @constructor\n   */\n  function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant,\n      $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {\n    $mdTheming($element);\n    /**\n     * Dummy array-like object for virtual-repeat to iterate over. The length is the total\n     * number of months that can be viewed. This is shorter than ideal because of (potential)\n     * Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1181658.\n     */\n    this.items = {length: 2000};\n\n    if (this.maxDate && this.minDate) {\n      // Limit the number of months if min and max dates are set.\n      var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;\n      numMonths = Math.max(numMonths, 1);\n      // Add an additional month as the final dummy month for rendering purposes.\n      numMonths += 1;\n      this.items.length = numMonths;\n    }\n\n    /** @final {!angular.$animate} */\n    this.$animate = $animate;\n\n    /** @final {!angular.$q} */\n    this.$q = $q;\n\n    /** @final */\n    this.$mdInkRipple = $mdInkRipple;\n\n    /** @final */\n    this.$mdUtil = $mdUtil;\n\n    /** @final */\n    this.keyCode = $mdConstant.KEY_CODE;\n\n    /** @final */\n    this.dateUtil = $$mdDateUtil;\n\n    /** @final */\n    this.dateLocale = $mdDateLocale;\n\n    /** @final {!angular.JQLite} */\n    this.$element = $element;\n\n    /** @final {!angular.Scope} */\n    this.$scope = $scope;\n\n    /** @final {HTMLElement} */\n    this.calendarElement = $element[0].querySelector('.md-calendar');\n\n    /** @final {HTMLElement} */\n    this.calendarScroller = $element[0].querySelector('.md-virtual-repeat-scroller');\n\n    /** @final {Date} */\n    this.today = this.dateUtil.createDateAtMidnight();\n\n    /** @type {Date} */\n    this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);\n\n    if (this.minDate && this.minDate > this.firstRenderableDate) {\n      this.firstRenderableDate = this.minDate;\n    } else if (this.maxDate) {\n      // Calculate the difference between the start date and max date.\n      // Subtract 1 because it's an inclusive difference and 1 for the final dummy month.\n      //\n      var monthDifference = this.items.length - 2;\n      this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));\n    }\n\n\n    /** @final {number} Unique ID for this calendar instance. */\n    this.id = nextUniqueId++;\n\n    /** @type {!angular.NgModelController} */\n    this.ngModelCtrl = null;\n\n    /**\n     * The selected date. Keep track of this separately from the ng-model value so that we\n     * can know, when the ng-model value changes, what the previous value was before its updated\n     * in the component's UI.\n     *\n     * @type {Date}\n     */\n    this.selectedDate = null;\n\n    /**\n     * The date that is currently focused or showing in the calendar. This will initially be set\n     * to the ng-model value if set, otherwise to today. It will be updated as the user navigates\n     * to other months. The cell corresponding to the displayDate does not necesarily always have\n     * focus in the document (such as for cases when the user is scrolling the calendar).\n     * @type {Date}\n     */\n    this.displayDate = null;\n\n    /**\n     * The date that has or should have focus.\n     * @type {Date}\n     */\n    this.focusDate = null;\n\n    /** @type {boolean} */\n    this.isInitialized = false;\n\n    /** @type {boolean} */\n    this.isMonthTransitionInProgress = false;\n\n    // Unless the user specifies so, the calendar should not be a tab stop.\n    // This is necessary because ngAria might add a tabindex to anything with an ng-model\n    // (based on whether or not the user has turned that particular feature on/off).\n    if (!$attrs['tabindex']) {\n      $element.attr('tabindex', '-1');\n    }\n\n    var self = this;\n\n    /**\n     * Handles a click event on a date cell.\n     * Created here so that every cell can use the same function instance.\n     * @this {HTMLTableCellElement} The cell that was clicked.\n     */\n    this.cellClickHandler = function() {\n      var cellElement = this;\n      if (this.hasAttribute('data-timestamp')) {\n        $scope.$apply(function() {\n          var timestamp = Number(cellElement.getAttribute('data-timestamp'));\n          self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));\n        });\n      }\n    };\n\n    this.attachCalendarEventListeners();\n  }\n  CalendarCtrl.$inject = [\"$element\", \"$attrs\", \"$scope\", \"$animate\", \"$q\", \"$mdConstant\", \"$mdTheming\", \"$$mdDateUtil\", \"$mdDateLocale\", \"$mdInkRipple\", \"$mdUtil\"];\n\n\n  /*** Initialization ***/\n\n  /**\n   * Sets up the controller's reference to ngModelController.\n   * @param {!angular.NgModelController} ngModelCtrl\n   */\n  CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {\n    this.ngModelCtrl = ngModelCtrl;\n\n    var self = this;\n    ngModelCtrl.$render = function() {\n      self.changeSelectedDate(self.ngModelCtrl.$viewValue);\n    };\n  };\n\n  /**\n   * Initialize the calendar by building the months that are initially visible.\n   * Initialization should occur after the ngModel value is known.\n   */\n  CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {\n    this.buildWeekHeader();\n    this.hideVerticalScrollbar();\n\n    this.displayDate = this.selectedDate || this.today;\n    this.isInitialized = true;\n  };\n\n  /**\n   * Hides the vertical scrollbar on the calendar scroller by setting the width on the\n   * calendar scroller and the `overflow: hidden` wrapper around the scroller, and then setting\n   * a padding-right on the scroller equal to the width of the browser's scrollbar.\n   *\n   * This will cause a reflow.\n   */\n  CalendarCtrl.prototype.hideVerticalScrollbar = function() {\n    var element = this.$element[0];\n\n    var scrollMask = element.querySelector('.md-calendar-scroll-mask');\n    var scroller = this.calendarScroller;\n\n    var headerWidth = element.querySelector('.md-calendar-day-header').clientWidth;\n    var scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;\n\n    scrollMask.style.width = headerWidth + 'px';\n    scroller.style.width = (headerWidth + scrollbarWidth) + 'px';\n    scroller.style.paddingRight = scrollbarWidth + 'px';\n  };\n\n\n  /** Attach event listeners for the calendar. */\n  CalendarCtrl.prototype.attachCalendarEventListeners = function() {\n    // Keyboard interaction.\n    this.$element.on('keydown', angular.bind(this, this.handleKeyEvent));\n  };\n  \n  /*** User input handling ***/\n\n  /**\n   * Handles a key event in the calendar with the appropriate action. The action will either\n   * be to select the focused date or to navigate to focus a new date.\n   * @param {KeyboardEvent} event\n   */\n  CalendarCtrl.prototype.handleKeyEvent = function(event) {\n    var self = this;\n    this.$scope.$apply(function() {\n      // Capture escape and emit back up so that a wrapping component\n      // (such as a date-picker) can decide to close.\n      if (event.which == self.keyCode.ESCAPE || event.which == self.keyCode.TAB) {\n        self.$scope.$emit('md-calendar-close');\n\n        if (event.which == self.keyCode.TAB) {\n          event.preventDefault();\n        }\n\n        return;\n      }\n\n      // Remaining key events fall into two categories: selection and navigation.\n      // Start by checking if this is a selection event.\n      if (event.which === self.keyCode.ENTER) {\n        self.setNgModelValue(self.displayDate);\n        event.preventDefault();\n        return;\n      }\n\n      // Selection isn't occuring, so the key event is either navigation or nothing.\n      var date = self.getFocusDateFromKeyEvent(event);\n      if (date) {\n        date = self.boundDateByMinAndMax(date);\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Since this is a keyboard interaction, actually give the newly focused date keyboard\n        // focus after the been brought into view.\n        self.changeDisplayDate(date).then(function () {\n          self.focus(date);\n        });\n      }\n    });\n  };\n\n  /**\n   * Gets the date to focus as the result of a key event.\n   * @param {KeyboardEvent} event\n   * @returns {Date} Date to navigate to, or null if the key does not match a calendar shortcut.\n   */\n  CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {\n    var dateUtil = this.dateUtil;\n    var keyCode = this.keyCode;\n\n    switch (event.which) {\n      case keyCode.RIGHT_ARROW: return dateUtil.incrementDays(this.displayDate, 1);\n      case keyCode.LEFT_ARROW: return dateUtil.incrementDays(this.displayDate, -1);\n      case keyCode.DOWN_ARROW:\n        return event.metaKey ?\n          dateUtil.incrementMonths(this.displayDate, 1) :\n          dateUtil.incrementDays(this.displayDate, 7);\n      case keyCode.UP_ARROW:\n        return event.metaKey ?\n          dateUtil.incrementMonths(this.displayDate, -1) :\n          dateUtil.incrementDays(this.displayDate, -7);\n      case keyCode.PAGE_DOWN: return dateUtil.incrementMonths(this.displayDate, 1);\n      case keyCode.PAGE_UP: return dateUtil.incrementMonths(this.displayDate, -1);\n      case keyCode.HOME: return dateUtil.getFirstDateOfMonth(this.displayDate);\n      case keyCode.END: return dateUtil.getLastDateOfMonth(this.displayDate);\n      default: return null;\n    }\n  };\n\n  /**\n   * Gets the \"index\" of the currently selected date as it would be in the virtual-repeat.\n   * @returns {number}\n   */\n  CalendarCtrl.prototype.getSelectedMonthIndex = function() {\n    return this.dateUtil.getMonthDistance(this.firstRenderableDate,\n        this.selectedDate || this.today);\n  };\n\n  /**\n   * Scrolls to the month of the given date.\n   * @param {Date} date\n   */\n  CalendarCtrl.prototype.scrollToMonth = function(date) {\n    if (!this.dateUtil.isValidDate(date)) {\n      return;\n    }\n\n    var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);\n    this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;\n  };\n\n  /**\n   * Sets the ng-model value for the calendar and emits a change event.\n   * @param {Date} date\n   */\n  CalendarCtrl.prototype.setNgModelValue = function(date) {\n    this.$scope.$emit('md-calendar-change', date);\n    this.ngModelCtrl.$setViewValue(date);\n    this.ngModelCtrl.$render();\n  };\n\n  /**\n   * Focus the cell corresponding to the given date.\n   * @param {Date=} opt_date\n   */\n  CalendarCtrl.prototype.focus = function(opt_date) {\n    var date = opt_date || this.selectedDate || this.today;\n\n    var previousFocus = this.calendarElement.querySelector('.md-focus');\n    if (previousFocus) {\n      previousFocus.classList.remove(FOCUSED_DATE_CLASS);\n    }\n\n    var cellId = this.getDateId(date);\n    var cell = document.getElementById(cellId);\n    if (cell) {\n      cell.classList.add(FOCUSED_DATE_CLASS);\n      cell.focus();\n    } else {\n      this.focusDate = date;\n    }\n  };\n\n  /**\n   * If a date exceeds minDate or maxDate, returns date matching minDate or maxDate, respectively.\n   * Otherwise, returns the date.\n   * @param {Date} date\n   * @return {Date}\n   */\n  CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {\n    var boundDate = date;\n    if (this.minDate && date < this.minDate) {\n      boundDate = new Date(this.minDate.getTime());\n    }\n    if (this.maxDate && date > this.maxDate) {\n      boundDate = new Date(this.maxDate.getTime());\n    }\n    return boundDate;\n  };\n\n  /*** Updating the displayed / selected date ***/\n\n  /**\n   * Change the selected date in the calendar (ngModel value has already been changed).\n   * @param {Date} date\n   */\n  CalendarCtrl.prototype.changeSelectedDate = function(date) {\n    var self = this;\n    var previousSelectedDate = this.selectedDate;\n    this.selectedDate = date;\n    this.changeDisplayDate(date).then(function() {\n\n      // Remove the selected class from the previously selected date, if any.\n      if (previousSelectedDate) {\n        var prevDateCell =\n            document.getElementById(self.getDateId(previousSelectedDate));\n        if (prevDateCell) {\n          prevDateCell.classList.remove(SELECTED_DATE_CLASS);\n          prevDateCell.setAttribute('aria-selected', 'false');\n        }\n      }\n\n      // Apply the select class to the new selected date if it is set.\n      if (date) {\n        var dateCell = document.getElementById(self.getDateId(date));\n        if (dateCell) {\n          dateCell.classList.add(SELECTED_DATE_CLASS);\n          dateCell.setAttribute('aria-selected', 'true');\n        }\n      }\n    });\n  };\n\n\n  /**\n   * Change the date that is being shown in the calendar. If the given date is in a different\n   * month, the displayed month will be transitioned.\n   * @param {Date} date\n   */\n  CalendarCtrl.prototype.changeDisplayDate = function(date) {\n    // Initialization is deferred until this function is called because we want to reflect\n    // the starting value of ngModel.\n    if (!this.isInitialized) {\n      this.buildInitialCalendarDisplay();\n      return this.$q.when();\n    }\n\n    // If trying to show an invalid date or a transition is in progress, do nothing.\n    if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) {\n      return this.$q.when();\n    }\n\n    this.isMonthTransitionInProgress = true;\n    var animationPromise = this.animateDateChange(date);\n\n    this.displayDate = date;\n\n    var self = this;\n    animationPromise.then(function() {\n      self.isMonthTransitionInProgress = false;\n    });\n\n    return animationPromise;\n  };\n\n  /**\n   * Animates the transition from the calendar's current month to the given month.\n   * @param {Date} date\n   * @returns {angular.$q.Promise} The animation promise.\n   */\n  CalendarCtrl.prototype.animateDateChange = function(date) {\n    this.scrollToMonth(date);\n    return this.$q.when();\n  };\n\n  /*** Constructing the calendar table ***/\n\n  /**\n   * Builds and appends a day-of-the-week header to the calendar.\n   * This should only need to be called once during initialization.\n   */\n  CalendarCtrl.prototype.buildWeekHeader = function() {\n    var firstDayOfWeek = this.dateLocale.firstDayOfWeek;\n    var shortDays = this.dateLocale.shortDays;\n\n    var row = document.createElement('tr');\n    for (var i = 0; i < 7; i++) {\n      var th = document.createElement('th');\n      th.textContent = shortDays[(i + firstDayOfWeek) % 7];\n      row.appendChild(th);\n    }\n\n    this.$element.find('thead').append(row);\n  };\n\n    /**\n   * Gets an identifier for a date unique to the calendar instance for internal\n   * purposes. Not to be displayed.\n   * @param {Date} date\n   * @returns {string}\n   */\n  CalendarCtrl.prototype.getDateId = function(date) {\n    return [\n      'md',\n      this.id,\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate()\n    ].join('-');\n  };\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n\n  angular.module('material.components.datepicker')\n      .directive('mdCalendarMonth', mdCalendarMonthDirective);\n\n\n  /**\n   * Private directive consumed by md-calendar. Having this directive lets the calender use\n   * md-virtual-repeat and also cleanly separates the month DOM construction functions from\n   * the rest of the calendar controller logic.\n   */\n  function mdCalendarMonthDirective() {\n    return {\n      require: ['^^mdCalendar', 'mdCalendarMonth'],\n      scope: {offset: '=mdMonthOffset'},\n      controller: CalendarMonthCtrl,\n      controllerAs: 'mdMonthCtrl',\n      bindToController: true,\n      link: function(scope, element, attrs, controllers) {\n        var calendarCtrl = controllers[0];\n        var monthCtrl = controllers[1];\n\n        monthCtrl.calendarCtrl = calendarCtrl;\n        monthCtrl.generateContent();\n\n        // The virtual-repeat re-uses the same DOM elements, so there are only a limited number\n        // of repeated items that are linked, and then those elements have their bindings updataed.\n        // Since the months are not generated by bindings, we simply regenerate the entire thing\n        // when the binding (offset) changes.\n        scope.$watch(function() { return monthCtrl.offset; }, function(offset, oldOffset) {\n          if (offset != oldOffset) {\n            monthCtrl.generateContent();\n          }\n        });\n      }\n    };\n  }\n\n  /** Class applied to the cell for today. */\n  var TODAY_CLASS = 'md-calendar-date-today';\n\n  /** Class applied to the selected date cell/. */\n  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';\n\n  /** Class applied to the focused date cell/. */\n  var FOCUSED_DATE_CLASS = 'md-focus';\n\n  /**\n   * Controller for a single calendar month.\n   * @ngInject @constructor\n   */\n  function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {\n    this.dateUtil = $$mdDateUtil;\n    this.dateLocale = $mdDateLocale;\n    this.$element = $element;\n    this.calendarCtrl = null;\n\n    /**\n     * Number of months from the start of the month \"items\" that the currently rendered month\n     * occurs. Set via angular data binding.\n     * @type {number}\n     */\n    this.offset;\n\n    /**\n     * Date cell to focus after appending the month to the document.\n     * @type {HTMLElement}\n     */\n    this.focusAfterAppend = null;\n  }\n  CalendarMonthCtrl.$inject = [\"$element\", \"$$mdDateUtil\", \"$mdDateLocale\"];\n\n  /** Generate and append the content for this month to the directive element. */\n  CalendarMonthCtrl.prototype.generateContent = function() {\n    var calendarCtrl = this.calendarCtrl;\n    var date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);\n\n    this.$element.empty();\n    this.$element.append(this.buildCalendarForMonth(date));\n\n    if (this.focusAfterAppend) {\n      this.focusAfterAppend.classList.add(FOCUSED_DATE_CLASS);\n      this.focusAfterAppend.focus();\n      this.focusAfterAppend = null;\n    }\n  };\n\n  /**\n   * Creates a single cell to contain a date in the calendar with all appropriate\n   * attributes and classes added. If a date is given, the cell content will be set\n   * based on the date.\n   * @param {Date=} opt_date\n   * @returns {HTMLElement}\n   */\n  CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {\n    var calendarCtrl = this.calendarCtrl;\n\n    // TODO(jelbourn): cloneNode is likely a faster way of doing this.\n    var cell = document.createElement('td');\n    cell.tabIndex = -1;\n    cell.classList.add('md-calendar-date');\n    cell.setAttribute('role', 'gridcell');\n\n    if (opt_date) {\n      cell.setAttribute('tabindex', '-1');\n      cell.setAttribute('aria-label', this.dateLocale.longDateFormatter(opt_date));\n      cell.id = calendarCtrl.getDateId(opt_date);\n\n      // Use `data-timestamp` attribute because IE10 does not support the `dataset` property.\n      cell.setAttribute('data-timestamp', opt_date.getTime());\n\n      // TODO(jelourn): Doing these comparisons for class addition during generation might be slow.\n      // It may be better to finish the construction and then query the node and add the class.\n      if (this.dateUtil.isSameDay(opt_date, calendarCtrl.today)) {\n        cell.classList.add(TODAY_CLASS);\n      }\n\n      if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) &&\n          this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {\n        cell.classList.add(SELECTED_DATE_CLASS);\n        cell.setAttribute('aria-selected', 'true');\n      }\n\n      var cellText = this.dateLocale.dates[opt_date.getDate()];\n\n      if (this.dateUtil.isDateWithinRange(opt_date,\n          this.calendarCtrl.minDate, this.calendarCtrl.maxDate)) {\n        // Add a indicator for select, hover, and focus states.\n        var selectionIndicator = document.createElement('span');\n        cell.appendChild(selectionIndicator);\n        selectionIndicator.classList.add('md-calendar-date-selection-indicator');\n        selectionIndicator.textContent = cellText;\n\n        cell.addEventListener('click', calendarCtrl.cellClickHandler);\n\n        if (calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate)) {\n          this.focusAfterAppend = cell;\n        }\n      } else {\n        cell.classList.add('md-calendar-date-disabled');\n        cell.textContent = cellText;\n      }\n    }\n\n    return cell;\n  };\n\n  /**\n   * Builds a `tr` element for the calendar grid.\n   * @param rowNumber The week number within the month.\n   * @returns {HTMLElement}\n   */\n  CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {\n    var row = document.createElement('tr');\n    row.setAttribute('role', 'row');\n\n    // Because of an NVDA bug (with Firefox), the row needs an aria-label in order\n    // to prevent the entire row being read aloud when the user moves between rows.\n    // See http://community.nvda-project.org/ticket/4643.\n    row.setAttribute('aria-label', this.dateLocale.weekNumberFormatter(rowNumber));\n\n    return row;\n  };\n\n  /**\n   * Builds the <tbody> content for the given date's month.\n   * @param {Date=} opt_dateInMonth\n   * @returns {DocumentFragment} A document fragment containing the <tr> elements.\n   */\n  CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {\n    var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date();\n\n    var firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date);\n    var firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth);\n    var numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date);\n\n    // Store rows for the month in a document fragment so that we can append them all at once.\n    var monthBody = document.createDocumentFragment();\n\n    var rowNumber = 1;\n    var row = this.buildDateRow(rowNumber);\n    monthBody.appendChild(row);\n\n    // If this is the final month in the list of items, only the first week should render,\n    // so we should return immediately after the first row is complete and has been\n    // attached to the body.\n    var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1;\n\n    // Add a label for the month. If the month starts on a Sun/Mon/Tues, the month label\n    // goes on a row above the first of the month. Otherwise, the month label takes up the first\n    // two cells of the first row.\n    var blankCellOffset = 0;\n    var monthLabelCell = document.createElement('td');\n    monthLabelCell.classList.add('md-calendar-month-label');\n    // If the entire month is after the max date, render the label as a disabled state.\n    if (this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate) {\n      monthLabelCell.classList.add('md-calendar-month-label-disabled');\n    }\n    monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);\n    if (firstDayOfTheWeek <= 2) {\n      monthLabelCell.setAttribute('colspan', '7');\n\n      var monthLabelRow = this.buildDateRow();\n      monthLabelRow.appendChild(monthLabelCell);\n      monthBody.insertBefore(monthLabelRow, row);\n\n      if (isFinalMonth) {\n        return monthBody;\n      }\n    } else {\n      blankCellOffset = 2;\n      monthLabelCell.setAttribute('colspan', '2');\n      row.appendChild(monthLabelCell);\n    }\n\n    // Add a blank cell for each day of the week that occurs before the first of the month.\n    // For example, if the first day of the month is a Tuesday, add blank cells for Sun and Mon.\n    // The blankCellOffset is needed in cases where the first N cells are used by the month label.\n    for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) {\n      row.appendChild(this.buildDateCell());\n    }\n\n    // Add a cell for each day of the month, keeping track of the day of the week so that\n    // we know when to start a new row.\n    var dayOfWeek = firstDayOfTheWeek;\n    var iterationDate = firstDayOfMonth;\n    for (var d = 1; d <= numberOfDaysInMonth; d++) {\n      // If we've reached the end of the week, start a new row.\n      if (dayOfWeek === 7) {\n        // We've finished the first row, so we're done if this is the final month.\n        if (isFinalMonth) {\n          return monthBody;\n        }\n        dayOfWeek = 0;\n        rowNumber++;\n        row = this.buildDateRow(rowNumber);\n        monthBody.appendChild(row);\n      }\n\n      iterationDate.setDate(d);\n      var cell = this.buildDateCell(iterationDate);\n      row.appendChild(cell);\n\n      dayOfWeek++;\n    }\n\n    // Ensure that the last row of the month has 7 cells.\n    while (row.childNodes.length < 7) {\n      row.appendChild(this.buildDateCell());\n    }\n\n    // Ensure that all months have 6 rows. This is necessary for now because the virtual-repeat\n    // requires that all items have exactly the same height.\n    while (monthBody.childNodes.length < 6) {\n      var whitespaceRow = this.buildDateRow();\n      for (var i = 0; i < 7; i++) {\n        whitespaceRow.appendChild(this.buildDateCell());\n      }\n      monthBody.appendChild(whitespaceRow);\n    }\n\n    return monthBody;\n  };\n\n  /**\n   * Gets the day-of-the-week index for a date for the current locale.\n   * @private\n   * @param {Date} date\n   * @returns {number} The column index of the date in the calendar.\n   */\n  CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {\n    return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7\n  };\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name $mdDateLocaleProvider\n   * @module material.components.datepicker\n   *\n   * @description\n   * The `$mdDateLocaleProvider` is the provider that creates the `$mdDateLocale` service.\n   * This provider that allows the user to specify messages, formatters, and parsers for date\n   * internationalization. The `$mdDateLocale` service itself is consumed by Angular Material\n   * components that that deal with dates.\n   *\n   * @property {(Array<string>)=} months Array of month names (in order).\n   * @property {(Array<string>)=} shortMonths Array of abbreviated month names.\n   * @property {(Array<string>)=} days Array of the days of the week (in order).\n   * @property {(Array<string>)=} shortDays Array of abbreviated dayes of the week.\n   * @property {(Array<string>)=} dates Array of dates of the month. Only necessary for locales\n   *     using a numeral system other than [1, 2, 3...].\n   * @property {(Array<string>)=} firstDayOfWeek The first day of the week. Sunday = 0, Monday = 1,\n   *    etc.\n   * @property {(function(string): Date)=} parseDate Function to parse a date object from a string.\n   * @property {(function(Date): string)=} formatDate Function to format a date object to a string.\n   * @property {(function(Date): string)=} monthHeaderFormatter Function that returns the label for\n   *     a month given a date.\n   * @property {(function(number): string)=} weekNumberFormatter Function that returns a label for\n   *     a week given the week number.\n   * @property {(string)=} msgCalendar Translation of the label \"Calendar\" for the current locale.\n   * @property {(string)=} msgOpenCalendar Translation of the button label \"Open calendar\" for the\n   *     current locale.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   *   myAppModule.config(function($mdDateLocaleProvider) {\n   *\n   *     // Example of a French localization.\n   *     $mdDateLocaleProvider.months = ['janvier', 'février', 'mars', ...];\n   *     $mdDateLocaleProvider.shortMonths = ['janv', 'févr', 'mars', ...];\n   *     $mdDateLocaleProvider.days = ['dimanche', 'lundi', 'mardi', ...];\n   *     $mdDateLocaleProvider.shortDays = ['Di', 'Lu', 'Ma', ...];\n   *\n   *     // Can change week display to start on Monday.\n   *     $mdDateLocaleProvider.firstDayOfWeek = 1;\n   *\n   *     // Optional.\n   *     $mdDateLocaleProvider.dates = [1, 2, 3, 4, 5, 6, ...];\n   *\n   *     // Example uses moment.js to parse and format dates.\n   *     $mdDateLocaleProvider.parseDate = function(dateString) {\n   *       var m = moment(dateString, 'L', true);\n   *       return m.isValid() ? m.toDate() : new Date(NaN);\n   *     };\n   *\n   *     $mdDateLocaleProvider.formatDate = function(date) {\n   *       return moment(date).format('L');\n   *     };\n   *\n   *     $mdDateLocaleProvider.monthHeaderFormatter = function(date) {\n   *       return myShortMonths[date.getMonth()] + ' ' + date.getFullYear();\n   *     };\n   *\n   *     // In addition to date display, date components also need localized messages\n   *     // for aria-labels for screen-reader users.\n   *\n   *     $mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {\n   *       return 'Semaine ' + weekNumber;\n   *     };\n   *\n   *     $mdDateLocaleProvider.msgCalendar = 'Calendrier';\n   *     $mdDateLocaleProvider.msgOpenCalendar = 'Ouvrir le calendrier';\n   *\n   * });\n   * </hljs>\n   *\n   */\n\n  angular.module('material.components.datepicker').config([\"$provide\", function($provide) {\n    // TODO(jelbourn): Assert provided values are correctly formatted. Need assertions.\n\n    /** @constructor */\n    function DateLocaleProvider() {\n      /** Array of full month names. E.g., ['January', 'Febuary', ...] */\n      this.months = null;\n\n      /** Array of abbreviated month names. E.g., ['Jan', 'Feb', ...] */\n      this.shortMonths = null;\n\n      /** Array of full day of the week names. E.g., ['Monday', 'Tuesday', ...] */\n      this.days = null;\n\n      /** Array of abbreviated dat of the week names. E.g., ['M', 'T', ...] */\n      this.shortDays = null;\n\n      /** Array of dates of a month (1 - 31). Characters might be different in some locales. */\n      this.dates = null;\n\n      /** Index of the first day of the week. 0 = Sunday, 1 = Monday, etc. */\n      this.firstDayOfWeek = 0;\n\n      /**\n       * Function that converts the date portion of a Date to a string.\n       * @type {(function(Date): string)}\n       */\n      this.formatDate = null;\n\n      /**\n       * Function that converts a date string to a Date object (the date portion)\n       * @type {function(string): Date}\n       */\n      this.parseDate = null;\n\n      /**\n       * Function that formats a Date into a month header string.\n       * @type {function(Date): string}\n       */\n      this.monthHeaderFormatter = null;\n\n      /**\n       * Function that formats a week number into a label for the week.\n       * @type {function(number): string}\n       */\n      this.weekNumberFormatter = null;\n\n      /**\n       * Function that formats a date into a long aria-label that is read\n       * when the focused date changes.\n       * @type {function(Date): string}\n       */\n      this.longDateFormatter = null;\n\n      /**\n       * ARIA label for the calendar \"dialog\" used in the datepicker.\n       * @type {string}\n       */\n      this.msgCalendar = '';\n\n      /**\n       * ARIA label for the datepicker's \"Open calendar\" buttons.\n       * @type {string}\n       */\n      this.msgOpenCalendar = '';\n    }\n\n    /**\n     * Factory function that returns an instance of the dateLocale service.\n     * @ngInject\n     * @param $locale\n     * @returns {DateLocale}\n     */\n    DateLocaleProvider.prototype.$get = function($locale) {\n      /**\n       * Default date-to-string formatting function.\n       * @param {!Date} date\n       * @returns {string}\n       */\n      function defaultFormatDate(date) {\n        if (!date) {\n          return '';\n        }\n\n        // All of the dates created through ng-material *should* be set to midnight.\n        // If we encounter a date where the localeTime shows at 11pm instead of midnight,\n        // we have run into an issue with DST where we need to increment the hour by one:\n        // var d = new Date(1992, 9, 8, 0, 0, 0);\n        // d.toLocaleString(); // == \"10/7/1992, 11:00:00 PM\"\n        var localeTime = date.toLocaleTimeString();\n        var formatDate = date;\n        if (date.getHours() == 0 &&\n            (localeTime.indexOf('11:') !== -1 || localeTime.indexOf('23:') !== -1)) {\n          formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0);\n        }\n\n        return formatDate.toLocaleDateString();\n      }\n\n      /**\n       * Default string-to-date parsing function.\n       * @param {string} dateString\n       * @returns {!Date}\n       */\n      function defaultParseDate(dateString) {\n        return new Date(dateString);\n      }\n\n      /**\n       * Default function to determine whether a string makes sense to be\n       * parsed to a Date object.\n       *\n       * This is very permissive and is just a basic sanity check to ensure that\n       * things like single integers aren't able to be parsed into dates.\n       * @param {string} dateString\n       * @returns {boolean}\n       */\n      function defaultIsDateComplete(dateString) {\n        dateString = dateString.trim();\n\n        // Looks for three chunks of content (either numbers or text) separated\n        // by delimiters.\n        var re = /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \\.,]+|[\\/\\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/;\n        return re.test(dateString);\n      }\n\n      /**\n       * Default date-to-string formatter to get a month header.\n       * @param {!Date} date\n       * @returns {string}\n       */\n      function defaultMonthHeaderFormatter(date) {\n        return service.shortMonths[date.getMonth()] + ' ' + date.getFullYear();\n      }\n\n      /**\n       * Default week number formatter.\n       * @param number\n       * @returns {string}\n       */\n      function defaultWeekNumberFormatter(number) {\n        return 'Week ' + number;\n      }\n\n      /**\n       * Default formatter for date cell aria-labels.\n       * @param {!Date} date\n       * @returns {string}\n       */\n      function defaultLongDateFormatter(date) {\n        // Example: 'Thursday June 18 2015'\n        return [\n          service.days[date.getDay()],\n          service.months[date.getMonth()],\n          service.dates[date.getDate()],\n          date.getFullYear()\n        ].join(' ');\n      }\n\n      // The default \"short\" day strings are the first character of each day,\n      // e.g., \"Monday\" => \"M\".\n      var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {\n        return day[0];\n      });\n\n      // The default dates are simply the numbers 1 through 31.\n      var defaultDates = Array(32);\n      for (var i = 1; i <= 31; i++) {\n        defaultDates[i] = i;\n      }\n\n      // Default ARIA messages are in English (US).\n      var defaultMsgCalendar = 'Calendar';\n      var defaultMsgOpenCalendar = 'Open calendar';\n\n      var service = {\n        months: this.months || $locale.DATETIME_FORMATS.MONTH,\n        shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,\n        days: this.days || $locale.DATETIME_FORMATS.DAY,\n        shortDays: this.shortDays || defaultShortDays,\n        dates: this.dates || defaultDates,\n        firstDayOfWeek: this.firstDayOfWeek || 0,\n        formatDate: this.formatDate || defaultFormatDate,\n        parseDate: this.parseDate || defaultParseDate,\n        isDateComplete: this.isDateComplete || defaultIsDateComplete,\n        monthHeaderFormatter: this.monthHeaderFormatter || defaultMonthHeaderFormatter,\n        weekNumberFormatter: this.weekNumberFormatter || defaultWeekNumberFormatter,\n        longDateFormatter: this.longDateFormatter || defaultLongDateFormatter,\n        msgCalendar: this.msgCalendar || defaultMsgCalendar,\n        msgOpenCalendar: this.msgOpenCalendar || defaultMsgOpenCalendar\n      };\n\n      return service;\n    };\n    DateLocaleProvider.prototype.$get.$inject = [\"$locale\"];\n\n    $provide.provider('$mdDateLocale', new DateLocaleProvider());\n  }]);\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  // POST RELEASE\n  // TODO(jelbourn): Demo that uses moment.js\n  // TODO(jelbourn): make sure this plays well with validation and ngMessages.\n  // TODO(jelbourn): calendar pane doesn't open up outside of visible viewport.\n  // TODO(jelbourn): forward more attributes to the internal input (required, autofocus, etc.)\n  // TODO(jelbourn): something better for mobile (calendar panel takes up entire screen?)\n  // TODO(jelbourn): input behavior (masking? auto-complete?)\n  // TODO(jelbourn): UTC mode\n  // TODO(jelbourn): RTL\n\n\n  angular.module('material.components.datepicker')\n      .directive('mdDatepicker', datePickerDirective);\n\n  /**\n   * @ngdoc directive\n   * @name mdDatepicker\n   * @module material.components.datepicker\n   *\n   * @param {Date} ng-model The component's model. Expects a JavaScript Date object.\n   * @param {expression=} ng-change Expression evaluated when the model value changes.\n   * @param {Date=} md-min-date Expression representing a min date (inclusive).\n   * @param {Date=} md-max-date Expression representing a max date (inclusive).\n   * @param {boolean=} disabled Whether the datepicker is disabled.\n   * @param {boolean=} required Whether a value is required for the datepicker.\n   *\n   * @description\n   * `<md-datepicker>` is a component used to select a single date.\n   * For information on how to configure internationalization for the date picker,\n   * see `$mdDateLocaleProvider`.\n   *\n   * This component supports [ngMessages](https://docs.angularjs.org/api/ngMessages/directive/ngMessages).\n   * Supported attributes are:\n   * * `required`: whether a required date is not set.\n   * * `mindate`: whether the selected date is before the minimum allowed date.\n   * * `maxdate`: whether the selected date is after the maximum allowed date.\n   *\n   * @usage\n   * <hljs lang=\"html\">\n   *   <md-datepicker ng-model=\"birthday\"></md-datepicker>\n   * </hljs>\n   *\n   */\n  function datePickerDirective() {\n    return {\n      template:\n          // Buttons are not in the tab order because users can open the calendar via keyboard\n          // interaction on the text input, and multiple tab stops for one component (picker)\n          // may be confusing.\n          '<md-button class=\"md-datepicker-button md-icon-button\" type=\"button\" ' +\n              'tabindex=\"-1\" aria-hidden=\"true\" ' +\n              'ng-click=\"ctrl.openCalendarPane($event)\">' +\n            '<md-icon class=\"md-datepicker-calendar-icon\" md-svg-icon=\"md-calendar\"></md-icon>' +\n          '</md-button>' +\n          '<div class=\"md-datepicker-input-container\" ' +\n              'ng-class=\"{\\'md-datepicker-focused\\': ctrl.isFocused}\">' +\n            '<input class=\"md-datepicker-input\" aria-haspopup=\"true\" ' +\n                'ng-focus=\"ctrl.setFocused(true)\" ng-blur=\"ctrl.setFocused(false)\">' +\n            '<md-button type=\"button\" md-no-ink ' +\n                'class=\"md-datepicker-triangle-button md-icon-button\" ' +\n                'ng-click=\"ctrl.openCalendarPane($event)\" ' +\n                'aria-label=\"{{::ctrl.dateLocale.msgOpenCalendar}}\">' +\n              '<div class=\"md-datepicker-expand-triangle\"></div>' +\n            '</md-button>' +\n          '</div>' +\n\n          // This pane will be detached from here and re-attached to the document body.\n          '<div class=\"md-datepicker-calendar-pane md-whiteframe-z1\">' +\n            '<div class=\"md-datepicker-input-mask\">' +\n              '<div class=\"md-datepicker-input-mask-opaque\"></div>' +\n            '</div>' +\n            '<div class=\"md-datepicker-calendar\">' +\n              '<md-calendar role=\"dialog\" aria-label=\"{{::ctrl.dateLocale.msgCalendar}}\" ' +\n                  'md-min-date=\"ctrl.minDate\" md-max-date=\"ctrl.maxDate\"' +\n                  'ng-model=\"ctrl.date\" ng-if=\"ctrl.isCalendarOpen\">' +\n              '</md-calendar>' +\n            '</div>' +\n          '</div>',\n      require: ['ngModel', 'mdDatepicker'],\n      scope: {\n        minDate: '=mdMinDate',\n        maxDate: '=mdMaxDate',\n        placeholder: '@mdPlaceholder'\n      },\n      controller: DatePickerCtrl,\n      controllerAs: 'ctrl',\n      bindToController: true,\n      link: function(scope, element, attr, controllers) {\n        var ngModelCtrl = controllers[0];\n        var mdDatePickerCtrl = controllers[1];\n\n        mdDatePickerCtrl.configureNgModel(ngModelCtrl);\n      }\n    };\n  }\n\n  /** Additional offset for the input's `size` attribute, which is updated based on its content. */\n  var EXTRA_INPUT_SIZE = 3;\n\n  /** Class applied to the container if the date is invalid. */\n  var INVALID_CLASS = 'md-datepicker-invalid';\n\n  /** Default time in ms to debounce input event by. */\n  var DEFAULT_DEBOUNCE_INTERVAL = 500;\n\n  /**\n   * Height of the calendar pane used to check if the pane is going outside the boundary of\n   * the viewport. See calendar.scss for how $md-calendar-height is computed; an extra 20px is\n   * also added to space the pane away from the exact edge of the screen.\n   *\n   *  This is computed statically now, but can be changed to be measured if the circumstances\n   *  of calendar sizing are changed.\n   */\n  var CALENDAR_PANE_HEIGHT = 368;\n\n  /**\n   * Width of the calendar pane used to check if the pane is going outside the boundary of\n   * the viewport. See calendar.scss for how $md-calendar-width is computed; an extra 20px is\n   * also added to space the pane away from the exact edge of the screen.\n   *\n   *  This is computed statically now, but can be changed to be measured if the circumstances\n   *  of calendar sizing are changed.\n   */\n  var CALENDAR_PANE_WIDTH = 360;\n\n  /**\n   * Controller for md-datepicker.\n   *\n   * @ngInject @constructor\n   */\n  function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $window,\n      $mdConstant, $mdTheming, $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {\n    /** @final */\n    this.$compile = $compile;\n\n    /** @final */\n    this.$timeout = $timeout;\n\n    /** @final */\n    this.$window = $window;\n\n    /** @final */\n    this.dateLocale = $mdDateLocale;\n\n    /** @final */\n    this.dateUtil = $$mdDateUtil;\n\n    /** @final */\n    this.$mdConstant = $mdConstant;\n\n    /* @final */\n    this.$mdUtil = $mdUtil;\n\n    /** @final */\n    this.$$rAF = $$rAF;\n\n    /** @type {!angular.NgModelController} */\n    this.ngModelCtrl = null;\n\n    /** @type {HTMLInputElement} */\n    this.inputElement = $element[0].querySelector('input');\n\n    /** @final {!angular.JQLite} */\n    this.ngInputElement = angular.element(this.inputElement);\n\n    /** @type {HTMLElement} */\n    this.inputContainer = $element[0].querySelector('.md-datepicker-input-container');\n\n    /** @type {HTMLElement} Floating calendar pane. */\n    this.calendarPane = $element[0].querySelector('.md-datepicker-calendar-pane');\n\n    /** @type {HTMLElement} Calendar icon button. */\n    this.calendarButton = $element[0].querySelector('.md-datepicker-button');\n\n    /**\n     * Element covering everything but the input in the top of the floating calendar pane.\n     * @type {HTMLElement}\n     */\n    this.inputMask = $element[0].querySelector('.md-datepicker-input-mask-opaque');\n\n    /** @final {!angular.JQLite} */\n    this.$element = $element;\n\n    /** @final {!angular.Attributes} */\n    this.$attrs = $attrs;\n\n    /** @final {!angular.Scope} */\n    this.$scope = $scope;\n\n    /** @type {Date} */\n    this.date = null;\n\n    /** @type {boolean} */\n    this.isFocused = false;\n\n    /** @type {boolean} */\n    this.isDisabled;\n    this.setDisabled($element[0].disabled || angular.isString($attrs['disabled']));\n\n    /** @type {boolean} Whether the date-picker's calendar pane is open. */\n    this.isCalendarOpen = false;\n\n    /**\n     * Element from which the calendar pane was opened. Keep track of this so that we can return\n     * focus to it when the pane is closed.\n     * @type {HTMLElement}\n     */\n    this.calendarPaneOpenedFrom = null;\n\n    this.calendarPane.id = 'md-date-pane' + $mdUtil.nextUid();\n\n    $mdTheming($element);\n\n    /** Pre-bound click handler is saved so that the event listener can be removed. */\n    this.bodyClickHandler = angular.bind(this, this.handleBodyClick);\n\n    /** Pre-bound resize handler so that the event listener can be removed. */\n    this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);\n\n    // Unless the user specifies so, the datepicker should not be a tab stop.\n    // This is necessary because ngAria might add a tabindex to anything with an ng-model\n    // (based on whether or not the user has turned that particular feature on/off).\n    if (!$attrs['tabindex']) {\n      $element.attr('tabindex', '-1');\n    }\n\n    this.installPropertyInterceptors();\n    this.attachChangeListeners();\n    this.attachInteractionListeners();\n\n    var self = this;\n    $scope.$on('$destroy', function() {\n      self.detachCalendarPane();\n    });\n  }\n  DatePickerCtrl.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$compile\", \"$timeout\", \"$window\", \"$mdConstant\", \"$mdTheming\", \"$mdUtil\", \"$mdDateLocale\", \"$$mdDateUtil\", \"$$rAF\"];\n\n  /**\n   * Sets up the controller's reference to ngModelController.\n   * @param {!angular.NgModelController} ngModelCtrl\n   */\n  DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {\n    this.ngModelCtrl = ngModelCtrl;\n\n    var self = this;\n    ngModelCtrl.$render = function() {\n      self.date = self.ngModelCtrl.$viewValue;\n      self.inputElement.value = self.dateLocale.formatDate(self.date);\n      self.resizeInputElement();\n      self.setErrorFlags();\n    };\n  };\n\n  /**\n   * Attach event listeners for both the text input and the md-calendar.\n   * Events are used instead of ng-model so that updates don't infinitely update the other\n   * on a change. This should also be more performant than using a $watch.\n   */\n  DatePickerCtrl.prototype.attachChangeListeners = function() {\n    var self = this;\n\n    self.$scope.$on('md-calendar-change', function(event, date) {\n      self.ngModelCtrl.$setViewValue(date);\n      self.date = date;\n      self.inputElement.value = self.dateLocale.formatDate(date);\n      self.closeCalendarPane();\n      self.resizeInputElement();\n      self.inputContainer.classList.remove(INVALID_CLASS);\n    });\n\n    self.ngInputElement.on('input', angular.bind(self, self.resizeInputElement));\n    // TODO(chenmike): Add ability for users to specify this interval.\n    self.ngInputElement.on('input', self.$mdUtil.debounce(self.handleInputEvent,\n        DEFAULT_DEBOUNCE_INTERVAL, self));\n  };\n\n  /** Attach event listeners for user interaction. */\n  DatePickerCtrl.prototype.attachInteractionListeners = function() {\n    var self = this;\n    var $scope = this.$scope;\n    var keyCodes = this.$mdConstant.KEY_CODE;\n\n    // Add event listener through angular so that we can triggerHandler in unit tests.\n    self.ngInputElement.on('keydown', function(event) {\n      if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {\n        self.openCalendarPane(event);\n        $scope.$digest();\n      }\n    });\n\n    $scope.$on('md-calendar-close', function() {\n      self.closeCalendarPane();\n    });\n  };\n\n  /**\n   * Capture properties set to the date-picker and imperitively handle internal changes.\n   * This is done to avoid setting up additional $watches.\n   */\n  DatePickerCtrl.prototype.installPropertyInterceptors = function() {\n    var self = this;\n\n    if (this.$attrs['ngDisabled']) {\n      // The expression is to be evaluated against the directive element's scope and not\n      // the directive's isolate scope.\n      var scope = this.$mdUtil.validateScope(this.$element) ? this.$element.scope() : null;\n\n      if ( scope ) {\n        scope.$watch(this.$attrs['ngDisabled'], function(isDisabled) {\n          self.setDisabled(isDisabled);\n        });\n      }\n    }\n\n    Object.defineProperty(this, 'placeholder', {\n      get: function() { return self.inputElement.placeholder; },\n      set: function(value) { self.inputElement.placeholder = value || ''; }\n    });\n  };\n\n  /**\n   * Sets whether the date-picker is disabled.\n   * @param {boolean} isDisabled\n   */\n  DatePickerCtrl.prototype.setDisabled = function(isDisabled) {\n    this.isDisabled = isDisabled;\n    this.inputElement.disabled = isDisabled;\n    this.calendarButton.disabled = isDisabled;\n  };\n\n  /**\n   * Sets the custom ngModel.$error flags to be consumed by ngMessages. Flags are:\n   *   - mindate: whether the selected date is before the minimum date.\n   *   - maxdate: whether the selected flag is after the maximum date.\n   */\n  DatePickerCtrl.prototype.setErrorFlags = function() {\n    if (this.dateUtil.isValidDate(this.date)) {\n      if (this.dateUtil.isValidDate(this.minDate)) {\n        this.ngModelCtrl.$error['mindate'] = this.date < this.minDate;\n      }\n\n      if (this.dateUtil.isValidDate(this.maxDate)) {\n        this.ngModelCtrl.$error['maxdate'] = this.date > this.maxDate;\n      }\n    }\n  };\n\n  /** Resizes the input element based on the size of its content. */\n  DatePickerCtrl.prototype.resizeInputElement = function() {\n    this.inputElement.size = this.inputElement.value.length + EXTRA_INPUT_SIZE;\n  };\n\n  /**\n   * Sets the model value if the user input is a valid date.\n   * Adds an invalid class to the input element if not.\n   */\n  DatePickerCtrl.prototype.handleInputEvent = function() {\n    var inputString = this.inputElement.value;\n    var parsedDate = this.dateLocale.parseDate(inputString);\n    this.dateUtil.setDateTimeToMidnight(parsedDate);\n    if (inputString === '') {\n      this.ngModelCtrl.$setViewValue(null);\n      this.date = null;\n      this.inputContainer.classList.remove(INVALID_CLASS);\n    } else if (this.dateUtil.isValidDate(parsedDate) &&\n        this.dateLocale.isDateComplete(inputString) &&\n        this.dateUtil.isDateWithinRange(parsedDate, this.minDate, this.maxDate)) {\n      this.ngModelCtrl.$setViewValue(parsedDate);\n      this.date = parsedDate;\n      this.inputContainer.classList.remove(INVALID_CLASS);\n    } else {\n      // If there's an input string, it's an invalid date.\n      this.inputContainer.classList.toggle(INVALID_CLASS, inputString);\n    }\n  };\n\n  /** Position and attach the floating calendar to the document. */\n  DatePickerCtrl.prototype.attachCalendarPane = function() {\n    var calendarPane = this.calendarPane;\n    calendarPane.style.transform = '';\n    this.$element.addClass('md-datepicker-open');\n\n    var elementRect = this.inputContainer.getBoundingClientRect();\n    var bodyRect = document.body.getBoundingClientRect();\n\n    // Check to see if the calendar pane would go off the screen. If so, adjust position\n    // accordingly to keep it within the viewport.\n    var paneTop = elementRect.top - bodyRect.top;\n    var paneLeft = elementRect.left - bodyRect.left;\n\n    var viewportTop = document.body.scrollTop;\n    var viewportBottom = viewportTop + this.$window.innerHeight;\n\n    var viewportLeft = document.body.scrollLeft;\n    var viewportRight = document.body.scrollLeft + this.$window.innerWidth;\n\n    // If the right edge of the pane would be off the screen and shifting it left by the\n    // difference would not go past the left edge of the screen. If the calendar pane is too\n    // big to fit on the screen at all, move it to the left of the screen and scale the entire\n    // element down to fit.\n    if (paneLeft + CALENDAR_PANE_WIDTH > viewportRight) {\n      if (viewportRight - CALENDAR_PANE_WIDTH > 0) {\n        paneLeft = viewportRight - CALENDAR_PANE_WIDTH;\n      } else {\n        paneLeft = viewportLeft;\n        var scale = this.$window.innerWidth / CALENDAR_PANE_WIDTH;\n        calendarPane.style.transform = 'scale(' + scale + ')';\n      }\n\n      calendarPane.classList.add('md-datepicker-pos-adjusted');\n    }\n\n    // If the bottom edge of the pane would be off the screen and shifting it up by the\n    // difference would not go past the top edge of the screen.\n    if (paneTop + CALENDAR_PANE_HEIGHT > viewportBottom &&\n        viewportBottom - CALENDAR_PANE_HEIGHT > viewportTop) {\n      paneTop = viewportBottom - CALENDAR_PANE_HEIGHT;\n      calendarPane.classList.add('md-datepicker-pos-adjusted');\n    }\n\n    calendarPane.style.left = paneLeft + 'px';\n    calendarPane.style.top = paneTop + 'px';\n    document.body.appendChild(calendarPane);\n\n    // The top of the calendar pane is a transparent box that shows the text input underneath.\n    // Since the pane is floating, though, the page underneath the pane *adjacent* to the input is\n    // also shown unless we cover it up. The inputMask does this by filling up the remaining space\n    // based on the width of the input.\n    this.inputMask.style.left = elementRect.width + 'px';\n\n    // Add CSS class after one frame to trigger open animation.\n    this.$$rAF(function() {\n      calendarPane.classList.add('md-pane-open');\n    });\n  };\n\n  /** Detach the floating calendar pane from the document. */\n  DatePickerCtrl.prototype.detachCalendarPane = function() {\n    this.$element.removeClass('md-datepicker-open');\n    this.calendarPane.classList.remove('md-pane-open');\n    this.calendarPane.classList.remove('md-datepicker-pos-adjusted');\n\n    if (this.calendarPane.parentNode) {\n      // Use native DOM removal because we do not want any of the angular state of this element\n      // to be disposed.\n      this.calendarPane.parentNode.removeChild(this.calendarPane);\n    }\n  };\n\n  /**\n   * Open the floating calendar pane.\n   * @param {Event} event\n   */\n  DatePickerCtrl.prototype.openCalendarPane = function(event) {\n    if (!this.isCalendarOpen && !this.isDisabled) {\n      this.isCalendarOpen = true;\n      this.calendarPaneOpenedFrom = event.target;\n      this.attachCalendarPane();\n      this.focusCalendar();\n\n      // Because the calendar pane is attached directly to the body, it is possible that the\n      // rest of the component (input, etc) is in a different scrolling container, such as\n      // an md-content. This means that, if the container is scrolled, the pane would remain\n      // stationary. To remedy this, we disable scrolling while the calendar pane is open, which\n      // also matches the native behavior for things like `<select>` on Mac and Windows.\n      this.$mdUtil.disableScrollAround(this.calendarPane);\n\n      // Attach click listener inside of a timeout because, if this open call was triggered by a\n      // click, we don't want it to be immediately propogated up to the body and handled.\n      var self = this;\n      this.$mdUtil.nextTick(function() {\n        document.body.addEventListener('click', self.bodyClickHandler);\n      }, false);\n\n      window.addEventListener('resize', this.windowResizeHandler);\n    }\n  };\n\n  /** Close the floating calendar pane. */\n  DatePickerCtrl.prototype.closeCalendarPane = function() {\n    if (this.isCalendarOpen) {\n      this.isCalendarOpen = false;\n      this.detachCalendarPane();\n      this.calendarPaneOpenedFrom.focus();\n      this.calendarPaneOpenedFrom = null;\n      this.$mdUtil.enableScrolling();\n\n      document.body.removeEventListener('click', this.bodyClickHandler);\n      window.removeEventListener('resize', this.windowResizeHandler);\n    }\n  };\n\n  /** Gets the controller instance for the calendar in the floating pane. */\n  DatePickerCtrl.prototype.getCalendarCtrl = function() {\n    return angular.element(this.calendarPane.querySelector('md-calendar')).controller('mdCalendar');\n  };\n\n  /** Focus the calendar in the floating pane. */\n  DatePickerCtrl.prototype.focusCalendar = function() {\n    // Use a timeout in order to allow the calendar to be rendered, as it is gated behind an ng-if.\n    var self = this;\n    this.$mdUtil.nextTick(function() {\n      self.getCalendarCtrl().focus();\n    }, false);\n  };\n\n  /**\n   * Sets whether the input is currently focused.\n   * @param {boolean} isFocused\n   */\n  DatePickerCtrl.prototype.setFocused = function(isFocused) {\n    this.isFocused = isFocused;\n  };\n\n  /**\n   * Handles a click on the document body when the floating calendar pane is open.\n   * Closes the floating calendar pane if the click is not inside of it.\n   * @param {MouseEvent} event\n   */\n  DatePickerCtrl.prototype.handleBodyClick = function(event) {\n    if (this.isCalendarOpen) {\n      // TODO(jelbourn): way want to also include the md-datepicker itself in this check.\n      var isInCalendar = this.$mdUtil.getClosest(event.target, 'md-calendar');\n      if (!isInCalendar) {\n        this.closeCalendarPane();\n      }\n\n      this.$scope.$digest();\n    }\n  };\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * Utility for performing date calculations to facilitate operation of the calendar and\n   * datepicker.\n   */\n  angular.module('material.components.datepicker').factory('$$mdDateUtil', function() {\n    return {\n      getFirstDateOfMonth: getFirstDateOfMonth,\n      getNumberOfDaysInMonth: getNumberOfDaysInMonth,\n      getDateInNextMonth: getDateInNextMonth,\n      getDateInPreviousMonth: getDateInPreviousMonth,\n      isInNextMonth: isInNextMonth,\n      isInPreviousMonth: isInPreviousMonth,\n      getDateMidpoint: getDateMidpoint,\n      isSameMonthAndYear: isSameMonthAndYear,\n      getWeekOfMonth: getWeekOfMonth,\n      incrementDays: incrementDays,\n      incrementMonths: incrementMonths,\n      getLastDateOfMonth: getLastDateOfMonth,\n      isSameDay: isSameDay,\n      getMonthDistance: getMonthDistance,\n      isValidDate: isValidDate,\n      setDateTimeToMidnight: setDateTimeToMidnight,\n      createDateAtMidnight: createDateAtMidnight,\n      isDateWithinRange: isDateWithinRange\n    };\n\n    /**\n     * Gets the first day of the month for the given date's month.\n     * @param {Date} date\n     * @returns {Date}\n     */\n    function getFirstDateOfMonth(date) {\n      return new Date(date.getFullYear(), date.getMonth(), 1);\n    }\n\n    /**\n     * Gets the number of days in the month for the given date's month.\n     * @param date\n     * @returns {number}\n     */\n    function getNumberOfDaysInMonth(date) {\n      return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n    }\n\n    /**\n     * Get an arbitrary date in the month after the given date's month.\n     * @param date\n     * @returns {Date}\n     */\n    function getDateInNextMonth(date) {\n      return new Date(date.getFullYear(), date.getMonth() + 1, 1);\n    }\n\n    /**\n     * Get an arbitrary date in the month before the given date's month.\n     * @param date\n     * @returns {Date}\n     */\n    function getDateInPreviousMonth(date) {\n      return new Date(date.getFullYear(), date.getMonth() - 1, 1);\n    }\n\n    /**\n     * Gets whether two dates have the same month and year.\n     * @param {Date} d1\n     * @param {Date} d2\n     * @returns {boolean}\n     */\n    function isSameMonthAndYear(d1, d2) {\n      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();\n    }\n\n    /**\n     * Gets whether two dates are the same day (not not necesarily the same time).\n     * @param {Date} d1\n     * @param {Date} d2\n     * @returns {boolean}\n     */\n    function isSameDay(d1, d2) {\n      return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);\n    }\n\n    /**\n     * Gets whether a date is in the month immediately after some date.\n     * @param {Date} startDate The date from which to compare.\n     * @param {Date} endDate The date to check.\n     * @returns {boolean}\n     */\n    function isInNextMonth(startDate, endDate) {\n      var nextMonth = getDateInNextMonth(startDate);\n      return isSameMonthAndYear(nextMonth, endDate);\n    }\n\n    /**\n     * Gets whether a date is in the month immediately before some date.\n     * @param {Date} startDate The date from which to compare.\n     * @param {Date} endDate The date to check.\n     * @returns {boolean}\n     */\n    function isInPreviousMonth(startDate, endDate) {\n      var previousMonth = getDateInPreviousMonth(startDate);\n      return isSameMonthAndYear(endDate, previousMonth);\n    }\n\n    /**\n     * Gets the midpoint between two dates.\n     * @param {Date} d1\n     * @param {Date} d2\n     * @returns {Date}\n     */\n    function getDateMidpoint(d1, d2) {\n      return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);\n    }\n\n    /**\n     * Gets the week of the month that a given date occurs in.\n     * @param {Date} date\n     * @returns {number} Index of the week of the month (zero-based).\n     */\n    function getWeekOfMonth(date) {\n      var firstDayOfMonth = getFirstDateOfMonth(date);\n      return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);\n    }\n\n    /**\n     * Gets a new date incremented by the given number of days. Number of days can be negative.\n     * @param {Date} date\n     * @param {number} numberOfDays\n     * @returns {Date}\n     */\n    function incrementDays(date, numberOfDays) {\n      return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);\n    }\n\n    /**\n     * Gets a new date incremented by the given number of months. Number of months can be negative.\n     * If the date of the given month does not match the target month, the date will be set to the\n     * last day of the month.\n     * @param {Date} date\n     * @param {number} numberOfMonths\n     * @returns {Date}\n     */\n    function incrementMonths(date, numberOfMonths) {\n      // If the same date in the target month does not actually exist, the Date object will\n      // automatically advance *another* month by the number of missing days.\n      // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.\n      // So, we check if the month overflowed and go to the last day of the target month instead.\n      var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1);\n      var numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);\n      if (numberOfDaysInMonth < date.getDate()) {\n        dateInTargetMonth.setDate(numberOfDaysInMonth);\n      } else {\n        dateInTargetMonth.setDate(date.getDate());\n      }\n\n      return dateInTargetMonth;\n    }\n\n    /**\n     * Get the integer distance between two months. This *only* considers the month and year\n     * portion of the Date instances.\n     *\n     * @param {Date} start\n     * @param {Date} end\n     * @returns {number} Number of months between `start` and `end`. If `end` is before `start`\n     *     chronologically, this number will be negative.\n     */\n    function getMonthDistance(start, end) {\n      return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());\n    }\n\n    /**\n     * Gets the last day of the month for the given date.\n     * @param {Date} date\n     * @returns {Date}\n     */\n    function getLastDateOfMonth(date) {\n      return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));\n    }\n\n    /**\n     * Checks whether a date is valid.\n     * @param {Date} date\n     * @return {boolean} Whether the date is a valid Date.\n     */\n    function isValidDate(date) {\n      return date != null && date.getTime && !isNaN(date.getTime());\n    }\n\n    /**\n     * Sets a date's time to midnight.\n     * @param {Date} date\n     */\n    function setDateTimeToMidnight(date) {\n      if (isValidDate(date)) {\n        date.setHours(0, 0, 0, 0);\n      }\n    }\n\n    /**\n     * Creates a date with the time set to midnight.\n     * Drop-in replacement for two forms of the Date constructor:\n     * 1. No argument for Date representing now.\n     * 2. Single-argument value representing number of seconds since Unix Epoch.\n     * @param {number=} opt_value\n     * @return {Date} New date with time set to midnight.\n     */\n    function createDateAtMidnight(opt_value) {\n      var date;\n      if (angular.isUndefined(opt_value)) {\n        date = new Date();\n      } else {\n        date = new Date(opt_value);\n      }\n      setDateTimeToMidnight(date);\n      return date;\n    }\n\n     /**\n      * Checks if a date is within a min and max range.\n      * If minDate or maxDate are not dates, they are ignored.\n      * @param {Date} date\n      * @param {Date} minDate\n      * @param {Date} maxDate\n      */\n     function isDateWithinRange(date, minDate, maxDate) {\n       return (!angular.isDate(minDate) || minDate <= date) &&\n           (!angular.isDate(maxDate) || maxDate >= date);\n     }\n  });\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc module\n   * @name material.components.fabActions\n   */\n  angular\n    .module('material.components.fabActions', ['material.core'])\n    .directive('mdFabActions', MdFabActionsDirective);\n\n  /**\n   * @ngdoc directive\n   * @name mdFabActions\n   * @module material.components.fabActions\n   *\n   * @restrict E\n   *\n   * @description\n   * The `<md-fab-actions>` directive is used inside of a `<md-fab-speed-dial>` or\n   * `<md-fab-toolbar>` directive to mark an element (or elements) as the actions and setup the\n   * proper event listeners.\n   *\n   * @usage\n   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.\n   */\n  function MdFabActionsDirective() {\n    return {\n      restrict: 'E',\n\n      require: ['^?mdFabSpeedDial', '^?mdFabToolbar'],\n\n      compile: function(element, attributes) {\n        var children = element.children();\n\n        var hasNgRepeat = false;\n\n        angular.forEach(['', 'data-', 'x-'], function(prefix) {\n          hasNgRepeat = hasNgRepeat || (children.attr(prefix + 'ng-repeat') ? true : false);\n        });\n\n        // Support both ng-repeat and static content\n        if (hasNgRepeat) {\n          children.addClass('md-fab-action-item');\n        } else {\n          // Wrap every child in a new div and add a class that we can scale/fling independently\n          children.wrap('<div class=\"md-fab-action-item\">');\n        }\n      }\n    }\n  }\n\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  angular.module('material.components.fabShared', ['material.core'])\n    .controller('FabController', FabController);\n\n  function FabController($scope, $element, $animate, $mdUtil, $mdConstant) {\n    var vm = this;\n\n    // NOTE: We use async evals below to avoid conflicts with any existing digest loops\n\n    vm.open = function() {\n      $scope.$evalAsync(\"vm.isOpen = true\");\n    };\n\n    vm.close = function() {\n      // Async eval to avoid conflicts with existing digest loops\n      $scope.$evalAsync(\"vm.isOpen = false\");\n\n      // Focus the trigger when the element closes so users can still tab to the next item\n      $element.find('md-fab-trigger')[0].focus();\n    };\n\n    // Toggle the open/close state when the trigger is clicked\n    vm.toggle = function() {\n      $scope.$evalAsync(\"vm.isOpen = !vm.isOpen\");\n    };\n\n    setupDefaults();\n    setupListeners();\n    setupWatchers();\n    fireInitialAnimations();\n\n    function setupDefaults() {\n      // Set the default direction to 'down' if none is specified\n      vm.direction = vm.direction || 'down';\n\n      // Set the default to be closed\n      vm.isOpen = vm.isOpen || false;\n\n      // Start the keyboard interaction at the first action\n      resetActionIndex();\n    }\n\n    var events = [];\n\n    function setupListeners() {\n      var eventTypes = [\n        'mousedown', 'mouseup', 'click', 'touchstart', 'touchend', 'focusin', 'focusout'\n      ];\n\n      // Add our listeners\n      angular.forEach(eventTypes, function(eventType) {\n        $element.on(eventType, parseEvents);\n      });\n\n      // Remove our listeners when destroyed\n      $scope.$on('$destroy', function() {\n        angular.forEach(eventTypes, function(eventType) {\n          $element.off(eventType, parseEvents);\n        });\n        // remove any attached keyboard handlers in case element is removed while\n        // speed dial is open\n        disableKeyboard();\n      });\n    }\n\n    function resetEvents() {\n      events = [];\n    }\n\n    function equalsEvents(toCheck) {\n      var isEqual, strippedCheck, moreToCheck;\n\n      // Quick check to make sure we don't get stuck in an infinite loop\n      var numTests = 0;\n\n      do {\n        // Strip out the question mark\n        strippedCheck = toCheck.map(function(event) {\n          return event.replace('?', '')\n        });\n\n        // Check if they are equal\n        isEqual = angular.equals(events, strippedCheck);\n\n        // If not, check to see if removing an optional event makes them equal\n        if (!isEqual) {\n          toCheck = removeOptionalEvent(toCheck);\n          moreToCheck = (toCheck.length >= events.length && toCheck.length !== strippedCheck.length);\n        }\n      }\n      while (numTests < 10 && !isEqual && moreToCheck);\n\n      return isEqual;\n    }\n\n    function removeOptionalEvent(events) {\n      var foundOptional = false;\n\n      return events.filter(function(event) {\n        // If we have not found an optional one, keep searching\n        if (!foundOptional && event.indexOf('?') !== -1) {\n          foundOptional = true;\n\n          // If we find an optional one, remove only that one and keep going\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    function parseEvents(latestEvent) {\n      events.push(latestEvent.type);\n\n      // Handle desktop click\n      if (equalsEvents(['mousedown', 'focusout?', 'focusin?', 'mouseup', 'click'])) {\n        handleItemClick(latestEvent);\n        resetEvents();\n        return;\n      }\n\n      // Handle mobile click/tap (and keyboard enter)\n      if (equalsEvents(['touchstart?', 'touchend?', 'click'])) {\n        handleItemClick(latestEvent);\n        resetEvents();\n        return;\n      }\n\n      // Handle tab keys (focusin)\n      if (equalsEvents(['focusin'])) {\n        vm.open();\n        resetEvents();\n        return;\n      }\n\n      // Handle tab keys (focusout)\n      if (equalsEvents(['focusout'])) {\n        vm.close();\n        resetEvents();\n        return;\n      }\n\n      eventUnhandled();\n    }\n\n    /*\n     * No event was handled, so setup a timeout to clear the events\n     *\n     * TODO: Use $mdUtil.debounce()?\n     */\n    var resetEventsTimeout;\n\n    function eventUnhandled() {\n      if (resetEventsTimeout) {\n        window.clearTimeout(resetEventsTimeout);\n      }\n\n      resetEventsTimeout = window.setTimeout(function() {\n        resetEvents();\n      }, 250);\n    }\n\n    function resetActionIndex() {\n      vm.currentActionIndex = -1;\n    }\n\n    function setupWatchers() {\n      // Watch for changes to the direction and update classes/attributes\n      $scope.$watch('vm.direction', function(newDir, oldDir) {\n        // Add the appropriate classes so we can target the direction in the CSS\n        $animate.removeClass($element, 'md-' + oldDir);\n        $animate.addClass($element, 'md-' + newDir);\n\n        // Reset the action index since it may have changed\n        resetActionIndex();\n      });\n\n      var trigger, actions;\n\n      // Watch for changes to md-open\n      $scope.$watch('vm.isOpen', function(isOpen) {\n        // Reset the action index since it may have changed\n        resetActionIndex();\n\n        // We can't get the trigger/actions outside of the watch because the component hasn't been\n        // linked yet, so we wait until the first watch fires to cache them.\n        if (!trigger || !actions) {\n          trigger = getTriggerElement();\n          actions = getActionsElement();\n        }\n\n        if (isOpen) {\n          enableKeyboard();\n        } else {\n          disableKeyboard();\n        }\n\n        var toAdd = isOpen ? 'md-is-open' : '';\n        var toRemove = isOpen ? '' : 'md-is-open';\n\n        // Set the proper ARIA attributes\n        trigger.attr('aria-haspopup', true);\n        trigger.attr('aria-expanded', isOpen);\n        actions.attr('aria-hidden', !isOpen);\n\n        // Animate the CSS classes\n        $animate.setClass($element, toAdd, toRemove);\n      });\n    }\n\n    // Fire the animations once in a separate digest loop to initialize them\n    function fireInitialAnimations() {\n      $mdUtil.nextTick(function() {\n        $animate.addClass($element, 'md-noop');\n      });\n    }\n\n    function enableKeyboard() {\n      angular.element(document).on('keydown', keyPressed);\n    }\n\n    function disableKeyboard() {\n      angular.element(document).off('keydown', keyPressed);\n    }\n\n    function keyPressed(event) {\n      switch (event.which) {\n        case $mdConstant.KEY_CODE.SPACE: event.preventDefault(); return false;\n        case $mdConstant.KEY_CODE.ESCAPE: vm.close(); event.preventDefault(); return false;\n        case $mdConstant.KEY_CODE.LEFT_ARROW: doKeyLeft(event); return false;\n        case $mdConstant.KEY_CODE.UP_ARROW: doKeyUp(event); return false;\n        case $mdConstant.KEY_CODE.RIGHT_ARROW: doKeyRight(event); return false;\n        case $mdConstant.KEY_CODE.DOWN_ARROW: doKeyDown(event); return false;\n      }\n    }\n\n    function doActionPrev(event) {\n      focusAction(event, -1);\n    }\n\n    function doActionNext(event) {\n      focusAction(event, 1);\n    }\n\n    function focusAction(event, direction) {\n      // Grab all of the actions\n      var actions = getActionsElement()[0].querySelectorAll('.md-fab-action-item');\n\n      // Disable all other actions for tabbing\n      angular.forEach(actions, function(action) {\n        angular.element(angular.element(action).children()[0]).attr('tabindex', -1);\n      });\n\n      // Increment/decrement the counter with restrictions\n      vm.currentActionIndex = vm.currentActionIndex + direction;\n      vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);\n      vm.currentActionIndex = Math.max(0, vm.currentActionIndex);\n\n      // Focus the element\n      var focusElement =  angular.element(actions[vm.currentActionIndex]).children()[0];\n      angular.element(focusElement).attr('tabindex', 0);\n      focusElement.focus();\n\n      // Make sure the event doesn't bubble and cause something else\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n\n    function doKeyLeft(event) {\n      if (vm.direction === 'left') {\n        doActionNext(event);\n      } else {\n        doActionPrev(event);\n      }\n    }\n\n    function doKeyUp(event) {\n      if (vm.direction === 'down') {\n        doActionPrev(event);\n      } else {\n        doActionNext(event);\n      }\n    }\n\n    function doKeyRight(event) {\n      if (vm.direction === 'left') {\n        doActionPrev(event);\n      } else {\n        doActionNext(event);\n      }\n    }\n\n    function doKeyDown(event) {\n      if (vm.direction === 'up') {\n        doActionPrev(event);\n      } else {\n        doActionNext(event);\n      }\n    }\n\n    function isTrigger(element) {\n      return $mdUtil.getClosest(element, 'md-fab-trigger');\n    }\n\n    function isAction(element) {\n      return $mdUtil.getClosest(element, 'md-fab-actions');\n    }\n\n    function handleItemClick(event) {\n      if (isTrigger(event.target)) {\n        vm.toggle();\n      }\n\n      if (isAction(event.target)) {\n        vm.close();\n      }\n    }\n\n    function getTriggerElement() {\n      return $element.find('md-fab-trigger');\n    }\n\n    function getActionsElement() {\n      return $element.find('md-fab-actions');\n    }\n  }\n  FabController.$inject = [\"$scope\", \"$element\", \"$animate\", \"$mdUtil\", \"$mdConstant\"];\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc module\n   * @name material.components.fabSpeedDial\n   */\n  angular\n    // Declare our module\n    .module('material.components.fabSpeedDial', [\n      'material.core',\n      'material.components.fabShared',\n      'material.components.fabTrigger',\n      'material.components.fabActions'\n    ])\n\n    // Register our directive\n    .directive('mdFabSpeedDial', MdFabSpeedDialDirective)\n\n    // Register our custom animations\n    .animation('.md-fling', MdFabSpeedDialFlingAnimation)\n    .animation('.md-scale', MdFabSpeedDialScaleAnimation)\n\n    // Register a service for each animation so that we can easily inject them into unit tests\n    .service('mdFabSpeedDialFlingAnimation', MdFabSpeedDialFlingAnimation)\n    .service('mdFabSpeedDialScaleAnimation', MdFabSpeedDialScaleAnimation);\n\n  /**\n   * @ngdoc directive\n   * @name mdFabSpeedDial\n   * @module material.components.fabSpeedDial\n   *\n   * @restrict E\n   *\n   * @description\n   * The `<md-fab-speed-dial>` directive is used to present a series of popup elements (usually\n   * `<md-button>`s) for quick access to common actions.\n   *\n   * There are currently two animations available by applying one of the following classes to\n   * the component:\n   *\n   *  - `md-fling` - The speed dial items appear from underneath the trigger and move into their\n   *    appropriate positions.\n   *  - `md-scale` - The speed dial items appear in their proper places by scaling from 0% to 100%.\n   *\n   * You may also easily position the trigger by applying one one of the following classes to the\n   * `<md-fab-speed-dial>` element:\n   *  - `md-fab-top-left`\n   *  - `md-fab-top-right`\n   *  - `md-fab-bottom-left`\n   *  - `md-fab-bottom-right`\n   *\n   * These CSS classes use `position: absolute`, so you need to ensure that the container element\n   * also uses `position: absolute` or `position: relative` in order for them to work.\n   *\n   * Additionally, you may use the standard `ng-mouseenter` and `ng-mouseleave` directives to\n   * open or close the speed dial. However, if you wish to allow users to hover over the empty\n   * space where the actions will appear, you must also add the `md-hover-full` class to the speed\n   * dial element. Without this, the hover effect will only occur on top of the trigger.\n   *\n   * @usage\n   * <hljs lang=\"html\">\n   * <md-fab-speed-dial md-direction=\"up\" class=\"md-fling\">\n   *   <md-fab-trigger>\n   *     <md-button aria-label=\"Add...\"><md-icon icon=\"/img/icons/plus.svg\"></md-icon></md-button>\n   *   </md-fab-trigger>\n   *\n   *   <md-fab-actions>\n   *     <md-button aria-label=\"Add User\">\n   *       <md-icon icon=\"/img/icons/user.svg\"></md-icon>\n   *     </md-button>\n   *\n   *     <md-button aria-label=\"Add Group\">\n   *       <md-icon icon=\"/img/icons/group.svg\"></md-icon>\n   *     </md-button>\n   *   </md-fab-actions>\n   * </md-fab-speed-dial>\n   * </hljs>\n   *\n   * @param {string} md-direction From which direction you would like the speed dial to appear\n   * relative to the trigger element.\n   * @param {expression=} md-open Programmatically control whether or not the speed-dial is visible.\n   */\n  function MdFabSpeedDialDirective() {\n    return {\n      restrict: 'E',\n\n      scope: {\n        direction: '@?mdDirection',\n        isOpen: '=?mdOpen'\n      },\n\n      bindToController: true,\n      controller: 'FabController',\n      controllerAs: 'vm',\n\n      link: FabSpeedDialLink\n    };\n\n    function FabSpeedDialLink(scope, element) {\n      // Prepend an element to hold our CSS variables so we can use them in the animations below\n      element.prepend('<div class=\"md-css-variables\"></div>');\n    }\n  }\n\n  function MdFabSpeedDialFlingAnimation() {\n    function runAnimation(element) {\n      var el = element[0];\n      var ctrl = element.controller('mdFabSpeedDial');\n      var items = el.querySelectorAll('.md-fab-action-item');\n\n      // Grab our trigger element\n      var triggerElement = el.querySelector('md-fab-trigger');\n\n      // Grab our element which stores CSS variables\n      var variablesElement = el.querySelector('.md-css-variables');\n\n      // Setup JS variables based on our CSS variables\n      var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);\n\n      // Always reset the items to their natural position/state\n      angular.forEach(items, function(item, index) {\n        var styles = item.style;\n\n        styles.transform = styles.webkitTransform = '';\n        styles.transitionDelay = '';\n        styles.opacity = 1;\n\n        // Make the items closest to the trigger have the highest z-index\n        styles.zIndex = (items.length - index) + startZIndex;\n      });\n\n      // Set the trigger to be above all of the actions so they disappear behind it.\n      triggerElement.style.zIndex = startZIndex + items.length + 1;\n\n      // If the control is closed, hide the items behind the trigger\n      if (!ctrl.isOpen) {\n        angular.forEach(items, function(item, index) {\n          var newPosition, axis;\n          var styles = item.style;\n\n          switch (ctrl.direction) {\n            case 'up':\n              newPosition = item.scrollHeight * (index + 1);\n              axis = 'Y';\n              break;\n            case 'down':\n              newPosition = -item.scrollHeight * (index + 1);\n              axis = 'Y';\n              break;\n            case 'left':\n              newPosition = item.scrollWidth * (index + 1);\n              axis = 'X';\n              break;\n            case 'right':\n              newPosition = -item.scrollWidth * (index + 1);\n              axis = 'X';\n              break;\n          }\n\n          var newTranslate = 'translate' + axis + '(' + newPosition + 'px)';\n\n          styles.transform = styles.webkitTransform = newTranslate;\n        });\n      }\n    }\n\n    return {\n      addClass: function(element, className, done) {\n        if (element.hasClass('md-fling')) {\n          runAnimation(element);\n          done();\n        }\n      },\n      removeClass: function(element, className, done) {\n        runAnimation(element);\n        done();\n      }\n    }\n  }\n\n  function MdFabSpeedDialScaleAnimation() {\n    var delay = 65;\n\n    function runAnimation(element) {\n      var el = element[0];\n      var ctrl = element.controller('mdFabSpeedDial');\n      var items = el.querySelectorAll('.md-fab-action-item');\n\n      // Grab our element which stores CSS variables\n      var variablesElement = el.querySelector('.md-css-variables');\n\n      // Setup JS variables based on our CSS variables\n      var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);\n\n      // Always reset the items to their natural position/state\n      angular.forEach(items, function(item, index) {\n        var styles = item.style,\n          offsetDelay = index * delay;\n\n        styles.opacity = ctrl.isOpen ? 1 : 0;\n        styles.transform = styles.webkitTransform = ctrl.isOpen ? 'scale(1)' : 'scale(0)';\n        styles.transitionDelay = (ctrl.isOpen ? offsetDelay : (items.length - offsetDelay)) + 'ms';\n\n        // Make the items closest to the trigger have the highest z-index\n        styles.zIndex = (items.length - index) + startZIndex;\n      });\n    }\n\n    return {\n      addClass: function(element, className, done) {\n        runAnimation(element);\n        done();\n      },\n\n      removeClass: function(element, className, done) {\n        runAnimation(element);\n        done();\n      }\n    }\n  }\n})();\n\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc module\n   * @name material.components.fabToolbar\n   */\n  angular\n    // Declare our module\n    .module('material.components.fabToolbar', [\n      'material.core',\n      'material.components.fabShared',\n      'material.components.fabTrigger',\n      'material.components.fabActions'\n    ])\n\n    // Register our directive\n    .directive('mdFabToolbar', MdFabToolbarDirective)\n\n    // Register our custom animations\n    .animation('.md-fab-toolbar', MdFabToolbarAnimation)\n\n    // Register a service for the animation so that we can easily inject it into unit tests\n    .service('mdFabToolbarAnimation', MdFabToolbarAnimation);\n\n  /**\n   * @ngdoc directive\n   * @name mdFabToolbar\n   * @module material.components.fabToolbar\n   *\n   * @restrict E\n   *\n   * @description\n   *\n   * The `<md-fab-toolbar>` directive is used present a toolbar of elements (usually `<md-button>`s)\n   * for quick access to common actions when a floating action button is activated (via click or\n   * keyboard navigation).\n   *\n   * You may also easily position the trigger by applying one one of the following classes to the\n   * `<md-fab-toolbar>` element:\n   *  - `md-fab-top-left`\n   *  - `md-fab-top-right`\n   *  - `md-fab-bottom-left`\n   *  - `md-fab-bottom-right`\n   *\n   * These CSS classes use `position: absolute`, so you need to ensure that the container element\n   * also uses `position: absolute` or `position: relative` in order for them to work.\n   *\n   * @usage\n   *\n   * <hljs lang=\"html\">\n   * <md-fab-toolbar md-direction='left'>\n   *   <md-fab-trigger>\n   *     <md-button aria-label=\"Add...\"><md-icon icon=\"/img/icons/plus.svg\"></md-icon></md-button>\n   *   </md-fab-trigger>\n   *\n   *   <md-fab-actions>\n   *     <md-button aria-label=\"Add User\">\n   *       <md-icon icon=\"/img/icons/user.svg\"></md-icon>\n   *     </md-button>\n   *\n   *     <md-button aria-label=\"Add Group\">\n   *       <md-icon icon=\"/img/icons/group.svg\"></md-icon>\n   *     </md-button>\n   *   </md-fab-actions>\n   * </md-fab-toolbar>\n   * </hljs>\n   *\n   * @param {string} md-direction From which direction you would like the toolbar items to appear\n   * relative to the trigger element. Supports `left` and `right` directions.\n   * @param {expression=} md-open Programmatically control whether or not the toolbar is visible.\n   */\n  function MdFabToolbarDirective() {\n    return {\n      restrict: 'E',\n      transclude: true,\n      template: '<div class=\"md-fab-toolbar-wrapper\">' +\n      '  <div class=\"md-fab-toolbar-content\" ng-transclude></div>' +\n      '</div>',\n\n      scope: {\n        direction: '@?mdDirection',\n        isOpen: '=?mdOpen'\n      },\n\n      bindToController: true,\n      controller: 'FabController',\n      controllerAs: 'vm',\n\n      link: link\n    };\n\n    function link(scope, element, attributes) {\n      // Add the base class for animations\n      element.addClass('md-fab-toolbar');\n\n      // Prepend the background element to the trigger's button\n      element.find('md-fab-trigger').find('button')\n        .prepend('<div class=\"md-fab-toolbar-background\"></div>');\n    }\n  }\n\n  function MdFabToolbarAnimation() {\n\n    function runAnimation(element, className, done) {\n      // If no className was specified, don't do anything\n      if (!className) {\n        return;\n      }\n\n      var el = element[0];\n      var ctrl = element.controller('mdFabToolbar');\n\n      // Grab the relevant child elements\n      var backgroundElement = el.querySelector('.md-fab-toolbar-background');\n      var triggerElement = el.querySelector('md-fab-trigger button');\n      var toolbarElement = el.querySelector('md-toolbar');\n      var iconElement = el.querySelector('md-fab-trigger button md-icon');\n      var actions = element.find('md-fab-actions').children();\n\n      // If we have both elements, use them to position the new background\n      if (triggerElement && backgroundElement) {\n        // Get our variables\n        var color = window.getComputedStyle(triggerElement).getPropertyValue('background-color');\n        var width = el.offsetWidth;\n        var height = el.offsetHeight;\n\n        // Make it twice as big as it should be since we scale from the center\n        var scale = 2 * (width / triggerElement.offsetWidth);\n\n        // Set some basic styles no matter what animation we're doing\n        backgroundElement.style.backgroundColor = color;\n        backgroundElement.style.borderRadius = width + 'px';\n\n        // If we're open\n        if (ctrl.isOpen) {\n          // Turn on toolbar pointer events when closed\n          toolbarElement.style.pointerEvents = 'initial';\n\n          backgroundElement.style.width = triggerElement.offsetWidth + 'px';\n          backgroundElement.style.height = triggerElement.offsetHeight + 'px';\n          backgroundElement.style.transform = 'scale(' + scale + ')';\n\n          // Set the next close animation to have the proper delays\n          backgroundElement.style.transitionDelay = '0ms';\n          iconElement && (iconElement.style.transitionDelay = '.3s');\n\n          // Apply a transition delay to actions\n          angular.forEach(actions, function(action, index) {\n            action.style.transitionDelay = (actions.length - index) * 25 + 'ms';\n          });\n        } else {\n          // Turn off toolbar pointer events when closed\n          toolbarElement.style.pointerEvents = 'none';\n\n          // Scale it back down to the trigger's size\n          backgroundElement.style.transform = 'scale(1)';\n\n          // Reset the position\n          backgroundElement.style.top = '0';\n\n          if (element.hasClass('md-right')) {\n            backgroundElement.style.left = '0';\n            backgroundElement.style.right = null;\n          }\n\n          if (element.hasClass('md-left')) {\n            backgroundElement.style.right = '0';\n            backgroundElement.style.left = null;\n          }\n\n          // Set the next open animation to have the proper delays\n          backgroundElement.style.transitionDelay = '200ms';\n          iconElement && (iconElement.style.transitionDelay = '0ms');\n\n          // Apply a transition delay to actions\n          angular.forEach(actions, function(action, index) {\n            action.style.transitionDelay = 200 + (index * 25) + 'ms';\n          });\n        }\n      }\n    }\n\n    return {\n      addClass: function(element, className, done) {\n        runAnimation(element, className, done);\n        done();\n      },\n\n      removeClass: function(element, className, done) {\n        runAnimation(element, className, done);\n        done();\n      }\n    }\n  }\n})();\n})();\n(function(){\n\"use strict\";\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc module\n   * @name material.components.fabTrigger\n   */\n  angular\n    .module('material.components.fabTrigger', ['material.core'])\n    .directive('mdFabTrigger', MdFabTriggerDirective);\n\n  /**\n   * @ngdoc directive\n   * @name mdFabTrigger\n   * @module material.components.fabSpeedDial\n   *\n   * @restrict E\n   *\n   * @description\n   * The `<md-fab-trigger>` directive is used inside of a `<md-fab-speed-dial>` or\n   * `<md-fab-toolbar>` directive to mark an element (or elements) as the trigger and setup the\n   * proper event listeners.\n   *\n   * @usage\n   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.\n   */\n  function MdFabTriggerDirective() {\n    // TODO: Remove this completely?\n    return {\n      restrict: 'E',\n\n      require: ['^?mdFabSpeedDial', '^?mdFabToolbar']\n    };\n  }\n})();\n\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.gridList\n */\nangular.module('material.components.gridList', ['material.core'])\n       .directive('mdGridList', GridListDirective)\n       .directive('mdGridTile', GridTileDirective)\n       .directive('mdGridTileFooter', GridTileCaptionDirective)\n       .directive('mdGridTileHeader', GridTileCaptionDirective)\n       .factory('$mdGridLayout', GridLayoutFactory);\n\n/**\n * @ngdoc directive\n * @name mdGridList\n * @module material.components.gridList\n * @restrict E\n * @description\n * Grid lists are an alternative to standard list views. Grid lists are distinct\n * from grids used for layouts and other visual presentations.\n *\n * A grid list is best suited to presenting a homogenous data type, typically\n * images, and is optimized for visual comprehension and differentiating between\n * like data types.\n *\n * A grid list is a continuous element consisting of tessellated, regular\n * subdivisions called cells that contain tiles (`md-grid-tile`).\n *\n * <img src=\"//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png\"\n *    style=\"width: 300px; height: auto; margin-right: 16px;\" alt=\"Concept of grid explained visually\">\n * <img src=\"//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png\"\n *    style=\"width: 300px; height: auto;\" alt=\"Grid concepts legend\">\n *\n * Cells are arrayed vertically and horizontally within the grid.\n *\n * Tiles hold content and can span one or more cells vertically or horizontally.\n *\n * ### Responsive Attributes\n *\n * The `md-grid-list` directive supports \"responsive\" attributes, which allow\n * different `md-cols`, `md-gutter` and `md-row-height` values depending on the\n * currently matching media query (as defined in `$mdConstant.MEDIA`).\n *\n * In order to set a responsive attribute, first define the fallback value with\n * the standard attribute name, then add additional attributes with the\n * following convention: `{base-attribute-name}-{media-query-name}=\"{value}\"`\n * (ie. `md-cols-lg=\"8\"`)\n *\n * @param {number} md-cols Number of columns in the grid.\n * @param {string} md-row-height One of\n * <ul>\n *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>\n *   <li>`{width}:{height}` - Ratio of width to height (eg.\n *   `md-row-height=\"16:9\"`)</li>\n *   <li>`\"fit\"` - Height will be determined by subdividing the available\n *   height by the number of rows</li>\n * </ul>\n * @param {string=} md-gutter The amount of space between tiles in CSS units\n *     (default 1px)\n * @param {expression=} md-on-layout Expression to evaluate after layout. Event\n *     object is available as `$event`, and contains performance information.\n *\n * @usage\n * Basic:\n * <hljs lang=\"html\">\n * <md-grid-list md-cols=\"5\" md-gutter=\"1em\" md-row-height=\"4:3\">\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n *\n * Fixed-height rows:\n * <hljs lang=\"html\">\n * <md-grid-list md-cols=\"4\" md-row-height=\"200px\" ...>\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n *\n * Fit rows:\n * <hljs lang=\"html\">\n * <md-grid-list md-cols=\"4\" md-row-height=\"fit\" style=\"height: 400px;\" ...>\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n *\n * Using responsive attributes:\n * <hljs lang=\"html\">\n * <md-grid-list\n *     md-cols-sm=\"2\"\n *     md-cols-md=\"4\"\n *     md-cols-lg=\"8\"\n *     md-cols-gt-lg=\"12\"\n *     ...>\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n */\nfunction GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {\n  return {\n    restrict: 'E',\n    controller: GridListController,\n    scope: {\n      mdOnLayout: '&'\n    },\n    link: postLink\n  };\n\n  function postLink(scope, element, attrs, ctrl) {\n    // Apply semantics\n    element.attr('role', 'list');\n\n    // Provide the controller with a way to trigger layouts.\n    ctrl.layoutDelegate = layoutDelegate;\n\n    var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),\n        unwatchAttrs = watchMedia();\n      scope.$on('$destroy', unwatchMedia);\n\n    /**\n     * Watches for changes in media, invalidating layout as necessary.\n     */\n    function watchMedia() {\n      for (var mediaName in $mdConstant.MEDIA) {\n        $mdMedia(mediaName); // initialize\n        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])\n            .addListener(invalidateLayout);\n      }\n      return $mdMedia.watchResponsiveAttributes(\n          ['md-cols', 'md-row-height', 'md-gutter'], attrs, layoutIfMediaMatch);\n    }\n\n    function unwatchMedia() {\n      ctrl.layoutDelegate = angular.noop;\n\n      unwatchAttrs();\n      for (var mediaName in $mdConstant.MEDIA) {\n        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])\n            .removeListener(invalidateLayout);\n      }\n    }\n\n    /**\n     * Performs grid layout if the provided mediaName matches the currently\n     * active media type.\n     */\n    function layoutIfMediaMatch(mediaName) {\n      if (mediaName == null) {\n        // TODO(shyndman): It would be nice to only layout if we have\n        // instances of attributes using this media type\n        ctrl.invalidateLayout();\n      } else if ($mdMedia(mediaName)) {\n        ctrl.invalidateLayout();\n      }\n    }\n\n    var lastLayoutProps;\n\n    /**\n     * Invokes the layout engine, and uses its results to lay out our\n     * tile elements.\n     *\n     * @param {boolean} tilesInvalidated Whether tiles have been\n     *    added/removed/moved since the last layout. This is to avoid situations\n     *    where tiles are replaced with properties identical to their removed\n     *    counterparts.\n     */\n    function layoutDelegate(tilesInvalidated) {\n      var tiles = getTileElements();\n      var props = {\n        tileSpans: getTileSpans(tiles),\n        colCount: getColumnCount(),\n        rowMode: getRowMode(),\n        rowHeight: getRowHeight(),\n        gutter: getGutter()\n      };\n\n      if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) {\n        return;\n      }\n\n      var performance =\n        $mdGridLayout(props.colCount, props.tileSpans, tiles)\n          .map(function(tilePositions, rowCount) {\n            return {\n              grid: {\n                element: element,\n                style: getGridStyle(props.colCount, rowCount,\n                    props.gutter, props.rowMode, props.rowHeight)\n              },\n              tiles: tilePositions.map(function(ps, i) {\n                return {\n                  element: angular.element(tiles[i]),\n                  style: getTileStyle(ps.position, ps.spans,\n                      props.colCount, rowCount,\n                      props.gutter, props.rowMode, props.rowHeight)\n                }\n              })\n            }\n          })\n          .reflow()\n          .performance();\n\n      // Report layout\n      scope.mdOnLayout({\n        $event: {\n          performance: performance\n        }\n      });\n\n      lastLayoutProps = props;\n    }\n\n    // Use $interpolate to do some simple string interpolation as a convenience.\n\n    var startSymbol = $interpolate.startSymbol();\n    var endSymbol = $interpolate.endSymbol();\n\n    // Returns an expression wrapped in the interpolator's start and end symbols.\n    function expr(exprStr) {\n      return startSymbol + exprStr + endSymbol;\n    }\n\n    // The amount of space a single 1x1 tile would take up (either width or height), used as\n    // a basis for other calculations. This consists of taking the base size percent (as would be\n    // if evenly dividing the size between cells), and then subtracting the size of one gutter.\n    // However, since there are no gutters on the edges, each tile only uses a fration\n    // (gutterShare = numGutters / numCells) of the gutter size. (Imagine having one gutter per\n    // tile, and then breaking up the extra gutter on the edge evenly among the cells).\n    var UNIT = $interpolate(expr('share') + '% - (' + expr('gutter') + ' * ' + expr('gutterShare') + ')');\n\n    // The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    var POSITION  = $interpolate('calc((' + expr('unit') + ' + ' + expr('gutter') + ') * ' + expr('offset') + ')');\n\n    // The actual size of a tile, e.g., width or height, taking rowSpan or colSpan into account.\n    // This is computed by multiplying the base unit by the rowSpan/colSpan, and then adding back\n    // in the space that the gutter would normally have used (which was already accounted for in\n    // the base unit calculation).\n    var DIMENSION = $interpolate('calc((' + expr('unit') + ') * ' + expr('span') + ' + (' + expr('span') + ' - 1) * ' + expr('gutter') + ')');\n\n    /**\n     * Gets the styles applied to a tile element described by the given parameters.\n     * @param {{row: number, col: number}} position The row and column indices of the tile.\n     * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.\n     * @param {number} colCount The number of columns.\n     * @param {number} rowCount The number of rows.\n     * @param {string} gutter The amount of space between tiles. This will be something like\n     *     '5px' or '2em'.\n     * @param {string} rowMode The row height mode. Can be one of:\n     *     'fixed': all rows have a fixed size, given by rowHeight,\n     *     'ratio': row height defined as a ratio to width, or\n     *     'fit': fit to the grid-list element height, divinding evenly among rows.\n     * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and\n     *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).\n     * @returns {Object} Map of CSS properties to be applied to the style element. Will define\n     *     values for top, left, width, height, marginTop, and paddingTop.\n     */\n    function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {\n      // TODO(shyndman): There are style caching opportunities here.\n\n      // Percent of the available horizontal space that one column takes up.\n      var hShare = (1 / colCount) * 100;\n\n      // Fraction of the gutter size that each column takes up.\n      var hGutterShare = (colCount - 1) / colCount;\n\n      // Base horizontal size of a column.\n      var hUnit = UNIT({share: hShare, gutterShare: hGutterShare, gutter: gutter});\n\n      // The width and horizontal position of each tile is always calculated the same way, but the\n      // height and vertical position depends on the rowMode.\n      var style = {\n        left: POSITION({ unit: hUnit, offset: position.col, gutter: gutter }),\n        width: DIMENSION({ unit: hUnit, span: spans.col, gutter: gutter }),\n        // resets\n        paddingTop: '',\n        marginTop: '',\n        top: '',\n        height: ''\n      };\n\n      switch (rowMode) {\n        case 'fixed':\n          // In fixed mode, simply use the given rowHeight.\n          style.top = POSITION({ unit: rowHeight, offset: position.row, gutter: gutter });\n          style.height = DIMENSION({ unit: rowHeight, span: spans.row, gutter: gutter });\n          break;\n\n        case 'ratio':\n          // Percent of the available vertical space that one row takes up. Here, rowHeight holds\n          // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.\n          var vShare = hShare / rowHeight;\n\n          // Base veritcal size of a row.\n          var vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });\n\n          // padidngTop and marginTop are used to maintain the given aspect ratio, as\n          // a percentage-based value for these properties is applied to the *width* of the\n          // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n          style.paddingTop = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter});\n          style.marginTop = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });\n          break;\n\n        case 'fit':\n          // Fraction of the gutter size that each column takes up.\n          var vGutterShare = (rowCount - 1) / rowCount;\n\n          // Percent of the available vertical space that one row takes up.\n          var vShare = (1 / rowCount) * 100;\n\n          // Base vertical size of a row.\n          var vUnit = UNIT({share: vShare, gutterShare: vGutterShare, gutter: gutter});\n\n          style.top = POSITION({unit: vUnit, offset: position.row, gutter: gutter});\n          style.height = DIMENSION({unit: vUnit, span: spans.row, gutter: gutter});\n          break;\n      }\n\n      return style;\n    }\n\n    function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {\n      var style = {};\n\n      switch(rowMode) {\n        case 'fixed':\n          style.height = DIMENSION({ unit: rowHeight, span: rowCount, gutter: gutter });\n          style.paddingBottom = '';\n          break;\n\n        case 'ratio':\n          // rowHeight is width / height\n          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,\n              hShare = (1 / colCount) * 100,\n              vShare = hShare * (1 / rowHeight),\n              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });\n\n          style.height = '';\n          style.paddingBottom = DIMENSION({ unit: vUnit, span: rowCount, gutter: gutter});\n          break;\n\n        case 'fit':\n          // noop, as the height is user set\n          break;\n      }\n\n      return style;\n    }\n\n    function getTileElements() {\n      return [].filter.call(element.children(), function(ele) {\n        return ele.tagName == 'MD-GRID-TILE' && !ele.$$mdDestroyed;\n      });\n    }\n\n    /**\n     * Gets an array of objects containing the rowspan and colspan for each tile.\n     * @returns {Array<{row: number, col: number}>}\n     */\n    function getTileSpans(tileElements) {\n      return [].map.call(tileElements, function(ele) {\n        var ctrl = angular.element(ele).controller('mdGridTile');\n        return {\n          row: parseInt(\n              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-rowspan'), 10) || 1,\n          col: parseInt(\n              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-colspan'), 10) || 1\n        };\n      });\n    }\n\n    function getColumnCount() {\n      var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);\n      if (isNaN(colCount)) {\n        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';\n      }\n      return colCount;\n    }\n\n    function getGutter() {\n      return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);\n    }\n\n    function getRowHeight() {\n      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');\n      switch (getRowMode()) {\n        case 'fixed':\n          return applyDefaultUnit(rowHeight);\n        case 'ratio':\n          var whRatio = rowHeight.split(':');\n          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);\n        case 'fit':\n          return 0; // N/A\n      }\n    }\n\n    function getRowMode() {\n      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');\n      if (rowHeight == 'fit') {\n        return 'fit';\n      } else if (rowHeight.indexOf(':') !== -1) {\n        return 'ratio';\n      } else {\n        return 'fixed';\n      }\n    }\n\n    function applyDefaultUnit(val) {\n      return /\\D$/.test(val) ? val : val + 'px';\n    }\n  }\n}\nGridListDirective.$inject = [\"$interpolate\", \"$mdConstant\", \"$mdGridLayout\", \"$mdMedia\"];\n\n/* @ngInject */\nfunction GridListController($mdUtil) {\n  this.layoutInvalidated = false;\n  this.tilesInvalidated = false;\n  this.$timeout_ = $mdUtil.nextTick;\n  this.layoutDelegate = angular.noop;\n}\nGridListController.$inject = [\"$mdUtil\"];\n\nGridListController.prototype = {\n  invalidateTiles: function() {\n    this.tilesInvalidated = true;\n    this.invalidateLayout();\n  },\n\n  invalidateLayout: function() {\n    if (this.layoutInvalidated) {\n      return;\n    }\n    this.layoutInvalidated = true;\n    this.$timeout_(angular.bind(this, this.layout));\n  },\n\n  layout: function() {\n    try {\n      this.layoutDelegate(this.tilesInvalidated);\n    } finally {\n      this.layoutInvalidated = false;\n      this.tilesInvalidated = false;\n    }\n  }\n};\n\n\n/* @ngInject */\nfunction GridLayoutFactory($mdUtil) {\n  var defaultAnimator = GridTileAnimator;\n\n  /**\n   * Set the reflow animator callback\n   */\n  GridLayout.animateWith = function(customAnimator) {\n    defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;\n  };\n\n  return GridLayout;\n\n  /**\n   * Publish layout function\n   */\n  function GridLayout(colCount, tileSpans) {\n      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;\n\n      layoutTime = $mdUtil.time(function() {\n        layoutInfo = calculateGridFor(colCount, tileSpans);\n      });\n\n      return self = {\n\n        /**\n         * An array of objects describing each tile's position in the grid.\n         */\n        layoutInfo: function() {\n          return layoutInfo;\n        },\n\n        /**\n         * Maps grid positioning to an element and a set of styles using the\n         * provided updateFn.\n         */\n        map: function(updateFn) {\n          mapTime = $mdUtil.time(function() {\n            var info = self.layoutInfo();\n            gridStyles = updateFn(info.positioning, info.rowCount);\n          });\n          return self;\n        },\n\n        /**\n         * Default animator simply sets the element.css( <styles> ). An alternate\n         * animator can be provided as an argument. The function has the following\n         * signature:\n         *\n         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)\n         */\n        reflow: function(animatorFn) {\n          reflowTime = $mdUtil.time(function() {\n            var animator = animatorFn || defaultAnimator;\n            animator(gridStyles.grid, gridStyles.tiles);\n          });\n          return self;\n        },\n\n        /**\n         * Timing for the most recent layout run.\n         */\n        performance: function() {\n          return {\n            tileCount: tileSpans.length,\n            layoutTime: layoutTime,\n            mapTime: mapTime,\n            reflowTime: reflowTime,\n            totalTime: layoutTime + mapTime + reflowTime\n          };\n        }\n      };\n    }\n\n  /**\n   * Default Gridlist animator simple sets the css for each element;\n   * NOTE: any transitions effects must be manually set in the CSS.\n   * e.g.\n   *\n   *  md-grid-tile {\n   *    transition: all 700ms ease-out 50ms;\n   *  }\n   *\n   */\n  function GridTileAnimator(grid, tiles) {\n    grid.element.css(grid.style);\n    tiles.forEach(function(t) {\n      t.element.css(t.style);\n    })\n  }\n\n  /**\n   * Calculates the positions of tiles.\n   *\n   * The algorithm works as follows:\n   *    An Array<Number> with length colCount (spaceTracker) keeps track of\n   *    available tiling positions, where elements of value 0 represents an\n   *    empty position. Space for a tile is reserved by finding a sequence of\n   *    0s with length <= than the tile's colspan. When such a space has been\n   *    found, the occupied tile positions are incremented by the tile's\n   *    rowspan value, as these positions have become unavailable for that\n   *    many rows.\n   *\n   *    If the end of a row has been reached without finding space for the\n   *    tile, spaceTracker's elements are each decremented by 1 to a minimum\n   *    of 0. Rows are searched in this fashion until space is found.\n   */\n  function calculateGridFor(colCount, tileSpans) {\n    var curCol = 0,\n        curRow = 0,\n        spaceTracker = newSpaceTracker();\n\n    return {\n      positioning: tileSpans.map(function(spans, i) {\n        return {\n          spans: spans,\n          position: reserveSpace(spans, i)\n        };\n      }),\n      rowCount: curRow + Math.max.apply(Math, spaceTracker)\n    };\n\n    function reserveSpace(spans, i) {\n      if (spans.col > colCount) {\n        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +\n            '(' + spans.col + ') that exceeds the column count ' +\n            '(' + colCount + ')';\n      }\n\n      var start = 0,\n          end = 0;\n\n      // TODO(shyndman): This loop isn't strictly necessary if you can\n      // determine the minimum number of rows before a space opens up. To do\n      // this, recognize that you've iterated across an entire row looking for\n      // space, and if so fast-forward by the minimum rowSpan count. Repeat\n      // until the required space opens up.\n      while (end - start < spans.col) {\n        if (curCol >= colCount) {\n          nextRow();\n          continue;\n        }\n\n        start = spaceTracker.indexOf(0, curCol);\n        if (start === -1 || (end = findEnd(start + 1)) === -1) {\n          start = end = 0;\n          nextRow();\n          continue;\n        }\n\n        curCol = end + 1;\n      }\n\n      adjustRow(start, spans.col, spans.row);\n      curCol = start + spans.col;\n\n      return {\n        col: start,\n        row: curRow\n      };\n    }\n\n    function nextRow() {\n      curCol = 0;\n      curRow++;\n      adjustRow(0, colCount, -1); // Decrement row spans by one\n    }\n\n    function adjustRow(from, cols, by) {\n      for (var i = from; i < from + cols; i++) {\n        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);\n      }\n    }\n\n    function findEnd(start) {\n      var i;\n      for (i = start; i < spaceTracker.length; i++) {\n        if (spaceTracker[i] !== 0) {\n          return i;\n        }\n      }\n\n      if (i === spaceTracker.length) {\n        return i;\n      }\n    }\n\n    function newSpaceTracker() {\n      var tracker = [];\n      for (var i = 0; i < colCount; i++) {\n        tracker.push(0);\n      }\n      return tracker;\n    }\n  }\n}\nGridLayoutFactory.$inject = [\"$mdUtil\"];\n\n/**\n * @ngdoc directive\n * @name mdGridTile\n * @module material.components.gridList\n * @restrict E\n * @description\n * Tiles contain the content of an `md-grid-list`. They span one or more grid\n * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to\n * display secondary content.\n *\n * ### Responsive Attributes\n *\n * The `md-grid-tile` directive supports \"responsive\" attributes, which allow\n * different `md-rowspan` and `md-colspan` values depending on the currently\n * matching media query (as defined in `$mdConstant.MEDIA`).\n *\n * In order to set a responsive attribute, first define the fallback value with\n * the standard attribute name, then add additional attributes with the\n * following convention: `{base-attribute-name}-{media-query-name}=\"{value}\"`\n * (ie. `md-colspan-sm=\"4\"`)\n *\n * @param {number=} md-colspan The number of columns to span (default 1). Cannot\n *    exceed the number of columns in the grid. Supports interpolation.\n * @param {number=} md-rowspan The number of rows to span (default 1). Supports\n *     interpolation.\n *\n * @usage\n * With header:\n * <hljs lang=\"html\">\n * <md-grid-tile>\n *   <md-grid-tile-header>\n *     <h3>This is a header</h3>\n *   </md-grid-tile-header>\n * </md-grid-tile>\n * </hljs>\n *\n * With footer:\n * <hljs lang=\"html\">\n * <md-grid-tile>\n *   <md-grid-tile-footer>\n *     <h3>This is a footer</h3>\n *   </md-grid-tile-footer>\n * </md-grid-tile>\n * </hljs>\n *\n * Spanning multiple rows/columns:\n * <hljs lang=\"html\">\n * <md-grid-tile md-colspan=\"2\" md-rowspan=\"3\">\n * </md-grid-tile>\n * </hljs>\n *\n * Responsive attributes:\n * <hljs lang=\"html\">\n * <md-grid-tile md-colspan=\"1\" md-colspan-sm=\"3\" md-colspan-md=\"5\">\n * </md-grid-tile>\n * </hljs>\n */\nfunction GridTileDirective($mdMedia) {\n  return {\n    restrict: 'E',\n    require: '^mdGridList',\n    template: '<figure ng-transclude></figure>',\n    transclude: true,\n    scope: {},\n    // Simple controller that exposes attributes to the grid directive\n    controller: [\"$attrs\", function($attrs) {\n      this.$attrs = $attrs;\n    }],\n    link: postLink\n  };\n\n  function postLink(scope, element, attrs, gridCtrl) {\n    // Apply semantics\n    element.attr('role', 'listitem');\n\n    // If our colspan or rowspan changes, trigger a layout\n    var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],\n        attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));\n\n    // Tile registration/deregistration\n    gridCtrl.invalidateTiles();\n    scope.$on('$destroy', function() {\n      // Mark the tile as destroyed so it is no longer considered in layout,\n      // even if the DOM element sticks around (like during a leave animation)\n      element[0].$$mdDestroyed = true;\n      unwatchAttrs();\n      gridCtrl.invalidateLayout();\n    });\n\n    if (angular.isDefined(scope.$parent.$index)) {\n      scope.$watch(function() { return scope.$parent.$index; },\n        function indexChanged(newIdx, oldIdx) {\n          if (newIdx === oldIdx) {\n            return;\n          }\n          gridCtrl.invalidateTiles();\n        });\n    }\n  }\n}\nGridTileDirective.$inject = [\"$mdMedia\"];\n\n\nfunction GridTileCaptionDirective() {\n  return {\n    template: '<figcaption ng-transclude></figcaption>',\n    transclude: true\n  };\n}\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.icon\n * @description\n * Icon\n */\nangular.module('material.components.icon', [\n    'material.core'\n  ]);\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.input\n */\n\nangular.module('material.components.input', [\n  'material.core'\n])\n  .directive('mdInputContainer', mdInputContainerDirective)\n  .directive('label', labelDirective)\n  .directive('input', inputTextareaDirective)\n  .directive('textarea', inputTextareaDirective)\n  .directive('mdMaxlength', mdMaxlengthDirective)\n  .directive('placeholder', placeholderDirective)\n  .directive('ngMessages', ngMessagesDirective);\n\n/**\n * @ngdoc directive\n * @name mdInputContainer\n * @module material.components.input\n *\n * @restrict E\n *\n * @description\n * `<md-input-container>` is the parent of any input or textarea element.\n *\n * Input and textarea elements will not behave properly unless the md-input-container\n * parent is provided.\n *\n * @param md-is-error {expression=} When the given expression evaluates to true, the input container\n *   will go into error state. Defaults to erroring if the input has been touched and is invalid.\n * @param md-no-float {boolean=} When present, placeholders will not be converted to floating\n *   labels.\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-input-container>\n *   <label>Username</label>\n *   <input type=\"text\" ng-model=\"user.name\">\n * </md-input-container>\n *\n * <md-input-container>\n *   <label>Description</label>\n *   <textarea ng-model=\"user.description\"></textarea>\n * </md-input-container>\n *\n * </hljs>\n */\nfunction mdInputContainerDirective($mdTheming, $parse) {\n  ContainerCtrl.$inject = [\"$scope\", \"$element\", \"$attrs\"];\n  return {\n    restrict: 'E',\n    link: postLink,\n    controller: ContainerCtrl\n  };\n\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n  }\n\n  function ContainerCtrl($scope, $element, $attrs) {\n    var self = this;\n\n    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);\n\n    self.delegateClick = function() {\n      self.input.focus();\n    };\n    self.element = $element;\n    self.setFocused = function(isFocused) {\n      $element.toggleClass('md-input-focused', !!isFocused);\n    };\n    self.setHasValue = function(hasValue) {\n      $element.toggleClass('md-input-has-value', !!hasValue);\n    };\n    self.setHasMessages = function(hasMessages) {\n      $element.toggleClass('md-input-has-messages', !!hasMessages);\n    };\n    self.setHasPlaceholder = function(hasPlaceholder) {\n      $element.toggleClass('md-input-has-placeholder', !!hasPlaceholder);\n    };\n    self.setInvalid = function(isInvalid) {\n      $element.toggleClass('md-input-invalid', !!isInvalid);\n    };\n    $scope.$watch(function() {\n      return self.label && self.input;\n    }, function(hasLabelAndInput) {\n      if (hasLabelAndInput && !self.label.attr('for')) {\n        self.label.attr('for', self.input.attr('id'));\n      }\n    });\n  }\n}\nmdInputContainerDirective.$inject = [\"$mdTheming\", \"$parse\"];\n\nfunction labelDirective() {\n  return {\n    restrict: 'E',\n    require: '^?mdInputContainer',\n    link: function(scope, element, attr, containerCtrl) {\n      if (!containerCtrl || attr.mdNoFloat) return;\n\n      containerCtrl.label = element;\n      scope.$on('$destroy', function() {\n        containerCtrl.label = null;\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name mdInput\n * @restrict E\n * @module material.components.input\n *\n * @description\n * Use the `<input>` or the  `<textarea>` as a child of an `<md-input-container>`.\n *\n * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is\n *   specified, a character counter will be shown underneath the input.<br/><br/>\n *   The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't\n *   want the counter text and only need \"plain\" validation, you can use the \"simple\" `ng-maxlength`\n *   or maxlength attributes.\n * @param {string=} aria-label Aria-label is required when no label is present.  A warning message\n *   will be logged in the console if not present.\n * @param {string=} placeholder An alternative approach to using aria-label when the label is not\n *   PRESENT. The placeholder text is copied to the aria-label attribute.\n * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.\n * @param md-detect-hidden {boolean=} When present, textareas will be sized properly when they are revealed after being hidden. This is off by default for performance reasons because it guarantees a reflow every digest cycle.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-input-container>\n *   <label>Color</label>\n *   <input type=\"text\" ng-model=\"color\" required md-maxlength=\"10\">\n * </md-input-container>\n * </hljs>\n * <h3>With Errors</h3>\n *\n * <hljs lang=\"html\">\n * <form name=\"userForm\">\n *   <md-input-container>\n *     <label>Last Name</label>\n *     <input name=\"lastName\" ng-model=\"lastName\" required md-maxlength=\"10\" minlength=\"4\">\n *     <div ng-messages=\"userForm.lastName.$error\" ng-show=\"userForm.lastName.$dirty\">\n *       <div ng-message=\"required\">This is required!</div>\n *       <div ng-message=\"md-maxlength\">That's too long!</div>\n *       <div ng-message=\"minlength\">That's too short!</div>\n *     </div>\n *   </md-input-container>\n *   <md-input-container>\n *     <label>Biography</label>\n *     <textarea name=\"bio\" ng-model=\"biography\" required md-maxlength=\"150\"></textarea>\n *     <div ng-messages=\"userForm.bio.$error\" ng-show=\"userForm.bio.$dirty\">\n *       <div ng-message=\"required\">This is required!</div>\n *       <div ng-message=\"md-maxlength\">That's too long!</div>\n *     </div>\n *   </md-input-container>\n *   <md-input-container>\n *     <input aria-label='title' ng-model='title'>\n *   </md-input-container>\n *   <md-input-container>\n *     <input placeholder='title' ng-model='title'>\n *   </md-input-container>\n * </form>\n * </hljs>\n *\n * Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).\n * Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).\n *\n */\n\nfunction inputTextareaDirective($mdUtil, $window, $mdAria) {\n  return {\n    restrict: 'E',\n    require: ['^?mdInputContainer', '?ngModel'],\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrls) {\n\n    var containerCtrl = ctrls[0];\n    var hasNgModel = !!ctrls[1];\n    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n    var isReadonly = angular.isDefined(attr.readonly);\n\n    if (!containerCtrl) return;\n    if (containerCtrl.input) {\n      throw new Error(\"<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!\");\n    }\n    containerCtrl.input = element;\n\n    if (!containerCtrl.label) {\n      $mdAria.expect(element, 'aria-label', element.attr('placeholder'));\n    }\n\n    element.addClass('md-input');\n    if (!element.attr('id')) {\n      element.attr('id', 'input_' + $mdUtil.nextUid());\n    }\n\n    if (element[0].tagName.toLowerCase() === 'textarea') {\n      setupTextarea();\n    }\n\n    // If the input doesn't have an ngModel, it may have a static value. For that case,\n    // we have to do one initial check to determine if the container should be in the\n    // \"has a value\" state.\n    if (!hasNgModel) {\n      inputCheckValue();\n    }\n\n    var isErrorGetter = containerCtrl.isErrorGetter || function() {\n        return ngModelCtrl.$invalid && ngModelCtrl.$touched;\n      };\n    scope.$watch(isErrorGetter, containerCtrl.setInvalid);\n\n    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);\n    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);\n\n    element.on('input', inputCheckValue);\n\n    if (!isReadonly) {\n      element\n        .on('focus', function(ev) {\n          containerCtrl.setFocused(true);\n        })\n        .on('blur', function(ev) {\n          containerCtrl.setFocused(false);\n          inputCheckValue();\n        });\n\n    }\n\n    //ngModelCtrl.$setTouched();\n    //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();\n\n    scope.$on('$destroy', function() {\n      containerCtrl.setFocused(false);\n      containerCtrl.setHasValue(false);\n      containerCtrl.input = null;\n    });\n\n    /**\n     *\n     */\n    function ngModelPipelineCheckValue(arg) {\n      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));\n      return arg;\n    }\n\n    function inputCheckValue() {\n      // An input's value counts if its length > 0,\n      // or if the input's validity state says it has bad input (eg string in a number input)\n      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);\n    }\n\n    function setupTextarea() {\n      if (angular.isDefined(element.attr('md-no-autogrow'))) {\n        return;\n      }\n\n      var node = element[0];\n      var container = containerCtrl.element[0];\n\n      var min_rows = NaN;\n      var lineHeight = null;\n      // can't check if height was or not explicity set,\n      // so rows attribute will take precedence if present\n      if (node.hasAttribute('rows')) {\n        min_rows = parseInt(node.getAttribute('rows'));\n      }\n\n      var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);\n\n      function pipelineListener(value) {\n        onChangeTextarea();\n        return value;\n      }\n\n      if (ngModelCtrl) {\n        ngModelCtrl.$formatters.push(pipelineListener);\n        ngModelCtrl.$viewChangeListeners.push(pipelineListener);\n      } else {\n        onChangeTextarea();\n      }\n      element.on('keydown input', onChangeTextarea);\n\n      if (isNaN(min_rows)) {\n        element.attr('rows', '1');\n\n        element.on('scroll', onScroll);\n      }\n\n      angular.element($window).on('resize', onChangeTextarea);\n\n      scope.$on('$destroy', function() {\n        angular.element($window).off('resize', onChangeTextarea);\n      });\n\n      function growTextarea() {\n        // sets the md-input-container height to avoid jumping around\n        container.style.height = container.offsetHeight + 'px';\n\n        // temporarily disables element's flex so its height 'runs free'\n        element.addClass('md-no-flex');\n\n        if (isNaN(min_rows)) {\n          node.style.height = \"auto\";\n          node.scrollTop = 0;\n          var height = getHeight();\n          if (height) node.style.height = height + 'px';\n        } else {\n          node.setAttribute(\"rows\", 1);\n\n          if (!lineHeight) {\n            node.style.minHeight = '0';\n\n            lineHeight = element.prop('clientHeight');\n\n            node.style.minHeight = null;\n          }\n\n          var rows = Math.max(min_rows, Math.round(node.scrollHeight / lineHeight));\n          node.setAttribute(\"rows\", rows);\n        }\n\n        // reset everything back to normal\n        element.removeClass('md-no-flex');\n        container.style.height = 'auto';\n      }\n\n      function getHeight() {\n        var line = node.scrollHeight - node.offsetHeight;\n        return node.offsetHeight + (line > 0 ? line : 0);\n      }\n\n      function onScroll(e) {\n        node.scrollTop = 0;\n        // for smooth new line adding\n        var line = node.scrollHeight - node.offsetHeight;\n        var height = node.offsetHeight + line;\n        node.style.height = height + 'px';\n      }\n\n      // Attach a watcher to detect when the textarea gets shown.\n      if (angular.isDefined(element.attr('md-detect-hidden'))) {\n\n        var handleHiddenChange = function() {\n          var wasHidden = false;\n\n          return function() {\n            var isHidden = node.offsetHeight === 0;\n\n            if (isHidden === false && wasHidden === true) {\n              growTextarea();\n            }\n\n            wasHidden = isHidden;\n          };\n        }();\n\n        // Check every digest cycle whether the visibility of the textarea has changed.\n        // Queue up to run after the digest cycle is complete.\n        scope.$watch(function() {\n          $mdUtil.nextTick(handleHiddenChange, false);\n          return true;\n        });\n      }\n    }\n  }\n}\ninputTextareaDirective.$inject = [\"$mdUtil\", \"$window\", \"$mdAria\"];\n\nfunction mdMaxlengthDirective($animate) {\n  return {\n    restrict: 'A',\n    require: ['ngModel', '^mdInputContainer'],\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrls) {\n    var maxlength;\n    var ngModelCtrl = ctrls[0];\n    var containerCtrl = ctrls[1];\n    var charCountEl = angular.element('<div class=\"md-char-counter\">');\n    var input = angular.element(containerCtrl.element[0].querySelector('[md-maxlength]'));\n\n    // Stop model from trimming. This makes it so whitespace\n    // over the maxlength still counts as invalid.\n    attr.$set('ngTrim', 'false');\n\n    var ngMessagesSelectors = [\n      'ng-messages',\n      'data-ng-messages',\n      'x-ng-messages',\n      '[ng-messages]',\n      '[data-ng-messages]',\n      '[x-ng-messages]'\n    ];\n\n    var ngMessages = containerCtrl.element[0].querySelector(ngMessagesSelectors.join(','));\n\n    // If we have an ngMessages container, put the counter at the top; otherwise, put it after the\n    // input so it will be positioned properly in the SCSS\n    if (ngMessages) {\n      angular.element(ngMessages).prepend(charCountEl);\n    } else {\n      input.after(charCountEl);\n    }\n\n    ngModelCtrl.$formatters.push(renderCharCount);\n    ngModelCtrl.$viewChangeListeners.push(renderCharCount);\n    element.on('input keydown keyup', function() {\n      renderCharCount(); //make sure it's called with no args\n    });\n\n    scope.$watch(attr.mdMaxlength, function(value) {\n      maxlength = value;\n      if (angular.isNumber(value) && value > 0) {\n        if (!charCountEl.parent().length) {\n          $animate.enter(charCountEl, containerCtrl.element, input);\n        }\n        renderCharCount();\n      } else {\n        $animate.leave(charCountEl);\n      }\n    });\n\n    ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {\n      if (!angular.isNumber(maxlength) || maxlength < 0) {\n        return true;\n      }\n      return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;\n    };\n\n    function renderCharCount(value) {\n      // Force the value into a string since it may be a number,\n      // which does not have a length property.\n      charCountEl.text(String(element.val() || value || '').length + '/' + maxlength);\n      return value;\n    }\n  }\n}\nmdMaxlengthDirective.$inject = [\"$animate\"];\n\nfunction placeholderDirective($log) {\n  return {\n    restrict: 'A',\n    require: '^^?mdInputContainer',\n    priority: 200,\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, inputContainer) {\n    // If there is no input container, just return\n    if (!inputContainer) return;\n\n    var label = inputContainer.element.find('label');\n    var hasNoFloat = angular.isDefined(inputContainer.element.attr('md-no-float'));\n\n    // If we have a label, or they specify the md-no-float attribute, just return\n    if ((label && label.length) || hasNoFloat) {\n      // Add a placeholder class so we can target it in the CSS\n      inputContainer.setHasPlaceholder(true);\n      return;\n    }\n\n    // Otherwise, grab/remove the placeholder\n    var placeholderText = attr.placeholder;\n    element.removeAttr('placeholder');\n\n    // And add the placeholder text as a separate label\n    if (inputContainer.input && inputContainer.input[0].nodeName != 'MD-SELECT') {\n      var placeholder = '<label ng-click=\"delegateClick()\">' + placeholderText + '</label>';\n\n      inputContainer.element.addClass('md-icon-float');\n      inputContainer.element.prepend(placeholder);\n    }\n  }\n}\nplaceholderDirective.$inject = [\"$log\"];\n\nfunction ngMessagesDirective() {\n  return {\n    restrict: 'EA',\n    link: postLink,\n\n    // This is optional because we don't want target *all* ngMessage instances, just those inside of\n    // mdInputContainer.\n    require: '^^?mdInputContainer'\n  };\n\n  function postLink(scope, element, attr, inputContainer) {\n    // If we are not a child of an input container, don't do anything\n    if (!inputContainer) return;\n\n    // Tell our parent input container we have messages so we can set the proper classes\n    inputContainer.setHasMessages(true);\n\n    // When destroyed, inform our input container\n    scope.$on('$destroy', function() {\n      inputContainer.setHasMessages(false);\n    });\n  }\n}\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.list\n * @description\n * List module\n */\nangular.module('material.components.list', [\n  'material.core'\n])\n  .controller('MdListController', MdListController)\n  .directive('mdList', mdListDirective)\n  .directive('mdListItem', mdListItemDirective);\n\n/**\n * @ngdoc directive\n * @name mdList\n * @module material.components.list\n *\n * @restrict E\n *\n * @description\n * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-list>\n *   <md-list-item class=\"md-2-line\" ng-repeat=\"item in todos\">\n *     <md-checkbox ng-model=\"item.done\"></md-checkbox>\n *     <div class=\"md-list-item-text\">\n *       <h3>{{item.title}}</h3>\n *       <p>{{item.description}}</p>\n *     </div>\n *   </md-list-item>\n * </md-list>\n * </hljs>\n */\n\nfunction mdListDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    compile: function(tEl) {\n      tEl[0].setAttribute('role', 'list');\n      return $mdTheming;\n    }\n  };\n}\nmdListDirective.$inject = [\"$mdTheming\"];\n/**\n * @ngdoc directive\n * @name mdListItem\n * @module material.components.list\n *\n * @restrict E\n *\n * @description\n * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.\n *\n * ## CSS\n * `.md-avatar` - class for image avatars\n *\n * `.md-avatar-icon` - class for icon avatars\n *\n * `.md-offset` - on content without an avatar\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-list>\n *    <md-list-item>\n *      <img class=\"md-avatar\" ng-src=\"path/to/img\"/>\n *      <span>Item content in list</span>\n *    </md-list-item>\n *    <md-list-item>\n *      <md-icon class=\"md-avatar-icon\" md-svg-icon=\"communication:phone\"></md-icon>\n *      <span>Item content in list</span>\n *    </md-list-item>\n *  </md-list>\n * </hljs>\n *\n */\nfunction mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {\n  var proxiedTypes = ['md-checkbox', 'md-switch'];\n  return {\n    restrict: 'E',\n    controller: 'MdListController',\n    compile: function(tEl, tAttrs) {\n      // Check for proxy controls (no ng-click on parent, and a control inside)\n      var secondaryItem = tEl[0].querySelector('.md-secondary');\n      var hasProxiedElement;\n      var proxyElement;\n\n      tEl[0].setAttribute('role', 'listitem');\n\n      if (!tAttrs.ngClick) {\n        for (var i = 0, type; type = proxiedTypes[i]; ++i) {\n          if (proxyElement = tEl[0].querySelector(type)) {\n            hasProxiedElement = true;\n            break;\n          }\n        }\n        if (hasProxiedElement) {\n          wrapIn('div');\n        } else if (!tEl[0].querySelector('md-button')) {\n          tEl.addClass('md-no-proxy');\n        }\n      } else {\n        wrapIn('button');\n      }\n      setupToggleAria();\n\n\n      function setupToggleAria() {\n        var toggleTypes = ['md-switch', 'md-checkbox'];\n        var toggle;\n\n        for (var i = 0, toggleType; toggleType = toggleTypes[i]; ++i) {\n          if (toggle = tEl.find(toggleType)[0]) {\n            if (!toggle.hasAttribute('aria-label')) {\n              var p = tEl.find('p')[0];\n              if (!p) return;\n              toggle.setAttribute('aria-label', 'Toggle ' + p.textContent);\n            }\n          }\n        }\n      }\n\n      function wrapIn(type) {\n        var container;\n        if (type == 'div') {\n          container = angular.element('<div class=\"md-no-style md-list-item-inner\">');\n          container.append(tEl.contents());\n          tEl.addClass('md-proxy-focus');\n        } else {\n          container = angular.element('<md-button class=\"md-no-style\"><div class=\"md-list-item-inner\"></div></md-button>');\n          var copiedAttrs = ['ng-click', 'aria-label', 'ng-disabled'];\n          angular.forEach(copiedAttrs, function(attr) {\n            if (tEl[0].hasAttribute(attr)) {\n              container[0].setAttribute(attr, tEl[0].getAttribute(attr));\n              tEl[0].removeAttribute(attr);\n            }\n          });\n          container.children().eq(0).append(tEl.contents());\n        }\n\n        tEl[0].setAttribute('tabindex', '-1');\n        tEl.append(container);\n\n        if (secondaryItem && secondaryItem.hasAttribute('ng-click')) {\n          $mdAria.expect(secondaryItem, 'aria-label');\n          var buttonWrapper = angular.element('<md-button class=\"md-secondary-container md-icon-button\">');\n          buttonWrapper.attr('ng-click', secondaryItem.getAttribute('ng-click'));\n          secondaryItem.removeAttribute('ng-click');\n          secondaryItem.setAttribute('tabindex', '-1');\n          secondaryItem.classList.remove('md-secondary');\n          buttonWrapper.append(secondaryItem);\n          secondaryItem = buttonWrapper[0];\n        }\n\n        // Check for a secondary item and move it outside\n        if ( secondaryItem && (\n          secondaryItem.hasAttribute('ng-click') ||\n            ( tAttrs.ngClick &&\n             isProxiedElement(secondaryItem) )\n        )) {\n          tEl.addClass('md-with-secondary');\n          tEl.append(secondaryItem);\n        }\n      }\n\n      function isProxiedElement(el) {\n        return proxiedTypes.indexOf(el.nodeName.toLowerCase()) != -1;\n      }\n\n      return postLink;\n\n      function postLink($scope, $element, $attr, ctrl) {\n\n        var proxies    = [],\n            firstChild = $element[0].firstElementChild,\n            hasClick   = firstChild && firstChild.hasAttribute('ng-click');\n\n        computeProxies();\n        computeClickable();\n\n        if ($element.hasClass('md-proxy-focus') && proxies.length) {\n          angular.forEach(proxies, function(proxy) {\n            proxy = angular.element(proxy);\n\n            $scope.mouseActive = false;\n            proxy.on('mousedown', function() {\n              $scope.mouseActive = true;\n              $timeout(function(){\n                $scope.mouseActive = false;\n              }, 100);\n            })\n            .on('focus', function() {\n              if ($scope.mouseActive === false) { $element.addClass('md-focused'); }\n              proxy.on('blur', function proxyOnBlur() {\n                $element.removeClass('md-focused');\n                proxy.off('blur', proxyOnBlur);\n              });\n            });\n          });\n        }\n\n        function computeProxies() {\n          var children = $element.children();\n          if (children.length && !children[0].hasAttribute('ng-click')) {\n            angular.forEach(proxiedTypes, function(type) {\n              angular.forEach(firstChild.querySelectorAll(type), function(child) {\n                proxies.push(child);\n              });\n            });\n          }\n        }\n        function computeClickable() {\n          if (proxies.length || hasClick) {\n            $element.addClass('md-clickable');\n\n            ctrl.attachRipple($scope, angular.element($element[0].querySelector('.md-no-style')));\n          }\n        }\n\n        if (!hasClick && !proxies.length) {\n          firstChild && firstChild.addEventListener('keypress', function(e) {\n            if (e.target.nodeName != 'INPUT' && e.target.nodeName != 'TEXTAREA') {\n              var keyCode = e.which || e.keyCode;\n              if (keyCode == $mdConstant.KEY_CODE.SPACE) {\n                if (firstChild) {\n                  firstChild.click();\n                  e.preventDefault();\n                  e.stopPropagation();\n                }\n              }\n            }\n          });\n        }\n\n        $element.off('click');\n        $element.off('keypress');\n\n        if (proxies.length && firstChild) {\n          $element.children().eq(0).on('click', function(e) {\n            var parentButton = $mdUtil.getClosest(e.target, 'BUTTON');\n            if (!parentButton && firstChild.contains(e.target)) {\n              angular.forEach(proxies, function(proxy) {\n                if (e.target !== proxy && !proxy.contains(e.target)) {\n                  angular.element(proxy).triggerHandler('click');\n                }\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n}\nmdListItemDirective.$inject = [\"$mdAria\", \"$mdConstant\", \"$mdUtil\", \"$timeout\"];\n\n/*\n * @private\n * @ngdoc controller\n * @name MdListController\n * @module material.components.list\n *\n */\nfunction MdListController($scope, $element, $mdListInkRipple) {\n  var ctrl = this;\n  ctrl.attachRipple = attachRipple;\n\n  function attachRipple (scope, element) {\n    var options = {};\n    $mdListInkRipple.attach(scope, element, options);\n  }\n}\nMdListController.$inject = [\"$scope\", \"$element\", \"$mdListInkRipple\"];\n\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.menu\n */\n\nangular.module('material.components.menu', [\n  'material.core',\n  'material.components.backdrop'\n]);\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.menu-bar\n */\n\nangular.module('material.components.menuBar', [\n  'material.core',\n  'material.components.menu'\n]);\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.progressCircular\n * @description Circular Progress module!\n */\nangular.module('material.components.progressCircular', [\n  'material.core'\n])\n  .directive('mdProgressCircular', MdProgressCircularDirective);\n\n/**\n * @ngdoc directive\n * @name mdProgressCircular\n * @module material.components.progressCircular\n * @restrict E\n *\n* @description\n * The circular progress directive is used to make loading content in your app as delightful and\n * painless as possible by minimizing the amount of visual change a user sees before they can view\n * and interact with content.\n *\n * For operations where the percentage of the operation completed can be determined, use a\n * determinate indicator. They give users a quick sense of how long an operation will take.\n *\n * For operations where the user is asked to wait a moment while something finishes up, and it’s\n * not necessary to expose what's happening behind the scenes and how long it will take, use an\n * indeterminate indicator.\n *\n * @param {string} md-mode Select from one of two modes: **'determinate'** and **'indeterminate'**.\n *\n * Note: if the `md-mode` value is set as undefined or specified as not 1 of the two (2) valid modes, then `.ng-hide`\n * will be auto-applied as a style to the component.\n *\n * Note: if not configured, the `md-mode=\"indeterminate\"` will be auto injected as an attribute.\n * If `value=\"\"` is also specified, however, then `md-mode=\"determinate\"` would be auto-injected instead.\n * @param {number=} value In determinate mode, this number represents the percentage of the\n *     circular progress. Default: 0\n * @param {number=} md-diameter This specifies the diamter of the circular progress. The value\n * may be a percentage (eg '25%') or a pixel-size value (eg '48'). If this attribute is\n * not present then a default value of '48px' is assumed.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-progress-circular md-mode=\"determinate\" value=\"...\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"determinate\" ng-value=\"...\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"determinate\" value=\"...\" md-diameter=\"100\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"indeterminate\"></md-progress-circular>\n * </hljs>\n */\nfunction MdProgressCircularDirective($mdTheming, $mdUtil, $log) {\n  var DEFAULT_PROGRESS_SIZE = 100;\n  var DEFAULT_SCALING = 0.5;\n\n  var MODE_DETERMINATE = \"determinate\",\n      MODE_INDETERMINATE = \"indeterminate\";\n\n\n  return {\n    restrict: 'E',\n    scope : true,\n    template:\n        // The progress 'circle' is composed of two half-circles: the left side and the right\n        // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.\n        '<div class=\"md-spinner-wrapper\">' +\n          '<div class=\"md-inner\">' +\n            '<div class=\"md-gap\"></div>' +\n            '<div class=\"md-left\">' +\n              '<div class=\"md-half-circle\"></div>' +\n            '</div>' +\n            '<div class=\"md-right\">' +\n              '<div class=\"md-half-circle\"></div>' +\n            '</div>' +\n          '</div>' +\n        '</div>',\n    compile: compile\n  };\n\n  function compile(tElement) {\n    // The javascript in this file is mainly responsible for setting the correct aria attributes.\n    // The animation of the progress spinner is done entirely with just CSS.\n    tElement.attr('aria-valuemin', 0);\n    tElement.attr('aria-valuemax', 100);\n    tElement.attr('role', 'progressbar');\n\n    return postLink;\n  }\n\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n\n    var circle = element;\n    var spinnerWrapper =  angular.element(element.children()[0]);\n    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;\n\n    element.attr('md-mode', mode());\n\n    updateScale();\n    validateMode();\n    watchAttributes();\n\n    /**\n     * Watch the value and md-mode attributes\n     */\n    function watchAttributes() {\n     attr.$observe('value', function(value) {\n           var percentValue = clamp(value);\n           element.attr('aria-valuenow', percentValue);\n\n           if (mode() == MODE_DETERMINATE) {\n             animateIndicator(percentValue);\n           }\n         });\n     attr.$observe('mdMode',function(mode){\n       switch( mode ) {\n         case MODE_DETERMINATE:\n         case MODE_INDETERMINATE:\n           spinnerWrapper.removeClass('ng-hide');\n           spinnerWrapper.removeClass( lastMode );\n           spinnerWrapper.addClass( lastMode = \"md-mode-\" + mode );\n           break;\n         default:\n           spinnerWrapper.removeClass( lastMode );\n           spinnerWrapper.addClass('ng-hide');\n           lastMode = undefined;\n           break;\n       }\n     });\n    }\n\n    /**\n     * Update size/scaling of the progress indicator\n     * Watch the \"value\" and \"md-mode\" attributes\n     */\n    function updateScale() {\n      circle.css(toVendorCSS({\n        transform : $mdUtil.supplant('scale( {0} )',[getDiameterRatio()])\n      }));\n    }\n\n    /**\n     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified\n     */\n    function validateMode() {\n      if ( angular.isUndefined(attr.mdMode) ) {\n        var hasValue = angular.isDefined(attr.value);\n        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;\n        var info = \"Auto-adding the missing md-mode='{0}' to the ProgressCircular element\";\n\n        $log.debug( $mdUtil.supplant(info, [mode]) );\n\n        element.attr(\"md-mode\",mode);\n        attr['mdMode'] = mode;\n      }\n    }\n\n    var leftC, rightC, gap;\n\n    /**\n     * Manually animate the Determinate indicator based on the specified\n     * percentage value (0-100).\n     *\n     * Note: this animation was previously done using SCSS.\n     * - generated 54K of styles\n     * - use attribute selectors which had poor performances in IE\n     */\n    function animateIndicator(value) {\n      if ( !mode() ) return;\n\n      leftC  = leftC  || angular.element(element[0].querySelector('.md-left > .md-half-circle'));\n      rightC = rightC || angular.element(element[0].querySelector('.md-right > .md-half-circle'));\n      gap    = gap    || angular.element(element[0].querySelector('.md-gap'));\n\n      var gapStyles = removeEmptyValues({\n          borderBottomColor: (value <= 50) ? \"transparent !important\" : \"\",\n          transition: (value <= 50) ? \"\" : \"borderBottomColor 0.1s linear\"\n        }),\n        leftStyles = removeEmptyValues({\n          transition: (value <= 50) ? \"transform 0.1s linear\" : \"\",\n          transform: $mdUtil.supplant(\"rotate({0}deg)\", [value <= 50 ? 135 : (((value - 50) / 50 * 180) + 135)])\n        }),\n        rightStyles = removeEmptyValues({\n          transition: (value >= 50) ? \"transform 0.1s linear\" : \"\",\n          transform: $mdUtil.supplant(\"rotate({0}deg)\", [value >= 50 ? 45 : (value / 50 * 180 - 135)])\n        });\n\n      leftC.css(toVendorCSS(leftStyles));\n      rightC.css(toVendorCSS(rightStyles));\n      gap.css(toVendorCSS(gapStyles));\n\n    }\n\n    /**\n     * We will scale the progress circle based on the default diameter.\n     *\n     * Determine the diameter percentage (defaults to 100%)\n     * May be express as float, percentage, or integer\n     */\n    function getDiameterRatio() {\n      if ( !attr.mdDiameter ) return DEFAULT_SCALING;\n\n      var match = /([0-9]*)%/.exec(attr.mdDiameter);\n      var value = Math.max(0, (match && match[1]/100) || parseFloat(attr.mdDiameter));\n\n      // should return ratio; DEFAULT_PROGRESS_SIZE === 100px is default size\n      return  (value > 1) ? value / DEFAULT_PROGRESS_SIZE : value;\n    }\n\n    /**\n     * Is the md-mode a valid option?\n     */\n    function mode() {\n      var value = (attr.mdMode || \"\").trim();\n      if ( value ) {\n        switch(value) {\n          case MODE_DETERMINATE :\n          case MODE_INDETERMINATE :\n            break;\n          default:\n            value = undefined;\n            break;\n        }\n      }\n      return value;\n    }\n\n  }\n\n  /**\n   * Clamps the value to be between 0 and 100.\n   * @param {number} value The value to clamp.\n   * @returns {number}\n   */\n  function clamp(value) {\n    return Math.max(0, Math.min(value || 0, 100));\n  }\n\n  function removeEmptyValues(target) {\n    for (var key in target) {\n      if (target.hasOwnProperty(key)) {\n        if ( target[key] == \"\" ) delete target[key];\n      }\n    }\n\n    return target;\n  }\n}\nMdProgressCircularDirective.$inject = [\"$mdTheming\", \"$mdUtil\", \"$log\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.radioButton\n * @description radioButton module!\n */\nangular.module('material.components.radioButton', [\n  'material.core'\n])\n  .directive('mdRadioGroup', mdRadioGroupDirective)\n  .directive('mdRadioButton', mdRadioButtonDirective);\n\n/**\n * @ngdoc directive\n * @module material.components.radioButton\n * @name mdRadioGroup\n *\n * @restrict E\n *\n * @description\n * The `<md-radio-group>` directive identifies a grouping\n * container for the 1..n grouped radio buttons; specified using nested\n * `<md-radio-button>` tags.\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the radio button is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently\n * than the native `<input type='radio'>` controls. Whereas the native controls\n * force the user to tab through all the radio buttons, `<md-radio-group>`\n * is focusable, and by default the `<md-radio-button>`s are not.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-radio-group ng-model=\"selected\">\n *\n *   <md-radio-button\n *        ng-repeat=\"d in colorOptions\"\n *        ng-value=\"d.value\" aria-label=\"{{ d.label }}\">\n *\n *          {{ d.label }}\n *\n *   </md-radio-button>\n *\n * </md-radio-group>\n * </hljs>\n *\n */\nfunction mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {\n  RadioGroupController.prototype = createRadioGroupControllerProto();\n\n  return {\n    restrict: 'E',\n    controller: ['$element', RadioGroupController],\n    require: ['mdRadioGroup', '?ngModel'],\n    link: { pre: linkRadioGroup }\n  };\n\n  function linkRadioGroup(scope, element, attr, ctrls) {\n    $mdTheming(element);\n    var rgCtrl = ctrls[0];\n    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n\n    rgCtrl.init(ngModelCtrl);\n\n    scope.mouseActive = false;\n    element.attr({\n              'role': 'radiogroup',\n              'tabIndex': element.attr('tabindex') || '0'\n            })\n            .on('keydown', keydownListener)\n            .on('mousedown', function(event) {\n              scope.mouseActive = true;\n              $timeout(function() {\n                scope.mouseActive = false;\n              }, 100);\n            })\n            .on('focus', function() {\n              if(scope.mouseActive === false) { rgCtrl.$element.addClass('md-focused'); }\n            })\n            .on('blur', function() { rgCtrl.$element.removeClass('md-focused'); });\n\n    /**\n     *\n     */\n    function setFocus() {\n      if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }\n    }\n\n    /**\n     *\n     */\n    function keydownListener(ev) {\n      var keyCode = ev.which || ev.keyCode;\n      switch(keyCode) {\n        case $mdConstant.KEY_CODE.LEFT_ARROW:\n        case $mdConstant.KEY_CODE.UP_ARROW:\n          ev.preventDefault();\n          rgCtrl.selectPrevious();\n          setFocus();\n          break;\n\n        case $mdConstant.KEY_CODE.RIGHT_ARROW:\n        case $mdConstant.KEY_CODE.DOWN_ARROW:\n          ev.preventDefault();\n          rgCtrl.selectNext();\n          setFocus();\n          break;\n\n        case $mdConstant.KEY_CODE.ENTER:\n          var form = angular.element($mdUtil.getClosest(element[0], 'form'));\n          if (form.length > 0) {\n            form.triggerHandler('submit');\n          }\n          break;\n      }\n    }\n  }\n\n  function RadioGroupController($element) {\n    this._radioButtonRenderFns = [];\n    this.$element = $element;\n  }\n\n  function createRadioGroupControllerProto() {\n    return {\n      init: function(ngModelCtrl) {\n        this._ngModelCtrl = ngModelCtrl;\n        this._ngModelCtrl.$render = angular.bind(this, this.render);\n      },\n      add: function(rbRender) {\n        this._radioButtonRenderFns.push(rbRender);\n      },\n      remove: function(rbRender) {\n        var index = this._radioButtonRenderFns.indexOf(rbRender);\n        if (index !== -1) {\n          this._radioButtonRenderFns.splice(index, 1);\n        }\n      },\n      render: function() {\n        this._radioButtonRenderFns.forEach(function(rbRender) {\n          rbRender();\n        });\n      },\n      setViewValue: function(value, eventType) {\n        this._ngModelCtrl.$setViewValue(value, eventType);\n        // update the other radio buttons as well\n        this.render();\n      },\n      getViewValue: function() {\n        return this._ngModelCtrl.$viewValue;\n      },\n      selectNext: function() {\n        return changeSelectedButton(this.$element, 1);\n      },\n      selectPrevious: function() {\n        return changeSelectedButton(this.$element, -1);\n      },\n      setActiveDescendant: function (radioId) {\n        this.$element.attr('aria-activedescendant', radioId);\n      }\n    };\n  }\n  /**\n   * Change the radio group's selected button by a given increment.\n   * If no button is selected, select the first button.\n   */\n  function changeSelectedButton(parent, increment) {\n    // Coerce all child radio buttons into an array, then wrap then in an iterator\n    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);\n\n    if (buttons.count()) {\n      var validate = function (button) {\n        // If disabled, then NOT valid\n        return !angular.element(button).attr(\"disabled\");\n      };\n\n      var selected = parent[0].querySelector('md-radio-button.md-checked');\n      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();\n\n      // Activate radioButton's click listener (triggerHandler won't create a real click event)\n      angular.element(target).triggerHandler('click');\n\n\n    }\n  }\n\n}\nmdRadioGroupDirective.$inject = [\"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$timeout\"];\n\n/**\n * @ngdoc directive\n * @module material.components.radioButton\n * @name mdRadioButton\n *\n * @restrict E\n *\n * @description\n * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.\n *\n * While similar to the `<input type=\"radio\" ng-model=\"\" value=\"\">` directive,\n * the `<md-radio-button>` directive provides ink effects, ARIA support, and\n * supports use within named radio groups.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n * @param {string} ngValue Angular expression which sets the value to which the expression should\n *    be set when selected.\n * @param {string} value The value to which the expression should be set when selected.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} aria-label Adds label to radio button for accessibility.\n * Defaults to radio button's text. If no text content is available, a warning will be logged.\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-radio-button value=\"1\" aria-label=\"Label 1\">\n *   Label 1\n * </md-radio-button>\n *\n * <md-radio-button ng-model=\"color\" ng-value=\"specialValue\" aria-label=\"Green\">\n *   Green\n * </md-radio-button>\n *\n * </hljs>\n *\n */\nfunction mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {\n\n  var CHECKED_CSS = 'md-checked';\n\n  return {\n    restrict: 'E',\n    require: '^mdRadioGroup',\n    transclude: true,\n    template: '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n                '<div class=\"md-off\"></div>' +\n                '<div class=\"md-on\"></div>' +\n              '</div>' +\n              '<div ng-transclude class=\"md-label\"></div>',\n    link: link\n  };\n\n  function link(scope, element, attr, rgCtrl) {\n    var lastChecked;\n\n    $mdTheming(element);\n    configureAria(element, scope);\n\n    initialize();\n\n    /**\n     *\n     */\n    function initialize(controller) {\n      if ( !rgCtrl ) {\n        throw 'RadioGroupController not found.';\n      }\n\n      rgCtrl.add(render);\n      attr.$observe('value', render);\n\n      element\n        .on('click', listener)\n        .on('$destroy', function() {\n          rgCtrl.remove(render);\n        });\n    }\n\n    /**\n     *\n     */\n    function listener(ev) {\n      if (element[0].hasAttribute('disabled')) return;\n\n      scope.$apply(function() {\n        rgCtrl.setViewValue(attr.value, ev && ev.type);\n      });\n    }\n\n    /**\n     *  Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).\n     *  Update the `aria-activedescendant` attribute.\n     */\n    function render() {\n      var checked = (rgCtrl.getViewValue() == attr.value);\n      if (checked === lastChecked) {\n        return;\n      }\n\n      lastChecked = checked;\n      element.attr('aria-checked', checked);\n\n      if (checked) {\n        markParentAsChecked(true);\n        element.addClass(CHECKED_CSS);\n\n        rgCtrl.setActiveDescendant(element.attr('id'));\n\n      } else {\n        markParentAsChecked(false);\n        element.removeClass(CHECKED_CSS);\n      }\n\n      /**\n       * If the radioButton is inside a div, then add class so highlighting will work...\n       */\n      function markParentAsChecked(addClass ) {\n        if ( element.parent()[0].nodeName != \"MD-RADIO-GROUP\") {\n          element.parent()[ !!addClass ? 'addClass' : 'removeClass'](CHECKED_CSS);\n        }\n\n      }\n    }\n\n    /**\n     * Inject ARIA-specific attributes appropriate for each radio button\n     */\n    function configureAria( element, scope ){\n      scope.ariaId = buildAriaID();\n\n      element.attr({\n        'id' :  scope.ariaId,\n        'role' : 'radio',\n        'aria-checked' : 'false'\n      });\n\n      $mdAria.expectWithText(element, 'aria-label');\n\n      /**\n       * Build a unique ID for each radio button that will be used with aria-activedescendant.\n       * Preserve existing ID if already specified.\n       * @returns {*|string}\n       */\n      function buildAriaID() {\n        return attr.id || ( 'radio' + \"_\" + $mdUtil.nextUid() );\n      }\n    }\n  }\n}\nmdRadioButtonDirective.$inject = [\"$mdAria\", \"$mdUtil\", \"$mdTheming\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.progressLinear\n * @description Linear Progress module!\n */\nangular.module('material.components.progressLinear', [\n  'material.core'\n])\n  .directive('mdProgressLinear', MdProgressLinearDirective);\n\n/**\n * @ngdoc directive\n * @name mdProgressLinear\n * @module material.components.progressLinear\n * @restrict E\n *\n * @description\n * The linear progress directive is used to make loading content\n * in your app as delightful and painless as possible by minimizing\n * the amount of visual change a user sees before they can view\n * and interact with content.\n *\n * Each operation should only be represented by one activity indicator\n * For example: one refresh operation should not display both a\n * refresh bar and an activity circle.\n *\n * For operations where the percentage of the operation completed\n * can be determined, use a determinate indicator. They give users\n * a quick sense of how long an operation will take.\n *\n * For operations where the user is asked to wait a moment while\n * something finishes up, and it’s not necessary to expose what's\n * happening behind the scenes and how long it will take, use an\n * indeterminate indicator.\n *\n * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.\n *\n * Note: if the `md-mode` value is set as undefined or specified as 1 of the four (4) valid modes, then `.ng-hide`\n * will be auto-applied as a style to the component.\n *\n * Note: if not configured, the `md-mode=\"indeterminate\"` will be auto injected as an attribute. If `value=\"\"` is also specified, however,\n * then `md-mode=\"determinate\"` would be auto-injected instead.\n * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0\n * @param {number=} md-buffer-value In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-progress-linear md-mode=\"determinate\" value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"determinate\" ng-value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"indeterminate\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"buffer\" value=\"...\" md-buffer-value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"query\"></md-progress-linear>\n * </hljs>\n */\nfunction MdProgressLinearDirective($mdTheming, $mdUtil, $log) {\n  var MODE_DETERMINATE = \"determinate\",\n      MODE_INDETERMINATE = \"indeterminate\",\n      MODE_BUFFER = \"buffer\",\n      MODE_QUERY = \"query\";\n\n  return {\n    restrict: 'E',\n    template: '<div class=\"md-container\">' +\n      '<div class=\"md-dashed\"></div>' +\n      '<div class=\"md-bar md-bar1\"></div>' +\n      '<div class=\"md-bar md-bar2\"></div>' +\n      '</div>',\n    compile: compile\n  };\n  \n  function compile(tElement, tAttrs, transclude) {\n    tElement.attr('aria-valuemin', 0);\n    tElement.attr('aria-valuemax', 100);\n    tElement.attr('role', 'progressbar');\n\n    return postLink;\n  }\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n\n    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;\n    var bar1 = angular.element(element[0].querySelector('.md-bar1')),\n        bar2 = angular.element(element[0].querySelector('.md-bar2')),\n        container = angular.element(element[0].querySelector('.md-container'));\n\n    element.attr('md-mode', mode());\n\n    validateMode();\n    watchAttributes();\n\n    /**\n     * Watch the value, md-buffer-value, and md-mode attributes\n     */\n    function watchAttributes() {\n      attr.$observe('value', function(value) {\n        var percentValue = clamp(value);\n        element.attr('aria-valuenow', percentValue);\n\n        if (mode() != MODE_QUERY) animateIndicator(bar2, percentValue);\n      });\n\n      attr.$observe('mdBufferValue', function(value) {\n        animateIndicator(bar1, clamp(value));\n      });\n\n      attr.$observe('mdMode',function(mode){\n        switch( mode ) {\n          case MODE_QUERY:\n          case MODE_BUFFER:\n          case MODE_DETERMINATE:\n          case MODE_INDETERMINATE:\n            container.removeClass( 'ng-hide' + ' ' + lastMode );\n            container.addClass( lastMode = \"md-mode-\" + mode );\n            break;\n          default:\n            container.removeClass( lastMode );\n            container.addClass('ng-hide');\n            lastMode = undefined;\n            break;\n        }\n      });\n    }\n\n    /**\n     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified\n     */\n    function validateMode() {\n      if ( angular.isUndefined(attr.mdMode) ) {\n        var hasValue = angular.isDefined(attr.value);\n        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;\n        var info = \"Auto-adding the missing md-mode='{0}' to the ProgressLinear element\";\n\n        $log.debug( $mdUtil.supplant(info, [mode]) );\n\n        element.attr(\"md-mode\",mode);\n        attr['mdMode'] = mode;\n      }\n    }\n\n    /**\n     * Is the md-mode a valid option?\n     */\n    function mode() {\n      var value = (attr.mdMode || \"\").trim();\n      if ( value ) {\n        switch(value) {\n          case MODE_DETERMINATE:\n          case MODE_INDETERMINATE:\n          case MODE_BUFFER:\n          case MODE_QUERY:\n            break;\n          default:\n            value = undefined;\n            break;\n        }\n      }\n      return value;\n    }\n\n    /**\n     * Manually set CSS to animate the Determinate indicator based on the specified\n     * percentage value (0-100).\n     */\n    function animateIndicator(target, value) {\n      if ( !mode() ) return;\n\n      var to = $mdUtil.supplant(\"translateX({0}%) scale({1},1)\", [ (value-100)/2, value/100 ]);\n      var styles = toVendorCSS({ transform : to });\n      angular.element(target).css( styles );\n    }\n  }\n\n  /**\n   * Clamps the value to be between 0 and 100.\n   * @param {number} value The value to clamp.\n   * @returns {number}\n   */\n  function clamp(value) {\n    return Math.max(0, Math.min(value || 0, 100));\n  }\n}\nMdProgressLinearDirective.$inject = [\"$mdTheming\", \"$mdUtil\", \"$log\"];\n\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.select\n */\n\n/***************************************************\n\n ### TODO ###\n **DOCUMENTATION AND DEMOS**\n\n - [ ] ng-model with child mdOptions (basic)\n - [ ] ng-model=\"foo\" ng-model-options=\"{ trackBy: '$value.id' }\" for objects\n - [ ] mdOption with value\n - [ ] Usage with input inside\n\n ### TODO - POST RC1 ###\n - [ ] Abstract placement logic in $mdSelect service to $mdMenu service\n\n ***************************************************/\n\nvar SELECT_EDGE_MARGIN = 8;\nvar selectNextId = 0;\n\nangular.module('material.components.select', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .directive('mdSelect', SelectDirective)\n  .directive('mdSelectMenu', SelectMenuDirective)\n  .directive('mdOption', OptionDirective)\n  .directive('mdOptgroup', OptgroupDirective)\n  .provider('$mdSelect', SelectProvider);\n\n/**\n * @ngdoc directive\n * @name mdSelect\n * @restrict E\n * @module material.components.select\n *\n * @description Displays a select box, bound to an ng-model.\n *\n * @param {expression} ng-model The model!\n * @param {boolean=} multiple Whether it's multiple.\n * @param {expression=} md-on-close Expression to be evaluated when the select is closed.\n * @param {string=} placeholder Placeholder hint text.\n * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or\n * explicit label is present.\n * @param {string=} md-container-class Class list to get applied to the `.md-select-menu-container`\n * element (for custom styling).\n *\n * @usage\n * With a placeholder (label and aria-label are added dynamically)\n * <hljs lang=\"html\">\n *   <md-input-container>\n *     <md-select\n *       ng-model=\"someModel\"\n *       placeholder=\"Select a state\">\n *       <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods2\">{{ opt }}</md-option>\n *     </md-select>\n *   </md-input-container>\n * </hljs>\n *\n * With an explicit label\n * <hljs lang=\"html\">\n *   <md-input-container>\n *     <label>State</label>\n *     <md-select\n *       ng-model=\"someModel\">\n *       <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods2\">{{ opt }}</md-option>\n *     </md-select>\n *   </md-input-container>\n * </hljs>\n */\nfunction SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {\n  return {\n    restrict: 'E',\n    require: ['^?mdInputContainer', 'mdSelect', 'ngModel', '?^form'],\n    compile: compile,\n    controller: function() {\n    } // empty placeholder controller to be initialized in link\n  };\n\n  function compile(element, attr) {\n    // add the select value that will hold our placeholder or selected option value\n    var valueEl = angular.element('<md-select-value><span></span></md-select-value>');\n    valueEl.append('<span class=\"md-select-icon\" aria-hidden=\"true\"></span>');\n    valueEl.addClass('md-select-value');\n    if (!valueEl[0].hasAttribute('id')) {\n      valueEl.attr('id', 'select_value_label_' + $mdUtil.nextUid());\n    }\n\n    // There's got to be an md-content inside. If there's not one, let's add it.\n    if (!element.find('md-content').length) {\n      element.append(angular.element('<md-content>').append(element.contents()));\n    }\n\n    // Add progress spinner for md-options-loading\n    if (attr.mdOnOpen) {\n\n      // Show progress indicator while loading async\n      // Use ng-hide for `display:none` so the indicator does not interfere with the options list\n      element\n        .find('md-content')\n        .prepend(angular.element(\n          '<div>' +\n          ' <md-progress-circular md-mode=\"{{progressMode}}\" ng-hide=\"$$loadingAsyncDone\"></md-progress-circular>' +\n          '</div>'\n        ));\n\n      // Hide list [of item options] while loading async\n      element\n        .find('md-option')\n        .attr('ng-show', '$$loadingAsyncDone');\n    }\n\n    if (attr.name) {\n      var autofillClone = angular.element('<select class=\"md-visually-hidden\">');\n      autofillClone.attr({\n        'name': '.' + attr.name,\n        'ng-model': attr.ngModel,\n        'aria-hidden': 'true',\n        'tabindex': '-1'\n      });\n      var opts = element.find('md-option');\n      angular.forEach(opts, function(el) {\n        var newEl = angular.element('<option>' + el.innerHTML + '</option>');\n        if (el.hasAttribute('ng-value')) newEl.attr('ng-value', el.getAttribute('ng-value'));\n        else if (el.hasAttribute('value')) newEl.attr('value', el.getAttribute('value'));\n        autofillClone.append(newEl);\n      });\n\n      element.parent().append(autofillClone);\n    }\n\n    // Use everything that's left inside element.contents() as the contents of the menu\n    var multiple = angular.isDefined(attr.multiple) ? 'multiple' : '';\n    var selectTemplate = '' +\n      '<div class=\"md-select-menu-container\">' +\n      '<md-select-menu {0}>{1}</md-select-menu>' +\n      '</div>';\n\n    selectTemplate = $mdUtil.supplant(selectTemplate, [multiple, element.html()]);\n    element.empty().append(valueEl);\n\n    attr.tabindex = attr.tabindex || '0';\n\n    return function postLink(scope, element, attr, ctrls) {\n      var isDisabled;\n\n      var containerCtrl = ctrls[0];\n      var mdSelectCtrl = ctrls[1];\n      var ngModelCtrl = ctrls[2];\n      var formCtrl = ctrls[3];\n      // grab a reference to the select menu value label\n      var valueEl = element.find('md-select-value');\n      var isReadonly = angular.isDefined(attr.readonly);\n\n      if (containerCtrl) {\n        var isErrorGetter = containerCtrl.isErrorGetter || function() {\n            return ngModelCtrl.$invalid && ngModelCtrl.$touched;\n          };\n\n        if (containerCtrl.input) {\n          throw new Error(\"<md-input-container> can only have *one* child <input>, <textarea> or <select> element!\");\n        }\n\n        containerCtrl.input = element;\n        if (!containerCtrl.label) {\n          $mdAria.expect(element, 'aria-label', element.attr('placeholder'));\n        }\n\n        scope.$watch(isErrorGetter, containerCtrl.setInvalid);\n      }\n\n      var selectContainer, selectScope, selectMenuCtrl;\n\n      createSelect();\n      $mdTheming(element);\n\n      if (attr.name && formCtrl) {\n        var selectEl = element.parent()[0].querySelector('select[name=\".' + attr.name + '\"]');\n        var controller = angular.element(selectEl).controller();\n        if (controller) {\n          formCtrl.$removeControl(controller);\n        }\n      }\n\n      if (formCtrl) {\n        $mdUtil.nextTick(function() {\n          formCtrl.$setPristine();\n        });\n      }\n\n      var originalRender = ngModelCtrl.$render;\n      ngModelCtrl.$render = function() {\n        originalRender();\n        syncLabelText();\n        inputCheckValue();\n      };\n\n      attr.$observe('placeholder', ngModelCtrl.$render);\n\n      mdSelectCtrl.setLabelText = function(text) {\n        mdSelectCtrl.setIsPlaceholder(!text);\n        // Use placeholder attribute, otherwise fallback to the md-input-container label\n        var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : '');\n        text = text || tmpPlaceholder || '';\n        var target = valueEl.children().eq(0);\n        target.text(text);\n      };\n\n      mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {\n        if (isPlaceholder) {\n          valueEl.addClass('md-select-placeholder');\n          if (containerCtrl && containerCtrl.label) {\n            containerCtrl.label.addClass('md-placeholder md-static');\n          }\n        } else {\n          valueEl.removeClass('md-select-placeholder');\n          if (containerCtrl && containerCtrl.label) {\n            containerCtrl.label.removeClass('md-placeholder');\n          }\n        }\n      };\n\n      if (!isReadonly) {\n        element\n          .on('focus', function(ev) {\n            // only set focus on if we don't currently have a selected value. This avoids the \"bounce\"\n            // on the label transition because the focus will immediately switch to the open menu.\n            if (containerCtrl && containerCtrl.element.hasClass('md-input-has-value')) {\n              containerCtrl.setFocused(true);\n            }\n          })\n          .on('blur', function(ev) {\n            containerCtrl && containerCtrl.setFocused(false);\n            inputCheckValue();\n          });\n      }\n\n      mdSelectCtrl.triggerClose = function() {\n        $parse(attr.mdOnClose)(scope);\n      };\n\n      scope.$$postDigest(function() {\n        setAriaLabel();\n        syncLabelText();\n      });\n\n      function setAriaLabel() {\n        var labelText = element.attr('placeholder');\n        if (!labelText && containerCtrl && containerCtrl.label) {\n          labelText = containerCtrl.label.text();\n        }\n        $mdAria.expect(element, 'aria-label', labelText);\n      }\n\n      function syncLabelText() {\n        if (selectContainer) {\n          selectMenuCtrl = selectMenuCtrl || selectContainer.find('md-select-menu').controller('mdSelectMenu');\n          mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());\n        }\n      }\n\n      var deregisterWatcher;\n      attr.$observe('ngMultiple', function(val) {\n        if (deregisterWatcher) deregisterWatcher();\n        var parser = $parse(val);\n        deregisterWatcher = scope.$watch(function() {\n          return parser(scope);\n        }, function(multiple, prevVal) {\n          if (multiple === undefined && prevVal === undefined) return; // assume compiler did a good job\n          if (multiple) {\n            element.attr('multiple', 'multiple');\n          } else {\n            element.removeAttr('multiple');\n          }\n          if (selectContainer) {\n            selectMenuCtrl.setMultiple(multiple);\n            originalRender = ngModelCtrl.$render;\n            ngModelCtrl.$render = function() {\n              originalRender();\n              syncLabelText();\n            };\n            selectMenuCtrl.refreshViewValue();\n            ngModelCtrl.$render();\n          }\n        });\n      });\n\n      attr.$observe('disabled', function(disabled) {\n        if (angular.isString(disabled)) {\n          disabled = true;\n        }\n        // Prevent click event being registered twice\n        if (isDisabled !== undefined && isDisabled === disabled) {\n          return;\n        }\n        isDisabled = disabled;\n        if (disabled) {\n          element.attr({'tabindex': -1, 'aria-disabled': 'true'});\n          element.off('click', openSelect);\n          element.off('keydown', handleKeypress);\n        } else {\n          element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});\n          element.on('click', openSelect);\n          element.on('keydown', handleKeypress);\n        }\n      });\n\n      if (!attr.disabled && !attr.ngDisabled) {\n        element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});\n        element.on('click', openSelect);\n        element.on('keydown', handleKeypress);\n      }\n\n      var ariaAttrs = {\n        role: 'combobox',\n        'aria-expanded': 'false'\n      };\n      if (!element[0].hasAttribute('id')) {\n        ariaAttrs.id = 'select_' + $mdUtil.nextUid();\n      }\n      element.attr(ariaAttrs);\n\n      scope.$on('$destroy', function() {\n        $mdSelect\n          .destroy()\n          .finally(function() {\n            if ( selectContainer ) {\n              selectContainer.remove();\n            }\n\n            if (containerCtrl) {\n              containerCtrl.setFocused(false);\n              containerCtrl.setHasValue(false);\n              containerCtrl.input = null;\n            }\n          });\n      });\n\n\n\n      function inputCheckValue() {\n        // The select counts as having a value if one or more options are selected,\n        // or if the input's validity state says it has bad input (eg string in a number input)\n        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);\n      }\n\n      // Create a fake select to find out the label value\n      function createSelect() {\n        selectContainer = angular.element(selectTemplate);\n        var selectEl = selectContainer.find('md-select-menu');\n        selectEl.data('$ngModelController', ngModelCtrl);\n        selectEl.data('$mdSelectController', mdSelectCtrl);\n        selectScope = scope.$new();\n        $mdTheming.inherit(selectContainer, element);\n        if (element.attr('md-container-class')) {\n          var value = selectContainer[0].getAttribute('class') + ' ' + element.attr('md-container-class');\n          selectContainer[0].setAttribute('class', value);\n        }\n        selectContainer = $compile(selectContainer)(selectScope);\n        selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');\n      }\n\n      function handleKeypress(e) {\n        var allowedCodes = [32, 13, 38, 40];\n        if (allowedCodes.indexOf(e.keyCode) != -1) {\n          // prevent page scrolling on interaction\n          e.preventDefault();\n          openSelect(e);\n        } else {\n          if (e.keyCode <= 90 && e.keyCode >= 31) {\n            e.preventDefault();\n            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);\n            if (!node) return;\n            var optionCtrl = angular.element(node).controller('mdOption');\n            if (!selectMenuCtrl.isMultiple) {\n              selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);\n            }\n            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);\n            selectMenuCtrl.refreshViewValue();\n            ngModelCtrl.$render();\n          }\n        }\n      }\n\n      function openSelect() {\n        selectScope.isOpen = true;\n\n        $mdSelect.show({\n          scope: selectScope,\n          preserveScope: true,\n          skipCompile: true,\n          element: selectContainer,\n          target: element[0],\n          hasBackdrop: true,\n          loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) || true : false\n        }).then(function() {\n          selectScope.isOpen = false;\n        });\n      }\n    };\n  }\n}\nSelectDirective.$inject = [\"$mdSelect\", \"$mdUtil\", \"$mdTheming\", \"$mdAria\", \"$compile\", \"$parse\"];\n\nfunction SelectMenuDirective($parse, $mdUtil, $mdTheming) {\n\n  SelectMenuController.$inject = [\"$scope\", \"$attrs\", \"$element\"];\n  return {\n    restrict: 'E',\n    require: ['mdSelectMenu', '?ngModel'],\n    controller: SelectMenuController,\n    link: {pre: preLink}\n  };\n\n  // We use preLink instead of postLink to ensure that the select is initialized before\n  // its child options run postLink.\n  function preLink(scope, element, attr, ctrls) {\n    var selectCtrl = ctrls[0];\n    var ngModel = ctrls[1];\n\n    $mdTheming(element);\n    element.on('click', clickListener);\n    element.on('keypress', keyListener);\n    if (ngModel) selectCtrl.init(ngModel);\n    configureAria();\n\n    function configureAria() {\n      element.attr({\n        'id': 'select_menu_' + $mdUtil.nextUid(),\n        'role': 'listbox',\n        'aria-multiselectable': (selectCtrl.isMultiple ? 'true' : 'false')\n      });\n    }\n\n    function keyListener(e) {\n      if (e.keyCode == 13 || e.keyCode == 32) {\n        clickListener(e);\n      }\n    }\n\n    function clickListener(ev) {\n      var option = $mdUtil.getClosest(ev.target, 'md-option');\n      var optionCtrl = option && angular.element(option).data('$mdOptionController');\n      if (!option || !optionCtrl) return;\n      if (option.hasAttribute('disabled')) {\n        ev.stopImmediatePropagation();\n        return false;\n      }\n\n      var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);\n      var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);\n\n      scope.$apply(function() {\n        if (selectCtrl.isMultiple) {\n          if (isSelected) {\n            selectCtrl.deselect(optionHashKey);\n          } else {\n            selectCtrl.select(optionHashKey, optionCtrl.value);\n          }\n        } else {\n          if (!isSelected) {\n            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);\n            selectCtrl.select(optionHashKey, optionCtrl.value);\n          }\n        }\n        selectCtrl.refreshViewValue();\n      });\n    }\n  }\n\n  function SelectMenuController($scope, $attrs, $element) {\n    var self = this;\n    self.isMultiple = angular.isDefined($attrs.multiple);\n    // selected is an object with keys matching all of the selected options' hashed values\n    self.selected = {};\n    // options is an object with keys matching every option's hash value,\n    // and values matching every option's controller.\n    self.options = {};\n\n    $scope.$watch(function() {\n      return self.options;\n    }, function() {\n      self.ngModel.$render();\n    }, true);\n\n    var deregisterCollectionWatch;\n    self.setMultiple = function(isMultiple) {\n      var ngModel = self.ngModel;\n      self.isMultiple = isMultiple;\n      if (deregisterCollectionWatch) deregisterCollectionWatch();\n\n      if (self.isMultiple) {\n        ngModel.$validators['md-multiple'] = validateArray;\n        ngModel.$render = renderMultiple;\n\n        // watchCollection on the model because by default ngModel only watches the model's\n        // reference. This allowed the developer to also push and pop from their array.\n        $scope.$watchCollection($attrs.ngModel, function(value) {\n          if (validateArray(value)) renderMultiple(value);\n          self.ngModel.$setPristine();\n        });\n      } else {\n        delete ngModel.$validators['md-multiple'];\n        ngModel.$render = renderSingular;\n      }\n\n      function validateArray(modelValue, viewValue) {\n        // If a value is truthy but not an array, reject it.\n        // If value is undefined/falsy, accept that it's an empty array.\n        return angular.isArray(modelValue || viewValue || []);\n      }\n    };\n\n    var searchStr = '';\n    var clearSearchTimeout, optNodes, optText;\n    var CLEAR_SEARCH_AFTER = 300;\n    self.optNodeForKeyboardSearch = function(e) {\n      clearSearchTimeout && clearTimeout(clearSearchTimeout);\n      clearSearchTimeout = setTimeout(function() {\n        clearSearchTimeout = undefined;\n        searchStr = '';\n        optText = undefined;\n        optNodes = undefined;\n      }, CLEAR_SEARCH_AFTER);\n      searchStr += String.fromCharCode(e.keyCode);\n      var search = new RegExp('^' + searchStr, 'i');\n      if (!optNodes) {\n        optNodes = $element.find('md-option');\n        optText = new Array(optNodes.length);\n        angular.forEach(optNodes, function(el, i) {\n          optText[i] = el.textContent.trim();\n        });\n      }\n      for (var i = 0; i < optText.length; ++i) {\n        if (search.test(optText[i])) {\n          return optNodes[i];\n        }\n      }\n    };\n\n    self.init = function(ngModel) {\n      self.ngModel = ngModel;\n\n      // Allow users to provide `ng-model=\"foo\" ng-model-options=\"{trackBy: 'foo.id'}\"` so\n      // that we can properly compare objects set on the model to the available options\n      if (ngModel.$options && ngModel.$options.trackBy) {\n        var trackByLocals = {};\n        var trackByParsed = $parse(ngModel.$options.trackBy);\n        self.hashGetter = function(value, valueScope) {\n          trackByLocals.$value = value;\n          return trackByParsed(valueScope || $scope, trackByLocals);\n        };\n        // If the user doesn't provide a trackBy, we automatically generate an id for every\n        // value passed in\n      } else {\n        self.hashGetter = function getHashValue(value) {\n          if (angular.isObject(value)) {\n            return 'object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));\n          }\n          return value;\n        };\n      }\n      self.setMultiple(self.isMultiple);\n    };\n\n    self.selectedLabels = function() {\n      var selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll('md-option[selected]'));\n      if (selectedOptionEls.length) {\n        return selectedOptionEls.map(function(el) {\n          return el.textContent;\n        }).join(', ');\n      } else {\n        return '';\n      }\n    };\n\n    self.select = function(hashKey, hashedValue) {\n      var option = self.options[hashKey];\n      option && option.setSelected(true);\n      self.selected[hashKey] = hashedValue;\n    };\n    self.deselect = function(hashKey) {\n      var option = self.options[hashKey];\n      option && option.setSelected(false);\n      delete self.selected[hashKey];\n    };\n\n    self.addOption = function(hashKey, optionCtrl) {\n      if (angular.isDefined(self.options[hashKey])) {\n        throw new Error('Duplicate md-option values are not allowed in a select. ' +\n          'Duplicate value \"' + optionCtrl.value + '\" found.');\n      }\n      self.options[hashKey] = optionCtrl;\n\n      // If this option's value was already in our ngModel, go ahead and select it.\n      if (angular.isDefined(self.selected[hashKey])) {\n        self.select(hashKey, optionCtrl.value);\n        self.refreshViewValue();\n      }\n    };\n    self.removeOption = function(hashKey) {\n      delete self.options[hashKey];\n      // Don't deselect an option when it's removed - the user's ngModel should be allowed\n      // to have values that do not match a currently available option.\n    };\n\n    self.refreshViewValue = function() {\n      var values = [];\n      var option;\n      for (var hashKey in self.selected) {\n        // If this hashKey has an associated option, push that option's value to the model.\n        if ((option = self.options[hashKey])) {\n          values.push(option.value);\n        } else {\n          // Otherwise, the given hashKey has no associated option, and we got it\n          // from an ngModel value at an earlier time. Push the unhashed value of\n          // this hashKey to the model.\n          // This allows the developer to put a value in the model that doesn't yet have\n          // an associated option.\n          values.push(self.selected[hashKey]);\n        }\n      }\n      self.ngModel.$setViewValue(self.isMultiple ? values : values[0]);\n    };\n\n    function renderMultiple() {\n      var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];\n      if (!angular.isArray(newSelectedValues)) return;\n\n      var oldSelected = Object.keys(self.selected);\n\n      var newSelectedHashes = newSelectedValues.map(self.hashGetter);\n      var deselected = oldSelected.filter(function(hash) {\n        return newSelectedHashes.indexOf(hash) === -1;\n      });\n\n      deselected.forEach(self.deselect);\n      newSelectedHashes.forEach(function(hashKey, i) {\n        self.select(hashKey, newSelectedValues[i]);\n      });\n    }\n\n    function renderSingular() {\n      var value = self.ngModel.$viewValue || self.ngModel.$modelValue;\n      Object.keys(self.selected).forEach(self.deselect);\n      self.select(self.hashGetter(value), value);\n    }\n  }\n\n}\nSelectMenuDirective.$inject = [\"$parse\", \"$mdUtil\", \"$mdTheming\"];\n\nfunction OptionDirective($mdButtonInkRipple, $mdUtil) {\n\n  OptionController.$inject = [\"$element\"];\n  return {\n    restrict: 'E',\n    require: ['mdOption', '^^mdSelectMenu'],\n    controller: OptionController,\n    compile: compile\n  };\n\n  function compile(element, attr) {\n    // Manual transclusion to avoid the extra inner <span> that ng-transclude generates\n    element.append(angular.element('<div class=\"md-text\">').append(element.contents()));\n\n    element.attr('tabindex', attr.tabindex || '0');\n    return postLink;\n  }\n\n  function postLink(scope, element, attr, ctrls) {\n    var optionCtrl = ctrls[0];\n    var selectCtrl = ctrls[1];\n\n    if (angular.isDefined(attr.ngValue)) {\n      scope.$watch(attr.ngValue, setOptionValue);\n    } else if (angular.isDefined(attr.value)) {\n      setOptionValue(attr.value);\n    } else {\n      scope.$watch(function() {\n        return element.text();\n      }, setOptionValue);\n    }\n\n    attr.$observe('disabled', function(disabled) {\n      if (disabled) {\n        element.attr('tabindex', '-1');\n      } else {\n        element.attr('tabindex', '0');\n      }\n    });\n\n    scope.$$postDigest(function() {\n      attr.$observe('selected', function(selected) {\n        if (!angular.isDefined(selected)) return;\n        if (typeof selected == 'string') selected = true;\n        if (selected) {\n          if (!selectCtrl.isMultiple) {\n            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);\n          }\n          selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);\n        } else {\n          selectCtrl.deselect(optionCtrl.hashKey);\n        }\n        selectCtrl.refreshViewValue();\n        selectCtrl.ngModel.$render();\n      });\n    });\n\n    $mdButtonInkRipple.attach(scope, element);\n    configureAria();\n\n    function setOptionValue(newValue, oldValue) {\n      var oldHashKey = selectCtrl.hashGetter(oldValue, scope);\n      var newHashKey = selectCtrl.hashGetter(newValue, scope);\n\n      optionCtrl.hashKey = newHashKey;\n      optionCtrl.value = newValue;\n\n      selectCtrl.removeOption(oldHashKey, optionCtrl);\n      selectCtrl.addOption(newHashKey, optionCtrl);\n    }\n\n    scope.$on('$destroy', function() {\n      selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);\n    });\n\n    function configureAria() {\n      var ariaAttrs = {\n        'role': 'option',\n        'aria-selected': 'false'\n      };\n\n      if (!element[0].hasAttribute('id')) {\n        ariaAttrs.id = 'select_option_' + $mdUtil.nextUid();\n      }\n      element.attr(ariaAttrs);\n    }\n  }\n\n  function OptionController($element) {\n    this.selected = false;\n    this.setSelected = function(isSelected) {\n      if (isSelected && !this.selected) {\n        $element.attr({\n          'selected': 'selected',\n          'aria-selected': 'true'\n        });\n      } else if (!isSelected && this.selected) {\n        $element.removeAttr('selected');\n        $element.attr('aria-selected', 'false');\n      }\n      this.selected = isSelected;\n    };\n  }\n\n}\nOptionDirective.$inject = [\"$mdButtonInkRipple\", \"$mdUtil\"];\n\nfunction OptgroupDirective() {\n  return {\n    restrict: 'E',\n    compile: compile\n  };\n  function compile(el, attrs) {\n    var labelElement = el.find('label');\n    if (!labelElement.length) {\n      labelElement = angular.element('<label>');\n      el.prepend(labelElement);\n    }\n    if (attrs.label) labelElement.text(attrs.label);\n  }\n}\n\nfunction SelectProvider($$interimElementProvider) {\n  selectDefaultOptions.$inject = [\"$mdSelect\", \"$mdConstant\", \"$mdUtil\", \"$window\", \"$q\", \"$$rAF\", \"$animateCss\", \"$animate\"];\n  return $$interimElementProvider('$mdSelect')\n    .setDefaults({\n      methods: ['target'],\n      options: selectDefaultOptions\n    });\n\n  /* @ngInject */\n  function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate) {\n    var ERRROR_TARGET_EXPECTED = \"$mdSelect.show() expected a target element in options.target but got '{0}'!\";\n    var animator = $mdUtil.dom.animator;\n\n    return {\n      parent: 'body',\n      themable: true,\n      onShow: onShow,\n      onRemove: onRemove,\n      hasBackdrop: true,\n      disableParentScroll: true\n    };\n\n    /**\n     * Interim-element onRemove logic....\n     */\n    function onRemove(scope, element, opts) {\n      opts = opts || { };\n      opts.cleanupInteraction();\n      opts.cleanupResizing();\n      opts.hideBackdrop();\n\n      // For navigation $destroy events, do a quick, non-animated removal,\n      // but for normal closes (from clicks, etc) animate the removal\n\n      return  (opts.$destroy === true) ? detachAndClean() : animateRemoval().then( detachAndClean );\n\n      /**\n       * For normal closes (eg clicks), animate the removal.\n       * For forced closes (like $destroy events from navigation),\n       * skip the animations\n       */\n      function animateRemoval() {\n        return $animateCss(element, {addClass: 'md-leave'}).start();\n      }\n\n      /**\n       * Detach the element and cleanup prior changes\n       */\n      function detachAndClean() {\n        configureAria(opts.target, false);\n\n        element.attr('opacity', 0);\n        element.removeClass('md-active');\n        detachElement(element, opts);\n\n        announceClosed(opts);\n\n        if (!opts.$destroy && opts.restoreFocus) {\n          opts.target.focus();\n        }\n      }\n\n    }\n\n    /**\n     * Interim-element onShow logic....\n     */\n    function onShow(scope, element, opts) {\n\n      watchAsyncLoad();\n      sanitizeAndConfigure(scope, opts);\n      configureAria(opts.target);\n\n      opts.hideBackdrop = showBackdrop(scope, element, opts);\n\n      return showDropDown(scope, element, opts)\n        .then(function(response) {\n          opts.alreadyOpen = true;\n          opts.cleanupInteraction = activateInteraction();\n          opts.cleanupResizing = activateResizing();\n\n          return response;\n        }, opts.hideBackdrop);\n\n      // ************************************\n      // Closure Functions\n      // ************************************\n\n      /**\n       *  Attach the select DOM element(s) and animate to the correct positions\n       *  and scalings...\n       */\n      function showDropDown(scope, element, opts) {\n        opts.parent.append(element);\n\n        return $q(function(resolve, reject) {\n\n          try {\n\n            $animateCss(element, {removeClass: 'md-leave', duration: 0})\n              .start()\n              .then(positionAndFocusMenu)\n              .then(resolve);\n\n          } catch (e) {\n            reject(e);\n          }\n\n        });\n      }\n\n      /**\n       * Initialize container and dropDown menu positions/scale, then animate\n       * to show... and autoFocus.\n       */\n      function positionAndFocusMenu() {\n        return $q(function(resolve) {\n          if (opts.isRemoved) return $q.reject(false);\n\n          var info = calculateMenuPositions(scope, element, opts);\n\n          info.container.element.css(animator.toCss(info.container.styles));\n          info.dropDown.element.css(animator.toCss(info.dropDown.styles));\n\n          $$rAF(function() {\n            element.addClass('md-active');\n            info.dropDown.element.css(animator.toCss({transform: ''}));\n\n            autoFocus(opts.focusedNode);\n            resolve();\n          });\n\n        });\n      }\n\n      /**\n       * Show modal backdrop element...\n       */\n      function showBackdrop(scope, element, options) {\n\n        // If we are not within a dialog...\n        if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {\n          // !! DO this before creating the backdrop; since disableScrollAround()\n          //    configures the scroll offset; which is used by mdBackDrop postLink()\n          options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);\n        } else {\n          options.disableParentScroll = false;\n        }\n\n        if (options.hasBackdrop) {\n          // Override duration to immediately show invisible backdrop\n          options.backdrop = $mdUtil.createBackdrop(scope, \"md-select-backdrop md-click-catcher\");\n          $animate.enter(options.backdrop, options.parent, null, {duration: 0});\n        }\n\n        /**\n         * Hide modal backdrop element...\n         */\n        return function hideBackdrop() {\n          if (options.backdrop) options.backdrop.remove();\n          if (options.disableParentScroll) options.restoreScroll();\n\n          delete options.restoreScroll;\n        }\n      }\n\n      /**\n       *\n       */\n      function autoFocus(focusedNode) {\n        if (focusedNode && !focusedNode.hasAttribute('disabled')) {\n          focusedNode.focus();\n        }\n      }\n\n      /**\n       * Check for valid opts and set some sane defaults\n       */\n      function sanitizeAndConfigure(scope, options) {\n        var selectEl = element.find('md-select-menu');\n\n        if (!options.target) {\n          throw new Error($mdUtil.supplant(ERRROR_TARGET_EXPECTED, [options.target]));\n        }\n\n        angular.extend(options, {\n          isRemoved: false,\n          target: angular.element(options.target), //make sure it's not a naked dom node\n          parent: angular.element(options.parent),\n          selectEl: selectEl,\n          contentEl: element.find('md-content'),\n          optionNodes: selectEl[0].getElementsByTagName('md-option')\n        });\n      }\n\n      /**\n       * Configure various resize listeners for screen changes\n       */\n      function activateResizing() {\n        var debouncedOnResize = (function(scope, target, options) {\n\n          return function() {\n            if (options.isRemoved) return;\n\n            var updates = calculateMenuPositions(scope, target, options);\n            var container = updates.container;\n            var dropDown = updates.dropDown;\n\n            container.element.css(animator.toCss(container.styles));\n            dropDown.element.css(animator.toCss(dropDown.styles));\n          };\n\n        })(scope, element, opts);\n\n        var window = angular.element($window);\n        window.on('resize', debouncedOnResize);\n        window.on('orientationchange', debouncedOnResize);\n\n        // Publish deactivation closure...\n        return function deactivateResizing() {\n\n          // Disable resizing handlers\n          window.off('resize', debouncedOnResize);\n          window.off('orientationchange', debouncedOnResize);\n        }\n      }\n\n      /**\n       *  If asynchronously loading, watch and update internal\n       *  '$$loadingAsyncDone' flag\n       */\n      function watchAsyncLoad() {\n        if (opts.loadingAsync && !opts.isRemoved) {\n          scope.$$loadingAsyncDone = false;\n          scope.progressMode = 'indeterminate';\n\n          $q.when(opts.loadingAsync)\n            .then(function() {\n              scope.$$loadingAsyncDone = true;\n              scope.progressMode = '';\n              delete opts.loadingAsync;\n            }).then(function() {\n              $$rAF(positionAndFocusMenu);\n            })\n        }\n      }\n\n      /**\n       *\n       */\n      function activateInteraction() {\n        if (opts.isRemoved) return;\n\n        var dropDown = opts.selectEl;\n        var selectCtrl = dropDown.controller('mdSelectMenu') || {};\n\n        element.addClass('md-clickable');\n\n        // Close on backdrop click\n        opts.backdrop && opts.backdrop.on('click', onBackdropClick);\n\n        // Escape to close\n        // Cycling of options, and closing on enter\n        dropDown.on('keydown', onMenuKeyDown);\n        dropDown.on('mouseup', checkCloseMenu);\n\n        return function cleanupInteraction() {\n          opts.backdrop && opts.backdrop.off('click', onBackdropClick);\n          dropDown.off('keydown', onMenuKeyDown);\n          dropDown.off('mouseup', checkCloseMenu);\n\n          element.removeClass('md-clickable');\n          opts.isRemoved = true;\n        };\n\n        // ************************************\n        // Closure Functions\n        // ************************************\n\n        function onBackdropClick(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          opts.restoreFocus = false;\n          $mdUtil.nextTick($mdSelect.hide, true);\n        }\n\n        function onMenuKeyDown(ev) {\n          var keyCodes = $mdConstant.KEY_CODE;\n\n          switch (ev.keyCode) {\n            case keyCodes.UP_ARROW:\n              return focusPrevOption();\n              break;\n            case keyCodes.DOWN_ARROW:\n              return focusNextOption();\n              break;\n            case keyCodes.SPACE:\n            case keyCodes.ENTER:\n              var option = $mdUtil.getClosest(ev.target, 'md-option');\n              if (option) {\n                dropDown.triggerHandler({\n                  type: 'click',\n                  target: option\n                });\n                ev.preventDefault();\n              }\n              checkCloseMenu(ev);\n              break;\n            case keyCodes.TAB:\n            case keyCodes.ESCAPE:\n              ev.preventDefault();\n              opts.restoreFocus = true;\n              $mdUtil.nextTick($mdSelect.hide, true);\n              break;\n            default:\n              if (ev.keyCode >= 31 && ev.keyCode <= 90) {\n                var optNode = dropDown.controller('mdSelectMenu').optNodeForKeyboardSearch(ev);\n                opts.focusedNode = optNode || opts.focusedNode;\n                optNode && optNode.focus();\n              }\n          }\n        }\n\n        function focusOption(direction) {\n          var optionsArray = $mdUtil.nodesToArray(opts.optionNodes);\n          var index = optionsArray.indexOf(opts.focusedNode);\n\n          var newOption;\n\n          do {\n            if (index === -1) {\n              // We lost the previously focused element, reset to first option\n              index = 0;\n            } else if (direction === 'next' && index < optionsArray.length - 1) {\n              index++;\n            } else if (direction === 'prev' && index > 0) {\n              index--;\n            }\n            newOption = optionsArray[index];\n            if (newOption.hasAttribute('disabled')) newOption = undefined;\n          } while (!newOption && index < optionsArray.length - 1 && index > 0)\n          newOption && newOption.focus();\n          opts.focusedNode = newOption;\n        }\n\n        function focusNextOption() {\n          focusOption('next');\n        }\n\n        function focusPrevOption() {\n          focusOption('prev');\n        }\n\n        function checkCloseMenu(ev) {\n          if (ev && ( ev.type == 'mouseup') && (ev.currentTarget != dropDown[0])) return;\n          if ( mouseOnScrollbar() ) return;\n\n          if (!selectCtrl.isMultiple) {\n            opts.restoreFocus = true;\n\n            $mdUtil.nextTick(function() {\n              $mdSelect.hide(selectCtrl.ngModel.$viewValue);\n            }, true);\n          }\n\n          /**\n           * check if the mouseup event was on a scrollbar\n           */\n          function mouseOnScrollbar() {\n            var clickOnScrollbar = false;\n            if (ev && (ev.currentTarget.children.length > 0)) {\n              var child = ev.currentTarget.children[0];\n              var hasScrollbar = child.scrollHeight > child.clientHeight;\n              if (hasScrollbar && child.children.length > 0) {\n                var relPosX = ev.pageX - ev.currentTarget.getBoundingClientRect().left;\n                if (relPosX > child.querySelector('md-option').offsetWidth)\n                  clickOnScrollbar = true;\n              }\n            }\n            return clickOnScrollbar;\n          }\n        }\n      }\n\n    }\n\n    /**\n     *\n     */\n    function configureAria(element, isExpanded) {\n      isExpanded = angular.isUndefined(isExpanded) ? 'true' : 'false';\n      element && element.attr('aria-expanded', isExpanded);\n    }\n\n    /**\n     * To notify listeners that the Select menu has closed,\n     * trigger the [optional] user-defined expression\n     */\n    function announceClosed(opts) {\n      var mdSelect = opts.selectEl.controller('mdSelect');\n      if (mdSelect) {\n        var menuController = opts.selectEl.controller('mdSelectMenu');\n        mdSelect.setLabelText(menuController.selectedLabels());\n        mdSelect.triggerClose();\n      }\n    }\n\n    /**\n     * Use browser to remove this element without triggering a $destroy event\n     */\n    function detachElement(element, opts) {\n      if (element[0].parentNode === opts.parent[0]) {\n        opts.parent[0].removeChild(element[0]);\n      }\n    }\n\n    /**\n     * Calculate the\n     */\n    function calculateMenuPositions(scope, element, opts) {\n      var optionNodes,\n        containerNode = element[0],\n        targetNode = opts.target[0].firstElementChild, // target the label\n        parentNode = opts.parent[0],\n        selectNode = opts.selectEl[0],\n        contentNode = opts.contentEl[0],\n        parentRect = parentNode.getBoundingClientRect(),\n        targetRect = targetNode.getBoundingClientRect(),\n        shouldOpenAroundTarget = false,\n        bounds = {\n          left: parentRect.left + SELECT_EDGE_MARGIN,\n          top: SELECT_EDGE_MARGIN,\n          bottom: parentRect.height - SELECT_EDGE_MARGIN,\n          right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)\n        },\n        spaceAvailable = {\n          top: targetRect.top - bounds.top,\n          left: targetRect.left - bounds.left,\n          right: bounds.right - (targetRect.left + targetRect.width),\n          bottom: bounds.bottom - (targetRect.top + targetRect.height)\n        },\n        maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,\n        isScrollable = contentNode.scrollHeight > contentNode.offsetHeight,\n        selectedNode = selectNode.querySelector('md-option[selected]'),\n        optionNodes = selectNode.getElementsByTagName('md-option'),\n        optgroupNodes = selectNode.getElementsByTagName('md-optgroup');\n\n      var loading = isPromiseLike(opts.loadingAsync);\n      var centeredNode;\n      if (!loading) {\n        // If a selected node, center around that\n        if (selectedNode) {\n          centeredNode = selectedNode;\n          // If there are option groups, center around the first option group\n        } else if (optgroupNodes.length) {\n          centeredNode = optgroupNodes[0];\n          // Otherwise - if we are not loading async - center around the first optionNode\n        } else if (optionNodes.length) {\n          centeredNode = optionNodes[0];\n          // In case there are no options, center on whatever's in there... (eg progress indicator)\n        } else {\n          centeredNode = contentNode.firstElementChild || contentNode;\n        }\n      } else {\n        // If loading, center on progress indicator\n        centeredNode = contentNode.firstElementChild || contentNode;\n      }\n\n      if (contentNode.offsetWidth > maxWidth) {\n        contentNode.style['max-width'] = maxWidth + 'px';\n      }\n      if (shouldOpenAroundTarget) {\n        contentNode.style['min-width'] = targetRect.width + 'px';\n      }\n\n      // Remove padding before we compute the position of the menu\n      if (isScrollable) {\n        selectNode.classList.add('md-overflow');\n      }\n\n      var focusedNode = centeredNode;\n      if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {\n        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;\n        centeredNode = focusedNode;\n      }\n      // Cache for autoFocus()\n      opts.focusedNode = focusedNode;\n\n      // Get the selectMenuRect *after* max-width is possibly set above\n      var selectMenuRect = selectNode.getBoundingClientRect();\n      var centeredRect = getOffsetRect(centeredNode);\n\n      if (centeredNode) {\n        var centeredStyle = $window.getComputedStyle(centeredNode);\n        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;\n        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;\n      }\n\n      if (isScrollable) {\n        var scrollBuffer = contentNode.offsetHeight / 2;\n        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;\n\n        if (spaceAvailable.top < scrollBuffer) {\n          contentNode.scrollTop = Math.min(\n            centeredRect.top,\n            contentNode.scrollTop + scrollBuffer - spaceAvailable.top\n          );\n        } else if (spaceAvailable.bottom < scrollBuffer) {\n          contentNode.scrollTop = Math.max(\n            centeredRect.top + centeredRect.height - selectMenuRect.height,\n            contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom\n          );\n        }\n      }\n\n      var left, top, transformOrigin, minWidth;\n      if (shouldOpenAroundTarget) {\n        left = targetRect.left;\n        top = targetRect.top + targetRect.height;\n        transformOrigin = '50% 0';\n        if (top + selectMenuRect.height > bounds.bottom) {\n          top = targetRect.top - selectMenuRect.height;\n          transformOrigin = '50% 100%';\n        }\n      } else {\n        left = (targetRect.left + centeredRect.left - centeredRect.paddingLeft) + 2;\n        top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -\n            centeredRect.top + contentNode.scrollTop) + 2;\n\n        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +\n          (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';\n\n        minWidth = targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight;\n      }\n\n      // Keep left and top within the window\n      var containerRect = containerNode.getBoundingClientRect();\n      var scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1.0)) / 100;\n      var scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1.0)) / 100;\n\n      return {\n        container: {\n          element: angular.element(containerNode),\n          styles: {\n            left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),\n            top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),\n            'min-width': minWidth\n          }\n        },\n        dropDown: {\n          element: angular.element(selectNode),\n          styles: {\n            transformOrigin: transformOrigin,\n            transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : \"\"\n          }\n        }\n      };\n\n    }\n\n  }\n\n  function isPromiseLike(obj) {\n    return obj && angular.isFunction(obj.then);\n  }\n\n  function clamp(min, n, max) {\n    return Math.max(min, Math.min(n, max));\n  }\n\n  function getOffsetRect(node) {\n    return node ? {\n      left: node.offsetLeft,\n      top: node.offsetTop,\n      width: node.offsetWidth,\n      height: node.offsetHeight\n    } : {left: 0, top: 0, width: 0, height: 0};\n  }\n}\nSelectProvider.$inject = [\"$$interimElementProvider\"];\n\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.sidenav\n *\n * @description\n * A Sidenav QP component.\n */\nangular\n  .module('material.components.sidenav', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .factory('$mdSidenav', SidenavService )\n  .directive('mdSidenav', SidenavDirective)\n  .directive('mdSidenavFocus', SidenavFocusDirective)\n  .controller('$mdSidenavController', SidenavController);\n\n\n/**\n * @ngdoc service\n * @name $mdSidenav\n * @module material.components.sidenav\n *\n * @description\n * `$mdSidenav` makes it easy to interact with multiple sidenavs\n * in an app.\n *\n * @usage\n * <hljs lang=\"js\">\n * // Async lookup for sidenav instance; will resolve when the instance is available\n * $mdSidenav(componentId).then(function(instance) {\n *   $log.debug( componentId + \"is now ready\" );\n * });\n * // Async toggle the given sidenav;\n * // when instance is known ready and lazy lookup is not needed.\n * $mdSidenav(componentId)\n *    .toggle()\n *    .then(function(){\n *      $log.debug('toggled');\n *    });\n * // Async open the given sidenav\n * $mdSidenav(componentId)\n *    .open()\n *    .then(function(){\n *      $log.debug('opened');\n *    });\n * // Async close the given sidenav\n * $mdSidenav(componentId)\n *    .close()\n *    .then(function(){\n *      $log.debug('closed');\n *    });\n * // Sync check to see if the specified sidenav is set to be open\n * $mdSidenav(componentId).isOpen();\n * // Sync check to whether given sidenav is locked open\n * // If this is true, the sidenav will be open regardless of close()\n * $mdSidenav(componentId).isLockedOpen();\n * </hljs>\n */\nfunction SidenavService($mdComponentRegistry, $q) {\n  return function(handle) {\n\n    // Lookup the controller instance for the specified sidNav instance\n    var self;\n    var errorMsg = \"SideNav '\" + handle + \"' is not available!\";\n    var instance = $mdComponentRegistry.get(handle);\n\n    if(!instance) {\n      $mdComponentRegistry.notFoundError(handle);\n    }\n\n    return self = {\n      // -----------------\n      // Sync methods\n      // -----------------\n      isOpen: function() {\n        return instance && instance.isOpen();\n      },\n      isLockedOpen: function() {\n        return instance && instance.isLockedOpen();\n      },\n      // -----------------\n      // Async methods\n      // -----------------\n      toggle: function() {\n        return instance ? instance.toggle() : $q.reject(errorMsg);\n      },\n      open: function() {\n        return instance ? instance.open() : $q.reject(errorMsg);\n      },\n      close: function() {\n        return instance ? instance.close() : $q.reject(errorMsg);\n      },\n      then : function( callbackFn ) {\n        var promise = instance ? $q.when(instance) : waitForInstance();\n        return promise.then( callbackFn || angular.noop );\n      }\n    };\n\n    /**\n     * Deferred lookup of component instance using $component registry\n     */\n    function waitForInstance() {\n      return $mdComponentRegistry\n                .when(handle)\n                .then(function( it ){\n                  instance = it;\n                  return it;\n                });\n    }\n  };\n}\nSidenavService.$inject = [\"$mdComponentRegistry\", \"$q\"];\n/**\n * @ngdoc directive\n * @name mdSidenavFocus\n * @module material.components.sidenav\n *\n * @restrict A\n *\n * @description\n * `mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.\n * This is completely optional, as the sidenav itself is focused by default.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-sidenav>\n *   <form>\n *     <md-input-container>\n *       <label for=\"testInput\">Label</label>\n *       <input id=\"testInput\" type=\"text\" md-sidenav-focus>\n *     </md-input-container>\n *   </form>\n * </md-sidenav>\n * </hljs>\n **/\nfunction SidenavFocusDirective() {\n  return {\n    restrict: 'A',\n    require: '^mdSidenav',\n    link: function(scope, element, attr, sidenavCtrl) {\n      // @see $mdUtil.findFocusTarget(...)\n    }\n  };\n}\n/**\n * @ngdoc directive\n * @name mdSidenav\n * @module material.components.sidenav\n * @restrict E\n *\n * @description\n *\n * A Sidenav component that can be opened and closed programatically.\n *\n * By default, upon opening it will slide out on top of the main content area.\n *\n * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.\n * It can be overridden with the `md-autofocus` directive on the child element you want focused.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div layout=\"row\" ng-controller=\"MyController\">\n *   <md-sidenav md-component-id=\"left\" class=\"md-sidenav-left\">\n *     Left Nav!\n *   </md-sidenav>\n *\n *   <md-content>\n *     Center Content\n *     <md-button ng-click=\"openLeftMenu()\">\n *       Open Left Menu\n *     </md-button>\n *   </md-content>\n *\n *   <md-sidenav md-component-id=\"right\"\n *     md-is-locked-open=\"$mdMedia('min-width: 333px')\"\n *     class=\"md-sidenav-right\">\n *     <form>\n *       <md-input-container>\n *         <label for=\"testInput\">Test input</label>\n *         <input id=\"testInput\" type=\"text\"\n *                ng-model=\"data\" md-autofocus>\n *       </md-input-container>\n *     </form>\n *   </md-sidenav>\n * </div>\n * </hljs>\n *\n * <hljs lang=\"js\">\n * var app = angular.module('myApp', ['ngMaterial']);\n * app.controller('MyController', function($scope, $mdSidenav) {\n *   $scope.openLeftMenu = function() {\n *     $mdSidenav('left').toggle();\n *   };\n * });\n * </hljs>\n *\n * @param {expression=} md-is-open A model bound to whether the sidenav is opened.\n * @param {string=} md-component-id componentId to use with $mdSidenav service.\n * @param {expression=} md-is-locked-open When this expression evalutes to true,\n * the sidenav 'locks open': it falls into the content's flow instead\n * of appearing over it. This overrides the `is-open` attribute.\n *\n * The $mdMedia() service is exposed to the is-locked-open attribute, which\n * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.\n * Examples:\n *\n *   - `<md-sidenav md-is-locked-open=\"shouldLockOpen\"></md-sidenav>`\n *   - `<md-sidenav md-is-locked-open=\"$mdMedia('min-width: 1000px')\"></md-sidenav>`\n *   - `<md-sidenav md-is-locked-open=\"$mdMedia('sm')\"></md-sidenav>` (locks open on small screens)\n */\nfunction SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {\n  return {\n    restrict: 'E',\n    scope: {\n      isOpen: '=?mdIsOpen'\n    },\n    controller: '$mdSidenavController',\n    compile: function(element) {\n      element.addClass('md-closed');\n      element.attr('tabIndex', '-1');\n      return postLink;\n    }\n  };\n\n  /**\n   * Directive Post Link function...\n   */\n  function postLink(scope, element, attr, sidenavCtrl) {\n    var lastParentOverFlow;\n    var triggeringElement = null;\n    var promise = $q.when(true);\n\n    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);\n    var isLocked = function() {\n      return isLockedOpenParsed(scope.$parent, {\n        $media: function(arg) {\n          $log.warn(\"$media is deprecated for is-locked-open. Use $mdMedia instead.\");\n          return $mdMedia(arg);\n        },\n        $mdMedia: $mdMedia\n      });\n    };\n    var backdrop = $mdUtil.createBackdrop(scope, \"md-sidenav-backdrop md-opaque ng-enter\");\n\n    $mdTheming.inherit(backdrop, element);\n\n    element.on('$destroy', function() {\n      backdrop.remove();\n      sidenavCtrl.destroy();\n    });\n\n    scope.$on('$destroy', function(){\n      backdrop.remove()\n    });\n\n    scope.$watch(isLocked, updateIsLocked);\n    scope.$watch('isOpen', updateIsOpen);\n\n\n    // Publish special accessor for the Controller instance\n    sidenavCtrl.$toggleOpen = toggleOpen;\n\n    /**\n     * Toggle the DOM classes to indicate `locked`\n     * @param isLocked\n     */\n    function updateIsLocked(isLocked, oldValue) {\n      scope.isLockedOpen = isLocked;\n      if (isLocked === oldValue) {\n        element.toggleClass('md-locked-open', !!isLocked);\n      } else {\n        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');\n      }\n      backdrop.toggleClass('md-locked-open', !!isLocked);\n    }\n\n    /**\n     * Toggle the SideNav view and attach/detach listeners\n     * @param isOpen\n     */\n    function updateIsOpen(isOpen) {\n      // Support deprecated md-sidenav-focus attribute as fallback\n      var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element,'[md-sidenav-focus]') || element;\n      var parent = element.parent();\n\n      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);\n      backdrop[isOpen ? 'on' : 'off']('click', close);\n\n      if ( isOpen ) {\n        // Capture upon opening..\n        triggeringElement = $document[0].activeElement;\n      }\n\n      disableParentScroll(isOpen);\n\n      return promise = $q.all([\n                isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop),\n                $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')\n              ])\n              .then(function() {\n                // Perform focus when animations are ALL done...\n                if (scope.isOpen) {\n                  focusEl && focusEl.focus();\n                }\n              });\n    }\n\n    /**\n     * Prevent parent scrolling (when the SideNav is open)\n     */\n    function disableParentScroll(disabled) {\n      var parent = element.parent();\n      if ( disabled && !lastParentOverFlow ) {\n\n        lastParentOverFlow = parent.css('overflow');\n        parent.css('overflow', 'hidden');\n\n      } else if (angular.isDefined(lastParentOverFlow)) {\n\n        parent.css('overflow', lastParentOverFlow);\n        lastParentOverFlow = undefined;\n\n      }\n    }\n\n    /**\n     * Toggle the sideNav view and publish a promise to be resolved when\n     * the view animation finishes.\n     *\n     * @param isOpen\n     * @returns {*}\n     */\n    function toggleOpen( isOpen ) {\n      if (scope.isOpen == isOpen ) {\n\n        return $q.when(true);\n\n      } else {\n        return $q(function(resolve){\n          // Toggle value to force an async `updateIsOpen()` to run\n          scope.isOpen = isOpen;\n\n          $mdUtil.nextTick(function() {\n            // When the current `updateIsOpen()` animation finishes\n            promise.then(function(result) {\n\n              if ( !scope.isOpen ) {\n                // reset focus to originating element (if available) upon close\n                triggeringElement && triggeringElement.focus();\n                triggeringElement = null;\n              }\n\n              resolve(result);\n            });\n          });\n\n        });\n\n      }\n    }\n\n    /**\n     * Auto-close sideNav when the `escape` key is pressed.\n     * @param evt\n     */\n    function onKeyDown(ev) {\n      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);\n      return isEscape ? close(ev) : $q.when(true);\n    }\n\n    /**\n     * With backdrop `clicks` or `escape` key-press, immediately\n     * apply the CSS close transition... Then notify the controller\n     * to close() and perform its own actions.\n     */\n    function close(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      return sidenavCtrl.close();\n    }\n\n  }\n}\nSidenavDirective.$inject = [\"$mdMedia\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$animate\", \"$compile\", \"$parse\", \"$log\", \"$q\", \"$document\"];\n\n/*\n * @private\n * @ngdoc controller\n * @name SidenavController\n * @module material.components.sidenav\n *\n */\nfunction SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {\n\n  var self = this;\n\n  // Use Default internal method until overridden by directive postLink\n\n  // Synchronous getters\n  self.isOpen = function() { return !!$scope.isOpen; };\n  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };\n\n  // Async actions\n  self.open   = function() { return self.$toggleOpen( true );  };\n  self.close  = function() { return self.$toggleOpen( false ); };\n  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };\n  self.$toggleOpen = function(value) { return $q.when($scope.isOpen = value); };\n\n  self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);\n}\nSidenavController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$mdComponentRegistry\", \"$q\"];\n\n})();\n(function(){\n\"use strict\";\n\n  /**\n   * @ngdoc module\n   * @name material.components.slider\n   */\n  angular.module('material.components.slider', [\n    'material.core'\n  ])\n  .directive('mdSlider', SliderDirective);\n\n/**\n * @ngdoc directive\n * @name mdSlider\n * @module material.components.slider\n * @restrict E\n * @description\n * The `<md-slider>` component allows the user to choose from a range of\n * values.\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the slider is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * It has two modes: 'normal' mode, where the user slides between a wide range\n * of values, and 'discrete' mode, where the user slides between only a few\n * select values.\n *\n * To enable discrete mode, add the `md-discrete` attribute to a slider,\n * and use the `step` attribute to change the distance between\n * values the user is allowed to pick.\n *\n * @usage\n * <h4>Normal Mode</h4>\n * <hljs lang=\"html\">\n * <md-slider ng-model=\"myValue\" min=\"5\" max=\"500\">\n * </md-slider>\n * </hljs>\n * <h4>Discrete Mode</h4>\n * <hljs lang=\"html\">\n * <md-slider md-discrete ng-model=\"myDiscreteValue\" step=\"10\" min=\"10\" max=\"130\">\n * </md-slider>\n * </hljs>\n *\n * @param {boolean=} md-discrete Whether to enable discrete mode.\n * @param {number=} step The distance between values the user is allowed to pick. Default 1.\n * @param {number=} min The minimum value the user is allowed to pick. Default 0.\n * @param {number=} max The maximum value the user is allowed to pick. Default 100.\n */\nfunction SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {\n  return {\n    scope: {},\n    require: '?ngModel',\n    template:\n      '<div class=\"md-slider-wrapper\">' +\n        '<div class=\"md-track-container\">' +\n          '<div class=\"md-track\"></div>' +\n          '<div class=\"md-track md-track-fill\"></div>' +\n          '<div class=\"md-track-ticks\"></div>' +\n        '</div>' +\n        '<div class=\"md-thumb-container\">' +\n          '<div class=\"md-thumb\"></div>' +\n          '<div class=\"md-focus-thumb\"></div>' +\n          '<div class=\"md-focus-ring\"></div>' +\n          '<div class=\"md-sign\">' +\n            '<span class=\"md-thumb-text\"></span>' +\n          '</div>' +\n          '<div class=\"md-disabled-thumb\"></div>' +\n        '</div>' +\n      '</div>',\n    compile: compile\n  };\n\n  // **********************************************************\n  // Private Methods\n  // **********************************************************\n\n  function compile (tElement, tAttrs) {\n    tElement.attr({\n      tabIndex: 0,\n      role: 'slider'\n    });\n\n    $mdAria.expect(tElement, 'aria-label');\n\n    return postLink;\n  }\n\n  function postLink(scope, element, attr, ngModelCtrl) {\n    $mdTheming(element);\n    ngModelCtrl = ngModelCtrl || {\n      // Mock ngModelController if it doesn't exist to give us\n      // the minimum functionality needed\n      $setViewValue: function(val) {\n        this.$viewValue = val;\n        this.$viewChangeListeners.forEach(function(cb) { cb(); });\n      },\n      $parsers: [],\n      $formatters: [],\n      $viewChangeListeners: []\n    };\n\n    var isDisabledGetter = angular.noop;\n    if (attr.disabled != null) {\n      isDisabledGetter = function() { return true; };\n    } else if (attr.ngDisabled) {\n      isDisabledGetter = angular.bind(null, $parse(attr.ngDisabled), scope.$parent);\n    }\n\n    var thumb = angular.element(element[0].querySelector('.md-thumb'));\n    var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));\n    var thumbContainer = thumb.parent();\n    var trackContainer = angular.element(element[0].querySelector('.md-track-container'));\n    var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));\n    var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));\n    var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);\n\n    // Default values, overridable by attrs\n    angular.isDefined(attr.min) ? attr.$observe('min', updateMin) : updateMin(0);\n    angular.isDefined(attr.max) ? attr.$observe('max', updateMax) : updateMax(100);\n    angular.isDefined(attr.step)? attr.$observe('step', updateStep) : updateStep(1);\n\n    // We have to manually stop the $watch on ngDisabled because it exists\n    // on the parent scope, and won't be automatically destroyed when\n    // the component is destroyed.\n    var stopDisabledWatch = angular.noop;\n    if (attr.ngDisabled) {\n      stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);\n    }\n\n    $mdGesture.register(element, 'drag');\n\n    element\n      .on('keydown', keydownListener)\n      .on('$md.pressdown', onPressDown)\n      .on('$md.pressup', onPressUp)\n      .on('$md.dragstart', onDragStart)\n      .on('$md.drag', onDrag)\n      .on('$md.dragend', onDragEnd);\n\n    // On resize, recalculate the slider's dimensions and re-render\n    function updateAll() {\n      refreshSliderDimensions();\n      ngModelRender();\n      redrawTicks();\n    }\n    setTimeout(updateAll, 0);\n\n    var debouncedUpdateAll = $$rAF.throttle(updateAll);\n    angular.element($window).on('resize', debouncedUpdateAll);\n\n    scope.$on('$destroy', function() {\n      angular.element($window).off('resize', debouncedUpdateAll);\n      stopDisabledWatch();\n    });\n\n    ngModelCtrl.$render = ngModelRender;\n    ngModelCtrl.$viewChangeListeners.push(ngModelRender);\n    ngModelCtrl.$formatters.push(minMaxValidator);\n    ngModelCtrl.$formatters.push(stepValidator);\n\n    /**\n     * Attributes\n     */\n    var min;\n    var max;\n    var step;\n    function updateMin(value) {\n      min = parseFloat(value);\n      element.attr('aria-valuemin', value);\n      updateAll();\n    }\n    function updateMax(value) {\n      max = parseFloat(value);\n      element.attr('aria-valuemax', value);\n      updateAll();\n    }\n    function updateStep(value) {\n      step = parseFloat(value);\n      redrawTicks();\n    }\n    function updateAriaDisabled(isDisabled) {\n      element.attr('aria-disabled', !!isDisabled);\n    }\n\n    // Draw the ticks with canvas.\n    // The alternative to drawing ticks with canvas is to draw one element for each tick,\n    // which could quickly become a performance bottleneck.\n    var tickCanvas, tickCtx;\n    function redrawTicks() {\n      if (!angular.isDefined(attr.mdDiscrete)) return;\n      if ( angular.isUndefined(step) )         return;\n\n      if ( step <= 0 ) {\n        var msg = 'Slider step value must be greater than zero when in discrete mode';\n        $log.error(msg);\n        throw new Error(msg);\n      }\n\n      var numSteps = Math.floor( (max - min) / step );\n      if (!tickCanvas) {\n        tickCanvas = angular.element('<canvas style=\"position:absolute;\">');\n        tickContainer.append(tickCanvas);\n\n        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);\n        tickCtx = tickCanvas[0].getContext('2d');\n        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';\n      }\n\n      var dimensions = getSliderDimensions();\n      tickCanvas[0].width = dimensions.width;\n      tickCanvas[0].height = dimensions.height;\n\n      var distance;\n      for (var i = 0; i <= numSteps; i++) {\n        distance = Math.floor(dimensions.width * (i / numSteps));\n        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);\n      }\n    }\n\n\n    /**\n     * Refreshing Dimensions\n     */\n    var sliderDimensions = {};\n    refreshSliderDimensions();\n    function refreshSliderDimensions() {\n      sliderDimensions = trackContainer[0].getBoundingClientRect();\n    }\n    function getSliderDimensions() {\n      throttledRefreshDimensions();\n      return sliderDimensions;\n    }\n\n    /**\n     * left/right arrow listener\n     */\n    function keydownListener(ev) {\n      if(element[0].hasAttribute('disabled')) {\n        return;\n      }\n\n      var changeAmount;\n      if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {\n        changeAmount = -step;\n      } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {\n        changeAmount = step;\n      }\n      if (changeAmount) {\n        if (ev.metaKey || ev.ctrlKey || ev.altKey) {\n          changeAmount *= 4;\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n        scope.$evalAsync(function() {\n          setModelValue(ngModelCtrl.$viewValue + changeAmount);\n        });\n      }\n    }\n\n    /**\n     * ngModel setters and validators\n     */\n    function setModelValue(value) {\n      ngModelCtrl.$setViewValue( minMaxValidator(stepValidator(value)) );\n    }\n    function ngModelRender() {\n      if (isNaN(ngModelCtrl.$viewValue)) {\n        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;\n      }\n\n      var percent = (ngModelCtrl.$viewValue - min) / (max - min);\n      scope.modelValue = ngModelCtrl.$viewValue;\n      element.attr('aria-valuenow', ngModelCtrl.$viewValue);\n      setSliderPercent(percent);\n      thumbText.text( ngModelCtrl.$viewValue );\n    }\n\n    function minMaxValidator(value) {\n      if (angular.isNumber(value)) {\n        return Math.max(min, Math.min(max, value));\n      }\n    }\n    function stepValidator(value) {\n      if (angular.isNumber(value)) {\n        var formattedValue = (Math.round(value / step) * step);\n        // Format to 3 digits after the decimal point - fixes #2015.\n        return (Math.round(formattedValue * 1000) / 1000);\n      }\n    }\n\n    /**\n     * @param percent 0-1\n     */\n    function setSliderPercent(percent) {\n        var percentStr = (percent * 100) + '%';\n\n        activeTrack.css('width', percentStr);\n        thumbContainer.css('left',percentStr);\n\n        element.toggleClass('md-min', percent === 0);\n        element.toggleClass('md-max', percent === 1);\n    }\n\n\n    /**\n     * Slide listeners\n     */\n    var isDragging = false;\n    var isDiscrete = angular.isDefined(attr.mdDiscrete);\n\n    function onPressDown(ev) {\n      if (isDisabledGetter()) return;\n\n      element.addClass('md-active');\n      element[0].focus();\n      refreshSliderDimensions();\n\n      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));\n      var closestVal = minMaxValidator( stepValidator(exactVal) );\n      scope.$apply(function() {\n        setModelValue( closestVal );\n        setSliderPercent( valueToPercent(closestVal));\n      });\n    }\n    function onPressUp(ev) {\n      if (isDisabledGetter()) return;\n\n      element.removeClass('md-dragging md-active');\n\n      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));\n      var closestVal = minMaxValidator( stepValidator(exactVal) );\n      scope.$apply(function() {\n        setModelValue(closestVal);\n        ngModelRender();\n      });\n    }\n    function onDragStart(ev) {\n      if (isDisabledGetter()) return;\n      isDragging = true;\n      ev.stopPropagation();\n\n      element.addClass('md-dragging');\n      setSliderFromEvent(ev);\n    }\n    function onDrag(ev) {\n      if (!isDragging) return;\n      ev.stopPropagation();\n      setSliderFromEvent(ev);\n    }\n    function onDragEnd(ev) {\n      if (!isDragging) return;\n      ev.stopPropagation();\n      isDragging = false;\n    }\n\n    function setSliderFromEvent(ev) {\n      // While panning discrete, update only the\n      // visual positioning but not the model value.\n      if ( isDiscrete ) adjustThumbPosition( ev.pointer.x );\n      else              doSlide( ev.pointer.x );\n    }\n\n    /**\n     * Slide the UI by changing the model value\n     * @param x\n     */\n    function doSlide( x ) {\n      scope.$evalAsync( function() {\n        setModelValue( percentToValue( positionToPercent(x) ));\n      });\n    }\n\n    /**\n     * Slide the UI without changing the model (while dragging/panning)\n     * @param x\n     */\n    function adjustThumbPosition( x ) {\n      var exactVal = percentToValue( positionToPercent( x ));\n      var closestVal = minMaxValidator( stepValidator(exactVal) );\n      setSliderPercent( positionToPercent(x) );\n      thumbText.text( closestVal );\n    }\n\n    /**\n     * Convert horizontal position on slider to percentage value of offset from beginning...\n     * @param x\n     * @returns {number}\n     */\n    function positionToPercent( x ) {\n      return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));\n    }\n\n    /**\n     * Convert percentage offset on slide to equivalent model value\n     * @param percent\n     * @returns {*}\n     */\n    function percentToValue( percent ) {\n      return (min + percent * (max - min));\n    }\n\n    function valueToPercent( val ) {\n      return (val - min)/(max - min);\n    }\n  }\n}\nSliderDirective.$inject = [\"$$rAF\", \"$window\", \"$mdAria\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$mdGesture\", \"$parse\", \"$log\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.sticky\n * @description\n * Sticky effects for md\n *\n */\nangular\n  .module('material.components.sticky', [\n    'material.core',\n    'material.components.content'\n  ])\n  .factory('$mdSticky', MdSticky);\n\n/**\n * @ngdoc service\n * @name $mdSticky\n * @module material.components.sticky\n *\n * @description\n * The `$mdSticky`service provides a mixin to make elements sticky.\n *\n * @returns A `$mdSticky` function that takes three arguments:\n *   - `scope`\n *   - `element`: The element that will be 'sticky'\n *   - `elementClone`: A clone of the element, that will be shown\n *     when the user starts scrolling past the original element.\n *     If not provided, it will use the result of `element.clone()`.\n */\nfunction MdSticky($document, $mdConstant, $$rAF, $mdUtil) {\n\n  var browserStickySupport = checkStickySupport();\n\n  /**\n   * Registers an element as sticky, used internally by directives to register themselves\n   */\n  return function registerStickyElement(scope, element, stickyClone) {\n    var contentCtrl = element.controller('mdContent');\n    if (!contentCtrl) return;\n\n    if (browserStickySupport) {\n      element.css({\n        position: browserStickySupport,\n        top: 0,\n        'z-index': 2\n      });\n    } else {\n      var $$sticky = contentCtrl.$element.data('$$sticky');\n      if (!$$sticky) {\n        $$sticky = setupSticky(contentCtrl);\n        contentCtrl.$element.data('$$sticky', $$sticky);\n      }\n\n      var deregister = $$sticky.add(element, stickyClone || element.clone());\n      scope.$on('$destroy', deregister);\n    }\n  };\n\n  function setupSticky(contentCtrl) {\n    var contentEl = contentCtrl.$element;\n\n    // Refresh elements is very expensive, so we use the debounced\n    // version when possible.\n    var debouncedRefreshElements = $$rAF.throttle(refreshElements);\n\n    // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,\n    // more reliable than `scroll` on android.\n    setupAugmentedScrollEvents(contentEl);\n    contentEl.on('$scrollstart', debouncedRefreshElements);\n    contentEl.on('$scroll', onScroll);\n\n    var self;\n    return self = {\n      prev: null,\n      current: null, //the currently stickied item\n      next: null,\n      items: [],\n      add: add,\n      refreshElements: refreshElements\n    };\n\n    /***************\n     * Public\n     ***************/\n    // Add an element and its sticky clone to this content's sticky collection\n    function add(element, stickyClone) {\n      stickyClone.addClass('md-sticky-clone');\n\n      var item = {\n        element: element,\n        clone: stickyClone\n      };\n      self.items.push(item);\n\n      $mdUtil.nextTick(function() {\n        contentEl.prepend(item.clone);\n      });\n\n      debouncedRefreshElements();\n\n      return function remove() {\n        self.items.forEach(function(item, index) {\n          if (item.element[0] === element[0]) {\n            self.items.splice(index, 1);\n            item.clone.remove();\n          }\n        });\n        debouncedRefreshElements();\n      };\n    }\n\n    function refreshElements() {\n      // Sort our collection of elements by their current position in the DOM.\n      // We need to do this because our elements' order of being added may not\n      // be the same as their order of display.\n      self.items.forEach(refreshPosition);\n      self.items = self.items.sort(function(a, b) {\n        return a.top < b.top ? -1 : 1;\n      });\n\n      // Find which item in the list should be active, \n      // based upon the content's current scroll position\n      var item;\n      var currentScrollTop = contentEl.prop('scrollTop');\n      for (var i = self.items.length - 1; i >= 0; i--) {\n        if (currentScrollTop > self.items[i].top) {\n          item = self.items[i];\n          break;\n        }\n      }\n      setCurrentItem(item);\n    }\n\n    /***************\n     * Private\n     ***************/\n\n    // Find the `top` of an item relative to the content element,\n    // and also the height.\n    function refreshPosition(item) {\n      // Find the top of an item by adding to the offsetHeight until we reach the \n      // content element.\n      var current = item.element[0];\n      item.top = 0;\n      item.left = 0;\n      while (current && current !== contentEl[0]) {\n        item.top += current.offsetTop;\n        item.left += current.offsetLeft;\n        current = current.offsetParent;\n      }\n      item.height = item.element.prop('offsetHeight');\n      item.clone.css('margin-left', item.left + 'px');\n      if ($mdUtil.floatingScrollbars()) {\n        item.clone.css('margin-right', '0');\n      }\n    }\n\n    // As we scroll, push in and select the correct sticky element.\n    function onScroll() {\n      var scrollTop = contentEl.prop('scrollTop');\n      var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);\n\n      // Store the previous scroll so we know which direction we are scrolling\n      onScroll.prevScrollTop = scrollTop;\n\n      //\n      // AT TOP (not scrolling)\n      //\n      if (scrollTop === 0) {\n        // If we're at the top, just clear the current item and return\n        setCurrentItem(null);\n        return;\n      }\n\n      //\n      // SCROLLING DOWN (going towards the next item)\n      //\n      if (isScrollingDown) {\n\n        // If we've scrolled down past the next item's position, sticky it and return\n        if (self.next && self.next.top <= scrollTop) {\n          setCurrentItem(self.next);\n          return;\n        }\n\n        // If the next item is close to the current one, push the current one up out of the way\n        if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {\n          translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));\n          return;\n        }\n      }\n\n      //\n      // SCROLLING UP (not at the top & not scrolling down; must be scrolling up)\n      //\n      if (!isScrollingDown) {\n\n        // If we've scrolled up past the previous item's position, sticky it and return\n        if (self.current && self.prev && scrollTop < self.current.top) {\n          setCurrentItem(self.prev);\n          return;\n        }\n\n        // If the next item is close to the current one, pull the current one down into view\n        if (self.next && self.current && (scrollTop >= (self.next.top - self.current.height))) {\n          translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));\n          return;\n        }\n      }\n\n      //\n      // Otherwise, just move the current item to the proper place (scrolling up or down)\n      //\n      if (self.current) {\n        translate(self.current, scrollTop);\n      }\n    }\n\n    function setCurrentItem(item) {\n      if (self.current === item) return;\n      // Deactivate currently active item\n      if (self.current) {\n        translate(self.current, null);\n        setStickyState(self.current, null);\n      }\n\n      // Activate new item if given\n      if (item) {\n        setStickyState(item, 'active');\n      }\n\n      self.current = item;\n      var index = self.items.indexOf(item);\n      // If index === -1, index + 1 = 0. It works out.\n      self.next = self.items[index + 1];\n      self.prev = self.items[index - 1];\n      setStickyState(self.next, 'next');\n      setStickyState(self.prev, 'prev');\n    }\n\n    function setStickyState(item, state) {\n      if (!item || item.state === state) return;\n      if (item.state) {\n        item.clone.attr('sticky-prev-state', item.state);\n        item.element.attr('sticky-prev-state', item.state);\n      }\n      item.clone.attr('sticky-state', state);\n      item.element.attr('sticky-state', state);\n      item.state = state;\n    }\n\n    function translate(item, amount) {\n      if (!item) return;\n      if (amount === null || amount === undefined) {\n        if (item.translateY) {\n          item.translateY = null;\n          item.clone.css($mdConstant.CSS.TRANSFORM, '');\n        }\n      } else {\n        item.translateY = amount;\n        item.clone.css(\n          $mdConstant.CSS.TRANSFORM,\n          'translate3d(' + item.left + 'px,' + amount + 'px,0)'\n        );\n      }\n    }\n  }\n\n  // Function to check for browser sticky support\n  function checkStickySupport($el) {\n    var stickyProp;\n    var testEl = angular.element('<div>');\n    $document[0].body.appendChild(testEl[0]);\n\n    var stickyProps = ['sticky', '-webkit-sticky'];\n    for (var i = 0; i < stickyProps.length; ++i) {\n      testEl.css({position: stickyProps[i], top: 0, 'z-index': 2});\n      if (testEl.css('position') == stickyProps[i]) {\n        stickyProp = stickyProps[i];\n        break;\n      }\n    }\n    testEl.remove();\n    return stickyProp;\n  }\n\n  // Android 4.4 don't accurately give scroll events.\n  // To fix this problem, we setup a fake scroll event. We say:\n  // > If a scroll or touchmove event has happened in the last DELAY milliseconds, \n  //   then send a `$scroll` event every animationFrame.\n  // Additionally, we add $scrollstart and $scrollend events.\n  function setupAugmentedScrollEvents(element) {\n    var SCROLL_END_DELAY = 200;\n    var isScrolling;\n    var lastScrollTime;\n    element.on('scroll touchmove', function() {\n      if (!isScrolling) {\n        isScrolling = true;\n        $$rAF.throttle(loopScrollEvent);\n        element.triggerHandler('$scrollstart');\n      }\n      element.triggerHandler('$scroll');\n      lastScrollTime = +$mdUtil.now();\n    });\n\n    function loopScrollEvent() {\n      if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {\n        isScrolling = false;\n        element.triggerHandler('$scrollend');\n      } else {\n        element.triggerHandler('$scroll');\n        $$rAF.throttle(loopScrollEvent);\n      }\n    }\n  }\n\n}\nMdSticky.$inject = [\"$document\", \"$mdConstant\", \"$$rAF\", \"$mdUtil\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.subheader\n * @description\n * SubHeader module\n *\n *  Subheaders are special list tiles that delineate distinct sections of a\n *  list or grid list and are typically related to the current filtering or\n *  sorting criteria. Subheader tiles are either displayed inline with tiles or\n *  can be associated with content, for example, in an adjacent column.\n *\n *  Upon scrolling, subheaders remain pinned to the top of the screen and remain\n *  pinned until pushed on or off screen by the next subheader. @see [Material\n *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)\n *\n *  > To improve the visual grouping of content, use the system color for your subheaders.\n *\n */\nangular\n  .module('material.components.subheader', [\n    'material.core',\n    'material.components.sticky'\n  ])\n  .directive('mdSubheader', MdSubheaderDirective);\n\n/**\n * @ngdoc directive\n * @name mdSubheader\n * @module material.components.subheader\n *\n * @restrict E\n *\n * @description\n * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.\n * You can make it not sticky by applying the `md-no-sticky` class to the subheader.\n *\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-subheader>Online Friends</md-subheader>\n * </hljs>\n */\n\nfunction MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {\n  return {\n    restrict: 'E',\n    replace: true,\n    transclude: true,\n    template: (\n    '<div class=\"md-subheader\">' +\n    '  <div class=\"md-subheader-inner\">' +\n    '    <span class=\"md-subheader-content\"></span>' +\n    '  </div>' +\n    '</div>'\n    ),\n    link: function postLink(scope, element, attr, controllers, transclude) {\n      $mdTheming(element);\n      var outerHTML = element[0].outerHTML;\n\n      function getContent(el) {\n        return angular.element(el[0].querySelector('.md-subheader-content'));\n      }\n\n      // Transclude the user-given contents of the subheader\n      // the conventional way.\n      transclude(scope, function(clone) {\n        getContent(element).append(clone);\n      });\n\n      // Create another clone, that uses the outer and inner contents\n      // of the element, that will be 'stickied' as the user scrolls.\n      if (!element.hasClass('md-no-sticky')) {\n        transclude(scope, function(clone) {\n          // If the user adds an ng-if or ng-repeat directly to the md-subheader element, the\n          // compiled clone below will only be a comment tag (since they replace their elements with\n          // a comment) which cannot be properly passed to the $mdSticky; so we wrap it in our own\n          // DIV to ensure we have something $mdSticky can use\n          var wrapperHtml = '<div class=\"md-subheader-wrapper\">' + outerHTML + '</div>';\n          var stickyClone = $compile(wrapperHtml)(scope);\n\n          // Append the sticky\n          $mdSticky(scope, element, stickyClone);\n\n          // Delay initialization until after any `ng-if`/`ng-repeat`/etc has finished before\n          // attempting to create the clone\n          $mdUtil.nextTick(function() {\n            getContent(stickyClone).append(clone);\n          });\n        });\n      }\n    }\n  }\n}\nMdSubheaderDirective.$inject = [\"$mdSticky\", \"$compile\", \"$mdTheming\", \"$mdUtil\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.swipe\n * @description Swipe module!\n */\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeLeft\n *\n * @restrict A\n *\n * @description\n * The md-swipe-left directives allows you to specify custom behavior when an element is swiped\n * left.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-left=\"onSwipeLeft()\">Swipe me left!</div>\n * </hljs>\n */\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeRight\n *\n * @restrict A\n *\n * @description\n * The md-swipe-right directives allows you to specify custom behavior when an element is swiped\n * right.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-right=\"onSwipeRight()\">Swipe me right!</div>\n * </hljs>\n */\n\nangular.module('material.components.swipe', ['material.core'])\n    .directive('mdSwipeLeft', getDirective('SwipeLeft'))\n    .directive('mdSwipeRight', getDirective('SwipeRight'));\n\nfunction getDirective(name) {\n  var directiveName = 'md' + name;\n  var eventName = '$md.' + name.toLowerCase();\n\n    DirectiveFactory.$inject = [\"$parse\"];\n  return DirectiveFactory;\n\n  /* @ngInject */\n  function DirectiveFactory($parse) {\n      return { restrict: 'A', link: postLink };\n      function postLink(scope, element, attr) {\n        var fn = $parse(attr[directiveName]);\n        element.on(eventName, function(ev) {\n          scope.$apply(function() { fn(scope, { $event: ev }); });\n        });\n      }\n    }\n}\n\n\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @private\n * @ngdoc module\n * @name material.components.switch\n */\n\nangular.module('material.components.switch', [\n  'material.core',\n  'material.components.checkbox'\n])\n  .directive('mdSwitch', MdSwitch);\n\n/**\n * @private\n * @ngdoc directive\n * @module material.components.switch\n * @name mdSwitch\n * @restrict E\n *\n * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the switch is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.\n * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-switch ng-model=\"isActive\" aria-label=\"Finished?\">\n *   Finished ?\n * </md-switch>\n *\n * <md-switch md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n *   No Ink Effects\n * </md-switch>\n *\n * <md-switch ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n *   Disabled\n * </md-switch>\n *\n * </hljs>\n */\nfunction MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {\n  var checkboxDirective = mdCheckboxDirective[0];\n\n  return {\n    restrict: 'E',\n    priority: 210, // Run before ngAria\n    transclude: true,\n    template:\n      '<div class=\"md-container\">' +\n        '<div class=\"md-bar\"></div>' +\n        '<div class=\"md-thumb-container\">' +\n          '<div class=\"md-thumb\" md-ink-ripple md-ink-ripple-checkbox></div>' +\n        '</div>'+\n      '</div>' +\n      '<div ng-transclude class=\"md-label\"></div>',\n    require: '?ngModel',\n    compile: mdSwitchCompile\n  };\n\n  function mdSwitchCompile(element, attr) {\n    var checkboxLink = checkboxDirective.compile(element, attr);\n    // No transition on initial load.\n    element.addClass('md-dragging');\n\n    return function (scope, element, attr, ngModel) {\n      ngModel = ngModel || $mdUtil.fakeNgModel();\n\n      var disabledGetter = null;\n      if (attr.disabled != null) {\n        disabledGetter = function() { return true; };\n      } else if (attr.ngDisabled) {\n        disabledGetter = $parse(attr.ngDisabled);\n      }\n\n      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));\n      var switchContainer = angular.element(element[0].querySelector('.md-container'));\n\n      // no transition on initial load\n      $$rAF(function() {\n        element.removeClass('md-dragging');\n      });\n\n      checkboxLink(scope, element, attr, ngModel);\n\n      if (disabledGetter) {\n        scope.$watch(disabledGetter, function(isDisabled) {\n          element.attr('tabindex', isDisabled ? -1 : 0);\n        });\n      }\n\n      // These events are triggered by setup drag\n      $mdGesture.register(switchContainer, 'drag');\n      switchContainer\n        .on('$md.dragstart', onDragStart)\n        .on('$md.drag', onDrag)\n        .on('$md.dragend', onDragEnd);\n\n      var drag;\n      function onDragStart(ev) {\n        // Don't go if the switch is disabled.\n        if (disabledGetter && disabledGetter(scope)) return;\n        ev.stopPropagation();\n\n        element.addClass('md-dragging');\n        drag = {width: thumbContainer.prop('offsetWidth')};\n        element.removeClass('transition');\n      }\n\n      function onDrag(ev) {\n        if (!drag) return;\n        ev.stopPropagation();\n        ev.srcEvent && ev.srcEvent.preventDefault();\n\n        var percent = ev.pointer.distanceX / drag.width;\n\n        //if checked, start from right. else, start from left\n        var translate = ngModel.$viewValue ?  1 + percent : percent;\n        // Make sure the switch stays inside its bounds, 0-1%\n        translate = Math.max(0, Math.min(1, translate));\n\n        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');\n        drag.translate = translate;\n      }\n\n      function onDragEnd(ev) {\n        if (!drag) return;\n        ev.stopPropagation();\n\n        element.removeClass('md-dragging');\n        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');\n\n        // We changed if there is no distance (this is a click a click),\n        // or if the drag distance is >50% of the total.\n        var isChanged = ngModel.$viewValue ? drag.translate > 0.5 : drag.translate < 0.5;\n        if (isChanged) {\n          applyModelValue(!ngModel.$viewValue);\n        }\n        drag = null;\n      }\n\n      function applyModelValue(newValue) {\n        scope.$apply(function() {\n          ngModel.$setViewValue(newValue);\n          ngModel.$render();\n        });\n      }\n\n    };\n  }\n\n\n}\nMdSwitch.$inject = [\"mdCheckboxDirective\", \"$mdUtil\", \"$mdConstant\", \"$parse\", \"$$rAF\", \"$mdGesture\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.toast\n * @description\n * Toast\n */\nangular.module('material.components.toast', [\n  'material.core',\n  'material.components.button'\n])\n  .directive('mdToast', MdToastDirective)\n  .provider('$mdToast', MdToastProvider);\n\n/* @ngInject */\nfunction MdToastDirective($mdToast) {\n  return {\n    restrict: 'E',\n    link: function postLink(scope, element, attr) {\n      // When navigation force destroys an interimElement, then\n      // listen and $destroy() that interim instance...\n      scope.$on('$destroy', function() {\n        $mdToast.destroy();\n      });\n    }\n  };\n}\nMdToastDirective.$inject = [\"$mdToast\"];\n\n/**\n * @ngdoc service\n * @name $mdToast\n * @module material.components.toast\n *\n * @description\n * `$mdToast` is a service to build a toast notification on any position\n * on the screen with an optional duration, and provides a simple promise API.\n *\n *\n * ## Restrictions on custom toasts\n * - The toast's template must have an outer `<md-toast>` element.\n * - For a toast action, use element with class `md-action`.\n * - Add the class `md-capsule` for curved corners.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div ng-controller=\"MyController\">\n *   <md-button ng-click=\"openToast()\">\n *     Open a Toast!\n *   </md-button>\n * </div>\n * </hljs>\n *\n * <hljs lang=\"js\">\n * var app = angular.module('app', ['ngMaterial']);\n * app.controller('MyController', function($scope, $mdToast) {\n *   $scope.openToast = function($event) {\n *     $mdToast.show($mdToast.simple().content('Hello!'));\n *     // Could also do $mdToast.showSimple('Hello');\n *   };\n * });\n * </hljs>\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#showSimple\n * \n * @description\n * Convenience method which builds and shows a simple toast.\n *\n * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n * rejected with `$mdToast.cancel()`.\n *\n */\n\n /**\n * @ngdoc method\n * @name $mdToast#simple\n *\n * @description\n * Builds a preconfigured toast.\n *\n * @returns {obj} a `$mdToastPreset` with the chainable configuration methods:\n *\n * - $mdToastPreset#content(string) - sets toast content to string\n * - $mdToastPreset#action(string) - adds an action button. If clicked the promise (returned from `show()`) will resolve\n *   with value 'ok'; otherwise it promise is resolved with 'true' after a hideDelay timeout.\n * - $mdToastPreset#highlightAction(boolean) - sets action button to be highlighted\n * - $mdToastPreset#capsule(boolean) - adds 'md-capsule' class to the toast (curved corners)\n * - $mdToastPreset#theme(string) - sets the theme on the toast to theme (default is `$mdThemingProvider`'s default theme)\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#updateContent\n * \n * @description\n * Updates the content of an existing toast. Useful for updating things like counts, etc.\n *\n */\n\n /**\n * @ngdoc method\n * @name $mdToast#build\n *\n * @description\n * Creates a custom `$mdToastPreset` that you can configure.\n *\n * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).\n */\n\n /**\n * @ngdoc method\n * @name $mdToast#show\n *\n * @description Shows the toast.\n *\n * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`\n * and `build()`, or an options object with the following properties:\n *\n *   - `templateUrl` - `{string=}`: The url of an html template file that will\n *     be used as the content of the toast. Restrictions: the template must\n *     have an outer `md-toast` element.\n *   - `template` - `{string=}`: Same as templateUrl, except this is an actual\n *     template string.\n *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.\n *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.\n *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay\n *     active before automatically closing.  Set to 0 or false to have the toast stay open until\n *     closed manually. Default: 3000.\n *   - `position` - `{string=}`: Where to place the toast. Available: any combination\n *     of 'bottom', 'left', 'top', 'right', 'fit'. Default: 'bottom left'.\n *   - `controller` - `{string=}`: The controller to associate with this toast.\n *     The controller will be injected the local `$mdToast.hide( )`, which is a function\n *     used to hide the toast.\n *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will\n *     be used as names of values to inject into the controller. For example,\n *     `locals: {three: 3}` would inject `three` into the controller with the value\n *     of 3.\n *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.\n *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values\n *     and the toast will not open until the promises resolve.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending\n *     to the root element of the application.\n *\n * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean\n * value == 'true' or the value passed as an argument to `$mdToast.hide()`.\n * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#hide\n *\n * @description\n * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.\n *\n * @param {*=} response An argument for the resolved promise.\n *\n * @returns {promise} a promise that is called when the existing element is removed from the DOM.\n * The promise is resolved with either a Boolean value == 'true' or the value passed as the\n * argument to `.hide()`.\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#cancel\n *\n * @description\n * Hide the existing toast and reject the promise returned from\n * `$mdToast.show()`.\n *\n * @param {*=} response An argument for the rejected promise.\n *\n * @returns {promise} a promise that is called when the existing element is removed from the DOM\n * The promise is resolved with a Boolean value == 'false'.\n *\n */\n\nfunction MdToastProvider($$interimElementProvider) {\n  // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).\n  var ACTION_RESOLVE = 'ok';\n\n  var activeToastContent;\n  var $mdToast = $$interimElementProvider('$mdToast')\n    .setDefaults({\n      methods: ['position', 'hideDelay', 'capsule', 'parent' ],\n      options: toastDefaultOptions\n    })\n    .addPreset('simple', {\n      argOption: 'content',\n      methods: ['content', 'action', 'highlightAction', 'theme', 'parent'],\n      options: /* @ngInject */ [\"$mdToast\", \"$mdTheming\", function($mdToast, $mdTheming) {\n        var opts = {\n          template: [\n            '<md-toast md-theme=\"{{ toast.theme }}\" ng-class=\"{\\'md-capsule\\': toast.capsule}\">',\n              '<span flex>{{ toast.content }}</span>',\n              '<md-button class=\"md-action\" ng-if=\"toast.action\" ng-click=\"toast.resolve()\" ng-class=\"{\\'md-highlight\\': toast.highlightAction}\">',\n                '{{ toast.action }}',\n              '</md-button>',\n            '</md-toast>'\n          ].join(''),\n          controller: /* @ngInject */ [\"$scope\", function mdToastCtrl($scope) {\n            var self = this;\n            $scope.$watch(function() { return activeToastContent; }, function() {\n              self.content = activeToastContent;\n            });\n            this.resolve = function() {\n              $mdToast.hide( ACTION_RESOLVE );\n            };\n          }],\n          theme: $mdTheming.defaultTheme(),\n          controllerAs: 'toast',\n          bindToController: true\n        };\n        return opts;\n      }]\n    })\n    .addMethod('updateContent', function(newContent) {\n      activeToastContent = newContent;\n    });\n\n  toastDefaultOptions.$inject = [\"$animate\", \"$mdToast\", \"$mdUtil\"];\n    return $mdToast;\n\n  /* @ngInject */\n  function toastDefaultOptions($animate, $mdToast, $mdUtil) {\n    var SWIPE_EVENTS = '$md.swipeleft $md.swiperight';\n    return {\n      onShow: onShow,\n      onRemove: onRemove,\n      position: 'bottom left',\n      themable: true,\n      hideDelay: 3000\n    };\n\n    function onShow(scope, element, options) {\n      activeToastContent = options.content;\n\n      element = $mdUtil.extractElementByName(element, 'md-toast', true);\n      options.onSwipe = function(ev, gesture) {\n        //Add swipeleft/swiperight class to element so it can animate correctly\n        element.addClass('md-' + ev.type.replace('$md.',''));\n        $mdUtil.nextTick($mdToast.cancel);\n      };\n      options.openClass = toastOpenClass(options.position);\n\n\n      // 'top left' -> 'md-top md-left'\n      options.parent.addClass(options.openClass);\n      element.on(SWIPE_EVENTS, options.onSwipe);\n      element.addClass(options.position.split(' ').map(function(pos) {\n        return 'md-' + pos;\n      }).join(' '));\n\n      return $animate.enter(element, options.parent);\n    }\n\n    function onRemove(scope, element, options) {\n      element.off(SWIPE_EVENTS, options.onSwipe);\n      options.parent.removeClass(options.openClass);\n\n      return (options.$destroy == true) ? element.remove() : $animate.leave(element);\n    }\n\n    function toastOpenClass(position) {\n      return 'md-toast-open-' +\n        (position.indexOf('top') > -1 ? 'top' : 'bottom');\n    }\n  }\n\n}\nMdToastProvider.$inject = [\"$$interimElementProvider\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.tabs\n * @description\n *\n *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.\n *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.\n *\n *  Features include support for:\n *\n *  - static or dynamic tabs,\n *  - responsive designs,\n *  - accessibility support (ARIA),\n *  - tab pagination,\n *  - external or internal tab content,\n *  - focus indicators and arrow-key navigations,\n *  - programmatic lookup and access to tab controllers, and\n *  - dynamic transitions through different tab contents.\n *\n */\n/*\n * @see js folder for tabs implementation\n */\nangular.module('material.components.tabs', [\n  'material.core',\n  'material.components.icon'\n]);\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.toolbar\n */\nangular.module('material.components.toolbar', [\n  'material.core',\n  'material.components.content'\n])\n  .directive('mdToolbar', mdToolbarDirective);\n\n/**\n * @ngdoc directive\n * @name mdToolbar\n * @module material.components.toolbar\n * @restrict E\n * @description\n * `md-toolbar` is used to place a toolbar in your app.\n *\n * Toolbars are usually used above a content area to display the title of the\n * current page, and show relevant action buttons for that page.\n *\n * You can change the height of the toolbar by adding either the\n * `md-medium-tall` or `md-tall` class to the toolbar.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div layout=\"column\" layout-fill>\n *   <md-toolbar>\n *\n *     <div class=\"md-toolbar-tools\">\n *       <span>My App's Title</span>\n *\n *       <!-- fill up the space between left and right area -->\n *       <span flex></span>\n *\n *       <md-button>\n *         Right Bar Button\n *       </md-button>\n *     </div>\n *\n *   </md-toolbar>\n *   <md-content>\n *     Hello!\n *   </md-content>\n * </div>\n * </hljs>\n *\n * @param {boolean=} md-scroll-shrink Whether the header should shrink away as\n * the user scrolls down, and reveal itself as the user scrolls up.\n *\n * _**Note (1):** for scrollShrink to work, the toolbar must be a sibling of a\n * `md-content` element, placed before it. See the scroll shrink demo._\n *\n * _**Note (2):** The `md-scroll-shrink` attribute is only parsed on component\n * initialization, it does not watch for scope changes._\n *\n *\n * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's\n * shrinking by. For example, if 0.25 is given then the toolbar will shrink\n * at one fourth the rate at which the user scrolls down. Default 0.5.\n */\n\nfunction mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {\n  var translateY = angular.bind(null, $mdUtil.supplant, 'translate3d(0,{0}px,0)');\n\n  return {\n    restrict: 'E',\n\n    link: function(scope, element, attr) {\n\n      $mdTheming(element);\n\n      if (angular.isDefined(attr.mdScrollShrink)) {\n        setupScrollShrink();\n      }\n\n      function setupScrollShrink() {\n\n        var toolbarHeight;\n        var contentElement;\n        var disableScrollShrink = angular.noop;\n\n        // Current \"y\" position of scroll\n        // Store the last scroll top position\n        var y = 0;\n        var prevScrollTop = 0;\n        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;\n\n        var debouncedContentScroll = $$rAF.throttle(onContentScroll);\n        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);\n\n        // Wait for $mdContentLoaded event from mdContent directive.\n        // If the mdContent element is a sibling of our toolbar, hook it up\n        // to scroll events.\n\n        scope.$on('$mdContentLoaded', onMdContentLoad);\n\n        // If the toolbar is used inside an ng-if statement, we may miss the\n        // $mdContentLoaded event, so we attempt to fake it if we have a\n        // md-content close enough.\n\n        attr.$observe('mdScrollShrink', onChangeScrollShrink);\n\n        // If the scope is destroyed (which could happen with ng-if), make sure\n        // to disable scroll shrinking again\n\n        scope.$on('$destroy', disableScrollShrink);\n\n        /**\n         *\n         */\n        function onChangeScrollShrink(shrinkWithScroll) {\n          var closestContent = element.parent().find('md-content');\n\n          // If we have a content element, fake the call; this might still fail\n          // if the content element isn't a sibling of the toolbar\n\n          if (!contentElement && closestContent.length) {\n            onMdContentLoad(null, closestContent);\n          }\n\n          // Evaluate the expression\n          shrinkWithScroll = scope.$eval(shrinkWithScroll);\n\n          // Disable only if the attribute's expression evaluates to false\n          if (shrinkWithScroll === false) {\n            disableScrollShrink();\n          } else {\n            disableScrollShrink = enableScrollShrink();\n          }\n        }\n\n        /**\n         *\n         */\n        function onMdContentLoad($event, newContentEl) {\n          // Toolbar and content must be siblings\n          if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {\n            // unhook old content event listener if exists\n            if (contentElement) {\n              contentElement.off('scroll', debouncedContentScroll);\n            }\n\n            contentElement = newContentEl;\n            disableScrollShrink = enableScrollShrink();\n          }\n        }\n\n        /**\n         *\n         */\n        function onContentScroll(e) {\n          var scrollTop = e ? e.target.scrollTop : prevScrollTop;\n\n          debouncedUpdateHeight();\n\n          y = Math.min(\n            toolbarHeight / shrinkSpeedFactor,\n            Math.max(0, y + scrollTop - prevScrollTop)\n          );\n\n          element.css($mdConstant.CSS.TRANSFORM, translateY([-y * shrinkSpeedFactor]));\n          contentElement.css($mdConstant.CSS.TRANSFORM, translateY([(toolbarHeight - y) * shrinkSpeedFactor]));\n\n          prevScrollTop = scrollTop;\n\n          $mdUtil.nextTick(function() {\n            var hasWhiteFrame = element.hasClass('md-whiteframe-z1');\n\n            if (hasWhiteFrame && !y) {\n              $animate.removeClass(element, 'md-whiteframe-z1');\n            } else if (!hasWhiteFrame && y) {\n              $animate.addClass(element, 'md-whiteframe-z1');\n            }\n          });\n\n        }\n\n        /**\n         *\n         */\n        function enableScrollShrink() {\n          if (!contentElement)     return angular.noop;           // no md-content\n\n          contentElement.on('scroll', debouncedContentScroll);\n          contentElement.attr('scroll-shrink', 'true');\n\n          $$rAF(updateToolbarHeight);\n\n          return function disableScrollShrink() {\n            contentElement.off('scroll', debouncedContentScroll);\n            contentElement.attr('scroll-shrink', 'false');\n\n            $$rAF(updateToolbarHeight);\n          }\n        }\n\n        /**\n         *\n         */\n        function updateToolbarHeight() {\n          toolbarHeight = element.prop('offsetHeight');\n          // Add a negative margin-top the size of the toolbar to the content el.\n          // The content will start transformed down the toolbarHeight amount,\n          // so everything looks normal.\n          //\n          // As the user scrolls down, the content will be transformed up slowly\n          // to put the content underneath where the toolbar was.\n          var margin = (-toolbarHeight * shrinkSpeedFactor) + 'px';\n\n          contentElement.css({\n            \"margin-top\": margin,\n            \"margin-bottom\": margin\n          });\n\n          onContentScroll();\n        }\n\n      }\n\n    }\n  };\n\n}\nmdToolbarDirective.$inject = [\"$$rAF\", \"$mdConstant\", \"$mdUtil\", \"$mdTheming\", \"$animate\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.tooltip\n */\nangular\n    .module('material.components.tooltip', [ 'material.core' ])\n    .directive('mdTooltip', MdTooltipDirective);\n\n/**\n * @ngdoc directive\n * @name mdTooltip\n * @module material.components.tooltip\n * @description\n * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).\n *\n * Place a `<md-tooltip>` as a child of the element it describes.\n *\n * A tooltip will activate when the user focuses, hovers over, or touches the parent.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-button class=\"md-fab md-accent\" aria-label=\"Play\">\n *   <md-tooltip>\n *     Play Music\n *   </md-tooltip>\n *   <md-icon icon=\"img/icons/ic_play_arrow_24px.svg\"></md-icon>\n * </md-button>\n * </hljs>\n *\n * @param {expression=} md-visible Boolean bound to whether the tooltip is\n * currently visible.\n * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 300ms.\n * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.\n * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus\n */\nfunction MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement,\n                            $animate, $q) {\n\n  var TOOLTIP_SHOW_DELAY = 300;\n  var TOOLTIP_WINDOW_EDGE_SPACE = 8;\n\n  return {\n    restrict: 'E',\n    transclude: true,\n    priority:210, // Before ngAria\n    template: '<div class=\"md-background\"></div>' +\n              '<div class=\"md-content\" ng-transclude></div>',\n    scope: {\n      visible: '=?mdVisible',\n      delay: '=?mdDelay',\n      autohide: '=?mdAutohide'\n    },\n    link: postLink\n  };\n\n  function postLink(scope, element, attr) {\n\n    $mdTheming(element);\n\n    var parent        = getParentWithPointerEvents(),\n        background    = angular.element(element[0].getElementsByClassName('md-background')[0]),\n        content       = angular.element(element[0].getElementsByClassName('md-content')[0]),\n        direction     = attr.mdDirection,\n        current       = getNearestContentElement(),\n        tooltipParent = angular.element(current || document.body),\n        debouncedOnResize = $$rAF.throttle(function () { if (scope.visible) positionTooltip(); });\n\n    // Initialize element\n\n    setDefaults();\n    manipulateElement();\n    bindEvents();\n    configureWatchers();\n    addAriaLabel();\n\n\n    function setDefaults () {\n      if (!angular.isDefined(attr.mdDelay)) scope.delay = TOOLTIP_SHOW_DELAY;\n    }\n\n    function configureWatchers () {\n      scope.$on('$destroy', function() {\n        scope.visible = false;\n        element.remove();\n        angular.element($window).off('resize', debouncedOnResize);\n      });\n      scope.$watch('visible', function (isVisible) {\n        if (isVisible) showTooltip();\n        else hideTooltip();\n      });\n    }\n\n    function addAriaLabel () {\n      if (!parent.attr('aria-label') && !parent.text().trim()) {\n        parent.attr('aria-label', element.text().trim());\n      }\n    }\n\n    function manipulateElement () {\n      element.detach();\n      element.attr('role', 'tooltip');\n    }\n\n    /**\n     * Scan up dom hierarchy for enabled parent;\n     */\n    function getParentWithPointerEvents () {\n      var parent = element.parent();\n\n      // jqLite might return a non-null, but still empty, parent; so check for parent and length\n      while (hasComputedStyleValue('pointer-events','none', parent)) {\n        parent = parent.parent();\n      }\n\n      return parent;\n    }\n\n     function getNearestContentElement () {\n       var current = element.parent()[0];\n       // Look for the nearest parent md-content, stopping at the rootElement.\n       while (current && current !== $rootElement[0] && current !== document.body) {\n         current = current.parentNode;\n       }\n       return current;\n     }\n\n\n    function hasComputedStyleValue(key, value, target) {\n      var hasValue = false;\n\n      if ( target && target.length  ) {\n        key    = attr.$normalize(key);\n        target = target[0] || element[0];\n\n        var computedStyles = $window.getComputedStyle(target);\n        hasValue = angular.isDefined(computedStyles[key]) && (computedStyles[key] == value);\n      }\n\n      return hasValue;\n    }\n\n    function bindEvents () {\n      var mouseActive = false;\n\n      var ngWindow = angular.element($window);\n\n      // Store whether the element was focused when the window loses focus.\n      var windowBlurHandler = function() {\n        elementFocusedOnWindowBlur = document.activeElement === parent[0];\n      };\n      var elementFocusedOnWindowBlur = false;\n      ngWindow.on('blur', windowBlurHandler);\n      scope.$on('$destroy', function() {\n        ngWindow.off('blur', windowBlurHandler);\n      });\n\n      var enterHandler = function(e) {\n        // Prevent the tooltip from showing when the window is receiving focus.\n        if (e.type === 'focus' && elementFocusedOnWindowBlur) {\n          elementFocusedOnWindowBlur = false;\n          return;\n        }\n        parent.on('blur mouseleave touchend touchcancel', leaveHandler );\n        setVisible(true);\n      };\n      var leaveHandler = function () {\n        var autohide = scope.hasOwnProperty('autohide') ? scope.autohide : attr.hasOwnProperty('mdAutohide');\n        if (autohide || mouseActive || ($document[0].activeElement !== parent[0]) ) {\n          parent.off('blur mouseleave touchend touchcancel', leaveHandler );\n          parent.triggerHandler(\"blur\");\n          setVisible(false);\n        }\n        mouseActive = false;\n      };\n\n      // to avoid `synthetic clicks` we listen to mousedown instead of `click`\n      parent.on('mousedown', function() { mouseActive = true; });\n      parent.on('focus mouseenter touchstart', enterHandler );\n\n\n      angular.element($window).on('resize', debouncedOnResize);\n    }\n\n    function setVisible (value) {\n      setVisible.value = !!value;\n      if (!setVisible.queued) {\n        if (value) {\n          setVisible.queued = true;\n          $timeout(function() {\n            scope.visible = setVisible.value;\n            setVisible.queued = false;\n          }, scope.delay);\n        } else {\n          $mdUtil.nextTick(function() { scope.visible = false; });\n        }\n      }\n    }\n\n    function showTooltip() {\n      // Insert the element before positioning it, so we can get the position\n      // and check if we should display it\n      tooltipParent.append(element);\n\n      // Check if we should display it or not.\n      // This handles hide-* and show-* along with any user defined css\n      if ( hasComputedStyleValue('display','none') ) {\n        scope.visible = false;\n        element.detach();\n        return;\n      }\n\n      positionTooltip();\n      angular.forEach([element, background, content], function (element) {\n        $animate.addClass(element, 'md-show');\n      });\n    }\n\n    function hideTooltip() {\n        var promises = [];\n        angular.forEach([element, background, content], function (it) {\n          if (it.parent() && it.hasClass('md-show')) {\n            promises.push($animate.removeClass(it, 'md-show'));\n          }\n        });\n\n        $q.all(promises)\n          .then(function () {\n            if (!scope.visible) element.detach();\n          });\n    }\n\n    function positionTooltip() {\n      var tipRect = $mdUtil.offsetRect(element, tooltipParent);\n      var parentRect = $mdUtil.offsetRect(parent, tooltipParent);\n      var newPosition = getPosition(direction);\n\n      // If the user provided a direction, just nudge the tooltip onto the screen\n      // Otherwise, recalculate based on 'top' since default is 'bottom'\n      if (direction) {\n        newPosition = fitInParent(newPosition);\n      } else if (newPosition.top > element.prop('offsetParent').scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {\n        newPosition = fitInParent(getPosition('top'));\n      }\n\n      element.css({top: newPosition.top + 'px', left: newPosition.left + 'px'});\n\n      positionBackground();\n\n      function positionBackground () {\n        var size = direction === 'left' || direction === 'right'\n              ? Math.sqrt(Math.pow(tipRect.width, 2) + Math.pow(tipRect.height / 2, 2)) * 2\n              : Math.sqrt(Math.pow(tipRect.width / 2, 2) + Math.pow(tipRect.height, 2)) * 2,\n            position = direction === 'left' ? { left: 100, top: 50 }\n              : direction === 'right' ? { left: 0, top: 50 }\n              : direction === 'top' ? { left: 50, top: 100 }\n              : { left: 50, top: 0 };\n        background.css({\n          width: size + 'px',\n          height: size + 'px',\n          left: position.left + '%',\n          top: position.top + '%'\n        });\n      }\n\n      function fitInParent (pos) {\n        var newPosition = { left: pos.left, top: pos.top };\n        newPosition.left = Math.min( newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE );\n        newPosition.left = Math.max( newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE );\n        newPosition.top  = Math.min( newPosition.top,  tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE );\n        newPosition.top  = Math.max( newPosition.top,  TOOLTIP_WINDOW_EDGE_SPACE );\n        return newPosition;\n      }\n\n      function getPosition (dir) {\n        return dir === 'left'\n          ? { left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,\n              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }\n          : dir === 'right'\n          ? { left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,\n              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }\n          : dir === 'top'\n          ? { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,\n              top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE }\n          : { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,\n              top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE };\n      }\n    }\n\n  }\n\n}\nMdTooltipDirective.$inject = [\"$timeout\", \"$window\", \"$$rAF\", \"$document\", \"$mdUtil\", \"$mdTheming\", \"$rootElement\", \"$animate\", \"$q\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.virtualRepeat\n */\nangular.module('material.components.virtualRepeat', [\n  'material.core'\n])\n.directive('mdVirtualRepeatContainer', VirtualRepeatContainerDirective)\n.directive('mdVirtualRepeat', VirtualRepeatDirective);\n\n\n/**\n * @ngdoc directive\n * @name mdVirtualRepeatContainer\n * @module material.components.virtualRepeat\n * @restrict E\n * @description\n * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.\n *\n * Virtual repeat is a limited substitute for ng-repeat that renders only\n * enough dom nodes to fill the container and recycling them as the user scrolls.\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-virtual-repeat-container md-top-index=\"topIndex\">\n *   <div md-virtual-repeat=\"i in items\" md-item-size=\"20\">Hello {{i}}!</div>\n * </md-virtual-repeat-container>\n * </hljs>\n *\n * @param {number=} md-top-index Binds the index of the item that is at the top of the scroll\n *     container to $scope. It can both read and set the scroll position.\n * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally\n *     (defaults to orientation and scrolling vertically).\n * @param {boolean=} md-auto-shrink When present, the container will shrink to fit\n *     the number of items when that number is less than its original size.\n * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink\n *     will shrink to (default: 0).\n */\nfunction VirtualRepeatContainerDirective() {\n  return {\n    controller: VirtualRepeatContainerController,\n    template: virtualRepeatContainerTemplate,\n    compile: function virtualRepeatContainerCompile($element, $attrs) {\n      $element\n          .addClass('md-virtual-repeat-container')\n          .addClass($attrs.hasOwnProperty('mdOrientHorizontal')\n              ? 'md-orient-horizontal'\n              : 'md-orient-vertical');\n    }\n  };\n}\n\n\nfunction virtualRepeatContainerTemplate($element) {\n  return '<div class=\"md-virtual-repeat-scroller\">' +\n    '<div class=\"md-virtual-repeat-sizer\"></div>' +\n    '<div class=\"md-virtual-repeat-offsetter\">' +\n      $element[0].innerHTML +\n    '</div></div>';\n}\n\n/**\n * Maximum size, in pixels, that can be explicitly set to an element. The actual value varies\n * between browsers, but IE11 has the very lowest size at a mere 1,533,917px. Ideally we could\n * *compute* this value, but Firefox always reports an element to have a size of zero if it\n * goes over the max, meaning that we'd have to binary search for the value.\n * @const {number}\n */\nvar MAX_ELEMENT_SIZE = 1533917;\n\n/**\n * Number of additional elements to render above and below the visible area inside\n * of the virtual repeat container. A higher number results in less flicker when scrolling\n * very quickly in Safari, but comes with a higher rendering and dirty-checking cost.\n * @const {number}\n */\nvar NUM_EXTRA = 3;\n\n/** @ngInject */\nfunction VirtualRepeatContainerController($$rAF, $parse, $scope, $element, $attrs) {\n  this.$scope = $scope;\n  this.$element = $element;\n  this.$attrs = $attrs;\n\n  /** @type {number} The width or height of the container */\n  this.size = 0;\n  /** @type {number} The scroll width or height of the scroller */\n  this.scrollSize = 0;\n  /** @type {number} The scrollLeft or scrollTop of the scroller */\n  this.scrollOffset = 0;\n  /** @type {boolean} Whether the scroller is oriented horizontally */\n  this.horizontal = this.$attrs.hasOwnProperty('mdOrientHorizontal');\n  /** @type {!VirtualRepeatController} The repeater inside of this container */\n  this.repeater = null;\n  /** @type {boolean} Whether auto-shrink is enabled */\n  this.autoShrink = this.$attrs.hasOwnProperty('mdAutoShrink');\n  /** @type {number} Minimum number of items to auto-shrink to */\n  this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;\n  /** @type {?number} Original container size when shrank */\n  this.originalSize = null;\n  /** @type {number} Amount to offset the total scroll size by. */\n  this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;\n\n  if (this.$attrs.mdTopIndex) {\n    /** @type {function(angular.Scope): number} Binds to topIndex on Angular scope */\n    this.bindTopIndex = $parse(this.$attrs.mdTopIndex);\n    /** @type {number} The index of the item that is at the top of the scroll container */\n    this.topIndex = this.bindTopIndex(this.$scope);\n\n    if (!angular.isDefined(this.topIndex)) {\n      this.topIndex = 0;\n      this.bindTopIndex.assign(this.$scope, 0);\n    }\n\n    this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {\n      if (newIndex !== this.topIndex) {\n        this.scrollToIndex(newIndex);\n      }\n    }));\n  } else {\n    this.topIndex = 0;\n  }\n\n  this.scroller = $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0];\n  this.sizer = this.scroller.getElementsByClassName('md-virtual-repeat-sizer')[0];\n  this.offsetter = this.scroller.getElementsByClassName('md-virtual-repeat-offsetter')[0];\n\n  $$rAF(angular.bind(this, this.updateSize));\n\n  // TODO: Come up with a more robust (But hopefully also quick!) way of\n  // detecting that we're not visible.\n  if ($attrs.ngHide) {\n    $scope.$watch($attrs.ngHide, angular.bind(this, function(hidden) {\n      if (!hidden) {\n        $$rAF(angular.bind(this, this.updateSize));\n      }\n    }));\n  }\n}\nVirtualRepeatContainerController.$inject = [\"$$rAF\", \"$parse\", \"$scope\", \"$element\", \"$attrs\"];\n\n\n/** Called by the md-virtual-repeat inside of the container at startup. */\nVirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {\n  this.repeater = repeaterCtrl;\n\n  angular.element(this.scroller)\n      .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));\n};\n\n\n/** @return {boolean} Whether the container is configured for horizontal scrolling. */\nVirtualRepeatContainerController.prototype.isHorizontal = function() {\n  return this.horizontal;\n};\n\n\n/** @return {number} The size (width or height) of the container. */\nVirtualRepeatContainerController.prototype.getSize = function() {\n  return this.size;\n};\n\n\n/**\n * Resizes the container.\n * @private\n * @param {number} The new size to set.\n */\nVirtualRepeatContainerController.prototype.setSize_ = function(size) {\n  this.size = size;\n  this.$element[0].style[this.isHorizontal() ? 'width' : 'height'] = size + 'px';\n};\n\n\n/** Instructs the container to re-measure its size. */\nVirtualRepeatContainerController.prototype.updateSize = function() {\n  if (this.originalSize) return;\n\n  this.size = this.isHorizontal()\n      ? this.$element[0].clientWidth\n      : this.$element[0].clientHeight;\n  this.repeater && this.repeater.containerUpdated();\n};\n\n\n/** @return {number} The container's scrollHeight or scrollWidth. */\nVirtualRepeatContainerController.prototype.getScrollSize = function() {\n  return this.scrollSize;\n};\n\n\n/**\n * Sets the scroller element to the specified size.\n * @private\n * @param {number} size The new size.\n */\nVirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {\n  var dimension =  this.isHorizontal() ? 'width' : 'height';\n  var crossDimension = this.isHorizontal() ? 'height' : 'width';\n\n  // If the size falls within the browser's maximum explicit size for a single element, we can\n  // set the size and be done. Otherwise, we have to create children that add up the the desired\n  // size.\n  if (size < MAX_ELEMENT_SIZE) {\n    this.sizer.style[dimension] = size + 'px';\n  } else {\n    // Clear any existing dimensions.\n    this.sizer.innerHTML = '';\n    this.sizer.style[dimension] = 'auto';\n    this.sizer.style[crossDimension] = 'auto';\n\n    // Divide the total size we have to render into N max-size pieces.\n    var numChildren = Math.floor(size / MAX_ELEMENT_SIZE);\n\n    // Element template to clone for each max-size piece.\n    var sizerChild = document.createElement('div');\n    sizerChild.style[dimension] = MAX_ELEMENT_SIZE + 'px';\n    sizerChild.style[crossDimension] = '1px';\n\n    for (var i = 0; i < numChildren; i++) {\n      this.sizer.appendChild(sizerChild.cloneNode(false));\n    }\n\n    // Re-use the element template for the remainder.\n    sizerChild.style[dimension] = (size - (numChildren * MAX_ELEMENT_SIZE)) + 'px';\n    this.sizer.appendChild(sizerChild);\n  }\n};\n\n\n/**\n * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.\n * @private\n * @param {number} size The new size.\n */\nVirtualRepeatContainerController.prototype.autoShrink_ = function(size) {\n  var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());\n  if (this.autoShrink && shrinkSize !== this.size) {\n    if (shrinkSize < (this.originalSize || this.size)) {\n      if (!this.originalSize) {\n        this.originalSize = this.size;\n      }\n\n      this.setSize_(shrinkSize);\n    } else if (this.originalSize) {\n      this.setSize_(this.originalSize);\n      this.originalSize = null;\n    }\n  }\n};\n\n\n/**\n * Sets the scrollHeight or scrollWidth. Called by the repeater based on\n * its item count and item size.\n * @param {number} itemsSize The total size of the items.\n */\nVirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {\n  var size = itemsSize + this.offsetSize;\n  if (this.scrollSize === size) return;\n\n  this.sizeScroller_(size);\n  this.autoShrink_(size);\n  this.scrollSize = size;\n};\n\n\n/** @return {number} The container's current scroll offset. */\nVirtualRepeatContainerController.prototype.getScrollOffset = function() {\n  return this.scrollOffset;\n};\n\n/**\n * Scrolls to a given scrollTop position.\n * @param {number} position\n */\nVirtualRepeatContainerController.prototype.scrollTo = function(position) {\n  this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;\n  this.handleScroll_();\n};\n\n/**\n * Scrolls the item with the given index to the top of the scroll container.\n * @param {number} index\n */\nVirtualRepeatContainerController.prototype.scrollToIndex = function(index) {\n  var itemSize = this.repeater.getItemSize();\n  var itemsLength = this.repeater.itemsLength;\n  if(index > itemsLength) {\n    index = itemsLength - 1;\n  }\n  this.scrollTo(itemSize * index);\n};\n\nVirtualRepeatContainerController.prototype.resetScroll = function() {\n  this.scrollTo(0);\n};\n\n\nVirtualRepeatContainerController.prototype.handleScroll_ = function() {\n  var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;\n  if (offset === this.scrollOffset) return;\n\n  var itemSize = this.repeater.getItemSize();\n  if (!itemSize) return;\n\n  var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);\n\n  var transform = this.isHorizontal() ? 'translateX(' : 'translateY(';\n      transform +=  (numItems * itemSize) + 'px)';\n\n  this.scrollOffset = offset;\n  this.offsetter.style.webkitTransform = transform;\n  this.offsetter.style.transform = transform;\n\n  if (this.bindTopIndex) {\n    var topIndex = Math.floor(offset / itemSize);\n    if (topIndex !== this.topIndex && topIndex < this.repeater.itemsLength) {\n      this.topIndex = topIndex;\n      this.bindTopIndex.assign(this.$scope, topIndex);\n      if (!this.$scope.$root.$$phase) this.$scope.$digest();\n    }\n  }\n\n  this.repeater.containerUpdated();\n};\n\n\n/**\n * @ngdoc directive\n * @name mdVirtualRepeat\n * @module material.components.virtualRepeat\n * @restrict A\n * @priority 1000\n * @description\n * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.\n *\n * Virtual repeat is a limited substitute for ng-repeat that renders only\n * enough dom nodes to fill the container and recycling them as the user scrolls.\n * Arrays, but not objects are supported for iteration.\n * Track by, as alias, and (key, value) syntax are not supported.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-virtual-repeat-container>\n *   <div md-virtual-repeat=\"i in items\">Hello {{i}}!</div>\n * </md-virtual-repeat-container>\n *\n * <md-virtual-repeat-container md-orient-horizontal>\n *   <div md-virtual-repeat=\"i in items\" md-item-size=\"20\">Hello {{i}}!</div>\n * </md-virtual-repeat-container>\n * </hljs>\n *\n * @param {number=} md-item-size The height or width of the repeated elements (which must be\n *   identical for each element). Optional. Will attempt to read the size from the dom if missing,\n *   but still assumes that all repeated nodes have same height or width.\n * @param {string=} md-extra-name Evaluates to an additional name to which the current iterated item\n *   can be assigned on the repeated scope (needed for use in `md-autocomplete`).\n * @param {boolean=} md-on-demand When present, treats the md-virtual-repeat argument as an object\n *   that can fetch rows rather than an array.\n *\n *   **NOTE:** This object must implement the following interface with two (2) methods:\n *\n *   - `getItemAtIndex: function(index) [object]` The item at that index or null if it is not yet\n *     loaded (it should start downloading the item in that case).\n *   - `getLength: function() [number]` The data length to which the repeater container\n *     should be sized. Ideally, when the count is known, this method should return it.\n *     Otherwise, return a higher number than the currently loaded items to produce an\n *     infinite-scroll behavior.\n */\nfunction VirtualRepeatDirective($parse) {\n  return {\n    controller: VirtualRepeatController,\n    priority: 1000,\n    require: ['mdVirtualRepeat', '^^mdVirtualRepeatContainer'],\n    restrict: 'A',\n    terminal: true,\n    transclude: 'element',\n    compile: function VirtualRepeatCompile($element, $attrs) {\n      var expression = $attrs.mdVirtualRepeat;\n      var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\n      var repeatName = match[1];\n      var repeatListExpression = $parse(match[2]);\n      var extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);\n\n      return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {\n        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);\n      };\n    }\n  };\n}\nVirtualRepeatDirective.$inject = [\"$parse\"];\n\n\n/** @ngInject */\nfunction VirtualRepeatController($scope, $element, $attrs, $browser, $document, $$rAF) {\n  this.$scope = $scope;\n  this.$element = $element;\n  this.$attrs = $attrs;\n  this.$browser = $browser;\n  this.$document = $document;\n  this.$$rAF = $$rAF;\n\n  /** @type {boolean} Whether we are in on-demand mode. */\n  this.onDemand = $attrs.hasOwnProperty('mdOnDemand');\n  /** @type {!Function} Backup reference to $browser.$$checkUrlChange */\n  this.browserCheckUrlChange = $browser.$$checkUrlChange;\n  /** @type {number} Most recent starting repeat index (based on scroll offset) */\n  this.newStartIndex = 0;\n  /** @type {number} Most recent ending repeat index (based on scroll offset) */\n  this.newEndIndex = 0;\n  /** @type {number} Most recent end visible index (based on scroll offset) */\n  this.newVisibleEnd = 0;\n  /** @type {number} Previous starting repeat index (based on scroll offset) */\n  this.startIndex = 0;\n  /** @type {number} Previous ending repeat index (based on scroll offset) */\n  this.endIndex = 0;\n  // TODO: measure width/height of first element from dom if not provided.\n  // getComputedStyle?\n  /** @type {?number} Height/width of repeated elements. */\n  this.itemSize = $scope.$eval($attrs.mdItemSize) || null;\n\n  /** @type {boolean} Whether this is the first time that items are rendered. */\n  this.isFirstRender = true;\n\n  /** @type {number} Most recently seen length of items. */\n  this.itemsLength = 0;\n\n  /**\n   * @type {!Function} Unwatch callback for item size (when md-items-size is\n   *     not specified), or angular.noop otherwise.\n   */\n  this.unwatchItemSize_ = angular.noop;\n\n  /**\n   * Presently rendered blocks by repeat index.\n   * @type {Object<number, !VirtualRepeatController.Block}\n   */\n  this.blocks = {};\n  /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */\n  this.pooledBlocks = [];\n}\nVirtualRepeatController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$browser\", \"$document\", \"$$rAF\"];\n\n\n/**\n * An object representing a repeated item.\n * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}\n */\nVirtualRepeatController.Block;\n\n\n/**\n * Called at startup by the md-virtual-repeat postLink function.\n * @param {!VirtualRepeatContainerController} container The container's controller.\n * @param {!Function} transclude The repeated element's bound transclude function.\n * @param {string} repeatName The left hand side of the repeat expression, indicating\n *     the name for each item in the array.\n * @param {!Function} repeatListExpression A compiled expression based on the right hand side\n *     of the repeat expression. Points to the array to repeat over.\n * @param {string|undefined} extraName The optional extra repeatName.\n */\nVirtualRepeatController.prototype.link_ =\n    function(container, transclude, repeatName, repeatListExpression, extraName) {\n  this.container = container;\n  this.transclude = transclude;\n  this.repeatName = repeatName;\n  this.rawRepeatListExpression = repeatListExpression;\n  this.extraName = extraName;\n  this.sized = false;\n\n  this.repeatListExpression = angular.bind(this, this.repeatListExpression_);\n\n  this.container.register(this);\n};\n\n\n/** @private Attempts to set itemSize by measuring a repeated element in the dom */\nVirtualRepeatController.prototype.readItemSize_ = function() {\n  if (this.itemSize) {\n    // itemSize was successfully read in a different asynchronous call.\n    return;\n  }\n\n  this.items = this.repeatListExpression(this.$scope);\n  this.parentNode = this.$element[0].parentNode;\n  var block = this.getBlock_(0);\n  if (!block.element[0].parentNode) {\n    this.parentNode.appendChild(block.element[0]);\n  }\n\n  this.itemSize = block.element[0][\n      this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'] || null;\n\n  this.blocks[0] = block;\n  this.poolBlock_(0);\n\n  if (this.itemSize) {\n    this.containerUpdated();\n  }\n};\n\n\n/**\n * Returns the user-specified repeat list, transforming it into an array-like\n * object in the case of infinite scroll/dynamic load mode.\n * @param {!angular.Scope} The scope.\n * @return {!Array|!Object} An array or array-like object for iteration.\n */\nVirtualRepeatController.prototype.repeatListExpression_ = function(scope) {\n  var repeatList = this.rawRepeatListExpression(scope);\n\n  if (this.onDemand && repeatList) {\n    var virtualList = new VirtualRepeatModelArrayLike(repeatList);\n    virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);\n    return virtualList;\n  } else {\n    return repeatList;\n  }\n};\n\n\n/**\n * Called by the container. Informs us that the containers scroll or size has\n * changed.\n */\nVirtualRepeatController.prototype.containerUpdated = function() {\n  // If itemSize is unknown, attempt to measure it.\n  if (!this.itemSize) {\n    this.unwatchItemSize_ = this.$scope.$watchCollection(\n        this.repeatListExpression,\n        angular.bind(this, function(items) {\n          if (items && items.length) {\n            this.$$rAF(angular.bind(this, this.readItemSize_));\n          }\n        }));\n    if (!this.$scope.$root.$$phase) this.$scope.$digest();\n\n    return;\n  } else if (!this.sized) {\n    this.items = this.repeatListExpression(this.$scope);\n  }\n\n  if (!this.sized) {\n    this.unwatchItemSize_();\n    this.sized = true;\n    this.$scope.$watchCollection(this.repeatListExpression,\n        angular.bind(this, this.virtualRepeatUpdate_));\n  }\n\n  this.updateIndexes_();\n\n  if (this.newStartIndex !== this.startIndex ||\n      this.newEndIndex !== this.endIndex ||\n      this.container.getScrollOffset() > this.container.getScrollSize()) {\n    if (this.items instanceof VirtualRepeatModelArrayLike) {\n      this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);\n    }\n    this.virtualRepeatUpdate_(this.items, this.items);\n  }\n};\n\n\n/**\n * Called by the container. Returns the size of a single repeated item.\n * @return {?number} Size of a repeated item.\n */\nVirtualRepeatController.prototype.getItemSize = function() {\n  return this.itemSize;\n};\n\n\n/**\n * Updates the order and visible offset of repeated blocks in response to scrolling\n * or items updates.\n * @private\n */\nVirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {\n  var itemsLength = items && items.length || 0;\n  var lengthChanged = false;\n\n  // If the number of items shrank, scroll up to the top.\n  if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {\n    this.items = items;\n    this.container.resetScroll();\n    return;\n  }\n\n  if (itemsLength !== this.itemsLength) {\n    lengthChanged = true;\n    this.itemsLength = itemsLength;\n  }\n\n  this.items = items;\n  if (items !== oldItems || lengthChanged) {\n    this.updateIndexes_();\n  }\n\n  this.parentNode = this.$element[0].parentNode;\n\n  if (lengthChanged) {\n    this.container.setScrollSize(itemsLength * this.itemSize);\n  }\n\n  if (this.isFirstRender) {\n    this.isFirstRender = false;\n    var startIndex = this.$attrs.mdStartIndex ?\n      this.$scope.$eval(this.$attrs.mdStartIndex) :\n      this.container.topIndex;\n    this.container.scrollToIndex(startIndex);\n  }\n\n  // Detach and pool any blocks that are no longer in the viewport.\n  Object.keys(this.blocks).forEach(function(blockIndex) {\n    var index = parseInt(blockIndex, 10);\n    if (index < this.newStartIndex || index >= this.newEndIndex) {\n      this.poolBlock_(index);\n    }\n  }, this);\n\n  // Add needed blocks.\n  // For performance reasons, temporarily block browser url checks as we digest\n  // the restored block scopes ($$checkUrlChange reads window.location to\n  // check for changes and trigger route change, etc, which we don't need when\n  // trying to scroll at 60fps).\n  this.$browser.$$checkUrlChange = angular.noop;\n\n  var i, block,\n      newStartBlocks = [],\n      newEndBlocks = [];\n\n  // Collect blocks at the top.\n  for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {\n    block = this.getBlock_(i);\n    this.updateBlock_(block, i);\n    newStartBlocks.push(block);\n  }\n\n  // Update blocks that are already rendered.\n  for (; this.blocks[i] != null; i++) {\n    this.updateBlock_(this.blocks[i], i);\n  }\n  var maxIndex = i - 1;\n\n  // Collect blocks at the end.\n  for (; i < this.newEndIndex; i++) {\n    block = this.getBlock_(i);\n    this.updateBlock_(block, i);\n    newEndBlocks.push(block);\n  }\n\n  // Attach collected blocks to the document.\n  if (newStartBlocks.length) {\n    this.parentNode.insertBefore(\n        this.domFragmentFromBlocks_(newStartBlocks),\n        this.$element[0].nextSibling);\n  }\n  if (newEndBlocks.length) {\n    this.parentNode.insertBefore(\n        this.domFragmentFromBlocks_(newEndBlocks),\n        this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);\n  }\n\n  // Restore $$checkUrlChange.\n  this.$browser.$$checkUrlChange = this.browserCheckUrlChange;\n\n  this.startIndex = this.newStartIndex;\n  this.endIndex = this.newEndIndex;\n};\n\n\n/**\n * @param {number} index Where the block is to be in the repeated list.\n * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.\n * @private\n */\nVirtualRepeatController.prototype.getBlock_ = function(index) {\n  if (this.pooledBlocks.length) {\n    return this.pooledBlocks.pop();\n  }\n\n  var block;\n  this.transclude(angular.bind(this, function(clone, scope) {\n    block = {\n      element: clone,\n      new: true,\n      scope: scope\n    };\n\n    this.updateScope_(scope, index);\n    this.parentNode.appendChild(clone[0]);\n  }));\n\n  return block;\n};\n\n\n/**\n * Updates and if not in a digest cycle, digests the specified block's scope to the data\n * at the specified index.\n * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.\n * @param {number} index The index to set.\n * @private\n */\nVirtualRepeatController.prototype.updateBlock_ = function(block, index) {\n  this.blocks[index] = block;\n\n  if (!block.new &&\n      (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {\n    return;\n  }\n  block.new = false;\n\n  // Update and digest the block's scope.\n  this.updateScope_(block.scope, index);\n\n  // Perform digest before reattaching the block.\n  // Any resulting synchronous dom mutations should be much faster as a result.\n  // This might break some directives, but I'm going to try it for now.\n  if (!this.$scope.$root.$$phase) {\n    block.scope.$digest();\n  }\n};\n\n\n/**\n * Updates scope to the data at the specified index.\n * @param {!angular.Scope} scope The scope which should be updated.\n * @param {number} index The index to set.\n * @private\n */\nVirtualRepeatController.prototype.updateScope_ = function(scope, index) {\n  scope.$index = index;\n  scope[this.repeatName] = this.items && this.items[index];\n  if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];\n};\n\n\n/**\n * Pools the block at the specified index (Pulls its element out of the dom and stores it).\n * @param {number} index The index at which the block to pool is stored.\n * @private\n */\nVirtualRepeatController.prototype.poolBlock_ = function(index) {\n  this.pooledBlocks.push(this.blocks[index]);\n  this.parentNode.removeChild(this.blocks[index].element[0]);\n  delete this.blocks[index];\n};\n\n\n/**\n * Produces a dom fragment containing the elements from the list of blocks.\n * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements\n *     should be added to the document fragment.\n * @return {DocumentFragment}\n * @private\n */\nVirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {\n  var fragment = this.$document[0].createDocumentFragment();\n  blocks.forEach(function(block) {\n    fragment.appendChild(block.element[0]);\n  });\n  return fragment;\n};\n\n\n/**\n * Updates start and end indexes based on length of repeated items and container size.\n * @private\n */\nVirtualRepeatController.prototype.updateIndexes_ = function() {\n  var itemsLength = this.items ? this.items.length : 0;\n  var containerLength = Math.ceil(this.container.getSize() / this.itemSize);\n\n  this.newStartIndex = Math.max(0, Math.min(\n      itemsLength - containerLength,\n      Math.floor(this.container.getScrollOffset() / this.itemSize)));\n  this.newVisibleEnd = this.newStartIndex + containerLength + NUM_EXTRA;\n  this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);\n  this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);\n};\n\n/**\n * This VirtualRepeatModelArrayLike class enforces the interface requirements\n * for infinite scrolling within a mdVirtualRepeatContainer. An object with this\n * interface must implement the following interface with two (2) methods:\n *\n * getItemAtIndex: function(index) -> item at that index or null if it is not yet\n *     loaded (It should start downloading the item in that case).\n *\n * getLength: function() -> number The data legnth to which the repeater container\n *     should be sized. Ideally, when the count is known, this method should return it.\n *     Otherwise, return a higher number than the currently loaded items to produce an\n *     infinite-scroll behavior.\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-virtual-repeat-container md-orient-horizontal>\n *    <div md-virtual-repeat=\"i in items\" md-on-demand>\n *      Hello {{i}}!\n *    </div>\n *  </md-virtual-repeat-container>\n * </hljs>\n *\n */\nfunction VirtualRepeatModelArrayLike(model) {\n  if (!angular.isFunction(model.getItemAtIndex) ||\n      !angular.isFunction(model.getLength)) {\n    throw Error('When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement ' +\n        'functions getItemAtIndex() and getLength() ');\n  }\n\n  this.model = model;\n}\n\n\nVirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {\n  for (var i = start; i < end; i++) {\n    if (!this.hasOwnProperty(i)) {\n      this[i] = this.model.getItemAtIndex(i);\n    }\n  }\n  this.length = this.model.getLength();\n};\n\n\nfunction abstractMethod() {\n  throw Error('Non-overridden abstract method called.');\n}\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc module\n * @name material.components.whiteframe\n */\nangular.module('material.components.whiteframe', []);\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.autocomplete')\n    .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);\n\nvar ITEM_HEIGHT  = 41,\n    MAX_HEIGHT   = 5.5 * ITEM_HEIGHT,\n    MENU_PADDING = 8;\n\nfunction MdAutocompleteCtrl ($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window,\n                             $animate, $rootElement, $attrs, $q) {\n  //-- private variables\n  var ctrl                 = this,\n      itemParts            = $scope.itemsExpr.split(/ in /i),\n      itemExpr             = itemParts[ 1 ],\n      elements             = null,\n      cache                = {},\n      noBlur               = false,\n      selectedItemWatchers = [],\n      hasFocus             = false,\n      lastCount            = 0;\n\n  //-- public variables with handlers\n  defineProperty('hidden', handleHiddenChange, true);\n\n  //-- public variables\n  ctrl.scope      = $scope;\n  ctrl.parent     = $scope.$parent;\n  ctrl.itemName   = itemParts[ 0 ];\n  ctrl.matches    = [];\n  ctrl.loading    = false;\n  ctrl.hidden     = true;\n  ctrl.index      = null;\n  ctrl.messages   = [];\n  ctrl.id         = $mdUtil.nextUid();\n  ctrl.isDisabled = null;\n  ctrl.isRequired = null;\n  ctrl.hasNotFound = false;\n\n  //-- public methods\n  ctrl.keydown                       = keydown;\n  ctrl.blur                          = blur;\n  ctrl.focus                         = focus;\n  ctrl.clear                         = clearValue;\n  ctrl.select                        = select;\n  ctrl.listEnter                     = onListEnter;\n  ctrl.listLeave                     = onListLeave;\n  ctrl.mouseUp                       = onMouseup;\n  ctrl.getCurrentDisplayValue        = getCurrentDisplayValue;\n  ctrl.registerSelectedItemWatcher   = registerSelectedItemWatcher;\n  ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;\n  ctrl.notFoundVisible               = notFoundVisible;\n  ctrl.loadingIsVisible              = loadingIsVisible;\n\n  return init();\n\n  //-- initialization methods\n\n  /**\n   * Initialize the controller, setup watchers, gather elements\n   */\n  function init () {\n    $mdUtil.initOptionalProperties($scope, $attrs, { searchText: null, selectedItem: null });\n    $mdTheming($element);\n    configureWatchers();\n    $mdUtil.nextTick(function () {\n      gatherElements();\n      moveDropdown();\n      focusElement();\n      $element.on('focus', focusElement);\n    });\n  }\n\n  /**\n   * Calculates the dropdown's position and applies the new styles to the menu element\n   * @returns {*}\n   */\n  function positionDropdown () {\n    if (!elements) return $mdUtil.nextTick(positionDropdown, false, $scope);\n    var hrect  = elements.wrap.getBoundingClientRect(),\n        vrect  = elements.snap.getBoundingClientRect(),\n        root   = elements.root.getBoundingClientRect(),\n        top    = vrect.bottom - root.top,\n        bot    = root.bottom - vrect.top,\n        left   = hrect.left - root.left,\n        width  = hrect.width,\n        styles = {\n          left:     left + 'px',\n          minWidth: width + 'px',\n          maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'\n        };\n    if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {\n      styles.top       = 'auto';\n      styles.bottom    = bot + 'px';\n      styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + 'px';\n    } else {\n      styles.top       = top + 'px';\n      styles.bottom    = 'auto';\n      styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom - hrect.bottom - MENU_PADDING) + 'px';\n    }\n\n    elements.$.scrollContainer.css(styles);\n    $mdUtil.nextTick(correctHorizontalAlignment, false);\n\n    /**\n     * Makes sure that the menu doesn't go off of the screen on either side.\n     */\n    function correctHorizontalAlignment () {\n      var dropdown = elements.scrollContainer.getBoundingClientRect(),\n          styles   = {};\n      if (dropdown.right > root.right - MENU_PADDING) {\n        styles.left = (hrect.right - dropdown.width) + 'px';\n      }\n      elements.$.scrollContainer.css(styles);\n    }\n  }\n\n  /**\n   * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.\n   */\n  function moveDropdown () {\n    if (!elements.$.root.length) return;\n    $mdTheming(elements.$.scrollContainer);\n    elements.$.scrollContainer.detach();\n    elements.$.root.append(elements.$.scrollContainer);\n    if ($animate.pin) $animate.pin(elements.$.scrollContainer, $rootElement);\n  }\n\n  /**\n   * Sends focus to the input element.\n   */\n  function focusElement () {\n    if ($scope.autofocus) elements.input.focus();\n  }\n\n  /**\n   * Sets up any watchers used by autocomplete\n   */\n  function configureWatchers () {\n    var wait = parseInt($scope.delay, 10) || 0;\n    $attrs.$observe('disabled', function (value) { ctrl.isDisabled = value; });\n    $attrs.$observe('required', function (value) { ctrl.isRequired = value !== null; });\n    $scope.$watch('searchText', wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);\n    $scope.$watch('selectedItem', selectedItemChange);\n    angular.element($window).on('resize', positionDropdown);\n    $scope.$on('$destroy', cleanup);\n  }\n\n  /**\n   * Removes any events or leftover elements created by this controller\n   */\n  function cleanup () {\n    angular.element($window).off('resize', positionDropdown);\n    if ( elements ){\n      var items = 'ul scroller scrollContainer input'.split(' ');\n      angular.forEach(items, function(key){\n        elements.$[key].remove();\n      });\n    }\n  }\n\n  /**\n   * Gathers all of the elements needed for this controller\n   */\n  function gatherElements () {\n    elements = {\n      main:  $element[0],\n      scrollContainer: $element[0].getElementsByClassName('md-virtual-repeat-container')[0],\n      scroller: $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0],\n      ul:    $element.find('ul')[0],\n      input: $element.find('input')[0],\n      wrap:  $element.find('md-autocomplete-wrap')[0],\n      root:  document.body\n    };\n    elements.li   = elements.ul.getElementsByTagName('li');\n    elements.snap = getSnapTarget();\n    elements.$    = getAngularElements(elements);\n  }\n\n  /**\n   * Finds the element that the menu will base its position on\n   * @returns {*}\n   */\n  function getSnapTarget () {\n    for (var element = $element; element.length; element = element.parent()) {\n      if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[ 0 ];\n    }\n    return elements.wrap;\n  }\n\n  /**\n   * Gathers angular-wrapped versions of each element\n   * @param elements\n   * @returns {{}}\n   */\n  function getAngularElements (elements) {\n    var obj = {};\n    for (var key in elements) {\n      if (elements.hasOwnProperty(key)) obj[ key ] = angular.element(elements[ key ]);\n    }\n    return obj;\n  }\n\n  //-- event/change handlers\n\n  /**\n   * Handles changes to the `hidden` property.\n   * @param hidden\n   * @param oldHidden\n   */\n  function handleHiddenChange (hidden, oldHidden) {\n    if (!hidden && oldHidden) {\n      positionDropdown();\n\n      if (elements) {\n        $mdUtil.nextTick(function () {\n          $mdUtil.disableScrollAround(elements.ul);\n        }, false, $scope);\n      }\n    } else if (hidden && !oldHidden) {\n      $mdUtil.nextTick(function () {\n        $mdUtil.enableScrolling();\n      }, false, $scope);\n    }\n  }\n\n  /**\n   * When the user mouses over the dropdown menu, ignore blur events.\n   */\n  function onListEnter () {\n    noBlur = true;\n  }\n\n  /**\n   * When the user's mouse leaves the menu, blur events may hide the menu again.\n   */\n  function onListLeave () {\n    noBlur = false;\n    ctrl.hidden = shouldHide();\n  }\n\n  /**\n   * When the mouse button is released, send focus back to the input field.\n   */\n  function onMouseup () {\n    elements.input.focus();\n  }\n\n  /**\n   * Handles changes to the selected item.\n   * @param selectedItem\n   * @param previousSelectedItem\n   */\n  function selectedItemChange (selectedItem, previousSelectedItem) {\n    if (selectedItem) {\n      getDisplayValue(selectedItem).then(function (val) {\n        $scope.searchText = val;\n        handleSelectedItemChange(selectedItem, previousSelectedItem);\n      });\n    }\n\n    if (selectedItem !== previousSelectedItem) announceItemChange();\n  }\n\n  /**\n   * Use the user-defined expression to announce changes each time a new item is selected\n   */\n  function announceItemChange () {\n    angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));\n  }\n\n  /**\n   * Use the user-defined expression to announce changes each time the search text is changed\n   */\n  function announceTextChange () {\n    angular.isFunction($scope.textChange) && $scope.textChange();\n  }\n\n  /**\n   * Calls any external watchers listening for the selected item.  Used in conjunction with\n   * `registerSelectedItemWatcher`.\n   * @param selectedItem\n   * @param previousSelectedItem\n   */\n  function handleSelectedItemChange (selectedItem, previousSelectedItem) {\n    selectedItemWatchers.forEach(function (watcher) { watcher(selectedItem, previousSelectedItem); });\n  }\n\n  /**\n   * Register a function to be called when the selected item changes.\n   * @param cb\n   */\n  function registerSelectedItemWatcher (cb) {\n    if (selectedItemWatchers.indexOf(cb) == -1) {\n      selectedItemWatchers.push(cb);\n    }\n  }\n\n  /**\n   * Unregister a function previously registered for selected item changes.\n   * @param cb\n   */\n  function unregisterSelectedItemWatcher (cb) {\n    var i = selectedItemWatchers.indexOf(cb);\n    if (i != -1) {\n      selectedItemWatchers.splice(i, 1);\n    }\n  }\n\n  /**\n   * Handles changes to the searchText property.\n   * @param searchText\n   * @param previousSearchText\n   */\n  function handleSearchText (searchText, previousSearchText) {\n    ctrl.index = getDefaultIndex();\n    // do nothing on init\n    if (searchText === previousSearchText) return;\n\n    getDisplayValue($scope.selectedItem).then(function (val) {\n      // clear selected item if search text no longer matches it\n      if (searchText !== val) {\n        $scope.selectedItem = null;\n\n        // trigger change event if available\n        if (searchText !== previousSearchText) announceTextChange();\n\n        // cancel results if search text is not long enough\n        if (!isMinLengthMet()) {\n          ctrl.matches = [];\n          setLoading(false);\n          updateMessages();\n        } else {\n          handleQuery();\n        }\n      }\n    });\n\n  }\n\n  /**\n   * Handles input blur event, determines if the dropdown should hide.\n   */\n  function blur () {\n    if (!noBlur) {\n      hasFocus = false;\n      ctrl.hidden = shouldHide();\n    }\n  }\n\n  function doBlur(forceBlur) {\n    if (forceBlur) {\n      noBlur = false;\n    }\n\n    elements.input.blur();\n  }\n\n  /**\n   * Handles input focus event, determines if the dropdown should show.\n   */\n  function focus () {\n    hasFocus = true;\n    //-- if searchText is null, let's force it to be a string\n    if (!angular.isString($scope.searchText)) $scope.searchText = '';\n    ctrl.hidden = shouldHide();\n    if (!ctrl.hidden) handleQuery();\n  }\n\n  /**\n   * Handles keyboard input.\n   * @param event\n   */\n  function keydown (event) {\n    switch (event.keyCode) {\n      case $mdConstant.KEY_CODE.DOWN_ARROW:\n        if (ctrl.loading) return;\n        event.stopPropagation();\n        event.preventDefault();\n        ctrl.index   = Math.min(ctrl.index + 1, ctrl.matches.length - 1);\n        updateScroll();\n        updateMessages();\n        break;\n      case $mdConstant.KEY_CODE.UP_ARROW:\n        if (ctrl.loading) return;\n        event.stopPropagation();\n        event.preventDefault();\n        ctrl.index   = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);\n        updateScroll();\n        updateMessages();\n        break;\n      case $mdConstant.KEY_CODE.TAB:\n      case $mdConstant.KEY_CODE.ENTER:\n        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;\n        event.stopPropagation();\n        event.preventDefault();\n        select(ctrl.index);\n        break;\n      case $mdConstant.KEY_CODE.ESCAPE:\n        event.stopPropagation();\n        event.preventDefault();\n        clearValue();\n\n        // Force the component to blur if they hit escape\n        doBlur(true);\n\n        break;\n      default:\n    }\n  }\n\n  //-- getters\n\n  /**\n   * Returns the minimum length needed to display the dropdown.\n   * @returns {*}\n   */\n  function getMinLength () {\n    return angular.isNumber($scope.minLength) ? $scope.minLength : 1;\n  }\n\n  /**\n   * Returns the display value for an item.\n   * @param item\n   * @returns {*}\n   */\n  function getDisplayValue (item) {\n    return $q.when(getItemText(item) || item);\n\n    /**\n     * Getter function to invoke user-defined expression (in the directive)\n     * to convert your object to a single string.\n     */\n    function getItemText (item) {\n      return (item && $scope.itemText) ? $scope.itemText(getItemAsNameVal(item)) : null;\n    }\n  }\n\n  /**\n   * Returns the locals object for compiling item templates.\n   * @param item\n   * @returns {{}}\n   */\n  function getItemAsNameVal (item) {\n    if (!item) return undefined;\n\n    var locals = {};\n    if (ctrl.itemName) locals[ ctrl.itemName ] = item;\n\n    return locals;\n  }\n\n  /**\n   * Returns the default index based on whether or not autoselect is enabled.\n   * @returns {number}\n   */\n  function getDefaultIndex () {\n    return $scope.autoselect ? 0 : -1;\n  }\n\n  /**\n   * Sets the loading parameter and updates the hidden state.\n   * @param value {boolean} Whether or not the component is currently loading.\n   */\n  function setLoading(value) {\n    if (ctrl.loading != value) {\n      ctrl.loading = value;\n    }\n\n    // Always refresh the hidden variable as something else might have changed\n    ctrl.hidden = shouldHide();\n  }\n\n  /**\n   * Determines if the menu should be hidden.\n   * @returns {boolean}\n   */\n  function shouldHide () {\n    if ((ctrl.loading && !hasMatches()) || hasSelection() || !hasFocus) {\n      return true;\n    }\n\n    return !shouldShow();\n  }\n\n  /**\n   * Determines if the menu should be shown.\n   * @returns {boolean}\n   */\n  function shouldShow() {\n    return (isMinLengthMet() && hasMatches()) || notFoundVisible();\n  }\n\n  /**\n   * Returns true if the search text has matches.\n   * @returns {boolean}\n   */\n  function hasMatches() {\n    return ctrl.matches.length ? true : false;\n  }\n\n  /**\n   * Returns true if the autocomplete has a valid selection.\n   * @returns {boolean}\n   */\n  function hasSelection() {\n    return ctrl.scope.selectedItem ? true : false;\n  }\n\n  /**\n   * Returns true if the loading indicator is, or should be, visible.\n   * @returns {boolean}\n   */\n  function loadingIsVisible() {\n    return ctrl.loading && !hasSelection();\n  }\n\n  /**\n   * Returns the display value of the current item.\n   * @returns {*}\n   */\n  function getCurrentDisplayValue () {\n    return getDisplayValue(ctrl.matches[ ctrl.index ]);\n  }\n\n  /**\n   * Determines if the minimum length is met by the search text.\n   * @returns {*}\n   */\n  function isMinLengthMet () {\n    return ($scope.searchText || '').length >= getMinLength();\n  }\n\n  //-- actions\n\n  /**\n   * Defines a public property with a handler and a default value.\n   * @param key\n   * @param handler\n   * @param value\n   */\n  function defineProperty (key, handler, value) {\n    Object.defineProperty(ctrl, key, {\n      get: function () { return value; },\n      set: function (newValue) {\n        var oldValue = value;\n        value        = newValue;\n        handler(newValue, oldValue);\n      }\n    });\n  }\n\n  /**\n   * Selects the item at the given index.\n   * @param index\n   */\n  function select (index) {\n    //-- force form to update state for validation\n    $mdUtil.nextTick(function () {\n      getDisplayValue(ctrl.matches[ index ]).then(function (val) {\n        var ngModel = elements.$.input.controller('ngModel');\n        ngModel.$setViewValue(val);\n        ngModel.$render();\n      }).finally(function () {\n        $scope.selectedItem = ctrl.matches[ index ];\n        setLoading(false);\n      });\n    }, false);\n  }\n\n  /**\n   * Clears the searchText value and selected item.\n   */\n  function clearValue () {\n    // Set the loading to true so we don't see flashes of content\n    setLoading(true);\n\n    // Reset our variables\n    ctrl.index = 0;\n    ctrl.matches = [];\n    $scope.searchText = '';\n\n    // Tell the select to fire and select nothing\n    select(-1);\n\n    // Per http://www.w3schools.com/jsref/event_oninput.asp\n    var eventObj = document.createEvent('CustomEvent');\n    eventObj.initCustomEvent('input', true, true, { value: $scope.searchText });\n    elements.input.dispatchEvent(eventObj);\n\n    elements.input.focus();\n  }\n\n  /**\n   * Fetches the results for the provided search text.\n   * @param searchText\n   */\n  function fetchResults (searchText) {\n    var items = $scope.$parent.$eval(itemExpr),\n        term  = searchText.toLowerCase();\n    if (angular.isArray(items)) {\n      handleResults(items);\n    } else if (items) {\n      setLoading(true);\n      $mdUtil.nextTick(function () {\n        if (items.success) items.success(handleResults);\n        if (items.then)    items.then(handleResults);\n        if (items.finally) items.finally(function () {\n          setLoading(false);\n        });\n      },true, $scope);\n    }\n    function handleResults (matches) {\n      cache[ term ] = matches;\n      if ((searchText || '') !== ($scope.searchText || '')) return; //-- just cache the results if old request\n      ctrl.matches = matches;\n      ctrl.hidden  = shouldHide();\n      if ($scope.selectOnMatch) selectItemOnMatch();\n      updateMessages();\n      positionDropdown();\n    }\n  }\n\n  /**\n   * Updates the ARIA messages\n   */\n  function updateMessages () {\n    getCurrentDisplayValue().then(function (msg) {\n      ctrl.messages = [ getCountMessage(), msg ];\n    });\n  }\n\n  /**\n   * Returns the ARIA message for how many results match the current query.\n   * @returns {*}\n   */\n  function getCountMessage () {\n    if (lastCount === ctrl.matches.length) return '';\n    lastCount = ctrl.matches.length;\n    switch (ctrl.matches.length) {\n      case 0:\n        return 'There are no matches available.';\n      case 1:\n        return 'There is 1 match available.';\n      default:\n        return 'There are ' + ctrl.matches.length + ' matches available.';\n    }\n  }\n\n  /**\n   * Makes sure that the focused element is within view.\n   */\n  function updateScroll () {\n    if (!elements.li[0]) return;\n    var height = elements.li[0].offsetHeight,\n        top = height * ctrl.index,\n        bot = top + height,\n        hgt = elements.scroller.clientHeight,\n        scrollTop = elements.scroller.scrollTop;\n    if (top < scrollTop) {\n      scrollTo(top);\n    } else if (bot > scrollTop + hgt) {\n      scrollTo(bot - hgt);\n    }\n  }\n\n  function scrollTo (offset) {\n    elements.$.scrollContainer.controller('mdVirtualRepeatContainer').scrollTo(offset);\n  }\n\n  function notFoundVisible () {\n    var textLength = (ctrl.scope.searchText || '').length;\n\n    return ctrl.hasNotFound && !hasMatches() && !ctrl.loading && textLength >= getMinLength() && hasFocus && !hasSelection();\n  }\n\n  /**\n   * Starts the query to gather the results for the current searchText.  Attempts to return cached\n   * results first, then forwards the process to `fetchResults` if necessary.\n   */\n  function handleQuery () {\n    var searchText = $scope.searchText,\n        term       = searchText.toLowerCase();\n    //-- if results are cached, pull in cached results\n    if (!$scope.noCache && cache[ term ]) {\n      ctrl.matches = cache[ term ];\n      updateMessages();\n    } else {\n      fetchResults(searchText);\n    }\n\n    ctrl.hidden = shouldHide();\n  }\n\n  /**\n   * If there is only one matching item and the search text matches its display value exactly,\n   * automatically select that item.  Note: This function is only called if the user uses the\n   * `md-select-on-match` flag.\n   */\n  function selectItemOnMatch () {\n    var searchText = $scope.searchText,\n        matches    = ctrl.matches,\n        item       = matches[ 0 ];\n    if (matches.length === 1) getDisplayValue(item).then(function (displayValue) {\n      if (searchText == displayValue) select(0);\n    });\n  }\n\n}\nMdAutocompleteCtrl.$inject = [\"$scope\", \"$element\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$window\", \"$animate\", \"$rootElement\", \"$attrs\", \"$q\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.autocomplete')\n    .directive('mdAutocomplete', MdAutocomplete);\n\n/**\n * @ngdoc directive\n * @name mdAutocomplete\n * @module material.components.autocomplete\n *\n * @description\n * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a\n *     custom query. This component allows you to provide real-time suggestions as the user types\n *     in the input area.\n *\n * To start, you will need to specify the required parameters and provide a template for your\n *     results. The content inside `md-autocomplete` will be treated as a template.\n *\n * In more complex cases, you may want to include other content such as a message to display when\n *     no matches were found.  You can do this by wrapping your template in `md-item-template` and\n *     adding a tag for `md-not-found`.  An example of this is shown below.\n *\n * ### Validation\n *\n * You can use `ng-messages` to include validation the same way that you would normally validate;\n *     however, if you want to replicate a standard input with a floating label, you will have to\n *     do the following:\n *\n * - Make sure that your template is wrapped in `md-item-template`\n * - Add your `ng-messages` code inside of `md-autocomplete`\n * - Add your validation properties to `md-autocomplete` (ie. `required`)\n * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)\n *\n * There is an example below of how this should look.\n *\n *\n * @param {expression} md-items An expression in the format of `item in items` to iterate over\n *     matches for your search.\n * @param {expression=} md-selected-item-change An expression to be run each time a new item is\n *     selected\n * @param {expression=} md-search-text-change An expression to be run each time the search text\n *     updates\n * @param {expression=} md-search-text A model to bind the search query text to\n * @param {object=} md-selected-item A model to bind the selected item to\n * @param {expression=} md-item-text An expression that will convert your object to a single string.\n * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete\n * @param {boolean=} ng-disabled Determines whether or not to disable the input field\n * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will\n *     make suggestions\n * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking\n *     for results\n * @param {boolean=} md-autofocus If true, will immediately focus the input element\n * @param {boolean=} md-autoselect If true, the first item will be selected by default\n * @param {string=} md-menu-class This will be applied to the dropdown menu for styling\n * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in\n *     `md-input-container`\n * @param {string=} md-input-name The name attribute given to the input element to be used with\n *     FormController\n * @param {string=} md-input-id An ID to be added to the input element\n * @param {number=} md-input-minlength The minimum length for the input's value for validation\n * @param {number=} md-input-maxlength The maximum length for the input's value for validation\n * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact\n *     the item if the search text is an exact match\n *\n * @usage\n * ### Basic Example\n * <hljs lang=\"html\">\n *   <md-autocomplete\n *       md-selected-item=\"selectedItem\"\n *       md-search-text=\"searchText\"\n *       md-items=\"item in getMatches(searchText)\"\n *       md-item-text=\"item.display\">\n *     <span md-highlight-text=\"searchText\">{{item.display}}</span>\n *   </md-autocomplete>\n * </hljs>\n *\n * ### Example with \"not found\" message\n * <hljs lang=\"html\">\n * <md-autocomplete\n *     md-selected-item=\"selectedItem\"\n *     md-search-text=\"searchText\"\n *     md-items=\"item in getMatches(searchText)\"\n *     md-item-text=\"item.display\">\n *   <md-item-template>\n *     <span md-highlight-text=\"searchText\">{{item.display}}</span>\n *   </md-item-template>\n *   <md-not-found>\n *     No matches found.\n *   </md-not-found>\n * </md-autocomplete>\n * </hljs>\n *\n * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the\n *     different parts that make up our component.\n *\n * ### Example with validation\n * <hljs lang=\"html\">\n * <form name=\"autocompleteForm\">\n *   <md-autocomplete\n *       required\n *       md-input-name=\"autocomplete\"\n *       md-selected-item=\"selectedItem\"\n *       md-search-text=\"searchText\"\n *       md-items=\"item in getMatches(searchText)\"\n *       md-item-text=\"item.display\">\n *     <md-item-template>\n *       <span md-highlight-text=\"searchText\">{{item.display}}</span>\n *     </md-item-template>\n *     <div ng-messages=\"autocompleteForm.autocomplete.$error\">\n *       <div ng-message=\"required\">This field is required</div>\n *     </div>\n *   </md-autocomplete>\n * </form>\n * </hljs>\n *\n * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the\n *     different parts that make up our component.\n */\n\nfunction MdAutocomplete () {\n  var hasNotFoundTemplate = false;\n\n  return {\n    controller:   'MdAutocompleteCtrl',\n    controllerAs: '$mdAutocompleteCtrl',\n    scope:        {\n      inputName:      '@mdInputName',\n      inputMinlength: '@mdInputMinlength',\n      inputMaxlength: '@mdInputMaxlength',\n      searchText:     '=?mdSearchText',\n      selectedItem:   '=?mdSelectedItem',\n      itemsExpr:      '@mdItems',\n      itemText:       '&mdItemText',\n      placeholder:    '@placeholder',\n      noCache:        '=?mdNoCache',\n      selectOnMatch:  '=?mdSelectOnMatch',\n      itemChange:     '&?mdSelectedItemChange',\n      textChange:     '&?mdSearchTextChange',\n      minLength:      '=?mdMinLength',\n      delay:          '=?mdDelay',\n      autofocus:      '=?mdAutofocus',\n      floatingLabel:  '@?mdFloatingLabel',\n      autoselect:     '=?mdAutoselect',\n      menuClass:      '@?mdMenuClass',\n      inputId:        '@?mdInputId'\n    },\n    link: function(scope, element, attrs, controller) {\n      controller.hasNotFound = hasNotFoundTemplate;\n    },\n    template:     function (element, attr) {\n      var noItemsTemplate = getNoItemsTemplate(),\n          itemTemplate    = getItemTemplate(),\n          leftover        = element.html(),\n          tabindex        = attr.tabindex;\n\n      if (noItemsTemplate) {\n        hasNotFoundTemplate = true;\n      }\n\n      if (attr.hasOwnProperty('tabindex')) {\n        element.attr('tabindex', '-1');\n      }\n\n      return '\\\n        <md-autocomplete-wrap\\\n            layout=\"row\"\\\n            ng-class=\"{ \\'md-whiteframe-z1\\': !floatingLabel, \\'md-menu-showing\\': !$mdAutocompleteCtrl.hidden }\"\\\n            role=\"listbox\">\\\n          ' + getInputElement() + '\\\n          <md-progress-linear\\\n              ng-if=\"$mdAutocompleteCtrl.loadingIsVisible()\"\\\n              md-mode=\"indeterminate\"></md-progress-linear>\\\n          <md-virtual-repeat-container\\\n              md-auto-shrink\\\n              md-auto-shrink-min=\"1\"\\\n              ng-hide=\"$mdAutocompleteCtrl.hidden\"\\\n              class=\"md-autocomplete-suggestions-container md-whiteframe-z1\"\\\n              role=\"presentation\">\\\n            <ul class=\"md-autocomplete-suggestions\"\\\n                ng-class=\"::menuClass\"\\\n                id=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n                ng-mouseenter=\"$mdAutocompleteCtrl.listEnter()\"\\\n                ng-mouseleave=\"$mdAutocompleteCtrl.listLeave()\"\\\n                ng-mouseup=\"$mdAutocompleteCtrl.mouseUp()\">\\\n              <li md-virtual-repeat=\"item in $mdAutocompleteCtrl.matches\"\\\n                  ng-class=\"{ selected: $index === $mdAutocompleteCtrl.index }\"\\\n                  ng-click=\"$mdAutocompleteCtrl.select($index)\"\\\n                  md-extra-name=\"$mdAutocompleteCtrl.itemName\">\\\n                  ' + itemTemplate + '\\\n                  </li>' + noItemsTemplate + '\\\n            </ul>\\\n          </md-virtual-repeat-container>\\\n        </md-autocomplete-wrap>\\\n        <aria-status\\\n            class=\"md-visually-hidden\"\\\n            role=\"status\"\\\n            aria-live=\"assertive\">\\\n          <p ng-repeat=\"message in $mdAutocompleteCtrl.messages track by $index\" ng-if=\"message\">{{message}}</p>\\\n        </aria-status>';\n\n      function getItemTemplate() {\n        var templateTag = element.find('md-item-template').detach(),\n            html = templateTag.length ? templateTag.html() : element.html();\n        if (!templateTag.length) element.empty();\n        return '<md-autocomplete-parent-scope md-autocomplete-replace>' + html + '</md-autocomplete-parent-scope>';\n      }\n\n      function getNoItemsTemplate() {\n        var templateTag = element.find('md-not-found').detach(),\n            template = templateTag.length ? templateTag.html() : '';\n        return template\n            ? '<li ng-if=\"$mdAutocompleteCtrl.notFoundVisible()\"\\\n                         md-autocomplete-parent-scope>' + template + '</li>'\n            : '';\n\n      }\n\n      function getInputElement () {\n        if (attr.mdFloatingLabel) {\n          return '\\\n            <md-input-container flex ng-if=\"floatingLabel\">\\\n              <label>{{floatingLabel}}</label>\\\n              <input type=\"search\"\\\n                  ' + (tabindex != null ? 'tabindex=\"' + tabindex + '\"' : '') + '\\\n                  id=\"{{ inputId || \\'fl-input-\\' + $mdAutocompleteCtrl.id }}\"\\\n                  name=\"{{inputName}}\"\\\n                  autocomplete=\"off\"\\\n                  ng-required=\"$mdAutocompleteCtrl.isRequired\"\\\n                  ng-minlength=\"inputMinlength\"\\\n                  ng-maxlength=\"inputMaxlength\"\\\n                  ng-disabled=\"$mdAutocompleteCtrl.isDisabled\"\\\n                  ng-model=\"$mdAutocompleteCtrl.scope.searchText\"\\\n                  ng-keydown=\"$mdAutocompleteCtrl.keydown($event)\"\\\n                  ng-blur=\"$mdAutocompleteCtrl.blur()\"\\\n                  ng-focus=\"$mdAutocompleteCtrl.focus()\"\\\n                  aria-owns=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n                  aria-label=\"{{floatingLabel}}\"\\\n                  aria-autocomplete=\"list\"\\\n                  aria-haspopup=\"true\"\\\n                  aria-activedescendant=\"\"\\\n                  aria-expanded=\"{{!$mdAutocompleteCtrl.hidden}}\"/>\\\n              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\\\n            </md-input-container>';\n        } else {\n          return '\\\n            <input flex type=\"search\"\\\n                ' + (tabindex != null ? 'tabindex=\"' + tabindex + '\"' : '') + '\\\n                id=\"{{ inputId || \\'input-\\' + $mdAutocompleteCtrl.id }}\"\\\n                name=\"{{inputName}}\"\\\n                ng-if=\"!floatingLabel\"\\\n                autocomplete=\"off\"\\\n                ng-required=\"$mdAutocompleteCtrl.isRequired\"\\\n                ng-disabled=\"$mdAutocompleteCtrl.isDisabled\"\\\n                ng-model=\"$mdAutocompleteCtrl.scope.searchText\"\\\n                ng-keydown=\"$mdAutocompleteCtrl.keydown($event)\"\\\n                ng-blur=\"$mdAutocompleteCtrl.blur()\"\\\n                ng-focus=\"$mdAutocompleteCtrl.focus()\"\\\n                placeholder=\"{{placeholder}}\"\\\n                aria-owns=\"ul-{{$mdAutocompleteCtrl.id}}\"\\\n                aria-label=\"{{placeholder}}\"\\\n                aria-autocomplete=\"list\"\\\n                aria-haspopup=\"true\"\\\n                aria-activedescendant=\"\"\\\n                aria-expanded=\"{{!$mdAutocompleteCtrl.hidden}}\"/>\\\n            <button\\\n                type=\"button\"\\\n                tabindex=\"-1\"\\\n                ng-if=\"$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled\"\\\n                ng-click=\"$mdAutocompleteCtrl.clear()\">\\\n              <md-icon md-svg-icon=\"md-close\"></md-icon>\\\n              <span class=\"md-visually-hidden\">Clear</span>\\\n            </button>\\\n                ';\n        }\n      }\n    }\n  };\n}\n\n})();\n(function(){\n\"use strict\";\n\nangular\n  .module('material.components.autocomplete')\n  .directive('mdAutocompleteParentScope', MdAutocompleteItemScopeDirective);\n\nfunction MdAutocompleteItemScopeDirective($compile, $mdUtil) {\n  return {\n    restrict: 'AE',\n    link: postLink,\n    terminal: true\n  };\n\n  function postLink(scope, element, attr) {\n    var ctrl = scope.$mdAutocompleteCtrl;\n    var newScope = ctrl.parent.$new();\n    var itemName = ctrl.itemName;\n\n    // Watch for changes to our scope's variables and copy them to the new scope\n    watchVariable('$index', '$index');\n    watchVariable('item', itemName);\n\n    // Recompile the contents with the new/modified scope\n    $compile(element.contents())(newScope);\n\n    // Replace it if required\n    if (attr.hasOwnProperty('mdAutocompleteReplace')) {\n      element.after(element.contents());\n      element.remove();\n    }\n\n    /**\n     * Creates a watcher for variables that are copied from the parent scope\n     * @param variable\n     * @param alias\n     */\n    function watchVariable(variable, alias) {\n      newScope[alias] = scope[variable];\n\n      scope.$watch(variable, function(value) {\n        $mdUtil.nextTick(function() {\n          newScope[alias] = value;\n        });\n      });\n    }\n  }\n}\nMdAutocompleteItemScopeDirective.$inject = [\"$compile\", \"$mdUtil\"];\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.autocomplete')\n    .controller('MdHighlightCtrl', MdHighlightCtrl);\n\nfunction MdHighlightCtrl ($scope, $element, $attrs) {\n  this.init = init;\n\n  function init (termExpr, unsafeTextExpr) {\n    var text = null,\n        regex = null,\n        flags = $attrs.mdHighlightFlags || '',\n        watcher = $scope.$watch(function($scope) {\n          return {\n            term: termExpr($scope),\n            unsafeText: unsafeTextExpr($scope)\n          };\n        }, function (state, prevState) {\n          if (text === null || state.unsafeText !== prevState.unsafeText) {\n            text = angular.element('<div>').text(state.unsafeText).html()\n          }\n          if (regex === null || state.term !== prevState.term) {\n            regex = getRegExp(state.term, flags);\n          }\n\n          $element.html(text.replace(regex, '<span class=\"highlight\">$&</span>'));\n        }, true);\n    $element.on('$destroy', function () { watcher(); });\n  }\n\n  function sanitize (term) {\n    return term && term.replace(/[\\\\\\^\\$\\*\\+\\?\\.\\(\\)\\|\\{}\\[\\]]/g, '\\\\$&');\n  }\n\n  function getRegExp (text, flags) {\n    var str = '';\n    if (flags.indexOf('^') >= 1) str += '^';\n    str += text;\n    if (flags.indexOf('$') >= 1) str += '$';\n    return new RegExp(sanitize(str), flags.replace(/[\\$\\^]/g, ''));\n  }\n}\nMdHighlightCtrl.$inject = [\"$scope\", \"$element\", \"$attrs\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.autocomplete')\n    .directive('mdHighlightText', MdHighlight);\n\n/**\n * @ngdoc directive\n * @name mdHighlightText\n * @module material.components.autocomplete\n *\n * @description\n * The `md-highlight-text` directive allows you to specify text that should be highlighted within\n *     an element.  Highlighted text will be wrapped in `<span class=\"highlight\"></span>` which can\n *     be styled through CSS.  Please note that child elements may not be used with this directive.\n *\n * @param {string} md-highlight-text A model to be searched for\n * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).\n * #### **Supported flags**:\n * - `g`: Find all matches within the provided text\n * - `i`: Ignore case when searching for matches\n * - `$`: Only match if the text ends with the search term\n * - `^`: Only match if the text begins with the search term\n *\n * @usage\n * <hljs lang=\"html\">\n * <input placeholder=\"Enter a search term...\" ng-model=\"searchTerm\" type=\"text\" />\n * <ul>\n *   <li ng-repeat=\"result in results\" md-highlight-text=\"searchTerm\">\n *     {{result.text}}\n *   </li>\n * </ul>\n * </hljs>\n */\n\nfunction MdHighlight ($interpolate, $parse) {\n  return {\n    terminal: true,\n    controller: 'MdHighlightCtrl',\n    compile: function mdHighlightCompile(tElement, tAttr) {\n      var termExpr = $parse(tAttr.mdHighlightText);\n      var unsafeTextExpr = $interpolate(tElement.html());\n\n      return function mdHighlightLink(scope, element, attr, ctrl) {\n        ctrl.init(termExpr, unsafeTextExpr);\n      };\n    }\n  };\n}\nMdHighlight.$inject = [\"$interpolate\", \"$parse\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.chips')\n    .directive('mdChip', MdChip);\n\n/**\n * @ngdoc directive\n * @name mdChip\n * @module material.components.chips\n *\n * @description\n * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual\n * chips.\n *\n *\n * @usage\n * <hljs lang=\"html\">\n *   <md-chip>{{$chip}}</md-chip>\n * </hljs>\n *\n */\n\n// This hint text is hidden within a chip but used by screen readers to\n// inform the user how they can interact with a chip.\nvar DELETE_HINT_TEMPLATE = '\\\n    <span ng-if=\"!$mdChipsCtrl.readonly\" class=\"md-visually-hidden\">\\\n      {{$mdChipsCtrl.deleteHint}}\\\n    </span>';\n\n/**\n * MDChip Directive Definition\n *\n * @param $mdTheming\n * @param $mdInkRipple\n * @ngInject\n */\nfunction MdChip($mdTheming, $mdUtil) {\n  var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);\n\n  return {\n    restrict: 'E',\n    require: '^?mdChips',\n    compile:  compile\n  };\n\n  function compile(element, attr) {\n    // Append the delete template\n    element.append($mdUtil.processTemplate(hintTemplate));\n\n    return function postLink(scope, element, attr, ctrl) {\n      element.addClass('md-chip');\n      $mdTheming(element);\n\n      if (ctrl) angular.element(element[0].querySelector('.md-chip-content'))\n          .on('blur', function () {\n            ctrl.selectedChip = -1;\n          });\n    };\n  }\n}\nMdChip.$inject = [\"$mdTheming\", \"$mdUtil\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.chips')\n    .directive('mdChipRemove', MdChipRemove);\n\n/**\n * @ngdoc directive\n * @name mdChipRemove\n * @module material.components.chips\n *\n * @description\n * `<md-chip-remove>`\n * Designates an element to be used as the delete button for a chip. This\n * element is passed as a child of the `md-chips` element.\n *\n * @usage\n * <hljs lang=\"html\">\n *   <md-chips><button md-chip-remove>DEL</button></md-chips>\n * </hljs>\n */\n\n\n/**\n * MdChipRemove Directive Definition.\n * \n * @param $compile\n * @param $timeout\n * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}\n * @constructor\n */\nfunction MdChipRemove ($timeout) {\n  return {\n    restrict: 'A',\n    require: '^mdChips',\n    scope: false,\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrl) {\n    element.on('click', function(event) {\n      scope.$apply(function() {\n        ctrl.removeChip(scope.$$replacedScope.$index);\n      });\n    });\n\n    // Child elements aren't available until after a $timeout tick as they are hidden by an\n    // `ng-if`. see http://goo.gl/zIWfuw\n    $timeout(function() {\n      element.attr({ tabindex: -1, ariaHidden: true });\n      element.find('button').attr('tabindex', '-1');\n    });\n  }\n}\nMdChipRemove.$inject = [\"$timeout\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.chips')\n    .directive('mdChipTransclude', MdChipTransclude);\n\nfunction MdChipTransclude ($compile) {\n  return {\n    restrict: 'EA',\n    terminal: true,\n    link: link,\n    scope: false\n  };\n  function link (scope, element, attr) {\n    var ctrl = scope.$parent.$mdChipsCtrl,\n        newScope = ctrl.parent.$new(false, ctrl.parent);\n    newScope.$$replacedScope = scope;\n    newScope.$chip = scope.$chip;\n    newScope.$index = scope.$index;\n    newScope.$mdChipsCtrl = ctrl;\n\n    var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);\n\n    element.html(newHtml);\n    $compile(element.contents())(newScope);\n  }\n}\nMdChipTransclude.$inject = [\"$compile\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.chips')\n    .controller('MdChipsCtrl', MdChipsCtrl);\n\n/**\n * Controller for the MdChips component. Responsible for adding to and\n * removing from the list of chips, marking chips as selected, and binding to\n * the models of various input components.\n *\n * @param $scope\n * @param $mdConstant\n * @param $log\n * @param $element\n * @constructor\n */\nfunction MdChipsCtrl ($scope, $mdConstant, $log, $element, $timeout) {\n  /** @type {$timeout} **/\n  this.$timeout = $timeout;\n\n  /** @type {Object} */\n  this.$mdConstant = $mdConstant;\n\n  /** @type {angular.$scope} */\n  this.$scope = $scope;\n\n  /** @type {angular.$scope} */\n  this.parent = $scope.$parent;\n\n  /** @type {$log} */\n  this.$log = $log;\n\n  /** @type {$element} */\n  this.$element = $element;\n\n  /** @type {angular.NgModelController} */\n  this.ngModelCtrl = null;\n\n  /** @type {angular.NgModelController} */\n  this.userInputNgModelCtrl = null;\n\n  /** @type {Element} */\n  this.userInputElement = null;\n\n  /** @type {Array.<Object>} */\n  this.items = [];\n\n  /** @type {number} */\n  this.selectedChip = -1;\n\n  /** @type {boolean} */\n  this.hasAutocomplete = false;\n\n\n  /**\n   * Hidden hint text for how to delete a chip. Used to give context to screen readers.\n   * @type {string}\n   */\n  this.deleteHint = 'Press delete to remove this chip.';\n\n  /**\n   * Hidden label for the delete button. Used to give context to screen readers.\n   * @type {string}\n   */\n  this.deleteButtonLabel = 'Remove';\n\n  /**\n   * Model used by the input element.\n   * @type {string}\n   */\n  this.chipBuffer = '';\n\n  /**\n   * Whether to use the onAppend expression to transform the chip buffer\n   * before appending it to the list.\n   * @type {boolean}\n   */\n  this.useOnAppend = false;\n\n  /**\n   * Whether to use the onSelect expression to notify the component's user\n   * after selecting a chip from the list.\n   * @type {boolean}\n   */\n  this.useOnSelect = false;\n}\nMdChipsCtrl.$inject = [\"$scope\", \"$mdConstant\", \"$log\", \"$element\", \"$timeout\"];\n\n/**\n * Handles the keydown event on the input element: <enter> appends the\n * buffer to the chip list, while backspace removes the last chip in the list\n * if the current buffer is empty.\n * @param event\n */\nMdChipsCtrl.prototype.inputKeydown = function(event) {\n  var chipBuffer = this.getChipBuffer();\n\n  switch (event.keyCode) {\n    case this.$mdConstant.KEY_CODE.ENTER:\n      if ((this.hasAutocomplete && this.requireMatch) || !chipBuffer) break;\n      event.preventDefault();\n      this.appendChip(chipBuffer);\n      this.resetChipBuffer();\n      break;\n    case this.$mdConstant.KEY_CODE.BACKSPACE:\n      if (chipBuffer) break;\n      event.preventDefault();\n      event.stopPropagation();\n      if (this.items.length) this.selectAndFocusChipSafe(this.items.length - 1);\n      break;\n  }\n};\n\n/**\n * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow\n * keys switch which chips is active\n * @param event\n */\nMdChipsCtrl.prototype.chipKeydown = function (event) {\n  if (this.getChipBuffer()) return;\n  switch (event.keyCode) {\n    case this.$mdConstant.KEY_CODE.BACKSPACE:\n    case this.$mdConstant.KEY_CODE.DELETE:\n      if (this.selectedChip < 0) return;\n      event.preventDefault();\n      this.removeAndSelectAdjacentChip(this.selectedChip);\n      break;\n    case this.$mdConstant.KEY_CODE.LEFT_ARROW:\n      event.preventDefault();\n      if (this.selectedChip < 0) this.selectedChip = this.items.length;\n      if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);\n      break;\n    case this.$mdConstant.KEY_CODE.RIGHT_ARROW:\n      event.preventDefault();\n      this.selectAndFocusChipSafe(this.selectedChip + 1);\n      break;\n    case this.$mdConstant.KEY_CODE.ESCAPE:\n    case this.$mdConstant.KEY_CODE.TAB:\n      if (this.selectedChip < 0) return;\n      event.preventDefault();\n      this.onFocus();\n      break;\n  }\n};\n\n/**\n * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`\n * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used\n * always.\n */\nMdChipsCtrl.prototype.getPlaceholder = function() {\n  // Allow `secondary-placeholder` to be blank.\n  var useSecondary = (this.items.length &&\n      (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));\n  return useSecondary ? this.placeholder : this.secondaryPlaceholder;\n};\n\n/**\n * Removes chip at {@code index} and selects the adjacent chip.\n * @param index\n */\nMdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {\n  var selIndex = this.getAdjacentChipIndex(index);\n  this.removeChip(index);\n  this.$timeout(angular.bind(this, function () {\n      this.selectAndFocusChipSafe(selIndex);\n  }));\n};\n\n/**\n * Sets the selected chip index to -1.\n */\nMdChipsCtrl.prototype.resetSelectedChip = function() {\n  this.selectedChip = -1;\n};\n\n/**\n * Gets the index of an adjacent chip to select after deletion. Adjacency is\n * determined as the next chip in the list, unless the target chip is the\n * last in the list, then it is the chip immediately preceding the target. If\n * there is only one item in the list, -1 is returned (select none).\n * The number returned is the index to select AFTER the target has been\n * removed.\n * If the current chip is not selected, then -1 is returned to select none.\n */\nMdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {\n  var len = this.items.length - 1;\n  return (len == 0) ? -1 :\n      (index == len) ? index -1 : index;\n};\n\n/**\n * Append the contents of the buffer to the chip list. This method will first\n * call out to the md-on-append method, if provided\n * @param newChip\n */\nMdChipsCtrl.prototype.appendChip = function(newChip) {\n  if (this.useOnAppend && this.onAppend) {\n    newChip = this.onAppend({'$chip': newChip});\n  }\n  if (this.items.indexOf(newChip) + 1) return;\n  this.items.push(newChip);\n};\n\n/**\n * Sets whether to use the md-on-append expression. This expression is\n * bound to scope and controller in {@code MdChipsDirective} as\n * {@code onAppend}. Due to the nature of directive scope bindings, the\n * controller cannot know on its own/from the scope whether an expression was\n * actually provided.\n */\nMdChipsCtrl.prototype.useOnAppendExpression = function() {\n  this.useOnAppend = true;\n};\n\n/**\n * Sets whether to use the md-on-remove expression. This expression is\n * bound to scope and controller in {@code MdChipsDirective} as\n * {@code onRemove}. Due to the nature of directive scope bindings, the\n * controller cannot know on its own/from the scope whether an expression was\n * actually provided.\n */\nMdChipsCtrl.prototype.useOnRemoveExpression = function() {\n  this.useOnRemove = true;\n};\n\n/*\n * Sets whether to use the md-on-select expression. This expression is\n * bound to scope and controller in {@code MdChipsDirective} as\n * {@code onSelect}. Due to the nature of directive scope bindings, the\n * controller cannot know on its own/from the scope whether an expression was\n * actually provided.\n */\nMdChipsCtrl.prototype.useOnSelectExpression = function() {\n  this.useOnSelect = true;\n};\n\n/**\n * Gets the input buffer. The input buffer can be the model bound to the\n * default input item {@code this.chipBuffer}, the {@code selectedItem}\n * model of an {@code md-autocomplete}, or, through some magic, the model\n * bound to any inpput or text area element found within a\n * {@code md-input-container} element.\n * @return {Object|string}\n */\nMdChipsCtrl.prototype.getChipBuffer = function() {\n  return !this.userInputElement ? this.chipBuffer :\n      this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :\n          this.userInputElement[0].value;\n};\n\n/**\n * Resets the input buffer for either the internal input or user provided input element.\n */\nMdChipsCtrl.prototype.resetChipBuffer = function() {\n  if (this.userInputElement) {\n    if (this.userInputNgModelCtrl) {\n      this.userInputNgModelCtrl.$setViewValue('');\n      this.userInputNgModelCtrl.$render();\n    } else {\n      this.userInputElement[0].value = '';\n    }\n  } else {\n    this.chipBuffer = '';\n  }\n};\n\n/**\n * Removes the chip at the given index.\n * @param index\n */\nMdChipsCtrl.prototype.removeChip = function(index) {\n  var removed = this.items.splice(index, 1);\n\n  if (removed && removed.length && this.useOnRemove && this.onRemove) {\n    this.onRemove({ '$chip': removed[0], '$index': index });\n  }\n};\n\nMdChipsCtrl.prototype.removeChipAndFocusInput = function (index) {\n  this.removeChip(index);\n  this.onFocus();\n};\n/**\n * Selects the chip at `index`,\n * @param index\n */\nMdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {\n  if (!this.items.length) {\n    this.selectChip(-1);\n    this.onFocus();\n    return;\n  }\n  if (index === this.items.length) return this.onFocus();\n  index = Math.max(index, 0);\n  index = Math.min(index, this.items.length - 1);\n  this.selectChip(index);\n  this.focusChip(index);\n};\n\n/**\n * Marks the chip at the given index as selected.\n * @param index\n */\nMdChipsCtrl.prototype.selectChip = function(index) {\n  if (index >= -1 && index <= this.items.length) {\n    this.selectedChip = index;\n\n    // Fire the onSelect if provided\n    if (this.useOnSelect && this.onSelect) {\n      this.onSelect({'$chip': this.items[this.selectedChip] });\n    }\n  } else {\n    this.$log.warn('Selected Chip index out of bounds; ignoring.');\n  }\n};\n\n/**\n * Selects the chip at `index` and gives it focus.\n * @param index\n */\nMdChipsCtrl.prototype.selectAndFocusChip = function(index) {\n  this.selectChip(index);\n  if (index != -1) {\n    this.focusChip(index);\n  }\n};\n\n/**\n * Call `focus()` on the chip at `index`\n */\nMdChipsCtrl.prototype.focusChip = function(index) {\n  this.$element[0].querySelector('md-chip[index=\"' + index + '\"] .md-chip-content').focus();\n};\n\n/**\n * Configures the required interactions with the ngModel Controller.\n * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.\n * @param ngModelCtrl\n */\nMdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {\n  this.ngModelCtrl = ngModelCtrl;\n\n  var self = this;\n  ngModelCtrl.$render = function() {\n    // model is updated. do something.\n    self.items = self.ngModelCtrl.$viewValue;\n  };\n};\n\nMdChipsCtrl.prototype.onFocus = function () {\n  var input = this.$element[0].querySelector('input');\n  input && input.focus();\n  this.resetSelectedChip();\n};\n\nMdChipsCtrl.prototype.onInputFocus = function () {\n  this.inputHasFocus = true;\n  this.resetSelectedChip();\n};\n\nMdChipsCtrl.prototype.onInputBlur = function () {\n  this.inputHasFocus = false;\n};\n\n/**\n * Configure event bindings on a user-provided input element.\n * @param inputElement\n */\nMdChipsCtrl.prototype.configureUserInput = function(inputElement) {\n  this.userInputElement = inputElement;\n\n  // Find the NgModelCtrl for the input element\n  var ngModelCtrl = inputElement.controller('ngModel');\n  // `.controller` will look in the parent as well.\n  if (ngModelCtrl != this.ngModelCtrl) {\n    this.userInputNgModelCtrl = ngModelCtrl;\n  }\n\n  var scope = this.$scope;\n  var ctrl = this;\n\n  // Run all of the events using evalAsync because a focus may fire a blur in the same digest loop\n  var scopeApplyFn = function(event, fn) {\n    scope.$evalAsync(angular.bind(ctrl, fn, event));\n  };\n\n  // Bind to keydown and focus events of input\n  inputElement\n      .attr({ tabindex: 0 })\n      .on('keydown', function(event) { scopeApplyFn(event, ctrl.inputKeydown) })\n      .on('focus', function(event) { scopeApplyFn(event, ctrl.onInputFocus) })\n      .on('blur', function(event) { scopeApplyFn(event, ctrl.onInputBlur) })\n};\n\nMdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {\n  if ( ctrl ){\n    this.hasAutocomplete = true;\n    ctrl.registerSelectedItemWatcher(angular.bind(this, function (item) {\n      if (item) {\n        this.appendChip(item);\n        this.resetChipBuffer();\n      }\n    }));\n\n    this.$element.find('input')\n        .on('focus',angular.bind(this, this.onInputFocus) )\n        .on('blur', angular.bind(this, this.onInputBlur) );\n  }\n};\n\nMdChipsCtrl.prototype.hasFocus = function () {\n  return this.inputHasFocus || this.selectedChip >= 0;\n};\n\n})();\n(function(){\n\"use strict\";\n\n  angular\n      .module('material.components.chips')\n      .directive('mdChips', MdChips);\n\n  /**\n   * @ngdoc directive\n   * @name mdChips\n   * @module material.components.chips\n   *\n   * @description\n   * `<md-chips>` is an input component for building lists of strings or objects. The list items are\n   * displayed as 'chips'. This component can make use of an `<input>` element or an\n   * `<md-autocomplete>` element.\n   *\n   * ### Custom templates\n   * A custom template may be provided to render the content of each chip. This is achieved by\n   * specifying an `<md-chip-template>` element containing the custom content as a child of\n   * `<md-chips>`.\n   *\n   * Note: Any attributes on\n   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The\n   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing\n   * the chip object and its index in the list of chips, respectively.\n   * To override the chip delete control, include an element (ideally a button) with the attribute\n   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element\n   * is also placed as a sibling to the chip content (on which there are also click listeners) to\n   * avoid a nested ng-click situation.\n   *\n   * <h3> Pending Features </h3>\n   * <ul style=\"padding-left:20px;\">\n   *\n   *   <ul>Style\n   *     <li>Colours for hover, press states (ripple?).</li>\n   *   </ul>\n   *\n   *   <ul>Validation\n   *     <li>allow a validation callback</li>\n   *     <li>hilighting style for invalid chips</li>\n   *   </ul>\n   *\n   *   <ul>Item mutation\n   *     <li>Support `\n   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double\n   *       click?\n   *     </li>\n   *   </ul>\n   *\n   *   <ul>Truncation and Disambiguation (?)\n   *     <li>Truncate chip text where possible, but do not truncate entries such that two are\n   *     indistinguishable.</li>\n   *   </ul>\n   *\n   *   <ul>Drag and Drop\n   *     <li>Drag and drop chips between related `<md-chips>` elements.\n   *     </li>\n   *   </ul>\n   * </ul>\n   *\n   *  <span style=\"font-size:.8em;text-align:center\">\n   *    Warning: This component is a WORK IN PROGRESS. If you use it now,\n   *    it will probably break on you in the future.\n   *  </span>\n   *\n   * @param {string=|object=} ng-model A model to bind the list of items to\n   * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,\n   *    displayed when there is at least on item in the list\n   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding\n   *    the input and delete buttons\n   * @param {expression} md-on-append An expression that when called expects you to return an object\n   *    representation of the chip input string.\n   * @param {expression=} md-on-remove An expression which will be called when a chip has been\n   *    removed.\n   * @param {expression=} md-on-select An expression which will be called when a chip is selected.\n   * @param {string=} delete-hint A string read by screen readers instructing users that pressing\n   *    the delete key will remove the chip.\n   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by\n   *    screen readers.\n   *\n   * @usage\n   * <hljs lang=\"html\">\n   *   <md-chips\n   *       ng-model=\"myItems\"\n   *       placeholder=\"Add an item\"\n   *       readonly=\"isReadOnly\">\n   *   </md-chips>\n   * </hljs>\n   *\n   */\n\n\n  var MD_CHIPS_TEMPLATE = '\\\n      <md-chips-wrap\\\n          ng-if=\"!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0\"\\\n          ng-keydown=\"$mdChipsCtrl.chipKeydown($event)\"\\\n          ng-class=\"{ \\'md-focused\\': $mdChipsCtrl.hasFocus(), \\'md-readonly\\': !$mdChipsCtrl.ngModelCtrl }\"\\\n          class=\"md-chips\">\\\n        <md-chip ng-repeat=\"$chip in $mdChipsCtrl.items\"\\\n            index=\"{{$index}}\"\\\n            ng-class=\"{\\'md-focused\\': $mdChipsCtrl.selectedChip == $index, \\'md-readonly\\': $mdChipsCtrl.readonly}\">\\\n          <div class=\"md-chip-content\"\\\n              tabindex=\"-1\"\\\n              aria-hidden=\"true\"\\\n              ng-focus=\"!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)\"\\\n              md-chip-transclude=\"$mdChipsCtrl.chipContentsTemplate\"></div>\\\n          <div ng-if=\"!$mdChipsCtrl.readonly\"\\\n               class=\"md-chip-remove-container\"\\\n               md-chip-transclude=\"$mdChipsCtrl.chipRemoveTemplate\"></div>\\\n        </md-chip>\\\n        <div ng-if=\"!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl\"\\\n            class=\"md-chip-input-container\"\\\n            md-chip-transclude=\"$mdChipsCtrl.chipInputTemplate\"></div>\\\n        </div>\\\n      </md-chips-wrap>';\n\n  var CHIP_INPUT_TEMPLATE = '\\\n        <input\\\n            tabindex=\"0\"\\\n            placeholder=\"{{$mdChipsCtrl.getPlaceholder()}}\"\\\n            aria-label=\"{{$mdChipsCtrl.getPlaceholder()}}\"\\\n            ng-model=\"$mdChipsCtrl.chipBuffer\"\\\n            ng-focus=\"$mdChipsCtrl.onInputFocus()\"\\\n            ng-blur=\"$mdChipsCtrl.onInputBlur()\"\\\n            ng-keydown=\"$mdChipsCtrl.inputKeydown($event)\">';\n\n  var CHIP_DEFAULT_TEMPLATE = '\\\n      <span>{{$chip}}</span>';\n\n  var CHIP_REMOVE_TEMPLATE = '\\\n      <button\\\n          class=\"md-chip-remove\"\\\n          ng-if=\"!$mdChipsCtrl.readonly\"\\\n          ng-click=\"$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)\"\\\n          type=\"button\"\\\n          aria-hidden=\"true\"\\\n          tabindex=\"-1\">\\\n        <md-icon md-svg-icon=\"md-close\"></md-icon>\\\n        <span class=\"md-visually-hidden\">\\\n          {{$mdChipsCtrl.deleteButtonLabel}}\\\n        </span>\\\n      </button>';\n\n  /**\n   * MDChips Directive Definition\n   */\n  function MdChips ($mdTheming, $mdUtil, $compile, $log, $timeout) {\n    // Run our templates through $mdUtil.processTemplate() to allow custom start/end symbols\n    var templates = getTemplates();\n\n    return {\n      template: function(element, attrs) {\n        // Clone the element into an attribute. By prepending the attribute\n        // name with '$', Angular won't write it into the DOM. The cloned\n        // element propagates to the link function via the attrs argument,\n        // where various contained-elements can be consumed.\n        attrs['$mdUserTemplate'] = element.clone();\n        return templates.chips;\n      },\n      require: ['mdChips'],\n      restrict: 'E',\n      controller: 'MdChipsCtrl',\n      controllerAs: '$mdChipsCtrl',\n      bindToController: true,\n      compile: compile,\n      scope: {\n        readonly: '=readonly',\n        placeholder: '@',\n        secondaryPlaceholder: '@',\n        onAppend: '&mdOnAppend',\n        onRemove: '&mdOnRemove',\n        onSelect: '&mdOnSelect',\n        deleteHint: '@',\n        deleteButtonLabel: '@',\n        requireMatch: '=?mdRequireMatch'\n      }\n    };\n\n    /**\n     * Builds the final template for `md-chips` and returns the postLink function.\n     *\n     * Building the template involves 3 key components:\n     * static chips\n     * chip template\n     * input control\n     *\n     * If no `ng-model` is provided, only the static chip work needs to be done.\n     *\n     * If no user-passed `md-chip-template` exists, the default template is used. This resulting\n     * template is appended to the chip content element.\n     *\n     * The remove button may be overridden by passing an element with an md-chip-remove attribute.\n     *\n     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for\n     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.\n     * If no user input is provided, a default one is appended to the input container node in the\n     * template.\n     *\n     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for\n     * transclusion in the `postLink` function.\n     *\n     *\n     * @param element\n     * @param attr\n     * @returns {Function}\n     */\n    function compile(element, attr) {\n      // Grab the user template from attr and reset the attribute to null.\n      var userTemplate = attr['$mdUserTemplate'];\n      attr['$mdUserTemplate'] = null;\n\n      // Set the chip remove, chip contents and chip input templates. The link function will put\n      // them on the scope for transclusion later.\n      var chipRemoveTemplate   = getTemplateByQuery('md-chips>*[md-chip-remove]') || templates.remove,\n          chipContentsTemplate = getTemplateByQuery('md-chips>md-chip-template') || templates.default,\n          chipInputTemplate    = getTemplateByQuery('md-chips>md-autocomplete')\n              || getTemplateByQuery('md-chips>input')\n              || templates.input,\n          staticChips = userTemplate.find('md-chip');\n\n      // Warn of malformed template. See #2545\n      if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {\n        $log.warn('invalid placement of md-chip-remove within md-chip-template.');\n      }\n\n      function getTemplateByQuery (query) {\n        if (!attr.ngModel) return;\n        var element = userTemplate[0].querySelector(query);\n        return element && element.outerHTML;\n      }\n\n      /**\n       * Configures controller and transcludes.\n       */\n      return function postLink(scope, element, attrs, controllers) {\n\n        $mdUtil.initOptionalProperties(scope, attr);\n\n        $mdTheming(element);\n        var mdChipsCtrl = controllers[0];\n        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;\n        mdChipsCtrl.chipRemoveTemplate   = chipRemoveTemplate;\n        mdChipsCtrl.chipInputTemplate    = chipInputTemplate;\n\n        element\n            .attr({ ariaHidden: true, tabindex: -1 })\n            .on('focus', function () { mdChipsCtrl.onFocus(); });\n\n        if (attr.ngModel) {\n          mdChipsCtrl.configureNgModel(element.controller('ngModel'));\n\n          // If an `md-on-append` attribute was set, tell the controller to use the expression\n          // when appending chips.\n          if (attrs.mdOnAppend) mdChipsCtrl.useOnAppendExpression();\n\n          // If an `md-on-remove` attribute was set, tell the controller to use the expression\n          // when removing chips.\n          if (attrs.mdOnRemove) mdChipsCtrl.useOnRemoveExpression();\n\n          // If an `md-on-select` attribute was set, tell the controller to use the expression\n          // when selecting chips.\n          if (attrs.mdOnSelect) mdChipsCtrl.useOnSelectExpression();\n\n          // The md-autocomplete and input elements won't be compiled until after this directive\n          // is complete (due to their nested nature). Wait a tick before looking for them to\n          // configure the controller.\n          if (chipInputTemplate != templates.input) {\n            // The autocomplete will not appear until the readonly attribute is not true (i.e.\n            // false or undefined), so we have to watch the readonly and then on the next tick\n            // after the chip transclusion has run, we can configure the autocomplete and user\n            // input.\n            scope.$watch('$mdChipsCtrl.readonly', function(readonly) {\n              if (!readonly) {\n                $mdUtil.nextTick(function(){\n                  if (chipInputTemplate.indexOf('<md-autocomplete') === 0)\n                    mdChipsCtrl\n                        .configureAutocomplete(element.find('md-autocomplete')\n                            .controller('mdAutocomplete'));\n                  mdChipsCtrl.configureUserInput(element.find('input'));\n                });\n              }\n            });\n          }\n        }\n\n        // Compile with the parent's scope and prepend any static chips to the wrapper.\n        if (staticChips.length > 0) {\n          var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);\n          $timeout(function() { element.find('md-chips-wrap').prepend(compiledStaticChips); });\n        }\n      };\n    }\n\n    function getTemplates() {\n      return {\n        chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),\n        input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),\n        default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),\n        remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)\n      };\n    }\n  }\n  MdChips.$inject = [\"$mdTheming\", \"$mdUtil\", \"$compile\", \"$log\", \"$timeout\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.chips')\n    .controller('MdContactChipsCtrl', MdContactChipsCtrl);\n\n\n\n/**\n * Controller for the MdContactChips component\n * @constructor\n */\nfunction MdContactChipsCtrl () {\n  /** @type {Object} */\n  this.selectedItem = null;\n\n  /** @type {string} */\n  this.searchText = '';\n}\n\n\nMdContactChipsCtrl.prototype.queryContact = function(searchText) {\n  var results = this.contactQuery({'$query': searchText});\n  return this.filterSelected ?\n      results.filter(angular.bind(this, this.filterSelectedContacts)) : results;\n};\n\n\nMdContactChipsCtrl.prototype.itemName = function(item) {\n  return item[this.contactName];\n};\n\n\nMdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {\n  return this.contacts.indexOf(contact) == -1;\n};\n\n})();\n(function(){\n\"use strict\";\n\nangular\n  .module('material.components.chips')\n  .directive('mdContactChips', MdContactChips);\n\n/**\n * @ngdoc directive\n * @name mdContactChips\n * @module material.components.chips\n *\n * @description\n * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an\n * `md-autocomplete` element. The component allows the caller to supply a query expression which\n * returns  a list of possible contacts. The user can select one of these and add it to the list of\n * chips.\n *\n * You may also use the `md-highlight-text` directive along with it's parameters to control the\n * appearance of the matched text inside of the contacts' autocomplete popup.\n *\n * @param {string=|object=} ng-model A model to bind the list of items to\n * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,\n *    displayed when there is at least on item in the list\n * @param {expression} md-contacts An expression expected to return contacts matching the search\n *    test, `$query`.\n * @param {string} md-contact-name The field name of the contact object representing the\n *    contact's name.\n * @param {string} md-contact-email The field name of the contact object representing the\n *    contact's email address.\n * @param {string} md-contact-image The field name of the contact object representing the\n *    contact's image.\n *\n *\n * // The following attribute has been removed but may come back.\n * @param {expression=} filter-selected Whether to filter selected contacts from the list of\n *    suggestions shown in the autocomplete.\n *\n *\n *\n * @usage\n * <hljs lang=\"html\">\n *   <md-contact-chips\n *       ng-model=\"ctrl.contacts\"\n *       md-contacts=\"ctrl.querySearch($query)\"\n *       md-contact-name=\"name\"\n *       md-contact-image=\"image\"\n *       md-contact-email=\"email\"\n *       placeholder=\"To\">\n *   </md-contact-chips>\n * </hljs>\n *\n */\n\n\nvar MD_CONTACT_CHIPS_TEMPLATE = '\\\n      <md-chips class=\"md-contact-chips\"\\\n          ng-model=\"$mdContactChipsCtrl.contacts\"\\\n          md-require-match=\"$mdContactChipsCtrl.requireMatch\"\\\n          md-autocomplete-snap>\\\n          <md-autocomplete\\\n              md-menu-class=\"md-contact-chips-suggestions\"\\\n              md-selected-item=\"$mdContactChipsCtrl.selectedItem\"\\\n              md-search-text=\"$mdContactChipsCtrl.searchText\"\\\n              md-items=\"item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)\"\\\n              md-item-text=\"$mdContactChipsCtrl.itemName(item)\"\\\n              md-no-cache=\"true\"\\\n              md-autoselect\\\n              placeholder=\"{{$mdContactChipsCtrl.contacts.length == 0 ?\\\n                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}\">\\\n            <div class=\"md-contact-suggestion\">\\\n              <img \\\n                  ng-src=\"{{item[$mdContactChipsCtrl.contactImage]}}\"\\\n                  alt=\"{{item[$mdContactChipsCtrl.contactName]}}\"\\\n                  ng-if=\"item[$mdContactChipsCtrl.contactImage]\" />\\\n              <span class=\"md-contact-name\" md-highlight-text=\"$mdContactChipsCtrl.searchText\"\\\n                    md-highlight-flags=\"{{$mdContactChipsCtrl.highlightFlags}}\">\\\n                {{item[$mdContactChipsCtrl.contactName]}}\\\n              </span>\\\n              <span class=\"md-contact-email\" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\\\n            </div>\\\n          </md-autocomplete>\\\n          <md-chip-template>\\\n            <div class=\"md-contact-avatar\">\\\n              <img \\\n                  ng-src=\"{{$chip[$mdContactChipsCtrl.contactImage]}}\"\\\n                  alt=\"{{$chip[$mdContactChipsCtrl.contactName]}}\"\\\n                  ng-if=\"$chip[$mdContactChipsCtrl.contactImage]\" />\\\n            </div>\\\n            <div class=\"md-contact-name\">\\\n              {{$chip[$mdContactChipsCtrl.contactName]}}\\\n            </div>\\\n          </md-chip-template>\\\n      </md-chips>';\n\n\n/**\n * MDContactChips Directive Definition\n *\n * @param $mdTheming\n * @returns {*}\n * @ngInject\n */\nfunction MdContactChips($mdTheming, $mdUtil) {\n  return {\n    template: function(element, attrs) {\n      return MD_CONTACT_CHIPS_TEMPLATE;\n    },\n    restrict: 'E',\n    controller: 'MdContactChipsCtrl',\n    controllerAs: '$mdContactChipsCtrl',\n    bindToController: true,\n    compile: compile,\n    scope: {\n      contactQuery: '&mdContacts',\n      placeholder: '@',\n      secondaryPlaceholder: '@',\n      contactName: '@mdContactName',\n      contactImage: '@mdContactImage',\n      contactEmail: '@mdContactEmail',\n      contacts: '=ngModel',\n      requireMatch: '=?mdRequireMatch',\n      highlightFlags: '@?mdHighlightFlags'\n    }\n  };\n\n  function compile(element, attr) {\n    return function postLink(scope, element, attrs, controllers) {\n\n      $mdUtil.initOptionalProperties(scope, attr);\n      $mdTheming(element);\n\n      element.attr('tabindex', '-1');\n    };\n  }\n}\nMdContactChips.$inject = [\"$mdTheming\", \"$mdUtil\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n  .module('material.components.icon')\n  .directive('mdIcon', ['$mdIcon', '$mdTheming', '$mdAria', mdIconDirective]);\n\n/**\n * @ngdoc directive\n * @name mdIcon\n * @module material.components.icon\n *\n * @restrict E\n *\n * @description\n * The `md-icon` directive makes it easier to use vector-based icons in your app (as opposed to\n * raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.\n *\n * Icons should be consider view-only elements that should not be used directly as buttons; instead nest a `<md-icon>`\n * inside a `md-button` to add hover and click features.\n *\n * ### Icon fonts\n * Icon fonts are a technique in which you use a font where the glyphs in the font are\n * your icons instead of text. Benefits include a straightforward way to bundle everything into a\n * single HTTP request, simple scaling, easy color changing, and more.\n *\n * `md-icon` let's you consume an icon font by letting you reference specific icons in that font\n * by name rather than character code.\n *\n * ### SVG\n * For SVGs, the problem with using `<img>` or a CSS `background-image` is that you can't take\n * advantage of some SVG features, such as styling specific parts of the icon with CSS or SVG\n * animation.\n *\n * `md-icon` makes it easier to use SVG icons by *inlining* the SVG into an `<svg>` element in the\n * document. The most straightforward way of referencing an SVG icon is via URL, just like a\n * traditional `<img>`. `$mdIconProvider`, as a convenience, let's you _name_ an icon so you can\n * reference it by name instead of URL throughout your templates.\n *\n * Additionally, you may not want to make separate HTTP requests for every icon, so you can bundle\n * your SVG icons together and pre-load them with $mdIconProvider as an icon set. An icon set can\n * also be given a name, which acts as a namespace for individual icons, so you can reference them\n * like `\"social:cake\"`.\n *\n * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be\n * easily loaded and used.When use font-icons, developers must following three (3) simple steps:\n *\n * <ol>\n * <li>Load the font library. e.g.<br/>\n *    &lt;link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n *    rel=\"stylesheet\"&gt;\n * </li>\n * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>\n * <li> Use &lt;md-icon md-font-icon=\"classname\" /&gt; or <br/>\n *     use &lt;md-icon md-font-set=\"font library classname or alias\"&gt; textual_name &lt;/md-icon&gt; or <br/>\n *     use &lt;md-icon md-font-set=\"font library classname or alias\"&gt; numerical_character_reference &lt;/md-icon&gt;\n * </li>\n * </ol>\n *\n * Full details for these steps can be found:\n *\n * <ul>\n * <li>http://google.github.io/material-design-icons/</li>\n * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>\n * </ul>\n *\n * The Material Design icon style <code>.material-icons</code> and the icon font references are published in\n * Material Design Icons:\n *\n * <ul>\n * <li>http://www.google.com/design/icons/</li>\n * <li>https://www.google.com/design/icons/#ic_accessibility</li>\n * </ul>\n *\n * <h2 id=\"material_design_icons\">Material Design Icons</h2>\n * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and\n * determine its textual name and character reference code. Click on any icon to see the slide-up information\n * panel with details regarding a SVG download or information on the font-icon usage.\n *\n * <a href=\"https://www.google.com/design/icons/#ic_accessibility\" target=\"_blank\" style=\"border-bottom:none;\">\n * <img src=\"https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png\"\n *      aria-label=\"Material Design Icon-Selector\" style=\"max-width:75%;padding-left:10%\">\n * </a>\n *\n * <span class=\"image_caption\">\n *  Click on the image above to link to the\n *  <a href=\"https://www.google.com/design/icons/#ic_accessibility\" target=\"_blank\">Material Design Icon-Selector</a>.\n * </span>\n *\n * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used\n * to render the icon. Requires the fonts and the named CSS styles to be preloaded.\n * @param {string} md-font-set CSS style name associated with the font library; which will be assigned as\n * the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname;\n * internally use `$mdIconProvider.fontSet(<alias>)` to determine the style name.\n * @param {string} md-svg-src String URL (or expression) used to load, cache, and display an\n *     external SVG.\n * @param {string} md-svg-icon md-svg-icon String name used for lookup of the icon from the internal cache;\n *     interpolated strings or expressions may also be used. Specific set names can be used with\n *     the syntax `<set name>:<icon name>`.<br/><br/>\n * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.\n * @param {string=} aria-label Labels icon for accessibility. If an empty string is provided, icon\n * will be hidden from accessibility layer with `aria-hidden=\"true\"`. If there's no aria-label on the icon\n * nor a label on the parent element, a warning will be logged to the console.\n * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon\n * will be hidden from accessibility layer with `aria-hidden=\"true\"`. If there's no alt on the icon\n * nor a label on the parent element, a warning will be logged to the console.\n *\n * @usage\n * When using SVGs:\n * <hljs lang=\"html\">\n *\n *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->\n *  <md-icon md-svg-icon=\"social:android\"    aria-label=\"android \" ></md-icon>\n *\n *  <!-- Icon urls; may be preloaded in templateCache -->\n *  <md-icon md-svg-src=\"/android.svg\"       aria-label=\"android \" ></md-icon>\n *  <md-icon md-svg-src=\"{{ getAndroid() }}\" aria-label=\"android \" ></md-icon>\n *\n * </hljs>\n *\n * Use the <code>$mdIconProvider</code> to configure your application with\n * svg iconsets.\n *\n * <hljs lang=\"js\">\n *  angular.module('appSvgIconSets', ['ngMaterial'])\n *    .controller('DemoCtrl', function($scope) {})\n *    .config(function($mdIconProvider) {\n *      $mdIconProvider\n *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)\n *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);\n *     });\n * </hljs>\n *\n *\n * When using Font Icons with classnames:\n * <hljs lang=\"html\">\n *\n *  <md-icon md-font-icon=\"android\" aria-label=\"android\" ></md-icon>\n *  <md-icon class=\"icon_home\"      aria-label=\"Home\"    ></md-icon>\n *\n * </hljs>\n *\n * When using Material Font Icons with ligatures:\n * <hljs lang=\"html\">\n *  <!-- For Material Design Icons -->\n *  <!-- The class '.material-icons' is auto-added if a style has NOT been specified -->\n *  <md-icon> face </md-icon>\n *  <md-icon md-font-set=\"material-icons\"> face </md-icon>\n *  <md-icon> #xE87C; </md-icon>\n *  <!-- The class '.material-icons' must be manually added if other styles are also specified-->\n *  <md-icon class=\"material-icons md-light md-48\"> face </md-icon>\n * </hljs>\n *\n * When using other Font-Icon libraries:\n *\n * <hljs lang=\"js\">\n *  // Specify a font-icon style alias\n *  angular.config(function($mdIconProvider) {\n *    $mdIconProvider.fontSet('fa', 'fontawesome');\n *  });\n * </hljs>\n *\n * <hljs lang=\"html\">\n *  <md-icon md-font-set=\"fa\">email</md-icon>\n * </hljs>\n *\n */\nfunction mdIconDirective($mdIcon, $mdTheming, $mdAria ) {\n\n  return {\n    scope: {\n      fontSet : '@mdFontSet',\n      fontIcon: '@mdFontIcon',\n      svgIcon : '@mdSvgIcon',\n      svgSrc  : '@mdSvgSrc'\n    },\n    restrict: 'E',\n    link : postLink\n  };\n\n\n  /**\n   * Directive postLink\n   * Supports embedded SVGs, font-icons, & external SVGs\n   */\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n\n    prepareForFontIcon();\n\n    // If using a font-icon, then the textual name of the icon itself\n    // provides the aria-label.\n\n    var label = attr.alt || scope.fontIcon || scope.svgIcon || element.text();\n    var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');\n\n    if ( !attr['aria-label'] ) {\n\n      if (label != '' && !parentsHaveText() ) {\n\n        $mdAria.expect(element, 'aria-label', label);\n        $mdAria.expect(element, 'role', 'img');\n\n      } else if ( !element.text() ) {\n        // If not a font-icon with ligature, then\n        // hide from the accessibility layer.\n\n        $mdAria.expect(element, 'aria-hidden', 'true');\n      }\n    }\n\n    if (attrName) {\n      // Use either pre-configured SVG or URL source, respectively.\n      attr.$observe(attrName, function(attrVal) {\n\n        element.empty();\n        if (attrVal) {\n          $mdIcon(attrVal).then(function(svg) {\n            element.append(svg);\n          });\n        }\n\n      });\n    }\n\n    function parentsHaveText() {\n      var parent = element.parent();\n      if (parent.attr('aria-label') || parent.text()) {\n        return true;\n      }\n      else if(parent.parent().attr('aria-label') || parent.parent().text()) {\n        return true;\n      }\n      return false;\n    }\n\n    function prepareForFontIcon() {\n      if (!scope.svgIcon && !scope.svgSrc) {\n        if (scope.fontIcon) {\n          element.addClass('md-font ' + scope.fontIcon);\n        }\n        element.addClass($mdIcon.fontSet(scope.fontSet));\n      }\n    }\n  }\n}\n\n})();\n(function(){\n\"use strict\";\n\n  angular\n    .module('material.components.icon' )\n    .provider('$mdIcon', MdIconProvider);\n\n  /**\n    * @ngdoc service\n    * @name $mdIconProvider\n    * @module material.components.icon\n    *\n    * @description\n    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow\n    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`\n    * directives are compiled.\n    *\n    * If using font-icons, the developer is responsible for loading the fonts.\n    *\n    * If using SVGs, loading of the actual svg files are deferred to on-demand requests and are loaded\n    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,\n    * the `$mdIcon` service searches its registry for the associated source URL;\n    * that URL is used to on-demand load and parse the SVG dynamically.\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .defaultFontSet( 'fontawesome' )\n    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons\n    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs\n    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)\n    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set\n    *   });\n    * </hljs>\n    *\n    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime\n    * **startup** process (shown below):\n    *\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Register a default set of SVG icon definitions\n    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')\n    *\n    *   })\n    *   .run(function($http, $templateCache){\n    *\n    *     // Pre-fetch icons sources by URL and cache in the $templateCache...\n    *     // subsequent $http calls will look there first.\n    *\n    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];\n    *\n    *     angular.forEach(urls, function(url) {\n    *       $http.get(url, {cache: $templateCache});\n    *     });\n    *\n    *   });\n    *\n    * </hljs>\n    *\n    * NOTE: the loaded SVG data is subsequently cached internally for future requests.\n    *\n    */\n\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#icon\n    *\n    * @description\n    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.\n    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`\n    *\n    * @param {string} id Icon name/id used to register the icon\n    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n    * @param {number=} viewBoxSize Sets the width and height the icon's viewBox.\n    * It is ignored for icons with an existing viewBox. Default size is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)\n    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set\n    *   });\n    * </hljs>\n    *\n    */\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#iconSet\n    *\n    * @description\n    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition\n    * has an icon id. Individual icons can be subsequently retrieved from this cached set using\n    * `$mdIcon(<icon set name>:<icon name>)`\n    *\n    * @param {string} id Icon name/id used to register the iconset\n    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. \n    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.\n    * Default value is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set\n    *   });\n    * </hljs>\n    *\n    */\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#defaultIconSet\n    *\n    * @description\n    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,\n    * subsequent lookups of icons will failover to search this 'default' icon set.\n    * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`\n    *\n    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. \n    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.\n    * Default value is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set\n    *   });\n    * </hljs>\n    *\n    */\n  /**\n   * @ngdoc method\n   * @name $mdIconProvider#defaultFontSet\n   *\n   * @description\n   * When using Font-Icons, Angular Material assumes the the Material Design icons will be used and automatically\n   * configures the default font-set == 'material-icons'. Note that the font-set references the font-icon library\n   * class style that should be applied to the `<md-icon>`.\n   *\n   * Configuring the default means that the attributes\n   * `md-font-set=\"material-icons\"` or `class=\"material-icons\"` do not need to be explicitly declared on the\n   * `<md-icon>` markup. For example:\n   *\n   *  `<md-icon> face </md-icon>`\n   *  will render as\n   *  `<span class=\"material-icons\"> face </span>`, and\n   *\n   *  `<md-icon md-font-set=\"fa\"> face </md-icon>`\n   *  will render as\n   *  `<span class=\"fa\"> face </span>`\n   *\n   * @param {string} name of the font-library style that should be applied to the md-icon DOM element\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   *   app.config(function($mdIconProvider) {\n   *     $mdIconProvider.defaultFontSet( 'fontawesome' );\n   *   });\n   * </hljs>\n   *\n   */\n\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#defaultViewBoxSize\n    *\n    * @description\n    * While `<md-icon />` markup can also be style with sizing CSS, this method configures\n    * the default width **and** height used for all icons; unless overridden by specific CSS.\n    * The default sizing is (24px, 24px).\n    * @param {number=} viewBoxSize Sets the width and height of the viewBox for an icon or an icon set.\n    * All icons in a set should be the same size. The default value is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .defaultViewBoxSize(36)   // Register a default icon size (width == height)\n    *   });\n    * </hljs>\n    *\n    */\n\n var config = {\n   defaultViewBoxSize: 24,\n   defaultFontSet: 'material-icons',\n   fontSets : [ ]\n };\n\n function MdIconProvider() { }\n\n MdIconProvider.prototype = {\n   icon : function (id, url, viewBoxSize) {\n     if ( id.indexOf(':') == -1 ) id = '$default:' + id;\n\n     config[id] = new ConfigurationItem(url, viewBoxSize );\n     return this;\n   },\n\n   iconSet : function (id, url, viewBoxSize) {\n     config[id] = new ConfigurationItem(url, viewBoxSize );\n     return this;\n   },\n\n   defaultIconSet : function (url, viewBoxSize) {\n     var setName = '$default';\n\n     if ( !config[setName] ) {\n       config[setName] = new ConfigurationItem(url, viewBoxSize );\n     }\n\n     config[setName].viewBoxSize = viewBoxSize || config.defaultViewBoxSize;\n\n     return this;\n   },\n\n   defaultViewBoxSize : function (viewBoxSize) {\n     config.defaultViewBoxSize = viewBoxSize;\n     return this;\n   },\n   \n   /**\n    * Register an alias name associated with a font-icon library style ;\n    */\n   fontSet : function fontSet(alias, className) {\n    config.fontSets.push({\n      alias : alias,\n      fontSet : className || alias\n    });\n    return this;\n   },\n\n   /**\n    * Specify a default style name associated with a font-icon library\n    * fallback to Material Icons.\n    *\n    */\n   defaultFontSet : function defaultFontSet(className) {\n    config.defaultFontSet = !className ? '' : className;\n    return this;\n   },\n\n   defaultIconSize : function defaultIconSize(iconSize) {\n     config.defaultIconSize = iconSize;\n     return this;\n   },\n\n   preloadIcons: function ($templateCache) {\n     var iconProvider = this;\n     var svgRegistry = [\n       {\n         id : 'md-tabs-arrow',\n         url: 'md-tabs-arrow.svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g><polygon points=\"15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 \"/></g></svg>'\n       },\n       {\n         id : 'md-close',\n         url: 'md-close.svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g><path d=\"M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z\"/></g></svg>'\n       },\n       {\n         id:  'md-cancel',\n         url: 'md-cancel.svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g><path d=\"M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z\"/></g></svg>'\n       },\n       {\n         id:  'md-menu',\n         url: 'md-menu.svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><path d=\"M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z\" /></svg>'\n       },\n       {\n         id:  'md-toggle-arrow',\n         url: 'md-toggle-arrow-svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 48 48\"><path d=\"M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z\"/><path d=\"M0 0h48v48h-48z\" fill=\"none\"/></svg>'\n       },\n       {\n         id:  'md-calendar',\n         url: 'md-calendar.svg',\n         svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/></svg>'\n       }\n     ];\n\n     svgRegistry.forEach(function(asset){\n       iconProvider.icon(asset.id,  asset.url);\n       $templateCache.put(asset.url, asset.svg);\n     });\n\n   },\n\n   $get : ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {\n     this.preloadIcons($templateCache);\n     return MdIconService(config, $http, $q, $log, $templateCache);\n   }]\n };\n\n   /**\n    *  Configuration item stored in the Icon registry; used for lookups\n    *  to load if not already cached in the `loaded` cache\n    */\n   function ConfigurationItem(url, viewBoxSize) {\n     this.url = url;\n     this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;\n   }\n\n /**\n  * @ngdoc service\n  * @name $mdIcon\n  * @module material.components.icon\n  *\n  * @description\n  * The `$mdIcon` service is a function used to lookup SVG icons.\n  *\n  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element\n  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is\n  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.\n  *\n  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured\n  * using the `$mdIconProvider`.\n  *\n  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.\n  *\n  * @usage\n  * <hljs lang=\"js\">\n  * function SomeDirective($mdIcon) {\n  *\n  *   // See if the icon has already been loaded, if not\n  *   // then lookup the icon from the registry cache, load and cache\n  *   // it for future requests.\n  *   // NOTE: ID queries require configuration with $mdIconProvider\n  *\n  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });\n  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });\n  *\n  *   // Load and cache the external SVG using a URL\n  *\n  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {\n  *     element.append(iconEl);\n  *   });\n  * };\n  * </hljs>\n  *\n  * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate\n  * SVG DOM elements.\n  */\n\n  /* @ngInject */\n function MdIconService(config, $http, $q, $log, $templateCache) {\n   var iconCache = {};\n   var urlRegex = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/i;\n\n   Icon.prototype = { clone : cloneSVG, prepare: prepareAndStyle };\n   getIcon.fontSet = findRegisteredFontSet;\n\n   // Publish service...\n   return getIcon;\n\n   /**\n    * Actual $mdIcon service is essentially a lookup function\n    */\n   function getIcon(id) {\n     id = id || '';\n\n     // If already loaded and cached, use a clone of the cached icon.\n     // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.\n\n     if ( iconCache[id]         ) return $q.when( iconCache[id].clone() );\n     if ( urlRegex.test(id)     ) return loadByURL(id).then( cacheIcon(id) );\n     if ( id.indexOf(':') == -1 ) id = '$default:' + id;\n\n     var load = config[id] ? loadByID : loadFromIconSet;\n     return load(id)\n         .then( cacheIcon(id) );\n   }\n\n   /**\n    * Lookup registered fontSet style using its alias...\n    * If not found,\n    */\n   function findRegisteredFontSet(alias) {\n      var useDefault = angular.isUndefined(alias) || !(alias && alias.length);\n      if ( useDefault ) return config.defaultFontSet;\n\n      var result = alias;\n      angular.forEach(config.fontSets, function(it){\n        if ( it.alias == alias ) result = it.fontSet || result;\n      });\n\n      return result;\n   }\n\n   /**\n    * Prepare and cache the loaded icon for the specified `id`\n    */\n   function cacheIcon( id ) {\n\n     return function updateCache( icon ) {\n       iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);\n\n       return iconCache[id].clone();\n     };\n   }\n\n   /**\n    * Lookup the configuration in the registry, if !registered throw an error\n    * otherwise load the icon [on-demand] using the registered URL.\n    *\n    */\n   function loadByID(id) {\n    var iconConfig = config[id];\n     return loadByURL(iconConfig.url).then(function(icon) {\n       return new Icon(icon, iconConfig);\n     });\n   }\n\n   /**\n    *    Loads the file as XML and uses querySelector( <id> ) to find\n    *    the desired node...\n    */\n   function loadFromIconSet(id) {\n     var setName = id.substring(0, id.lastIndexOf(':')) || '$default';\n     var iconSetConfig = config[setName];\n\n     return !iconSetConfig ? announceIdNotFound(id) : loadByURL(iconSetConfig.url).then(extractFromSet);\n\n     function extractFromSet(set) {\n       var iconName = id.slice(id.lastIndexOf(':') + 1);\n       var icon = set.querySelector('#' + iconName);\n       return !icon ? announceIdNotFound(id) : new Icon(icon, iconSetConfig);\n     }\n\n     function announceIdNotFound(id) {\n       var msg = 'icon ' + id + ' not found';\n      $log.warn(msg);\n\n       return $q.reject(msg || id);\n     }\n   }\n\n   /**\n    * Load the icon by URL (may use the $templateCache).\n    * Extract the data for later conversion to Icon\n    */\n   function loadByURL(url) {\n     return $http\n       .get(url, { cache: $templateCache })\n       .then(function(response) {\n         return angular.element('<div>').append(response.data).find('svg')[0];\n       }).catch(announceNotFound);\n   }\n\n   /**\n    * Catch HTTP or generic errors not related to incorrect icon IDs.\n    */\n   function announceNotFound(err) {\n     var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);\n     $log.warn(msg);\n\n     return $q.reject(msg);\n   }\n\n   /**\n    * Check target signature to see if it is an Icon instance.\n    */\n   function isIcon(target) {\n     return angular.isDefined(target.element) && angular.isDefined(target.config);\n   }\n\n   /**\n    *  Define the Icon class\n    */\n   function Icon(el, config) {\n     if (el && el.tagName != 'svg') {\n       el = angular.element('<svg xmlns=\"http://www.w3.org/2000/svg\">').append(el)[0];\n     }\n\n     // Inject the namespace if not available...\n     if ( !el.getAttribute('xmlns') ) {\n       el.setAttribute('xmlns', \"http://www.w3.org/2000/svg\");\n     }\n\n     this.element = el;\n     this.config = config;\n     this.prepare();\n   }\n\n   /**\n    *  Prepare the DOM element that will be cached in the\n    *  loaded iconCache store.\n    */\n   function prepareAndStyle() {\n     var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;\n         angular.forEach({\n           'fit'   : '',\n           'height': '100%',\n           'width' : '100%',\n           'preserveAspectRatio': 'xMidYMid meet',\n           'viewBox' : this.element.getAttribute('viewBox') || ('0 0 ' + viewBoxSize + ' ' + viewBoxSize)\n         }, function(val, attr) {\n           this.element.setAttribute(attr, val);\n         }, this);\n\n         angular.forEach({\n           'pointer-events' : 'none',\n           'display' : 'block'\n         }, function(val, style) {\n           this.element.style[style] = val;\n         }, this);\n   }\n\n   /**\n    * Clone the Icon DOM element.\n    */\n   function cloneSVG(){\n     return this.element.cloneNode(true);\n   }\n\n }\n MdIconService.$inject = [\"config\", \"$http\", \"$q\", \"$log\", \"$templateCache\"];\n\n})();\n(function(){\n\"use strict\";\n\n\n\nangular\n    .module('material.components.menu')\n    .controller('mdMenuCtrl', MenuController);\n\n/**\n * @ngInject\n */\nfunction MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout) {\n\n  var menuContainer;\n  var self = this;\n  var triggerElement;\n\n  this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;\n\n  /**\n   * Called by our linking fn to provide access to the menu-content\n   * element removed during link\n   */\n  this.init = function init(setMenuContainer, opts) {\n    opts = opts || {};\n    menuContainer = setMenuContainer;\n    // Default element for ARIA attributes has the ngClick or ngMouseenter expression\n    triggerElement = $element[0].querySelector('[ng-click],[ng-mouseenter]');\n\n    this.isInMenuBar = opts.isInMenuBar;\n    this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll('.md-nested-menu'));\n    this.enableHoverListener();\n\n    menuContainer.on('$mdInterimElementRemove', function() {\n      self.isOpen = false;\n    });\n  };\n\n  this.enableHoverListener = function() {\n    $scope.$on('$mdMenuOpen', function(event, el) {\n      if (menuContainer[0].contains(el[0])) {\n        self.currentlyOpenMenu = el.controller('mdMenu');\n        self.isAlreadyOpening = false;\n        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));\n      }\n    });\n    $scope.$on('$mdMenuClose', function(event, el) {\n      if (menuContainer[0].contains(el[0])) {\n        self.currentlyOpenMenu = undefined;\n      }\n    });\n\n    var menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].querySelectorAll('md-menu-item')));\n\n    var openMenuTimeout;\n    menuItems.on('mouseenter', function(event) {\n      if (self.isAlreadyOpening) return;\n      var nestedMenu = (\n        event.target.querySelector('md-menu')\n          || $mdUtil.getClosest(event.target, 'MD-MENU')\n      );\n      openMenuTimeout = $timeout(function() {\n        if (nestedMenu) {\n          nestedMenu = angular.element(nestedMenu).controller('mdMenu');\n        }\n\n        if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {\n          var closeTo = self.nestLevel + 1;\n          self.currentlyOpenMenu.close(true, { closeTo: closeTo });\n        } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {\n          self.isAlreadyOpening = true;\n          nestedMenu.open();\n        }\n      }, nestedMenu ? 100 : 250);\n      var focusableTarget = event.currentTarget.querySelector('button:not([disabled])');\n      focusableTarget && focusableTarget.focus();\n    });\n    menuItems.on('mouseleave', function(event) {\n      if (openMenuTimeout) {\n        $timeout.cancel(openMenuTimeout);\n        openMenuTimeout = undefined;\n      }\n    });\n  };\n\n  /**\n   * Uses the $mdMenu interim element service to open the menu contents\n   */\n  this.open = function openMenu(ev) {\n    ev && ev.stopPropagation();\n    ev && ev.preventDefault();\n    if (self.isOpen) return;\n    self.isOpen = true;\n    triggerElement = triggerElement || (ev ? ev.target : $element[0]);\n    $scope.$emit('$mdMenuOpen', $element);\n    $mdMenu.show({\n      scope: $scope,\n      mdMenuCtrl: self,\n      nestLevel: self.nestLevel,\n      element: menuContainer,\n      target: triggerElement,\n      preserveElement: self.isInMenuBar || self.nestedMenus.length > 0,\n      parent: self.isInMenuBar ? $element : 'body'\n    });\n  };\n\n  // Expose a open function to the child scope for html to use\n  $scope.$mdOpenMenu = this.open;\n\n  $scope.$watch(function() { return self.isOpen; }, function(isOpen) {\n    if (isOpen) {\n      triggerElement.setAttribute('aria-expanded', 'true');\n      $element[0].classList.add('md-open');\n      angular.forEach(self.nestedMenus, function(el) {\n        el.classList.remove('md-open');\n      });\n    } else {\n      triggerElement && triggerElement.setAttribute('aria-expanded', 'false');\n      $element[0].classList.remove('md-open');\n    }\n    $scope.$mdMenuIsOpen = self.isOpen;\n  });\n\n  this.focusMenuContainer = function focusMenuContainer() {\n    var focusTarget = menuContainer[0].querySelector('[md-menu-focus-target]');\n    if (!focusTarget) focusTarget = menuContainer[0].querySelector('.md-button');\n    focusTarget.focus();\n  };\n\n  this.registerContainerProxy = function registerContainerProxy(handler) {\n    this.containerProxy = handler;\n  };\n\n  this.triggerContainerProxy = function triggerContainerProxy(ev) {\n    this.containerProxy && this.containerProxy(ev);\n  };\n\n  this.destroy = function() {\n    return $mdMenu.destroy();\n  };\n\n  // Use the $mdMenu interim element service to close the menu contents\n  this.close = function closeMenu(skipFocus, closeOpts) {\n    if ( !self.isOpen ) return;\n    self.isOpen = false;\n\n    var eventDetails = angular.extend({}, closeOpts, { skipFocus: skipFocus });\n    $scope.$emit('$mdMenuClose', $element, eventDetails);\n    $mdMenu.hide(null, closeOpts);\n\n    if (!skipFocus) {\n      var el = self.restoreFocusTo || $element.find('button')[0];\n      if (el instanceof angular.element) el = el[0];\n      if (el) el.focus();\n    }\n  };\n\n  /**\n   * Build a nice object out of our string attribute which specifies the\n   * target mode for left and top positioning\n   */\n  this.positionMode = function positionMode() {\n    var attachment = ($attrs.mdPositionMode || 'target').split(' ');\n\n    // If attachment is a single item, duplicate it for our second value.\n    // ie. 'target' -> 'target target'\n    if (attachment.length == 1) {\n      attachment.push(attachment[0]);\n    }\n\n    return {\n      left: attachment[0],\n      top: attachment[1]\n    };\n  }\n\n  /**\n   * Build a nice object out of our string attribute which specifies\n   * the offset of top and left in pixels.\n   */\n  this.offsets = function offsets() {\n    var position = ($attrs.mdOffset || '0 0').split(' ').map(parseFloat);\n    if (position.length == 2) {\n      return {\n        left: position[0],\n        top: position[1]\n      };\n    } else if (position.length == 1) {\n      return {\n        top: position[0],\n        left: position[0]\n      };\n    } else {\n      throw Error('Invalid offsets specified. Please follow format <x, y> or <n>');\n    }\n  }\n}\nMenuController.$inject = [\"$mdMenu\", \"$attrs\", \"$element\", \"$scope\", \"$mdUtil\", \"$timeout\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc directive\n * @name mdMenu\n * @module material.components.menu\n * @restrict E\n * @description\n *\n * Menus are elements that open when clicked. They are useful for displaying\n * additional options within the context of an action.\n *\n * Every `md-menu` must specify exactly two child elements. The first element is what is\n * left in the DOM and is used to open the menu. This element is called the trigger element.\n * The trigger element's scope has access to `$mdOpenMenu($event)`\n * which it may call to open the menu. By passing $event as argument, the\n * corresponding event is stopped from propagating up the DOM-tree.\n *\n * The second element is the `md-menu-content` element which represents the\n * contents of the menu when it is open. Typically this will contain `md-menu-item`s,\n * but you can do custom content as well.\n *\n * <hljs lang=\"html\">\n * <md-menu>\n *  <!-- Trigger element is a md-button with an icon -->\n *  <md-button ng-click=\"$mdOpenMenu($event)\" class=\"md-icon-button\" aria-label=\"Open sample menu\">\n *    <md-icon md-svg-icon=\"call:phone\"></md-icon>\n *  </md-button>\n *  <md-menu-content>\n *    <md-menu-item><md-button ng-click=\"doSomething()\">Do Something</md-button></md-menu-item>\n *  </md-menu-content>\n * </md-menu>\n * </hljs>\n\n * ## Sizing Menus\n *\n * The width of the menu when it is open may be specified by specifying a `width`\n * attribute on the `md-menu-content` element.\n * See the [Material Design Spec](http://www.google.com/design/spec/components/menus.html#menus-specs)\n * for more information.\n *\n *\n * ## Aligning Menus\n *\n * When a menu opens, it is important that the content aligns with the trigger element.\n * Failure to align menus can result in jarring experiences for users as content\n * suddenly shifts. To help with this, `md-menu` provides serveral APIs to help\n * with alignment.\n *\n * ### Target Mode\n *\n * By default, `md-menu` will attempt to align the `md-menu-content` by aligning\n * designated child elements in both the trigger and the menu content.\n *\n * To specify the alignment element in the `trigger` you can use the `md-menu-origin`\n * attribute on a child element. If no `md-menu-origin` is specified, the `md-menu`\n * will be used as the origin element.\n *\n * Similarly, the `md-menu-content` may specify a `md-menu-align-target` for a\n * `md-menu-item` to specify the node that it should try and align with.\n *\n * In this example code, we specify an icon to be our origin element, and an\n * icon in our menu content to be our alignment target. This ensures that both\n * icons are aligned when the menu opens.\n *\n * <hljs lang=\"html\">\n * <md-menu>\n *  <md-button ng-click=\"$mdOpenMenu($event)\" class=\"md-icon-button\" aria-label=\"Open some menu\">\n *    <md-icon md-menu-origin md-svg-icon=\"call:phone\"></md-icon>\n *  </md-button>\n *  <md-menu-content>\n *    <md-menu-item>\n *      <md-button ng-click=\"doSomething()\" aria-label=\"Do something\">\n *        <md-icon md-menu-align-target md-svg-icon=\"call:phone\"></md-icon>\n *        Do Something\n *      </md-button>\n *    </md-menu-item>\n *  </md-menu-content>\n * </md-menu>\n * </hljs>\n *\n * Sometimes we want to specify alignment on the right side of an element, for example\n * if we have a menu on the right side a toolbar, we want to right align our menu content.\n *\n * We can specify the origin by using the `md-position-mode` attribute on both\n * the `x` and `y` axis. Right now only the `x-axis` has more than one option.\n * You may specify the default mode of `target target` or\n * `target-right target` to specify a right-oriented alignment target. See the\n * position section of the demos for more examples.\n *\n * ### Menu Offsets\n *\n * It is sometimes unavoidable to need to have a deeper level of control for\n * the positioning of a menu to ensure perfect alignment. `md-menu` provides\n * the `md-offset` attribute to allow pixel level specificty of adjusting the\n * exact positioning.\n *\n * This offset is provided in the format of `x y` or `n` where `n` will be used\n * in both the `x` and `y` axis.\n *\n * For example, to move a menu by `2px` from the top, we can use:\n * <hljs lang=\"html\">\n * <md-menu md-offset=\"2 0\">\n *   <!-- menu-content -->\n * </md-menu>\n * </hljs>\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-menu>\n *  <md-button ng-click=\"$mdOpenMenu($event)\" class=\"md-icon-button\">\n *    <md-icon md-svg-icon=\"call:phone\"></md-icon>\n *  </md-button>\n *  <md-menu-content>\n *    <md-menu-item><md-button ng-click=\"doSomething()\">Do Something</md-button></md-menu-item>\n *  </md-menu-content>\n * </md-menu>\n * </hljs>\n *\n * @param {string} md-position-mode The position mode in the form of\n *           `x`, `y`. Default value is `target`,`target`. Right now the `x` axis\n *           also suppports `target-right`.\n * @param {string} md-offset An offset to apply to the dropdown after positioning\n *           `x`, `y`. Default value is `0`,`0`.\n *\n */\n\nangular\n    .module('material.components.menu')\n    .directive('mdMenu', MenuDirective);\n\n/**\n * @ngInject\n */\nfunction MenuDirective($mdUtil) {\n  var INVALID_PREFIX = 'Invalid HTML for md-menu: ';\n  return {\n    restrict: 'E',\n    require: ['mdMenu', '?^mdMenuBar'],\n    controller: 'mdMenuCtrl', // empty function to be built by link\n    scope: true,\n    compile: compile\n  };\n\n  function compile(templateElement) {\n    templateElement.addClass('md-menu');\n    var triggerElement = templateElement.children()[0];\n    if (!triggerElement.hasAttribute('ng-click')) {\n      triggerElement = triggerElement.querySelector('[ng-click],[ng-mouseenter]') || triggerElement;\n    }\n    if (triggerElement && (\n      triggerElement.nodeName == 'MD-BUTTON' ||\n      triggerElement.nodeName == 'BUTTON'\n    ) && !triggerElement.hasAttribute('type')) {\n      triggerElement.setAttribute('type', 'button');\n    }\n\n    if (templateElement.children().length != 2) {\n      throw Error(INVALID_PREFIX + 'Expected two children elements.');\n    }\n\n    // Default element for ARIA attributes has the ngClick or ngMouseenter expression\n    triggerElement && triggerElement.setAttribute('aria-haspopup', 'true');\n\n    var nestedMenus = templateElement[0].querySelectorAll('md-menu');\n    var nestingDepth = parseInt(templateElement[0].getAttribute('md-nest-level'), 10) || 0;\n    if (nestedMenus) {\n      angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {\n        if (!menuEl.hasAttribute('md-position-mode')) {\n          menuEl.setAttribute('md-position-mode', 'cascade');\n        }\n        menuEl.classList.add('md-nested-menu');\n        menuEl.setAttribute('md-nest-level', nestingDepth + 1);\n        menuEl.setAttribute('role', 'menu');\n      });\n    }\n    return link;\n  }\n\n  function link(scope, element, attrs, ctrls) {\n    var mdMenuCtrl = ctrls[0];\n    var isInMenuBar = ctrls[1] != undefined;\n    // Move everything into a md-menu-container and pass it to the controller\n    var menuContainer = angular.element(\n      '<div class=\"md-open-menu-container md-whiteframe-z2\"></div>'\n    );\n    var menuContents = element.children()[1];\n    menuContainer.append(menuContents);\n    if (isInMenuBar) {\n      element.append(menuContainer);\n      menuContainer[0].style.display = 'none';\n    }\n    mdMenuCtrl.init(menuContainer, { isInMenuBar: isInMenuBar });\n\n    scope.$on('$destroy', function() {\n      mdMenuCtrl\n        .destroy()\n        .finally(function(){\n          menuContainer.remove();\n        });\n    });\n\n  }\n}\nMenuDirective.$inject = [\"$mdUtil\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n  .module('material.components.menu')\n  .provider('$mdMenu', MenuProvider);\n\n/*\n * Interim element provider for the menu.\n * Handles behavior for a menu while it is open, including:\n *    - handling animating the menu opening/closing\n *    - handling key/mouse events on the menu element\n *    - handling enabling/disabling scroll while the menu is open\n *    - handling redrawing during resizes and orientation changes\n *\n */\n\nfunction MenuProvider($$interimElementProvider) {\n  var MENU_EDGE_MARGIN = 8;\n\n  menuDefaultOptions.$inject = [\"$mdUtil\", \"$mdTheming\", \"$mdConstant\", \"$document\", \"$window\", \"$q\", \"$$rAF\", \"$animateCss\", \"$animate\"];\n  return $$interimElementProvider('$mdMenu')\n    .setDefaults({\n      methods: ['target'],\n      options: menuDefaultOptions\n    });\n\n  /* @ngInject */\n  function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {\n    var animator = $mdUtil.dom.animator;\n\n    return {\n      parent: 'body',\n      onShow: onShow,\n      onRemove: onRemove,\n      hasBackdrop: true,\n      disableParentScroll: true,\n      skipCompile: true,\n      preserveScope: true,\n      skipHide: true,\n      themable: true\n    };\n\n    /**\n     * Show modal backdrop element...\n     * @returns {function(): void} A function that removes this backdrop\n     */\n    function showBackdrop(scope, element, options) {\n      if (options.nestLevel) return angular.noop;\n\n      // If we are not within a dialog...\n      if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {\n        // !! DO this before creating the backdrop; since disableScrollAround()\n        //    configures the scroll offset; which is used by mdBackDrop postLink()\n        options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);\n      } else {\n        options.disableParentScroll = false;\n      }\n\n      if (options.hasBackdrop) {\n        options.backdrop = $mdUtil.createBackdrop(scope, \"md-menu-backdrop md-click-catcher\");\n\n        $animate.enter(options.backdrop, options.parent);\n      }\n\n      /**\n       * Hide and destroys the backdrop created by showBackdrop()\n       */\n      return function hideBackdrop() {\n        if (options.backdrop) options.backdrop.remove();\n        if (options.disableParentScroll) options.restoreScroll();\n      };\n    }\n\n    /**\n     * Removing the menu element from the DOM and remove all associated evetn listeners\n     * and backdrop\n     */\n    function onRemove(scope, element, opts) {\n      opts.cleanupInteraction();\n      opts.cleanupResizing();\n      opts.hideBackdrop();\n\n      // For navigation $destroy events, do a quick, non-animated removal,\n      // but for normal closes (from clicks, etc) animate the removal\n\n      return (opts.$destroy === true) ? detachAndClean() : animateRemoval().then( detachAndClean );\n\n      /**\n       * For normal closes, animate the removal.\n       * For forced closes (like $destroy events), skip the animations\n       */\n      function animateRemoval() {\n        return $animateCss(element, {addClass: 'md-leave'}).start();\n      }\n\n      /**\n       * Detach the element\n       */\n      function detachAndClean() {\n        element.removeClass('md-active');\n        detachElement(element, opts);\n        opts.alreadyOpen = false;\n      }\n\n    }\n\n    /**\n     * Inserts and configures the staged Menu element into the DOM, positioning it,\n     * and wiring up various interaction events\n     */\n    function onShow(scope, element, opts) {\n      sanitizeAndConfigure(opts);\n\n      // Wire up theming on our menu element\n      $mdTheming.inherit(opts.menuContentEl, opts.target);\n\n      // Register various listeners to move menu on resize/orientation change\n      opts.cleanupResizing = startRepositioningOnResize();\n      opts.hideBackdrop = showBackdrop(scope, element, opts);\n\n      // Return the promise for when our menu is done animating in\n      return showMenu()\n        .then(function(response) {\n          opts.alreadyOpen = true;\n          opts.cleanupInteraction = activateInteraction();\n          return response;\n        });\n\n      /**\n       * Place the menu into the DOM and call positioning related functions\n       */\n      function showMenu() {\n        if (!opts.preserveElement) {\n          opts.parent.append(element);\n        } else {\n          element[0].style.display = '';\n        }\n\n        return $q(function(resolve) {\n          var position = calculateMenuPosition(element, opts);\n\n          element.removeClass('md-leave');\n\n          // Animate the menu scaling, and opacity [from its position origin (default == top-left)]\n          // to normal scale.\n          $animateCss(element, {\n            addClass: 'md-active',\n            from: animator.toCss(position),\n            to: animator.toCss({transform: ''})\n          })\n          .start()\n          .then(resolve);\n\n        });\n      }\n\n      /**\n       * Check for valid opts and set some sane defaults\n       */\n      function sanitizeAndConfigure() {\n        if (!opts.target) {\n          throw Error(\n            '$mdMenu.show() expected a target to animate from in options.target'\n          );\n        }\n        angular.extend(opts, {\n          alreadyOpen: false,\n          isRemoved: false,\n          target: angular.element(opts.target), //make sure it's not a naked dom node\n          parent: angular.element(opts.parent),\n          menuContentEl: angular.element(element[0].querySelector('md-menu-content'))\n        });\n      }\n\n      /**\n       * Configure various resize listeners for screen changes\n       */\n      function startRepositioningOnResize() {\n\n        var repositionMenu = (function(target, options) {\n          return $$rAF.throttle(function() {\n            if (opts.isRemoved) return;\n            var position = calculateMenuPosition(target, options);\n\n            target.css(animator.toCss(position));\n          });\n        })(element, opts);\n\n        $window.addEventListener('resize', repositionMenu);\n        $window.addEventListener('orientationchange', repositionMenu);\n\n        return function stopRepositioningOnResize() {\n\n          // Disable resizing handlers\n          $window.removeEventListener('resize', repositionMenu);\n          $window.removeEventListener('orientationchange', repositionMenu);\n\n        }\n      }\n\n      /**\n       * Activate interaction on the menu. Wire up keyboard listerns for\n       * clicks, keypresses, backdrop closing, etc.\n       */\n      function activateInteraction() {\n        element.addClass('md-clickable');\n\n        // close on backdrop click\n        if (opts.backdrop) opts.backdrop.on('click', onBackdropClick);\n\n        // Wire up keyboard listeners.\n        // - Close on escape,\n        // - focus next item on down arrow,\n        // - focus prev item on up\n        opts.menuContentEl.on('keydown', onMenuKeyDown);\n        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);\n\n        // kick off initial focus in the menu on the first element\n        var focusTarget = opts.menuContentEl[0].querySelector('[md-menu-focus-target]');\n        if ( !focusTarget ) {\n          var firstChild = opts.menuContentEl[0].firstElementChild;\n\n          focusTarget = firstChild && (firstChild.querySelector('.md-button:not([disabled])') || firstChild.firstElementChild);\n        }\n\n        focusTarget && focusTarget.focus();\n\n        return function cleanupInteraction() {\n          element.removeClass('md-clickable');\n          if (opts.backdrop) opts.backdrop.off('click', onBackdropClick);\n          opts.menuContentEl.off('keydown', onMenuKeyDown);\n          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);\n        };\n\n        // ************************************\n        // internal functions\n        // ************************************\n\n        function onMenuKeyDown(ev) {\n          var handled;\n          switch (ev.keyCode) {\n            case $mdConstant.KEY_CODE.ESCAPE:\n              opts.mdMenuCtrl.close(false, { closeAll: true });\n              handled = true;\n              break;\n            case $mdConstant.KEY_CODE.UP_ARROW:\n              if (!focusMenuItem(ev, opts.menuContentEl, opts, -1)) {\n                opts.mdMenuCtrl.triggerContainerProxy(ev);\n              }\n              handled = true;\n              break;\n            case $mdConstant.KEY_CODE.DOWN_ARROW:\n              if (!focusMenuItem(ev, opts.menuContentEl, opts, 1)) {\n                opts.mdMenuCtrl.triggerContainerProxy(ev);\n              }\n              handled = true;\n              break;\n            case $mdConstant.KEY_CODE.LEFT_ARROW:\n              if (opts.nestLevel) {\n                opts.mdMenuCtrl.close();\n              } else {\n                opts.mdMenuCtrl.triggerContainerProxy(ev);\n              }\n              handled = true;\n              break;\n            case $mdConstant.KEY_CODE.RIGHT_ARROW:\n              var parentMenu = $mdUtil.getClosest(ev.target, 'MD-MENU');\n              if (parentMenu && parentMenu != opts.parent[0]) {\n                ev.target.click();\n              } else {\n                opts.mdMenuCtrl.triggerContainerProxy(ev);\n              }\n              handled = true;\n              break;\n          }\n          if (handled) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n          }\n        }\n\n        function onBackdropClick(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          scope.$apply(function() {\n            opts.mdMenuCtrl.close(true, { closeAll: true });\n          });\n        }\n\n        // Close menu on menu item click, if said menu-item is not disabled\n        function captureClickListener(e) {\n          var target = e.target;\n          // Traverse up the event until we get to the menuContentEl to see if\n          // there is an ng-click and that the ng-click is not disabled\n          do {\n            if (target == opts.menuContentEl[0]) return;\n            if (hasAnyAttribute(target, ['ng-click', 'ng-href', 'ui-sref']) ||\n                target.nodeName == 'BUTTON' || target.nodeName == 'MD-BUTTON') {\n              var closestMenu = $mdUtil.getClosest(target, 'MD-MENU');\n              if (!target.hasAttribute('disabled') && (!closestMenu || closestMenu == opts.parent[0])) {\n                close();\n              }\n              break;\n            }\n          } while (target = target.parentNode)\n\n          function close() {\n            scope.$apply(function() {\n              opts.mdMenuCtrl.close(true, { closeAll: true });\n            });\n          }\n\n          function hasAnyAttribute(target, attrs) {\n            if (!target) return false;\n            for (var i = 0, attr; attr = attrs[i]; ++i) {\n              var altForms = [attr, 'data-' + attr, 'x-' + attr];\n              for (var j = 0, rawAttr; rawAttr = altForms[j]; ++j) {\n                if (target.hasAttribute(rawAttr)) {\n                  return true;\n                }\n              }\n            }\n            return false;\n          }\n        }\n\n        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);\n\n        return function cleanupInteraction() {\n          element.removeClass('md-clickable');\n          opts.menuContentEl.off('keydown');\n          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);\n        };\n      }\n    }\n\n    /**\n     * Takes a keypress event and focuses the next/previous menu\n     * item from the emitting element\n     * @param {event} e - The origin keypress event\n     * @param {angular.element} menuEl - The menu element\n     * @param {object} opts - The interim element options for the mdMenu\n     * @param {number} direction - The direction to move in (+1 = next, -1 = prev)\n     */\n    function focusMenuItem(e, menuEl, opts, direction) {\n      var currentItem = $mdUtil.getClosest(e.target, 'MD-MENU-ITEM');\n\n      var items = $mdUtil.nodesToArray(menuEl[0].children);\n      var currentIndex = items.indexOf(currentItem);\n\n      // Traverse through our elements in the specified direction (+/-1) and try to\n      // focus them until we find one that accepts focus\n      var didFocus;\n      for (var i = currentIndex + direction; i >= 0 && i < items.length; i = i + direction) {\n        var focusTarget = items[i].querySelector('.md-button');\n        didFocus = attemptFocus(focusTarget);\n        if (didFocus) {\n          break;\n        }\n      }\n      return didFocus;\n    }\n\n    /**\n     * Attempts to focus an element. Checks whether that element is the currently\n     * focused element after attempting.\n     * @param {HTMLElement} el - the element to attempt focus on\n     * @returns {bool} - whether the element was successfully focused\n     */\n    function attemptFocus(el) {\n      if (el && el.getAttribute('tabindex') != -1) {\n        el.focus();\n        return ($document[0].activeElement == el);\n      }\n    }\n\n    /**\n     * Use browser to remove this element without triggering a $destroy event\n     */\n    function detachElement(element, opts) {\n      if (!opts.preserveElement) {\n        if (toNode(element).parentNode === toNode(opts.parent)) {\n          toNode(opts.parent).removeChild(toNode(element));\n        }\n      } else {\n        toNode(element).style.display = 'none';\n      }\n    }\n\n    /**\n     * Computes menu position and sets the style on the menu container\n     * @param {HTMLElement} el - the menu container element\n     * @param {object} opts - the interim element options object\n     */\n    function calculateMenuPosition(el, opts) {\n\n      var containerNode = el[0],\n        openMenuNode = el[0].firstElementChild,\n        openMenuNodeRect = openMenuNode.getBoundingClientRect(),\n        boundryNode = $document[0].body,\n        boundryNodeRect = boundryNode.getBoundingClientRect();\n\n      var menuStyle = $window.getComputedStyle(openMenuNode);\n\n      var originNode = opts.target[0].querySelector('[md-menu-origin]') || opts.target[0],\n        originNodeRect = originNode.getBoundingClientRect();\n\n      var bounds = {\n        left: boundryNodeRect.left + MENU_EDGE_MARGIN,\n        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,\n        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,\n        right: boundryNodeRect.right - MENU_EDGE_MARGIN\n      };\n\n      var alignTarget, alignTargetRect = { top:0, left : 0, right:0, bottom:0 }, existingOffsets  = { top:0, left : 0, right:0, bottom:0  };\n      var positionMode = opts.mdMenuCtrl.positionMode();\n\n      if (positionMode.top == 'target' || positionMode.left == 'target' || positionMode.left == 'target-right') {\n        alignTarget = firstVisibleChild();\n        if ( alignTarget ) {\n          // TODO: Allow centering on an arbitrary node, for now center on first menu-item's child\n          alignTarget = alignTarget.firstElementChild || alignTarget;\n          alignTarget = alignTarget.querySelector('[md-menu-align-target]') || alignTarget;\n          alignTargetRect = alignTarget.getBoundingClientRect();\n\n          existingOffsets = {\n            top: parseFloat(containerNode.style.top || 0),\n            left: parseFloat(containerNode.style.left || 0)\n          };\n        }\n      }\n\n      var position = {};\n      var transformOrigin = 'top ';\n\n      switch (positionMode.top) {\n        case 'target':\n          position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;\n          break;\n        case 'cascade':\n          position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;\n          break;\n        case 'bottom':\n          position.top = originNodeRect.top + originNodeRect.height;\n          break;\n        default:\n          throw new Error('Invalid target mode \"' + positionMode.top + '\" specified for md-menu on Y axis.');\n      }\n\n      switch (positionMode.left) {\n        case 'target':\n          position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;\n          transformOrigin += 'left';\n          break;\n        case 'target-right':\n          position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);\n          transformOrigin += 'right';\n          break;\n        case 'cascade':\n          var willFitRight = (originNodeRect.right + openMenuNodeRect.width) < bounds.right;\n          position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;\n          transformOrigin += willFitRight ? 'left' : 'right';\n          break;\n        case 'left':\n          position.left = originNodeRect.left;\n          transformOrigin += 'left';\n          break;\n        default:\n          throw new Error('Invalid target mode \"' + positionMode.left + '\" specified for md-menu on X axis.');\n      }\n\n      var offsets = opts.mdMenuCtrl.offsets();\n      position.top += offsets.top;\n      position.left += offsets.left;\n\n      clamp(position);\n\n      var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1.0)) / 100;\n      var scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1.0)) / 100;\n\n      return {\n        top: Math.round(position.top),\n        left: Math.round(position.left),\n        // Animate a scale out if we aren't just repositioning\n        transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : undefined,\n        transformOrigin: transformOrigin\n      };\n\n      /**\n       * Clamps the repositioning of the menu within the confines of\n       * bounding element (often the screen/body)\n       */\n      function clamp(pos) {\n        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);\n        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);\n      }\n\n      /**\n       * Gets the first visible child in the openMenuNode\n       * Necessary incase menu nodes are being dynamically hidden\n       */\n      function firstVisibleChild() {\n        for (var i = 0; i < openMenuNode.children.length; ++i) {\n          if ($window.getComputedStyle(openMenuNode.children[i]).display != 'none') {\n            return openMenuNode.children[i];\n          }\n        }\n      }\n    }\n  }\n  function toNode(el) {\n    if (el instanceof angular.element) {\n      el = el[0];\n    }\n    return el;\n  }\n}\nMenuProvider.$inject = [\"$$interimElementProvider\"];\n\n})();\n(function(){\n\"use strict\";\n\n\nangular\n  .module('material.components.menuBar')\n  .controller('MenuBarController', MenuBarController);\n\nvar BOUND_MENU_METHODS = ['handleKeyDown', 'handleMenuHover', 'scheduleOpenHoveredMenu', 'cancelScheduledOpen'];\n\n/**\n * @ngInject\n */\nfunction MenuBarController($scope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {\n  this.$element = $element;\n  this.$attrs = $attrs;\n  this.$mdConstant = $mdConstant;\n  this.$mdUtil = $mdUtil;\n  this.$document = $document;\n  this.$scope = $scope;\n  this.$timeout = $timeout;\n\n  var self = this;\n  angular.forEach(BOUND_MENU_METHODS, function(methodName) {\n    self[methodName] = angular.bind(self, self[methodName]);\n  });\n}\nMenuBarController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$mdConstant\", \"$document\", \"$mdUtil\", \"$timeout\"];\n\nMenuBarController.prototype.init = function() {\n  var $element = this.$element;\n  var $mdUtil = this.$mdUtil;\n  var $scope = this.$scope;\n\n  var self = this;\n  $element.on('keydown', this.handleKeyDown);\n  this.parentToolbar = $mdUtil.getClosest($element, 'MD-TOOLBAR');\n\n  $scope.$on('$mdMenuOpen', function(event, el) {\n    if (self.getMenus().indexOf(el[0]) != -1) {\n      $element[0].classList.add('md-open');\n      el[0].classList.add('md-open');\n      self.currentlyOpenMenu = el.controller('mdMenu');\n      self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);\n      self.enableOpenOnHover();\n    }\n  });\n\n  $scope.$on('$mdMenuClose', function(event, el, opts) {\n    var rootMenus = self.getMenus();\n    if (rootMenus.indexOf(el[0]) != -1) {\n      $element[0].classList.remove('md-open');\n      el[0].classList.remove('md-open');\n    }\n\n    if (opts.closeAll) {\n      if ($element[0].contains(el[0])) {\n        var parentMenu = el[0];\n        while (parentMenu && rootMenus.indexOf(parentMenu) == -1) {\n          parentMenu = $mdUtil.getClosest(parentMenu, 'MD-MENU', true);\n        }\n        if (parentMenu) {\n          if (!opts.skipFocus) parentMenu.querySelector('button:not([disabled])').focus();\n          self.currentlyOpenMenu = undefined;\n          self.disableOpenOnHover();\n          self.setKeyboardMode(true);\n        }\n      }\n    }\n  });\n\n  angular\n    .element(this.getMenus())\n    .on('mouseenter', this.handleMenuHover);\n\n  this.setKeyboardMode(true);\n};\n\nMenuBarController.prototype.setKeyboardMode = function(enabled) {\n  if (enabled) this.$element[0].classList.add('md-keyboard-mode');\n  else this.$element[0].classList.remove('md-keyboard-mode');\n};\n\nMenuBarController.prototype.enableOpenOnHover = function() {\n  if (this.openOnHoverEnabled) return;\n  this.openOnHoverEnabled = true;\n\n  var parentToolbar;\n  if (parentToolbar = this.parentToolbar) {\n    parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute('style');\n    parentToolbar.style.position = 'relative';\n    parentToolbar.style.zIndex = 100;\n  }\n};\n\nMenuBarController.prototype.handleMenuHover = function(e) {\n  this.setKeyboardMode(false);\n  if (this.openOnHoverEnabled) {\n    this.scheduleOpenHoveredMenu(e);\n  }\n};\n\n\nMenuBarController.prototype.disableOpenOnHover = function() {\n  if (!this.openOnHoverEnabled) return;\n  this.openOnHoverEnabled = false;\n  var parentToolbar;\n  if (parentToolbar = this.parentToolbar) {\n    parentToolbar.setAttribute('style', parentToolbar.dataset.mdRestoreStyle || '');\n  }\n};\n\nMenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {\n  var menuEl = angular.element(e.currentTarget);\n  var menuCtrl = menuEl.controller('mdMenu');\n  this.setKeyboardMode(false);\n  this.scheduleOpenMenu(menuCtrl);\n};\n\nMenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {\n  var self = this;\n  var $timeout = this.$timeout;\n  if (menuCtrl != self.currentlyOpenMenu) {\n    $timeout.cancel(self.pendingMenuOpen);\n    self.pendingMenuOpen = $timeout(function() {\n      self.pendingMenuOpen = undefined;\n      if (self.currentlyOpenMenu) {\n        self.currentlyOpenMenu.close(true, { closeAll: true });\n      }\n      menuCtrl.open();\n    }, 200, false);\n  }\n};\n\nMenuBarController.prototype.handleKeyDown = function(e) {\n  var keyCodes = this.$mdConstant.KEY_CODE;\n  var currentMenu = this.currentlyOpenMenu;\n  var wasOpen = currentMenu && currentMenu.isOpen;\n  this.setKeyboardMode(true);\n  var handled, newMenu, newMenuCtrl;\n  switch (e.keyCode) {\n    case keyCodes.DOWN_ARROW:\n      if (currentMenu) {\n        currentMenu.focusMenuContainer();\n      } else {\n        this.openFocusedMenu();\n      }\n      handled = true;\n      break;\n    case keyCodes.UP_ARROW:\n      currentMenu && currentMenu.close();\n      handled = true;\n      break;\n    case keyCodes.LEFT_ARROW:\n      newMenu = this.focusMenu(-1);\n      if (wasOpen) {\n        newMenuCtrl = angular.element(newMenu).controller('mdMenu');\n        this.scheduleOpenMenu(newMenuCtrl);\n      }\n      handled = true;\n      break;\n    case keyCodes.RIGHT_ARROW:\n      newMenu = this.focusMenu(+1);\n      if (wasOpen) {\n        newMenuCtrl = angular.element(newMenu).controller('mdMenu');\n        this.scheduleOpenMenu(newMenuCtrl);\n      }\n      handled = true;\n      break;\n  }\n  if (handled) {\n    e && e.preventDefault && e.preventDefault();\n    e && e.stopImmediatePropagation && e.stopImmediatePropagation();\n  }\n};\n\nMenuBarController.prototype.focusMenu = function(direction) {\n  var menus = this.getMenus();\n  var focusedIndex = this.getFocusedMenuIndex();\n\n  if (focusedIndex == -1) { focusedIndex = this.getOpenMenuIndex(); }\n\n  var changed = false;\n\n  if (focusedIndex == -1) { focusedIndex = 0; }\n  else if (\n    direction < 0 && focusedIndex > 0 ||\n    direction > 0 && focusedIndex < menus.length - direction\n  ) {\n    focusedIndex += direction;\n    changed = true;\n  }\n  if (changed) {\n    menus[focusedIndex].querySelector('button').focus();\n    return menus[focusedIndex];\n  }\n};\n\nMenuBarController.prototype.openFocusedMenu = function() {\n  var menu = this.getFocusedMenu();\n  menu && angular.element(menu).controller('mdMenu').open();\n};\n\nMenuBarController.prototype.getMenus = function() {\n  var $element = this.$element;\n  return this.$mdUtil.nodesToArray($element[0].children)\n    .filter(function(el) { return el.nodeName == 'MD-MENU'; });\n};\n\nMenuBarController.prototype.getFocusedMenu = function() {\n  return this.getMenus()[this.getFocusedMenuIndex()];\n};\n\nMenuBarController.prototype.getFocusedMenuIndex = function() {\n  var $mdUtil = this.$mdUtil;\n  var focusedEl = $mdUtil.getClosest(\n    this.$document[0].activeElement,\n    'MD-MENU'\n  );\n  if (!focusedEl) return -1;\n\n  var focusedIndex = this.getMenus().indexOf(focusedEl);\n  return focusedIndex;\n\n};\n\nMenuBarController.prototype.getOpenMenuIndex = function() {\n  var menus = this.getMenus();\n  for (var i = 0; i < menus.length; ++i) {\n    if (menus[i].classList.contains('md-open')) return i;\n  }\n  return -1;\n};\n\n\n\n\n\n\n\n\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc directive\n * @name mdMenuBar\n * @module material.components.menu-bar\n * @restrict E\n * @description\n *\n * Menu bars are containers that hold multiple menus. They change the behavior and appearence\n * of the `md-menu` directive to behave similar to an operating system provided menu.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-menu-bar>\n *   <md-menu>\n *     <button ng-click=\"$mdOpenMenu()\">\n *       File\n *     </button>\n *     <md-menu-content>\n *       <md-menu-item>\n *         <md-button ng-click=\"ctrl.sampleAction('share', $event)\">\n *           Share...\n *         </md-button>\n *       </md-menu-item>\n *       <md-menu-divider></md-menu-divider>\n *       <md-menu-item>\n *       <md-menu-item>\n *         <md-menu>\n *           <md-button ng-click=\"$mdOpenMenu()\">New</md-button>\n *           <md-menu-content>\n *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Document', $event)\">Document</md-button></md-menu-item>\n *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Spreadsheet', $event)\">Spreadsheet</md-button></md-menu-item>\n *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Presentation', $event)\">Presentation</md-button></md-menu-item>\n *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Form', $event)\">Form</md-button></md-menu-item>\n *             <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Drawing', $event)\">Drawing</md-button></md-menu-item>\n *           </md-menu-content>\n *         </md-menu>\n *       </md-menu-item>\n *     </md-menu-content>\n *   </md-menu>\n * </md-menu-bar>\n * </hljs>\n *\n * ## Menu Bar Controls\n *\n * You may place `md-menu-items` that function as controls within menu bars.\n * There are two modes that are exposed via the `type` attribute of the `md-menu-item`.\n * `type=\"checkbox\"` will function as a boolean control for the `ng-model` attribute of the\n * `md-menu-item`. `type=\"radio\"` will function like a radio button, setting the `ngModel`\n * to the `string` value of the `value` attribute. If you need non-string values, you can use\n * `ng-value` to provide an expression (this is similar to how angular's native `input[type=radio]` works.\n *\n * <hljs lang=\"html\">\n * <md-menu-bar>\n *  <md-menu>\n *    <button ng-click=\"$mdOpenMenu()\">\n *      Sample Menu\n *    </button>\n *    <md-menu-content>\n *      <md-menu-item type=\"checkbox\" ng-model=\"settings.allowChanges\">Allow changes</md-menu-item>\n *      <md-menu-divider></md-menu-divider>\n *      <md-menu-item type=\"radio\" ng-model=\"settings.mode\" ng-value=\"1\">Mode 1</md-menu-item>\n *      <md-menu-item type=\"radio\" ng-model=\"settings.mode\" ng-value=\"1\">Mode 2</md-menu-item>\n *      <md-menu-item type=\"radio\" ng-model=\"settings.mode\" ng-value=\"1\">Mode 3</md-menu-item>\n *    </md-menu-content>\n *  </md-menu>\n * </md-menu-bar>\n * </hljs>\n *\n *\n * ### Nesting Menus\n *\n * Menus may be nested within menu bars. This is commonly called cascading menus.\n * To nest a menu place the nested menu inside the content of the `md-menu-item`.\n * <hljs lang=\"html\">\n * <md-menu-item>\n *   <md-menu>\n *     <button ng-click=\"$mdOpenMenu()\">New</md-button>\n *     <md-menu-content>\n *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Document', $event)\">Document</md-button></md-menu-item>\n *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Spreadsheet', $event)\">Spreadsheet</md-button></md-menu-item>\n *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Presentation', $event)\">Presentation</md-button></md-menu-item>\n *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Form', $event)\">Form</md-button></md-menu-item>\n *       <md-menu-item><md-button ng-click=\"ctrl.sampleAction('New Drawing', $event)\">Drawing</md-button></md-menu-item>\n *     </md-menu-content>\n *   </md-menu>\n * </md-menu-item>\n * </hljs>\n *\n */\n\nangular\n  .module('material.components.menuBar')\n  .directive('mdMenuBar', MenuBarDirective);\n\n/**\n *\n * @ngInjdect\n */\nfunction MenuBarDirective($mdUtil, $mdTheming) {\n  return {\n    restrict: 'E',\n    require: 'mdMenuBar',\n    controller: 'MenuBarController',\n\n    compile: function compile(templateEl, templateAttrs) {\n      if (!templateAttrs.ariaRole) {\n        templateEl[0].setAttribute('role', 'menubar');\n      }\n      angular.forEach(templateEl[0].children, function(menuEl) {\n        if (menuEl.nodeName == 'MD-MENU') {\n          if (!menuEl.hasAttribute('md-position-mode')) {\n            menuEl.setAttribute('md-position-mode', 'left bottom');\n          }\n          menuEl.setAttribute('role', 'menu');\n          var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll('md-menu-content'));\n          angular.forEach(contentEls, function(contentEl) {\n            contentEl.classList.add('md-menu-bar-menu');\n            contentEl.classList.add('md-dense');\n            if (!contentEl.hasAttribute('width')) {\n              contentEl.setAttribute('width', 5);\n            }\n          });\n        }\n      });\n\n      return function postLink(scope, el, attrs, ctrl) {\n        $mdTheming(scope, el);\n        ctrl.init();\n      };\n    }\n  };\n\n}\nMenuBarDirective.$inject = [\"$mdUtil\", \"$mdTheming\"];\n\n})();\n(function(){\n\"use strict\";\n\n\nangular\n  .module('material.components.menuBar')\n  .directive('mdMenuDivider', MenuDividerDirective);\n\n\nfunction MenuDividerDirective() {\n  return {\n    restrict: 'E',\n    compile: function(templateEl, templateAttrs) {\n      if (!templateAttrs.role) {\n        templateEl[0].setAttribute('role', 'separator');\n      }\n    }\n  };\n}\n\n})();\n(function(){\n\"use strict\";\n\n\nangular\n  .module('material.components.menuBar')\n  .controller('MenuItemController', MenuItemController);\n\n\n/**\n * @ngInject\n */\nfunction MenuItemController($scope, $element, $attrs) {\n  this.$element = $element;\n  this.$attrs = $attrs;\n  this.$scope = $scope;\n}\nMenuItemController.$inject = [\"$scope\", \"$element\", \"$attrs\"];\n\nMenuItemController.prototype.init = function(ngModel) {\n  var $element = this.$element;\n  var $attrs = this.$attrs;\n\n  this.ngModel = ngModel;\n  if ($attrs.type == 'checkbox' || $attrs.type == 'radio') {\n    this.mode  = $attrs.type;\n    this.iconEl = $element[0].children[0];\n    this.buttonEl = $element[0].children[1];\n    if (ngModel) this.initClickListeners();\n  }\n};\n\nMenuItemController.prototype.initClickListeners = function() {\n  var ngModel = this.ngModel;\n  var $scope = this.$scope;\n  var $attrs = this.$attrs;\n  var $element = this.$element;\n  var mode = this.mode;\n\n  this.handleClick = angular.bind(this, this.handleClick);\n\n  var icon = this.iconEl\n  var button = angular.element(this.buttonEl);\n  var handleClick = this.handleClick;\n\n  $attrs.$observe('disabled', setDisabled);\n  setDisabled($attrs.disabled);\n\n  ngModel.$render = function render() {\n    if (isSelected()) {\n      icon.style.display = '';\n      $element.attr('aria-checked', 'true');\n    } else {\n      icon.style.display = 'none';\n      $element.attr('aria-checked', 'false');\n    }\n  };\n\n  $scope.$$postDigest(ngModel.$render);\n\n  function isSelected() {\n    if (mode == 'radio') {\n      var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;\n      return ngModel.$modelValue == val;\n    } else {\n      return ngModel.$modelValue;\n    }\n  }\n\n  function setDisabled(disabled) {\n    if (disabled) {\n      button.off('click', handleClick);\n    } else {\n      button.on('click', handleClick);\n    }\n  }\n};\n\nMenuItemController.prototype.handleClick = function(e) {\n  var mode = this.mode;\n  var ngModel = this.ngModel;\n  var $attrs = this.$attrs;\n  var newVal;\n  if (mode == 'checkbox') {\n    newVal = !ngModel.$modelValue;\n  } else if (mode == 'radio') {\n    newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value;\n  }\n  ngModel.$setViewValue(newVal);\n  ngModel.$render();\n};\n\n})();\n(function(){\n\"use strict\";\n\n\nangular\n  .module('material.components.menuBar')\n  .directive('mdMenuItem', MenuItemDirective);\n\n /**\n  *\n  * @ngInjdect\n  */\nfunction MenuItemDirective() {\n  return {\n    require: ['mdMenuItem', '?ngModel'],\n    compile: function(templateEl, templateAttrs) {\n      if (templateAttrs.type == 'checkbox' || templateAttrs.type == 'radio') {\n        var text = templateEl[0].textContent;\n        var buttonEl = angular.element('<md-button type=\"button\"></md-button>');\n            buttonEl.html(text);\n            buttonEl.attr('tabindex', '0');\n\n        templateEl.html('');\n        templateEl.append(angular.element('<md-icon md-svg-icon=\"check\"></md-icon>'));\n        templateEl.append(buttonEl);\n        templateEl[0].classList.add('md-indent');\n\n        setDefault('role', (templateAttrs.type == 'checkbox') ? 'menuitemcheckbox' : 'menuitemradio');\n        angular.forEach(['ng-disabled'], moveAttrToButton);\n\n      } else {\n        setDefault('role', 'menuitem');\n      }\n\n\n      return function(scope, el, attrs, ctrls) {\n        var ctrl = ctrls[0];\n        var ngModel = ctrls[1];\n        ctrl.init(ngModel);\n      };\n\n      function setDefault(attr, val) {\n        if (!templateEl[0].hasAttribute(attr)) {\n          templateEl[0].setAttribute(attr, val);\n        }\n      }\n\n      function moveAttrToButton(attr) {\n        if (templateEl[0].hasAttribute(attr)) {\n          var val = templateEl[0].getAttribute(attr);\n          buttonEl[0].setAttribute(attr, val);\n          templateEl[0].removeAttribute(attr);\n        }\n      }\n    },\n    controller: 'MenuItemController'\n  };\n}\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc directive\n * @name mdTab\n * @module material.components.tabs\n *\n * @restrict E\n *\n * @description\n * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.\n *\n * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more\n * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested\n * markup of the `<md-tab>` is used as the tab header markup.\n *\n * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This\n * is to define a clear separation between the tab content and the tab label.\n *\n * If a tab **label** has been identified, then any **non-**`<md-tab-label>` markup\n * will be considered tab content and will be transcluded to the internal `<div class=\"md-tabs-content\">` container.\n *\n * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is\n * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can\n * be initiated via data binding changes, programmatic invocation, or user gestures.\n *\n * @param {string=} label Optional attribute to specify a simple string as the tab label\n * @param {boolean=} disabled If present, disabled tab selection.\n * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.\n * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.\n * @param {boolean=} md-active When true, sets the active tab.  Note: There can only be one active tab at a time.\n *\n *\n * @usage\n *\n * <hljs lang=\"html\">\n * <md-tab label=\"\" disabled=\"\" md-on-select=\"\" md-on-deselect=\"\" >\n *   <h3>My Tab content</h3>\n * </md-tab>\n *\n * <md-tab >\n *   <md-tab-label>\n *     <h3>My Tab content</h3>\n *   </md-tab-label>\n *   <md-tab-body>\n *     <p>\n *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,\n *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae\n *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,\n *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n *     </p>\n *   </md-tab-body>\n * </md-tab>\n * </hljs>\n *\n */\nangular\n    .module('material.components.tabs')\n    .directive('mdTab', MdTab);\n\nfunction MdTab () {\n  return {\n    require:  '^?mdTabs',\n    terminal: true,\n    compile:  function (element, attr) {\n      var label = element.find('md-tab-label'),\n          body  = element.find('md-tab-body');\n\n      if (label.length == 0) {\n        label = angular.element('<md-tab-label></md-tab-label>');\n        if (attr.label) label.text(attr.label);\n        else label.append(element.contents());\n        if (body.length == 0) {\n          var contents = element.contents().detach();\n          body         = angular.element('<md-tab-body></md-tab-body>');\n          body.append(contents);\n        }\n      }\n\n      element.append(label);\n      if (body.html()) element.append(body);\n\n      return postLink;\n    },\n    scope:    {\n      active:   '=?mdActive',\n      disabled: '=?ngDisabled',\n      select:   '&?mdOnSelect',\n      deselect: '&?mdOnDeselect'\n    }\n  };\n\n  function postLink (scope, element, attr, ctrl) {\n    if (!ctrl) return;\n    var index = ctrl.getTabElementIndex(element),\n        body  = element.find('md-tab-body').eq(0).remove(),\n        label = element.find('md-tab-label').eq(0).remove(),\n        data  = ctrl.insertTab({\n          scope:    scope,\n          parent:   scope.$parent,\n          index:    index,\n          element:  element,\n          template: body.html(),\n          label:    label.html()\n        }, index);\n\n    scope.select   = scope.select || angular.noop;\n    scope.deselect = scope.deselect || angular.noop;\n\n    scope.$watch('active', function (active) { if (active) ctrl.select(data.getIndex()); });\n    scope.$watch('disabled', function () { ctrl.refreshIndex(); });\n    scope.$watch(\n        function () {\n          return ctrl.getTabElementIndex(element);\n        },\n        function (newIndex) {\n          data.index = newIndex;\n          ctrl.updateTabOrder();\n        }\n    );\n    scope.$on('$destroy', function () { ctrl.removeTab(data); });\n\n  }\n}\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.tabs')\n    .directive('mdTabItem', MdTabItem);\n\nfunction MdTabItem () {\n  return {\n    require: '^?mdTabs',\n    link:    function link (scope, element, attr, ctrl) {\n      if (!ctrl) return;\n      ctrl.attachRipple(scope, element);\n    }\n  };\n}\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.tabs')\n    .directive('mdTabLabel', MdTabLabel);\n\nfunction MdTabLabel () {\n  return { terminal: true };\n}\n\n\n})();\n(function(){\n\"use strict\";\n\nangular.module('material.components.tabs')\n    .directive('mdTabScroll', MdTabScroll);\n\nfunction MdTabScroll ($parse) {\n  return {\n    restrict: 'A',\n    compile: function ($element, attr) {\n      var fn = $parse(attr.mdTabScroll, null, true);\n      return function ngEventHandler (scope, element) {\n        element.on('mousewheel', function (event) {\n          scope.$apply(function () { fn(scope, { $event: event }); });\n        });\n      };\n    }\n  }\n}\nMdTabScroll.$inject = [\"$parse\"];\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.tabs')\n    .controller('MdTabsController', MdTabsController);\n\n/**\n * @ngInject\n */\nfunction MdTabsController ($scope, $element, $window, $mdConstant, $mdTabInkRipple,\n                           $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {\n  // define private properties\n  var ctrl      = this,\n      locked    = false,\n      elements  = getElements(),\n      queue     = [],\n      destroyed = false,\n      loaded    = false;\n\n  // define one-way bindings\n  defineOneWayBinding('stretchTabs', handleStretchTabs);\n\n  // define public properties with change handlers\n  defineProperty('focusIndex', handleFocusIndexChange, ctrl.selectedIndex || 0);\n  defineProperty('offsetLeft', handleOffsetChange, 0);\n  defineProperty('hasContent', handleHasContent, false);\n  defineProperty('maxTabWidth', handleMaxTabWidth, getMaxTabWidth());\n  defineProperty('shouldPaginate', handleShouldPaginate, false);\n\n  // define boolean attributes\n  defineBooleanAttribute('noInkBar', handleInkBar);\n  defineBooleanAttribute('dynamicHeight', handleDynamicHeight);\n  defineBooleanAttribute('noPagination');\n  defineBooleanAttribute('swipeContent');\n  defineBooleanAttribute('noDisconnect');\n  defineBooleanAttribute('autoselect');\n  defineBooleanAttribute('centerTabs', handleCenterTabs, false);\n  defineBooleanAttribute('enableDisconnect');\n\n  // define public properties\n  ctrl.scope             = $scope;\n  ctrl.parent            = $scope.$parent;\n  ctrl.tabs              = [];\n  ctrl.lastSelectedIndex = null;\n  ctrl.hasFocus          = false;\n  ctrl.lastClick         = true;\n  ctrl.shouldCenterTabs  = shouldCenterTabs();\n\n  // define public methods\n  ctrl.updatePagination   = $mdUtil.debounce(updatePagination, 100);\n  ctrl.redirectFocus      = redirectFocus;\n  ctrl.attachRipple       = attachRipple;\n  ctrl.insertTab          = insertTab;\n  ctrl.removeTab          = removeTab;\n  ctrl.select             = select;\n  ctrl.scroll             = scroll;\n  ctrl.nextPage           = nextPage;\n  ctrl.previousPage       = previousPage;\n  ctrl.keydown            = keydown;\n  ctrl.canPageForward     = canPageForward;\n  ctrl.canPageBack        = canPageBack;\n  ctrl.refreshIndex       = refreshIndex;\n  ctrl.incrementIndex     = incrementIndex;\n  ctrl.getTabElementIndex = getTabElementIndex;\n  ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);\n  ctrl.updateTabOrder     = $mdUtil.debounce(updateTabOrder, 100);\n\n  init();\n\n  /**\n   * Perform initialization for the controller, setup events and watcher(s)\n   */\n  function init () {\n    ctrl.selectedIndex = ctrl.selectedIndex || 0;\n    compileTemplate();\n    configureWatchers();\n    bindEvents();\n    $mdTheming($element);\n    $mdUtil.nextTick(function () {\n      updateHeightFromContent();\n      adjustOffset();\n      updateInkBarStyles();\n      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();\n      loaded = true;\n      updatePagination();\n    });\n  }\n\n  /**\n   * Compiles the template provided by the user.  This is passed as an attribute from the tabs\n   * directive's template function.\n   */\n  function compileTemplate () {\n    var template = $attrs.$mdTabsTemplate,\n        element  = angular.element(elements.data);\n    element.html(template);\n    $compile(element.contents())(ctrl.parent);\n    delete $attrs.$mdTabsTemplate;\n  }\n\n  /**\n   * Binds events used by the tabs component.\n   */\n  function bindEvents () {\n    angular.element($window).on('resize', handleWindowResize);\n    $scope.$on('$destroy', cleanup);\n  }\n\n  /**\n   * Configure watcher(s) used by Tabs\n   */\n  function configureWatchers () {\n    $scope.$watch('$mdTabsCtrl.selectedIndex', handleSelectedIndexChange);\n  }\n\n  /**\n   * Creates a one-way binding manually rather than relying on Angular's isolated scope\n   * @param key\n   * @param handler\n   */\n  function defineOneWayBinding (key, handler) {\n    var attr = $attrs.$normalize('md-' + key);\n    if (handler) defineProperty(key, handler);\n    $attrs.$observe(attr, function (newValue) { ctrl[ key ] = newValue; });\n  }\n\n  /**\n   * Defines boolean attributes with default value set to true.  (ie. md-stretch-tabs with no value\n   * will be treated as being truthy)\n   * @param key\n   * @param handler\n   */\n  function defineBooleanAttribute (key, handler) {\n    var attr = $attrs.$normalize('md-' + key);\n    if (handler) defineProperty(key, handler);\n    if ($attrs.hasOwnProperty(attr)) updateValue($attrs[attr]);\n    $attrs.$observe(attr, updateValue);\n    function updateValue (newValue) {\n      ctrl[ key ] = newValue !== 'false';\n    }\n  }\n\n  /**\n   * Remove any events defined by this controller\n   */\n  function cleanup () {\n    destroyed = true;\n    angular.element($window).off('resize', handleWindowResize);\n  }\n\n  // Change handlers\n\n  /**\n   * Toggles stretch tabs class and updates inkbar when tab stretching changes\n   * @param stretchTabs\n   */\n  function handleStretchTabs (stretchTabs) {\n    angular.element(elements.wrapper).toggleClass('md-stretch-tabs', shouldStretchTabs());\n    updateInkBarStyles();\n  }\n\n  function handleCenterTabs (newValue) {\n    ctrl.shouldCenterTabs = shouldCenterTabs();\n  }\n\n  function handleMaxTabWidth (newWidth, oldWidth) {\n    if (newWidth !== oldWidth) {\n      $mdUtil.nextTick(ctrl.updateInkBarStyles);\n    }\n  }\n\n  function handleShouldPaginate (newValue, oldValue) {\n    if (newValue !== oldValue) {\n      ctrl.maxTabWidth      = getMaxTabWidth();\n      ctrl.shouldCenterTabs = shouldCenterTabs();\n      $mdUtil.nextTick(function () {\n        ctrl.maxTabWidth = getMaxTabWidth();\n        adjustOffset(ctrl.selectedIndex);\n      });\n    }\n  }\n\n  /**\n   * Add/remove the `md-no-tab-content` class depending on `ctrl.hasContent`\n   * @param hasContent\n   */\n  function handleHasContent (hasContent) {\n    $element[ hasContent ? 'removeClass' : 'addClass' ]('md-no-tab-content');\n  }\n\n  /**\n   * Apply ctrl.offsetLeft to the paging element when it changes\n   * @param left\n   */\n  function handleOffsetChange (left) {\n    var newValue = ctrl.shouldCenterTabs ? '' : '-' + left + 'px';\n    angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, 'translate3d(' + newValue + ', 0, 0)');\n    $scope.$broadcast('$mdTabsPaginationChanged');\n  }\n\n  /**\n   * Update the UI whenever `ctrl.focusIndex` is updated\n   * @param newIndex\n   * @param oldIndex\n   */\n  function handleFocusIndexChange (newIndex, oldIndex) {\n    if (newIndex === oldIndex) return;\n    if (!elements.tabs[ newIndex ]) return;\n    adjustOffset();\n    redirectFocus();\n  }\n\n  /**\n   * Update the UI whenever the selected index changes. Calls user-defined select/deselect methods.\n   * @param newValue\n   * @param oldValue\n   */\n  function handleSelectedIndexChange (newValue, oldValue) {\n    if (newValue === oldValue) return;\n    \n    ctrl.selectedIndex     = getNearestSafeIndex(newValue);\n    ctrl.lastSelectedIndex = oldValue;\n    ctrl.updateInkBarStyles();\n    updateHeightFromContent();\n    adjustOffset(newValue);\n    $scope.$broadcast('$mdTabsChanged');\n    ctrl.tabs[ oldValue ] && ctrl.tabs[ oldValue ].scope.deselect();\n    ctrl.tabs[ newValue ] && ctrl.tabs[ newValue ].scope.select();\n  }\n\n  function getTabElementIndex(tabEl){\n    var tabs = $element[0].getElementsByTagName('md-tab');\n    return Array.prototype.indexOf.call(tabs, tabEl[0]);\n  }\n\n  /**\n   * Queues up a call to `handleWindowResize` when a resize occurs while the tabs component is\n   * hidden.\n   */\n  function handleResizeWhenVisible () {\n    // if there is already a watcher waiting for resize, do nothing\n    if (handleResizeWhenVisible.watcher) return;\n    // otherwise, we will abuse the $watch function to check for visible\n    handleResizeWhenVisible.watcher = $scope.$watch(function () {\n      // since we are checking for DOM size, we use $mdUtil.nextTick() to wait for after the DOM updates\n      $mdUtil.nextTick(function () {\n        // if the watcher has already run (ie. multiple digests in one cycle), do nothing\n        if (!handleResizeWhenVisible.watcher) return;\n\n        if ($element.prop('offsetParent')) {\n          handleResizeWhenVisible.watcher();\n          handleResizeWhenVisible.watcher = null;\n\n          handleWindowResize();\n        }\n      }, false);\n    });\n  }\n\n  // Event handlers / actions\n\n  /**\n   * Handle user keyboard interactions\n   * @param event\n   */\n  function keydown (event) {\n    switch (event.keyCode) {\n      case $mdConstant.KEY_CODE.LEFT_ARROW:\n        event.preventDefault();\n        incrementIndex(-1, true);\n        break;\n      case $mdConstant.KEY_CODE.RIGHT_ARROW:\n        event.preventDefault();\n        incrementIndex(1, true);\n        break;\n      case $mdConstant.KEY_CODE.SPACE:\n      case $mdConstant.KEY_CODE.ENTER:\n        event.preventDefault();\n        if (!locked) ctrl.selectedIndex = ctrl.focusIndex;\n        break;\n    }\n    ctrl.lastClick = false;\n  }\n\n  /**\n   * Update the selected index and trigger a click event on the original `md-tab` element in order\n   * to fire user-added click events.\n   * @param index\n   */\n  function select (index) {\n    if (!locked) ctrl.focusIndex = ctrl.selectedIndex = index;\n    ctrl.lastClick = true;\n    // nextTick is required to prevent errors in user-defined click events\n    $mdUtil.nextTick(function () {\n      ctrl.tabs[ index ].element.triggerHandler('click');\n    }, false);\n  }\n\n  /**\n   * When pagination is on, this makes sure the selected index is in view.\n   * @param event\n   */\n  function scroll (event) {\n    if (!ctrl.shouldPaginate) return;\n    event.preventDefault();\n    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);\n  }\n\n  /**\n   * Slides the tabs over approximately one page forward.\n   */\n  function nextPage () {\n    var viewportWidth = elements.canvas.clientWidth,\n        totalWidth    = viewportWidth + ctrl.offsetLeft,\n        i, tab;\n    for (i = 0; i < elements.tabs.length; i++) {\n      tab = elements.tabs[ i ];\n      if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;\n    }\n    ctrl.offsetLeft = fixOffset(tab.offsetLeft);\n  }\n\n  /**\n   * Slides the tabs over approximately one page backward.\n   */\n  function previousPage () {\n    var i, tab;\n    for (i = 0; i < elements.tabs.length; i++) {\n      tab = elements.tabs[ i ];\n      if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;\n    }\n    ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);\n  }\n\n  /**\n   * Update size calculations when the window is resized.\n   */\n  function handleWindowResize () {\n    ctrl.lastSelectedIndex = ctrl.selectedIndex;\n    ctrl.offsetLeft        = fixOffset(ctrl.offsetLeft);\n    $mdUtil.nextTick(function () {\n      ctrl.updateInkBarStyles();\n      updatePagination();\n    });\n  }\n\n  function handleInkBar (hide) {\n    angular.element(elements.inkBar).toggleClass('ng-hide', hide);\n  }\n\n  /**\n   * Toggle dynamic height class when value changes\n   * @param value\n   */\n  function handleDynamicHeight (value) {\n    $element.toggleClass('md-dynamic-height', value);\n  }\n\n  /**\n   * Remove a tab from the data and select the nearest valid tab.\n   * @param tabData\n   */\n  function removeTab (tabData) {\n    if (destroyed) return;\n    var selectedIndex = ctrl.selectedIndex,\n        tab           = ctrl.tabs.splice(tabData.getIndex(), 1)[ 0 ];\n    refreshIndex();\n    // when removing a tab, if the selected index did not change, we have to manually trigger the\n    //   tab select/deselect events\n    if (ctrl.selectedIndex === selectedIndex) {\n      tab.scope.deselect();\n      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();\n    }\n    $mdUtil.nextTick(function () {\n      updatePagination();\n      ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);\n    });\n  }\n\n  /**\n   * Create an entry in the tabs array for a new tab at the specified index.\n   * @param tabData\n   * @param index\n   * @returns {*}\n   */\n  function insertTab (tabData, index) {\n    var hasLoaded = loaded;\n    var proto     = {\n          getIndex:     function () { return ctrl.tabs.indexOf(tab); },\n          isActive:     function () { return this.getIndex() === ctrl.selectedIndex; },\n          isLeft:       function () { return this.getIndex() < ctrl.selectedIndex; },\n          isRight:      function () { return this.getIndex() > ctrl.selectedIndex; },\n          shouldRender: function () { return !ctrl.noDisconnect || this.isActive(); },\n          hasFocus:     function () {\n            return !ctrl.lastClick\n                && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;\n          },\n          id:           $mdUtil.nextUid()\n        },\n        tab       = angular.extend(proto, tabData);\n    if (angular.isDefined(index)) {\n      ctrl.tabs.splice(index, 0, tab);\n    } else {\n      ctrl.tabs.push(tab);\n    }\n    processQueue();\n    updateHasContent();\n    $mdUtil.nextTick(function () {\n      updatePagination();\n      // if autoselect is enabled, select the newly added tab\n      if (hasLoaded && ctrl.autoselect) $mdUtil.nextTick(function () {\n        $mdUtil.nextTick(function () { select(ctrl.tabs.indexOf(tab)); });\n      });\n    });\n    return tab;\n  }\n\n  // Getter methods\n\n  /**\n   * Gathers references to all of the DOM elements used by this controller.\n   * @returns {{}}\n   */\n  function getElements () {\n    var elements = {};\n\n    // gather tab bar elements\n    elements.wrapper = $element[ 0 ].getElementsByTagName('md-tabs-wrapper')[ 0 ];\n    elements.data    = $element[ 0 ].getElementsByTagName('md-tab-data')[ 0 ];\n    elements.canvas  = elements.wrapper.getElementsByTagName('md-tabs-canvas')[ 0 ];\n    elements.paging  = elements.canvas.getElementsByTagName('md-pagination-wrapper')[ 0 ];\n    elements.tabs    = elements.paging.getElementsByTagName('md-tab-item');\n    elements.dummies = elements.canvas.getElementsByTagName('md-dummy-tab');\n    elements.inkBar  = elements.paging.getElementsByTagName('md-ink-bar')[ 0 ];\n\n    // gather tab content elements\n    elements.contentsWrapper = $element[ 0 ].getElementsByTagName('md-tabs-content-wrapper')[ 0 ];\n    elements.contents        = elements.contentsWrapper.getElementsByTagName('md-tab-content');\n\n    return elements;\n  }\n\n  /**\n   * Determines whether or not the left pagination arrow should be enabled.\n   * @returns {boolean}\n   */\n  function canPageBack () {\n    return ctrl.offsetLeft > 0;\n  }\n\n  /**\n   * Determines whether or not the right pagination arrow should be enabled.\n   * @returns {*|boolean}\n   */\n  function canPageForward () {\n    var lastTab = elements.tabs[ elements.tabs.length - 1 ];\n    return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth +\n        ctrl.offsetLeft;\n  }\n\n  /**\n   * Determines if the UI should stretch the tabs to fill the available space.\n   * @returns {*}\n   */\n  function shouldStretchTabs () {\n    switch (ctrl.stretchTabs) {\n      case 'always':\n        return true;\n      case 'never':\n        return false;\n      default:\n        return !ctrl.shouldPaginate\n            && $window.matchMedia('(max-width: 600px)').matches;\n    }\n  }\n\n  /**\n   * Determines if the tabs should appear centered.\n   * @returns {string|boolean}\n   */\n  function shouldCenterTabs () {\n    return ctrl.centerTabs && !ctrl.shouldPaginate;\n  }\n\n  /**\n   * Determines if pagination is necessary to display the tabs within the available space.\n   * @returns {boolean}\n   */\n  function shouldPaginate () {\n    if (ctrl.noPagination || !loaded) return false;\n    var canvasWidth = $element.prop('clientWidth');\n    angular.forEach(elements.dummies, function (tab) { canvasWidth -= tab.offsetWidth; });\n    return canvasWidth < 0;\n  }\n\n  /**\n   * Finds the nearest tab index that is available.  This is primarily used for when the active\n   * tab is removed.\n   * @param newIndex\n   * @returns {*}\n   */\n  function getNearestSafeIndex (newIndex) {\n    if (newIndex === -1) return -1;\n    var maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex),\n        i, tab;\n    for (i = 0; i <= maxOffset; i++) {\n      tab = ctrl.tabs[ newIndex + i ];\n      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();\n      tab = ctrl.tabs[ newIndex - i ];\n      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();\n    }\n    return newIndex;\n  }\n\n  // Utility methods\n\n  /**\n   * Defines a property using a getter and setter in order to trigger a change handler without\n   * using `$watch` to observe changes.\n   * @param key\n   * @param handler\n   * @param value\n   */\n  function defineProperty (key, handler, value) {\n    Object.defineProperty(ctrl, key, {\n      get: function () { return value; },\n      set: function (newValue) {\n        var oldValue = value;\n        value        = newValue;\n        handler && handler(newValue, oldValue);\n      }\n    });\n  }\n\n  /**\n   * Updates whether or not pagination should be displayed.\n   */\n  function updatePagination () {\n    if (!shouldStretchTabs()) updatePagingWidth();\n    ctrl.maxTabWidth = getMaxTabWidth();\n    ctrl.shouldPaginate = shouldPaginate();\n  }\n\n  function updatePagingWidth() {\n    var width = 1;\n    angular.forEach(elements.dummies, function (element) { width += element.offsetWidth; });\n    angular.element(elements.paging).css('width', width + 'px');\n  }\n\n  function getMaxTabWidth () {\n    return $element.prop('clientWidth');\n  }\n\n  /**\n   * Re-orders the tabs and updates the selected and focus indexes to their new positions.\n   * This is triggered by `tabDirective.js` when the user's tabs have been re-ordered.\n   */\n  function updateTabOrder () {\n    var selectedItem   = ctrl.tabs[ ctrl.selectedIndex ],\n        focusItem      = ctrl.tabs[ ctrl.focusIndex ];\n    ctrl.tabs          = ctrl.tabs.sort(function (a, b) {\n      return a.index - b.index;\n    });\n    ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);\n    ctrl.focusIndex    = ctrl.tabs.indexOf(focusItem);\n  }\n\n  /**\n   * This moves the selected or focus index left or right.  This is used by the keydown handler.\n   * @param inc\n   */\n  function incrementIndex (inc, focus) {\n    var newIndex,\n        key   = focus ? 'focusIndex' : 'selectedIndex',\n        index = ctrl[ key ];\n    for (newIndex = index + inc;\n         ctrl.tabs[ newIndex ] && ctrl.tabs[ newIndex ].scope.disabled;\n         newIndex += inc) {}\n    if (ctrl.tabs[ newIndex ]) {\n      ctrl[ key ] = newIndex;\n    }\n  }\n\n  /**\n   * This is used to forward focus to dummy elements.  This method is necessary to avoid aniation\n   * issues when attempting to focus an item that is out of view.\n   */\n  function redirectFocus () {\n    elements.dummies[ ctrl.focusIndex ].focus();\n  }\n\n  /**\n   * Forces the pagination to move the focused tab into view.\n   */\n  function adjustOffset (index) {\n    if (index == null) index = ctrl.focusIndex;\n    if (!elements.tabs[ index ]) return;\n    if (ctrl.shouldCenterTabs) return;\n    var tab         = elements.tabs[ index ],\n        left        = tab.offsetLeft,\n        right       = tab.offsetWidth + left;\n    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 32 * 2));\n    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));\n  }\n\n  /**\n   * Iterates through all queued functions and clears the queue.  This is used for functions that\n   * are called before the UI is ready, such as size calculations.\n   */\n  function processQueue () {\n    queue.forEach(function (func) { $mdUtil.nextTick(func); });\n    queue = [];\n  }\n\n  /**\n   * Determines if the tab content area is needed.\n   */\n  function updateHasContent () {\n    var hasContent  = false;\n    angular.forEach(ctrl.tabs, function (tab) {\n      if (tab.template) hasContent = true;\n    });\n    ctrl.hasContent = hasContent;\n  }\n\n  /**\n   * Moves the indexes to their nearest valid values.\n   */\n  function refreshIndex () {\n    ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);\n    ctrl.focusIndex    = getNearestSafeIndex(ctrl.focusIndex);\n  }\n\n  /**\n   * Calculates the content height of the current tab.\n   * @returns {*}\n   */\n  function updateHeightFromContent () {\n    if (!ctrl.dynamicHeight) return $element.css('height', '');\n    if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);\n\n    var tabContent    = elements.contents[ ctrl.selectedIndex ],\n        contentHeight = tabContent ? tabContent.offsetHeight : 0,\n        tabsHeight    = elements.wrapper.offsetHeight,\n        newHeight     = contentHeight + tabsHeight,\n        currentHeight = $element.prop('offsetHeight');\n\n    // Adjusts calculations for when the buttons are bottom-aligned since this relies on absolute\n    // positioning.  This should probably be cleaned up if a cleaner solution is possible.\n    if ($element.attr('md-align-tabs') === 'bottom') {\n      currentHeight -= tabsHeight;\n      newHeight -= tabsHeight;\n      // Need to include bottom border in these calculations\n      if ($element.attr('md-border-bottom') !== undefined) ++currentHeight;\n    }\n\n    if (currentHeight === newHeight) return;\n\n    // Lock during animation so the user can't change tabs\n    locked = true;\n\n    var fromHeight = { height: currentHeight + 'px' },\n        toHeight = { height: newHeight + 'px' };\n\n    // Set the height to the current, specific pixel height to fix a bug on iOS where the height\n    // first animates to 0, then back to the proper height causing a visual glitch\n    $element.css(fromHeight);\n\n    // Animate the height from the old to the new\n    $animateCss($element, {\n      from: fromHeight,\n      to: toHeight,\n      easing: 'cubic-bezier(0.35, 0, 0.25, 1)',\n      duration: 0.5\n    }).start().done(function () {\n      // Then (to fix the same iOS issue as above), disable transitions and remove the specific\n      // pixel height so the height can size with browser width/content changes, etc.\n      $element.css({\n        transition: 'none',\n        height: ''\n      });\n\n      // In the next tick, re-allow transitions (if we do it all at once, $element.css is \"smart\"\n      // enough to batch it for us instead of doing it immediately, which undoes the original\n      // transition: none)\n      $mdUtil.nextTick(function() {\n        $element.css('transition', '');\n      });\n\n      // And unlock so tab changes can occur\n      locked = false;\n    });\n  }\n\n  /**\n   * Repositions the ink bar to the selected tab.\n   * @returns {*}\n   */\n  function updateInkBarStyles () {\n    if (!elements.tabs[ ctrl.selectedIndex ]) {\n      angular.element(elements.inkBar).css({ left: 'auto', right: 'auto' });\n      return;\n    }\n    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);\n    // if the element is not visible, we will not be able to calculate sizes until it is\n    // we should treat that as a resize event rather than just updating the ink bar\n    if (!$element.prop('offsetParent')) return handleResizeWhenVisible();\n    var index      = ctrl.selectedIndex,\n        totalWidth = elements.paging.offsetWidth,\n        tab        = elements.tabs[ index ],\n        left       = tab.offsetLeft,\n        right      = totalWidth - left - tab.offsetWidth,\n        tabWidth;\n    if (ctrl.shouldCenterTabs) {\n      tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function (value, element) {\n        return value + element.offsetWidth;\n      }, 0);\n      if (totalWidth > tabWidth) $mdUtil.nextTick(updateInkBarStyles, false);\n    }\n    updateInkBarClassName();\n    angular.element(elements.inkBar).css({ left: left + 'px', right: right + 'px' });\n  }\n\n  /**\n   * Adds left/right classes so that the ink bar will animate properly.\n   */\n  function updateInkBarClassName () {\n    var newIndex = ctrl.selectedIndex,\n        oldIndex = ctrl.lastSelectedIndex,\n        ink      = angular.element(elements.inkBar);\n    if (!angular.isNumber(oldIndex)) return;\n    ink\n        .toggleClass('md-left', newIndex < oldIndex)\n        .toggleClass('md-right', newIndex > oldIndex);\n  }\n\n  /**\n   * Takes an offset value and makes sure that it is within the min/max allowed values.\n   * @param value\n   * @returns {*}\n   */\n  function fixOffset (value) {\n    if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;\n    var lastTab    = elements.tabs[ elements.tabs.length - 1 ],\n        totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n    value          = Math.max(0, value);\n    value          = Math.min(totalWidth - elements.canvas.clientWidth, value);\n    return value;\n  }\n\n  /**\n   * Attaches a ripple to the tab item element.\n   * @param scope\n   * @param element\n   */\n  function attachRipple (scope, element) {\n    var options = { colorElement: angular.element(elements.inkBar) };\n    $mdTabInkRipple.attach(scope, element, options);\n  }\n}\nMdTabsController.$inject = [\"$scope\", \"$element\", \"$window\", \"$mdConstant\", \"$mdTabInkRipple\", \"$mdUtil\", \"$animateCss\", \"$attrs\", \"$compile\", \"$mdTheming\"];\n\n})();\n(function(){\n\"use strict\";\n\n/**\n * @ngdoc directive\n * @name mdTabs\n * @module material.components.tabs\n *\n * @restrict E\n *\n * @description\n * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.\n * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view\n * content that will be associated with each tab button.\n *\n * Below is the markup for its simplest usage:\n *\n *  <hljs lang=\"html\">\n *  <md-tabs>\n *    <md-tab label=\"Tab #1\"></md-tab>\n *    <md-tab label=\"Tab #2\"></md-tab>\n *    <md-tab label=\"Tab #3\"></md-tab>\n *  </md-tabs>\n *  </hljs>\n *\n * Tabs supports three (3) usage scenarios:\n *\n *  1. Tabs (buttons only)\n *  2. Tabs with internal view content\n *  3. Tabs with external view content\n *\n * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.\n * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.\n * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.\n *\n * Additional features also include:\n *\n * *  Content can include any markup.\n * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.\n *\n * ### Explanation of tab stretching\n *\n * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.\n *\n * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.\n *\n * On desktops, by default, stretching will never occur.\n *\n * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:\n *\n * `md-stretch-tabs` | mobile    | desktop\n * ------------------|-----------|--------\n * `auto`            | stretched | ---\n * `always`          | stretched | stretched\n * `never`           | ---       | ---\n *\n * @param {integer=} md-selected Index of the active/selected tab\n * @param {boolean=} md-no-ink If present, disables ink ripple effects.\n * @param {boolean=} md-no-ink-bar If present, disables the selection ink bar.\n * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`\n * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`\n * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab\n * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination\n * @param {boolean=} md-no-pagination When enabled, pagination will remain off\n * @param {boolean=} md-swipe-content When enabled, swipe gestures will be enabled for the content area to jump between tabs\n * @param {boolean=} md-no-disconnect If your tab content has background tasks (ie. event listeners), you will want to include this to prevent the scope from being disconnected\n * @param {boolean=} md-autoselect When present, any tabs added after the initial load will be automatically selected\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-tabs md-selected=\"selectedIndex\" >\n *   <img ng-src=\"img/angular.png\" class=\"centered\">\n *   <md-tab\n *       ng-repeat=\"tab in tabs | orderBy:predicate:reversed\"\n *       md-on-select=\"onTabSelected(tab)\"\n *       md-on-deselect=\"announceDeselected(tab)\"\n *       ng-disabled=\"tab.disabled\">\n *     <md-tab-label>\n *       {{tab.title}}\n *       <img src=\"img/removeTab.png\" ng-click=\"removeTab(tab)\" class=\"delete\">\n *     </md-tab-label>\n *     <md-tab-body>\n *       {{tab.content}}\n *     </md-tab-body>\n *   </md-tab>\n * </md-tabs>\n * </hljs>\n *\n */\nangular\n    .module('material.components.tabs')\n    .directive('mdTabs', MdTabs);\n\nfunction MdTabs () {\n  return {\n    scope:            {\n      selectedIndex: '=?mdSelected'\n    },\n    template:         function (element, attr) {\n      attr[ \"$mdTabsTemplate\" ] = element.html();\n      return '' +\n        '<md-tabs-wrapper> ' +\n          '<md-tab-data></md-tab-data> ' +\n          '<md-prev-button ' +\n              'tabindex=\"-1\" ' +\n              'role=\"button\" ' +\n              'aria-label=\"Previous Page\" ' +\n              'aria-disabled=\"{{!$mdTabsCtrl.canPageBack()}}\" ' +\n              'ng-class=\"{ \\'md-disabled\\': !$mdTabsCtrl.canPageBack() }\" ' +\n              'ng-if=\"$mdTabsCtrl.shouldPaginate\" ' +\n              'ng-click=\"$mdTabsCtrl.previousPage()\"> ' +\n            '<md-icon md-svg-icon=\"md-tabs-arrow\"></md-icon> ' +\n          '</md-prev-button> ' +\n          '<md-next-button ' +\n              'tabindex=\"-1\" ' +\n              'role=\"button\" ' +\n              'aria-label=\"Next Page\" ' +\n              'aria-disabled=\"{{!$mdTabsCtrl.canPageForward()}}\" ' +\n              'ng-class=\"{ \\'md-disabled\\': !$mdTabsCtrl.canPageForward() }\" ' +\n              'ng-if=\"$mdTabsCtrl.shouldPaginate\" ' +\n              'ng-click=\"$mdTabsCtrl.nextPage()\"> ' +\n            '<md-icon md-svg-icon=\"md-tabs-arrow\"></md-icon> ' +\n          '</md-next-button> ' +\n          '<md-tabs-canvas ' +\n              'tabindex=\"0\" ' +\n              'aria-activedescendant=\"tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}\" ' +\n              'ng-focus=\"$mdTabsCtrl.redirectFocus()\" ' +\n              'ng-class=\"{ ' +\n                  '\\'md-paginated\\': $mdTabsCtrl.shouldPaginate, ' +\n                  '\\'md-center-tabs\\': $mdTabsCtrl.shouldCenterTabs ' +\n              '}\" ' +\n              'ng-keydown=\"$mdTabsCtrl.keydown($event)\" ' +\n              'role=\"tablist\"> ' +\n            '<md-pagination-wrapper ' +\n                'ng-class=\"{ \\'md-center-tabs\\': $mdTabsCtrl.shouldCenterTabs }\" ' +\n                'md-tab-scroll=\"$mdTabsCtrl.scroll($event)\"> ' +\n              '<md-tab-item ' +\n                  'tabindex=\"-1\" ' +\n                  'class=\"md-tab\" ' +\n                  'style=\"max-width: {{ $mdTabsCtrl.maxTabWidth + \\'px\\' }}\" ' +\n                  'ng-repeat=\"tab in $mdTabsCtrl.tabs\" ' +\n                  'role=\"tab\" ' +\n                  'aria-controls=\"tab-content-{{::tab.id}}\" ' +\n                  'aria-selected=\"{{tab.isActive()}}\" ' +\n                  'aria-disabled=\"{{tab.scope.disabled || \\'false\\'}}\" ' +\n                  'ng-click=\"$mdTabsCtrl.select(tab.getIndex())\" ' +\n                  'ng-class=\"{ ' +\n                      '\\'md-active\\':    tab.isActive(), ' +\n                      '\\'md-focused\\':   tab.hasFocus(), ' +\n                      '\\'md-disabled\\':  tab.scope.disabled ' +\n                  '}\" ' +\n                  'ng-disabled=\"tab.scope.disabled\" ' +\n                  'md-swipe-left=\"$mdTabsCtrl.nextPage()\" ' +\n                  'md-swipe-right=\"$mdTabsCtrl.previousPage()\" ' +\n                  'md-tabs-template=\"::tab.label\" ' +\n                  'md-scope=\"::tab.parent\"></md-tab-item> ' +\n              '<md-ink-bar></md-ink-bar> ' +\n            '</md-pagination-wrapper> ' +\n            '<div class=\"md-visually-hidden md-dummy-wrapper\"> ' +\n              '<md-dummy-tab ' +\n                  'class=\"md-tab\" ' +\n                  'tabindex=\"-1\" ' +\n                  'id=\"tab-item-{{::tab.id}}\" ' +\n                  'role=\"tab\" ' +\n                  'aria-controls=\"tab-content-{{::tab.id}}\" ' +\n                  'aria-selected=\"{{tab.isActive()}}\" ' +\n                  'aria-disabled=\"{{tab.scope.disabled || \\'false\\'}}\" ' +\n                  'ng-focus=\"$mdTabsCtrl.hasFocus = true\" ' +\n                  'ng-blur=\"$mdTabsCtrl.hasFocus = false\" ' +\n                  'ng-repeat=\"tab in $mdTabsCtrl.tabs\" ' +\n                  'md-tabs-template=\"::tab.label\" ' +\n                  'md-scope=\"::tab.parent\"></md-dummy-tab> ' +\n            '</div> ' +\n          '</md-tabs-canvas> ' +\n        '</md-tabs-wrapper> ' +\n        '<md-tabs-content-wrapper ng-show=\"$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0\"> ' +\n          '<md-tab-content ' +\n              'id=\"tab-content-{{::tab.id}}\" ' +\n              'role=\"tabpanel\" ' +\n              'aria-labelledby=\"tab-item-{{::tab.id}}\" ' +\n              'md-swipe-left=\"$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)\" ' +\n              'md-swipe-right=\"$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)\" ' +\n              'ng-if=\"$mdTabsCtrl.hasContent\" ' +\n              'ng-repeat=\"(index, tab) in $mdTabsCtrl.tabs\" ' +\n              'ng-class=\"{ ' +\n                '\\'md-no-transition\\': $mdTabsCtrl.lastSelectedIndex == null, ' +\n                '\\'md-active\\':        tab.isActive(), ' +\n                '\\'md-left\\':          tab.isLeft(), ' +\n                '\\'md-right\\':         tab.isRight(), ' +\n                '\\'md-no-scroll\\':     $mdTabsCtrl.dynamicHeight ' +\n              '}\"> ' +\n            '<div ' +\n                'md-tabs-template=\"::tab.template\" ' +\n                'md-connected-if=\"tab.isActive()\" ' +\n                'md-scope=\"::tab.parent\" ' +\n                'ng-if=\"$mdTabsCtrl.enableDisconnect || tab.shouldRender()\"></div> ' +\n          '</md-tab-content> ' +\n        '</md-tabs-content-wrapper>';\n    },\n    controller:       'MdTabsController',\n    controllerAs:     '$mdTabsCtrl',\n    bindToController: true\n  };\n}\n\n})();\n(function(){\n\"use strict\";\n\nangular\n    .module('material.components.tabs')\n    .directive('mdTabsTemplate', MdTabsTemplate);\n\nfunction MdTabsTemplate ($compile, $mdUtil) {\n  return {\n    restrict: 'A',\n    link:     link,\n    scope:    {\n      template:     '=mdTabsTemplate',\n      connected:    '=?mdConnectedIf',\n      compileScope: '=mdScope'\n    },\n    require:  '^?mdTabs'\n  };\n  function link (scope, element, attr, ctrl) {\n    if (!ctrl) return;\n    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;\n    element.html(scope.template);\n    $compile(element.contents())(compileScope);\n    element.on('DOMSubtreeModified', function () {\n      ctrl.updatePagination();\n      ctrl.updateInkBarStyles();\n    });\n    return $mdUtil.nextTick(handleScope);\n\n    function handleScope () {\n      scope.$watch('connected', function (value) { value === false ? disconnect() : reconnect(); });\n      scope.$on('$destroy', reconnect);\n    }\n\n    function disconnect () {\n      if (ctrl.enableDisconnect) $mdUtil.disconnectScope(compileScope);\n    }\n\n    function reconnect () {\n      if (ctrl.enableDisconnect) $mdUtil.reconnectScope(compileScope);\n    }\n  }\n}\nMdTabsTemplate.$inject = [\"$compile\", \"$mdUtil\"];\n\n})();\n(function(){ \nangular.module(\"material.core\").constant(\"$MD_THEME_CSS\", \"md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover, .md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon, .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary, .md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab, .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised, .md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-contrast}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {    color: '{{background-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn, .md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab, .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent, .md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab, .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled], .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-accent[disabled], .md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}';  cursor: not-allowed; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon, .md-button.md-THEME_NAME-theme[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator, .md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled, .md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar, .md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-list.md-THEME_NAME-theme md-list-item button {  background-color: '{{background-color}}'; }  md-list.md-THEME_NAME-theme md-list-item button.md-button:not([disabled]):hover {    background-color: '{{background-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover, md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled], md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked:not([disabled]).md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-500}}' !important;  border-bottom-color: '{{warn-500}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-toast.md-THEME_NAME-theme {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }\"); \n})();\n\n\n})(window, window.angular);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-material/angular-material.js\n ** module id = 9\n ** module chunks = 0\n **/","/*!\n* angular-formly JavaScript Library v7.3.4\n*\n* @license MIT (http://license.angular-formly.com)\n*\n* built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us>\n* (ó ì_í)=óò=(ì_í ò)\n*/\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"api-check\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\", \"api-check\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _indexCommon = __webpack_require__(1);\n\n\tvar _indexCommon2 = _interopRequireDefault(_indexCommon);\n\n\texports['default'] = _indexCommon2['default'];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\tvar _providersFormlyApiCheck = __webpack_require__(4);\n\n\tvar _providersFormlyApiCheck2 = _interopRequireDefault(_providersFormlyApiCheck);\n\n\tvar _otherDocsBaseUrl = __webpack_require__(6);\n\n\tvar _otherDocsBaseUrl2 = _interopRequireDefault(_otherDocsBaseUrl);\n\n\tvar _providersFormlyUsability = __webpack_require__(7);\n\n\tvar _providersFormlyUsability2 = _interopRequireDefault(_providersFormlyUsability);\n\n\tvar _providersFormlyConfig = __webpack_require__(8);\n\n\tvar _providersFormlyConfig2 = _interopRequireDefault(_providersFormlyConfig);\n\n\tvar _providersFormlyValidationMessages = __webpack_require__(10);\n\n\tvar _providersFormlyValidationMessages2 = _interopRequireDefault(_providersFormlyValidationMessages);\n\n\tvar _servicesFormlyUtil = __webpack_require__(11);\n\n\tvar _servicesFormlyUtil2 = _interopRequireDefault(_servicesFormlyUtil);\n\n\tvar _servicesFormlyWarn = __webpack_require__(12);\n\n\tvar _servicesFormlyWarn2 = _interopRequireDefault(_servicesFormlyWarn);\n\n\tvar _directivesFormlyCustomValidation = __webpack_require__(13);\n\n\tvar _directivesFormlyCustomValidation2 = _interopRequireDefault(_directivesFormlyCustomValidation);\n\n\tvar _directivesFormlyField = __webpack_require__(14);\n\n\tvar _directivesFormlyField2 = _interopRequireDefault(_directivesFormlyField);\n\n\tvar _directivesFormlyFocus = __webpack_require__(15);\n\n\tvar _directivesFormlyFocus2 = _interopRequireDefault(_directivesFormlyFocus);\n\n\tvar _directivesFormlyForm = __webpack_require__(16);\n\n\tvar _directivesFormlyForm2 = _interopRequireDefault(_directivesFormlyForm);\n\n\tvar _runFormlyNgModelAttrsManipulator = __webpack_require__(17);\n\n\tvar _runFormlyNgModelAttrsManipulator2 = _interopRequireDefault(_runFormlyNgModelAttrsManipulator);\n\n\tvar _runFormlyCustomTags = __webpack_require__(18);\n\n\tvar _runFormlyCustomTags2 = _interopRequireDefault(_runFormlyCustomTags);\n\n\tvar ngModuleName = 'formly';\n\n\texports['default'] = ngModuleName;\n\n\tvar ngModule = _angularFix2['default'].module(ngModuleName, []);\n\n\tngModule.constant('formlyApiCheck', _providersFormlyApiCheck2['default']);\n\tngModule.constant('formlyErrorAndWarningsUrlPrefix', _otherDocsBaseUrl2['default']);\n\tngModule.constant('formlyVersion', (\"7.3.4\")); // <-- webpack variable\n\n\tngModule.provider('formlyUsability', _providersFormlyUsability2['default']);\n\tngModule.provider('formlyConfig', _providersFormlyConfig2['default']);\n\n\tngModule.factory('formlyValidationMessages', _providersFormlyValidationMessages2['default']);\n\tngModule.factory('formlyUtil', _servicesFormlyUtil2['default']);\n\tngModule.factory('formlyWarn', _servicesFormlyWarn2['default']);\n\n\tngModule.directive('formlyCustomValidation', _directivesFormlyCustomValidation2['default']);\n\tngModule.directive('formlyField', _directivesFormlyField2['default']);\n\tngModule.directive('formlyFocus', _directivesFormlyFocus2['default']);\n\tngModule.directive('formlyForm', _directivesFormlyForm2['default']);\n\n\tngModule.run(_runFormlyNgModelAttrsManipulator2['default']);\n\tngModule.run(_runFormlyCustomTags2['default']);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar angular = __webpack_require__(3);\n\n\t/* istanbul ignore next */\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\texports['default'] = angular;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\tvar _apiCheck = __webpack_require__(5);\n\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\n\tvar apiCheck = (0, _apiCheck2['default'])({\n\t  output: {\n\t    prefix: 'angular-formly:',\n\t    docsBaseUrl: __webpack_require__(6)\n\t  }\n\t});\n\n\tfunction shapeRequiredIfNot(otherProps, propChecker) {\n\t  if (!_angularFix2['default'].isArray(otherProps)) {\n\t    otherProps = [otherProps];\n\t  }\n\t  var type = 'specified if these are not specified: `' + otherProps.join(', ') + '` (otherwise it\\'s optional)';\n\n\t  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t    var propExists = obj && obj.hasOwnProperty(propName);\n\t    var otherPropsExist = otherProps.some(function (otherProp) {\n\t      return obj && obj.hasOwnProperty(otherProp);\n\t    });\n\t    if (!otherPropsExist && !propExists) {\n\t      return apiCheck.utils.getError(propName, location, type);\n\t    } else if (propExists) {\n\t      return propChecker(prop, propName, location, obj);\n\t    }\n\t  }\n\n\t  shapeRequiredIfNotDefinition.type = type;\n\t  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t}\n\n\tvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\tvar specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable;\n\n\tvar apiCheckProperty = apiCheck.func;\n\n\tvar apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n\t  warn: apiCheck.func,\n\t  'throw': apiCheck.func,\n\t  shape: apiCheck.func\n\t}));\n\n\tvar apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\n\tvar formlyWrapperType = apiCheck.shape({\n\t  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n\t  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  overwriteOk: apiCheck.bool.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional\n\t}).strict;\n\n\tvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\n\tvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\n\tvar templateManipulators = apiCheck.shape({\n\t  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n\t  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional\n\t}).strict.nullable;\n\n\tvar validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\n\tvar fieldOptionsApiShape = {\n\t  $$hashKey: apiCheck.any.optional,\n\t  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  model: modelChecker.optional,\n\t  originalModel: modelChecker.optional,\n\t  className: apiCheck.string.optional,\n\t  id: apiCheck.string.optional,\n\t  name: apiCheck.string.optional,\n\t  expressionProperties: expressionProperties.optional,\n\t  extras: apiCheck.shape({\n\t    validateOnModelChange: apiCheck.bool.optional,\n\t    skipNgModelAttrsManipulator: apiCheck.oneOfType([apiCheck.string, apiCheck.bool]).optional\n\t  }).strict.optional,\n\t  data: apiCheck.object.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  modelOptions: apiCheck.shape({\n\t    updateOn: apiCheck.string.optional,\n\t    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n\t    allowInvalid: apiCheck.bool.optional,\n\t    getterSetter: apiCheck.bool.optional,\n\t    timezone: apiCheck.string.optional\n\t  }).optional,\n\t  watcher: apiCheck.typeOrArrayOf(apiCheck.shape({\n\t    expression: formlyExpression.optional,\n\t    listener: formlyExpression\n\t  })).optional,\n\t  validators: validatorChecker.optional,\n\t  asyncValidators: validatorChecker.optional,\n\t  parsers: apiCheck.arrayOf(formlyExpression).optional,\n\t  formatters: apiCheck.arrayOf(formlyExpression).optional,\n\t  noFormControl: apiCheck.bool.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n\t  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n\t    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional\n\t  }).strict).optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n\t  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  link: apiCheck.func.optional,\n\t  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t  validation: apiCheck.shape({\n\t    show: apiCheck.bool.nullable.optional,\n\t    messages: apiCheck.objectOf(formlyExpression).optional,\n\t    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t  }).optional,\n\t  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n\t  value: apiCheck.func.optional,\n\t  runExpressions: apiCheck.func.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  initialValue: apiCheck.any.optional,\n\t  defaultValue: apiCheck.any.optional\n\t};\n\n\tvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\n\tvar formOptionsApi = apiCheck.shape({\n\t  formState: apiCheck.object.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  removeChromeAutoComplete: apiCheck.bool.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  fieldTransform: apiCheck.oneOfType([apiCheck.func, apiCheck.array]).optional,\n\t  data: apiCheck.object.optional\n\t}).strict;\n\n\tvar fieldGroup = apiCheck.shape({\n\t  $$hashKey: apiCheck.any.optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  // danger. Nested field groups wont get api-checked...\n\t  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n\t  className: apiCheck.string.optional,\n\t  options: formOptionsApi.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  data: apiCheck.object.optional,\n\t  model: modelChecker.optional,\n\t  form: apiCheck.object.optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n\t}).strict;\n\n\tvar typeOptionsDefaultOptions = _angularFix2['default'].copy(fieldOptionsApiShape);\n\ttypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\n\tvar formlyTypeOptions = apiCheck.shape({\n\t  name: apiCheck.string,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t  link: apiCheck.func.optional,\n\t  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t  'extends': apiCheck.string.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  data: apiCheck.object.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional,\n\t  overwriteOk: apiCheck.bool.optional\n\t}).strict;\n\n\t_angularFix2['default'].extend(apiCheck, {\n\t  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n\t});\n\n\texports['default'] = apiCheck;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports[\"default\"] = \"https://github.com/formly-js/angular-formly/blob/\" + (\"7.3.4\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\tmodule.exports = exports[\"default\"];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\texports['default'] = formlyUsability;\n\n\t// @ngInject\n\tfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n\t  var _this = this;\n\n\t  _angularFix2['default'].extend(this, {\n\t    getFormlyError: getFormlyError,\n\t    getFieldError: getFieldError,\n\t    checkWrapper: checkWrapper,\n\t    checkWrapperTemplate: checkWrapperTemplate,\n\t    getErrorMessage: getErrorMessage,\n\t    $get: function $get() {\n\t      return _this;\n\t    }\n\t  });\n\n\t  function getFieldError(errorInfoSlug, message, field) {\n\t    if (arguments.length < 3) {\n\t      field = message;\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message) + (' Field definition: ' + _angularFix2['default'].toJson(field)));\n\t  }\n\n\t  function getFormlyError(errorInfoSlug, message) {\n\t    if (!message) {\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message));\n\t  }\n\n\t  function getErrorMessage(errorInfoSlug, message) {\n\t    var url = '';\n\t    if (errorInfoSlug !== null) {\n\t      url = '' + formlyErrorAndWarningsUrlPrefix + errorInfoSlug;\n\t    }\n\t    return 'Formly Error: ' + message + '. ' + url;\n\t  }\n\n\t  function checkWrapper(wrapper) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyWrapperType, wrapper, {\n\t      prefix: 'formlyConfig.setWrapper',\n\t      urlSuffix: 'setwrapper-validation-failed'\n\t    });\n\t  }\n\n\t  function checkWrapperTemplate(template, additionalInfo) {\n\t    var formlyTransclude = '<formly-transclude></formly-transclude>';\n\t    if (template.indexOf(formlyTransclude) === -1) {\n\t      throw getFormlyError('Template wrapper templates must use \"' + formlyTransclude + '\" somewhere in them. ' + ('This one does not have \"<formly-transclude></formly-transclude>\" in it: ' + template) + '\\n' + ('Additional information: ' + JSON.stringify(additionalInfo)));\n\t    }\n\t  }\n\t}\n\tformlyUsability.$inject = [\"formlyApiCheck\", \"formlyErrorAndWarningsUrlPrefix\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\tvar _otherUtils = __webpack_require__(9);\n\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\n\texports['default'] = formlyConfig;\n\n\t// @ngInject\n\tfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n\t  var _this2 = this;\n\n\t  var typeMap = {};\n\t  var templateWrappersMap = {};\n\t  var defaultWrapperName = 'default';\n\t  var _this = this;\n\t  var getError = formlyUsabilityProvider.getFormlyError;\n\n\t  _angularFix2['default'].extend(this, {\n\t    setType: setType,\n\t    getType: getType,\n\t    getTypeHeritage: getTypeHeritage,\n\t    setWrapper: setWrapper,\n\t    getWrapper: getWrapper,\n\t    getWrapperByType: getWrapperByType,\n\t    removeWrapperByName: removeWrapperByName,\n\t    removeWrappersForType: removeWrappersForType,\n\t    disableWarnings: false,\n\t    extras: {\n\t      disableNgModelAttrsManipulator: false,\n\t      fieldTransform: [],\n\t      ngModelAttrsManipulatorPreferUnbound: false,\n\t      removeChromeAutoComplete: false,\n\t      defaultHideDirective: 'ng-if',\n\t      getFieldId: null\n\t    },\n\t    templateManipulators: {\n\t      preWrapper: [],\n\t      postWrapper: []\n\t    },\n\t    $get: function $get() {\n\t      return _this2;\n\t    }\n\t  });\n\n\t  function setType(options) {\n\t    if (_angularFix2['default'].isArray(options)) {\n\t      var _ret = (function () {\n\t        var allTypes = [];\n\t        _angularFix2['default'].forEach(options, function (item) {\n\t          allTypes.push(setType(item));\n\t        });\n\t        return {\n\t          v: allTypes\n\t        };\n\t      })();\n\n\t      if (typeof _ret === 'object') return _ret.v;\n\t    } else if (_angularFix2['default'].isObject(options)) {\n\t      checkType(options);\n\t      if (options['extends']) {\n\t        extendTypeOptions(options);\n\t      }\n\t      typeMap[options.name] = options;\n\t      return typeMap[options.name];\n\t    } else {\n\t      throw getError('You must provide an object or array for setType. You provided: ' + JSON.stringify(arguments));\n\t    }\n\t  }\n\n\t  function checkType(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyTypeOptions, options, {\n\t      prefix: 'formlyConfig.setType',\n\t      url: 'settype-validation-failed'\n\t    });\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, typeMap, options, 'types');\n\t    } else {\n\t      options.overwriteOk = undefined;\n\t    }\n\t  }\n\n\t  function extendTypeOptions(options) {\n\t    var extendsType = getType(options['extends'], true, options);\n\t    extendTypeControllerFunction(options, extendsType);\n\t    extendTypeLinkFunction(options, extendsType);\n\t    extendTypeDefaultOptions(options, extendsType);\n\t    _otherUtils2['default'].reverseDeepMerge(options, extendsType);\n\t    extendTemplate(options, extendsType);\n\t  }\n\n\t  function extendTemplate(options, extendsType) {\n\t    if (options.template && extendsType.templateUrl) {\n\t      delete options.templateUrl;\n\t    } else if (options.templateUrl && extendsType.template) {\n\t      delete options.template;\n\t    }\n\t  }\n\n\t  function extendTypeControllerFunction(options, extendsType) {\n\t    var extendsCtrl = extendsType.controller;\n\t    if (!_angularFix2['default'].isDefined(extendsCtrl)) {\n\t      return;\n\t    }\n\t    var optionsCtrl = options.controller;\n\t    if (_angularFix2['default'].isDefined(optionsCtrl)) {\n\t      options.controller = function ($scope, $controller) {\n\t        $controller(extendsCtrl, { $scope: $scope });\n\t        $controller(optionsCtrl, { $scope: $scope });\n\t      };\n\t      options.controller.$inject = ['$scope', '$controller'];\n\t    } else {\n\t      options.controller = extendsCtrl;\n\t    }\n\t  }\n\n\t  function extendTypeLinkFunction(options, extendsType) {\n\t    var extendsFn = extendsType.link;\n\t    if (!_angularFix2['default'].isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.link;\n\t    if (_angularFix2['default'].isDefined(optionsFn)) {\n\t      options.link = function () {\n\t        extendsFn.apply(undefined, arguments);\n\t        optionsFn.apply(undefined, arguments);\n\t      };\n\t    } else {\n\t      options.link = extendsFn;\n\t    }\n\t  }\n\n\t  function extendTypeDefaultOptions(options, extendsType) {\n\t    var extendsDO = extendsType.defaultOptions;\n\t    if (!_angularFix2['default'].isDefined(extendsDO)) {\n\t      return;\n\t    }\n\t    var optionsDO = options.defaultOptions;\n\t    var optionsDOIsFn = _angularFix2['default'].isFunction(optionsDO);\n\t    var extendsDOIsFn = _angularFix2['default'].isFunction(extendsDO);\n\t    if (extendsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t        var extendsDefaultOptions = extendsDO(opts, scope);\n\t        var mergedDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n\t        var extenderOptionsDefaultOptions = optionsDO;\n\t        if (optionsDOIsFn) {\n\t          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope);\n\t        }\n\t        _otherUtils2['default'].reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n\t        return extendsDefaultOptions;\n\t      };\n\t    } else if (optionsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t        var newDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n\t        return optionsDO(newDefaultOptions, scope);\n\t      };\n\t    }\n\t  }\n\n\t  function getType(name, throwError, errorContext) {\n\t    if (!name) {\n\t      return undefined;\n\t    }\n\t    var type = typeMap[name];\n\t    if (!type && throwError === true) {\n\t      throw getError('There is no type by the name of \"' + name + '\": ' + JSON.stringify(errorContext));\n\t    } else {\n\t      return type;\n\t    }\n\t  }\n\n\t  function getTypeHeritage(parent) {\n\t    var heritage = [];\n\t    var type = parent;\n\t    if (_angularFix2['default'].isString(type)) {\n\t      type = getType(parent);\n\t    }\n\t    parent = type['extends'];\n\t    while (parent) {\n\t      type = getType(parent);\n\t      heritage.push(type);\n\t      parent = type['extends'];\n\t    }\n\t    return heritage;\n\t  }\n\n\t  function setWrapper(_x, _x2) {\n\t    var _again = true;\n\n\t    _function: while (_again) {\n\t      var options = _x,\n\t          name = _x2;\n\t      _again = false;\n\n\t      if (_angularFix2['default'].isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (_angularFix2['default'].isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (_angularFix2['default'].isString(options)) {\n\t        _x = {\n\t          template: options,\n\t          name: name\n\t        };\n\t        _x2 = undefined;\n\t        _again = true;\n\t        continue _function;\n\t      }\n\t    }\n\t  }\n\n\t  function getOptionsTypes(options) {\n\t    if (_angularFix2['default'].isString(options.types)) {\n\t      return [options.types];\n\t    }\n\t    if (!_angularFix2['default'].isDefined(options.types)) {\n\t      return [];\n\t    } else {\n\t      return options.types;\n\t    }\n\t  }\n\n\t  function getOptionsName(options, name) {\n\t    return options.name || name || options.types.join(' ') || defaultWrapperName;\n\t  }\n\n\t  function checkWrapperAPI(options) {\n\t    formlyUsabilityProvider.checkWrapper(options);\n\t    if (options.template) {\n\t      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t    }\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n\t    } else {\n\t      delete options.overwriteOk;\n\t    }\n\t    checkWrapperTypes(options);\n\t  }\n\n\t  function checkWrapperTypes(options) {\n\t    var shouldThrow = !_angularFix2['default'].isArray(options.types) || !options.types.every(_angularFix2['default'].isString);\n\t    if (shouldThrow) {\n\t      throw getError('Attempted to create a template wrapper with types that is not a string or an array of strings');\n\t    }\n\t  }\n\n\t  function checkOverwrite(property, object, newValue, objectName) {\n\t    if (object.hasOwnProperty(property)) {\n\t      warn('overwriting-types-or-wrappers', ['Attempting to overwrite ' + property + ' on ' + objectName + ' which is currently', JSON.stringify(object[property]) + ' with ' + JSON.stringify(newValue), 'To supress this warning, specify the property \"overwriteOk: true\"'].join(' '));\n\t    }\n\t  }\n\n\t  function getWrapper(name) {\n\t    return templateWrappersMap[name || defaultWrapperName];\n\t  }\n\n\t  function getWrapperByType(type) {\n\t    /* eslint prefer-const:0 */\n\t    var wrappers = [];\n\t    for (var _name in templateWrappersMap) {\n\t      if (templateWrappersMap.hasOwnProperty(_name)) {\n\t        if (templateWrappersMap[_name].types && templateWrappersMap[_name].types.indexOf(type) !== -1) {\n\t          wrappers.push(templateWrappersMap[_name]);\n\t        }\n\t      }\n\t    }\n\t    return wrappers;\n\t  }\n\n\t  function removeWrapperByName(name) {\n\t    var wrapper = templateWrappersMap[name];\n\t    delete templateWrappersMap[name];\n\t    return wrapper;\n\t  }\n\n\t  function removeWrappersForType(type) {\n\t    var wrappers = getWrapperByType(type);\n\t    if (!wrappers) {\n\t      return undefined;\n\t    }\n\t    if (!_angularFix2['default'].isArray(wrappers)) {\n\t      return removeWrapperByName(wrappers.name);\n\t    } else {\n\t      wrappers.forEach(function (wrapper) {\n\t        return removeWrapperByName(wrapper.name);\n\t      });\n\t      return wrappers;\n\t    }\n\t  }\n\n\t  function warn() {\n\t    if (!_this.disableWarnings && console.warn) {\n\t      /* eslint no-console:0 */\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift('Formly Warning:');\n\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t      console.warn.apply(console, _toConsumableArray(args));\n\t    }\n\t  }\n\t}\n\tformlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyErrorAndWarningsUrlPrefix\", \"formlyApiCheck\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\texports['default'] = {\n\t  formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName, arrayify: arrayify, extendFunction: extendFunction, extendArray: extendArray, startsWith: startsWith, contains: contains\n\t};\n\n\tfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n\t  if (_angularFix2['default'].isFunction(expression)) {\n\t    return expression($viewValue, $modelValue, scope, extraLocals);\n\t  } else {\n\t    return scope.$eval(expression, _angularFix2['default'].extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n\t  }\n\t}\n\n\tfunction getFieldId(formId, options, index) {\n\t  if (options.id) {\n\t    return options.id;\n\t  }\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = 'template';\n\t  } else if (!type && options.templateUrl) {\n\t    type = 'templateUrl';\n\t  }\n\n\t  return [formId, type, options.key, index].join('_');\n\t}\n\n\tfunction reverseDeepMerge(dest) {\n\t  _angularFix2['default'].forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    _angularFix2['default'].forEach(src, function (val, prop) {\n\t      if (!_angularFix2['default'].isDefined(dest[prop])) {\n\t        dest[prop] = _angularFix2['default'].copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t  return dest;\n\t}\n\n\tfunction objAndSameType(obj1, obj2) {\n\t  return _angularFix2['default'].isObject(obj1) && _angularFix2['default'].isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\n\t// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = _angularFix2['default'].element(el);\n\t  }\n\n\t  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\n\tfunction arrayify(obj) {\n\t  if (obj && !_angularFix2['default'].isArray(obj)) {\n\t    obj = [obj];\n\t  } else if (!obj) {\n\t    obj = [];\n\t  }\n\t  return obj;\n\t}\n\n\tfunction extendFunction() {\n\t  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n\t    fns[_key] = arguments[_key];\n\t  }\n\n\t  return function extendedFunction() {\n\t    var args = arguments;\n\t    fns.forEach(function (fn) {\n\t      return fn.apply(null, args);\n\t    });\n\t  };\n\t}\n\n\tfunction extendArray(primary, secondary, property) {\n\t  if (property) {\n\t    primary = primary[property];\n\t    secondary = secondary[property];\n\t  }\n\t  if (secondary && primary) {\n\t    _angularFix2['default'].forEach(secondary, function (item) {\n\t      if (primary.indexOf(item) === -1) {\n\t        primary.push(item);\n\t      }\n\t    });\n\t    return primary;\n\t  } else if (secondary) {\n\t    return secondary;\n\t  } else {\n\t    return primary;\n\t  }\n\t}\n\n\tfunction startsWith(str, search) {\n\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t    return str.length >= search.length && str.substring(0, search.length) === search;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n\tfunction contains(str, search) {\n\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t    return str.length >= search.length && str.indexOf(search) !== -1;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports['default'] = formlyValidationMessages;\n\n\t// @ngInject\n\tfunction formlyValidationMessages() {\n\n\t  var validationMessages = {\n\t    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t    addStringMessage: addStringMessage,\n\t    messages: {}\n\t  };\n\n\t  return validationMessages;\n\n\t  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t  }\n\n\t  function addStringMessage(name, string) {\n\t    validationMessages.messages[name] = function () {\n\t      return string;\n\t    };\n\t  }\n\n\t  function templateOptionValue(prop, prefix, suffix, alternate) {\n\t    return function getValidationMessage(viewValue, modelValue, scope) {\n\t      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n\t        return prefix + ' ' + scope.options.templateOptions[prop] + ' ' + suffix;\n\t      } else {\n\t        return alternate;\n\t      }\n\t    };\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _otherUtils = __webpack_require__(9);\n\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\n\texports['default'] = formlyUtil;\n\n\t// @ngInject\n\tfunction formlyUtil() {\n\t  return _otherUtils2['default'];\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n\texports['default'] = formlyWarn;\n\n\t// @ngInject\n\tfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t  return function warn() {\n\t    if (!formlyConfig.disableWarnings) {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift('Formly Warning:');\n\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t      $log.warn.apply($log, _toConsumableArray(args));\n\t    }\n\t  };\n\t}\n\tformlyWarn.$inject = [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\texports['default'] = formlyCustomValidation;\n\n\t// @ngInject\n\tfunction formlyCustomValidation(formlyUtil) {\n\t  return {\n\t    restrict: 'A',\n\t    require: 'ngModel',\n\t    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n\t      var opts = scope.options;\n\t      opts.validation.messages = opts.validation.messages || {};\n\t      _angularFix2['default'].forEach(opts.validation.messages, function (message, key) {\n\t        opts.validation.messages[key] = function () {\n\t          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t        };\n\t      });\n\n\t      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n\t      _angularFix2['default'].forEach(opts.validators, _angularFix2['default'].bind(null, addValidatorToPipeline, false));\n\t      _angularFix2['default'].forEach(opts.asyncValidators, _angularFix2['default'].bind(null, addValidatorToPipeline, true));\n\n\t      function addValidatorToPipeline(isAsync, validator, name) {\n\t        setupMessage(validator, name);\n\t        validator = _angularFix2['default'].isObject(validator) ? validator.expression : validator;\n\t        if (useNewValidatorsApi) {\n\t          setupWithValidators(validator, name, isAsync);\n\t        } else {\n\t          setupWithParsers(validator, name, isAsync);\n\t        }\n\t      }\n\n\t      function setupMessage(validator, name) {\n\t        var message = validator.message;\n\t        if (message) {\n\t          opts.validation.messages[name] = function () {\n\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t          };\n\t        }\n\t      }\n\n\t      function setupWithValidators(validator, name, isAsync) {\n\t        var validatorCollection = isAsync ? '$asyncValidators' : '$validators';\n\n\t        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n\t          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t        };\n\t      }\n\n\t      function setupWithParsers(validator, name, isAsync) {\n\t        var inFlightValidator = undefined;\n\t        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n\t          var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t          if (isAsync) {\n\t            ctrl.$pending = ctrl.$pending || {};\n\t            ctrl.$pending[name] = true;\n\t            inFlightValidator = isValid;\n\t            isValid.then(function () {\n\t              if (inFlightValidator === isValid) {\n\t                ctrl.$setValidity(name, true);\n\t              }\n\t            })['catch'](function () {\n\t              if (inFlightValidator === isValid) {\n\t                ctrl.$setValidity(name, false);\n\t              }\n\t            })['finally'](function () {\n\t              var $pending = ctrl.$pending || {};\n\t              if (Object.keys($pending).length === 1) {\n\t                delete ctrl.$pending;\n\t              } else {\n\t                delete ctrl.$pending[name];\n\t              }\n\t            });\n\t          } else {\n\t            ctrl.$setValidity(name, isValid);\n\t          }\n\t          return viewValue;\n\t        });\n\t      }\n\t    }\n\t  };\n\t}\n\tformlyCustomValidation.$inject = [\"formlyUtil\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\tvar _apiCheck = __webpack_require__(5);\n\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\n\texports['default'] = formlyField;\n\n\t/**\n\t * @ngdoc directive\n\t * @name formlyField\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t  var arrayify = formlyUtil.arrayify;\n\n\t  FormlyFieldController.$inject = [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", \"formlyValidationMessages\"];\n\t  return {\n\t    restrict: 'AE',\n\t    transclude: true,\n\t    require: '?^formlyForm',\n\t    scope: {\n\t      options: '=',\n\t      model: '=',\n\t      originalModel: '=?',\n\t      formId: '@', // TODO remove formId in a breaking release\n\t      index: '=?',\n\t      fields: '=?',\n\t      formState: '=?',\n\t      formOptions: '=?',\n\t      form: '=?' },\n\t    // TODO require form in a breaking release\n\t    controller: FormlyFieldController,\n\t    link: fieldLink\n\t  };\n\n\t  // @ngInject\n\t  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n\t    /* eslint max-statements:[2, 31] */\n\t    if ($scope.options.fieldGroup) {\n\t      setupFieldGroup();\n\t      return;\n\t    }\n\n\t    var fieldType = getFieldType($scope.options);\n\t    simplifyLife($scope.options);\n\t    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n\t    extendOptionsWithDefaults($scope.options, $scope.index);\n\t    checkApi($scope.options);\n\t    // set field id to link labels and fields\n\n\t    // initalization\n\t    setFieldIdAndName();\n\t    setDefaultValue();\n\t    setInitialValue();\n\t    runExpressions();\n\t    addValidationMessages($scope.options);\n\t    invokeControllers($scope, $scope.options, fieldType);\n\n\t    // function definitions\n\t    function runExpressions() {\n\t      // must run on next tick to make sure that the current value is correct.\n\t      return $timeout(function runExpressionsOnNextTick() {\n\t        var field = $scope.options;\n\t        var currentValue = valueGetterSetter();\n\t        _angularFix2['default'].forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t          var setter = $parse(prop).assign;\n\t          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n\t          promise.then(function setFieldValue(value) {\n\t            setter(field, value);\n\t          });\n\t        });\n\t      }, 0, false);\n\t    }\n\n\t    function valueGetterSetter(newVal) {\n\t      if (!$scope.model || !$scope.options.key) {\n\t        return undefined;\n\t      }\n\t      if (_angularFix2['default'].isDefined(newVal)) {\n\t        parseSet($scope.options.key, $scope.model, newVal);\n\t      }\n\t      return parseGet($scope.options.key, $scope.model);\n\t    }\n\n\t    function parseSet(key, model, newVal) {\n\t      // If either of these are null/undefined then just return undefined\n\t      if (!key || !model) {\n\t        return;\n\t      }\n\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t      if (_angularFix2['default'].isNumber(key)) {\n\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t        model[key] = newVal;\n\t      } else {\n\t        var setter = $parse($scope.options.key).assign;\n\t        if (setter) {\n\t          setter($scope.model, newVal);\n\t        }\n\t      }\n\t    }\n\n\t    function parseGet(key, model) {\n\t      // If either of these are null/undefined then just return undefined\n\t      if (!key || !model) {\n\t        return undefined;\n\t      }\n\n\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t      if (_angularFix2['default'].isNumber(key)) {\n\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t        return model[key];\n\t      } else {\n\t        return $parse(key)(model);\n\t      }\n\t    }\n\n\t    function simplifyLife(options) {\n\t      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t      formlyUtil.reverseDeepMerge(options, {\n\t        originalModel: options.model,\n\t        extras: {},\n\t        data: {},\n\t        templateOptions: {},\n\t        validation: {}\n\t      });\n\t      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t      $scope.to = $scope.options.templateOptions;\n\t      $scope.formOptions = $scope.formOptions || {};\n\t    }\n\n\t    function setFieldIdAndName() {\n\t      if (_angularFix2['default'].isFunction(formlyConfig.extras.getFieldId)) {\n\t        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n\t      } else {\n\t        var formName = $scope.form && $scope.form.$name || $scope.formId;\n\t        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n\t      }\n\t      $scope.options.id = $scope.id;\n\t      $scope.name = $scope.options.name || $scope.options.id;\n\t      $scope.options.name = $scope.name;\n\t    }\n\n\t    function setDefaultValue() {\n\t      if (_angularFix2['default'].isDefined($scope.options.defaultValue) && !_angularFix2['default'].isDefined(parseGet($scope.options.key, $scope.model))) {\n\t        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue);\n\t      }\n\t    }\n\n\t    function setInitialValue() {\n\t      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model);\n\t    }\n\n\t    function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t      if (type) {\n\t        mergeOptions(options, type.defaultOptions);\n\t      }\n\t      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t      _angularFix2['default'].forEach(properOrder, function (typeName) {\n\t        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t      });\n\t    }\n\n\t    function mergeOptions(options, extraOptions) {\n\t      if (extraOptions) {\n\t        if (_angularFix2['default'].isFunction(extraOptions)) {\n\t          extraOptions = extraOptions(options, $scope);\n\t        }\n\t        formlyUtil.reverseDeepMerge(options, extraOptions);\n\t      }\n\t    }\n\n\t    function extendOptionsWithDefaults(options, index) {\n\t      var key = options.key || index || 0;\n\t      _angularFix2['default'].extend(options, {\n\t        // attach the key in case the formly-field directive is used directly\n\t        key: key,\n\t        value: options.value || valueGetterSetter,\n\t        runExpressions: runExpressions,\n\t        resetModel: resetModel,\n\t        updateInitialValue: updateInitialValue\n\t      });\n\t    }\n\n\t    function resetModel() {\n\t      parseSet($scope.options.key, $scope.model, $scope.options.initialValue);\n\t      if ($scope.options.formControl) {\n\t        if (_angularFix2['default'].isArray($scope.options.formControl)) {\n\t          _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n\t            resetFormControl(formControl, true);\n\t          });\n\t        } else {\n\t          resetFormControl($scope.options.formControl);\n\t        }\n\t      }\n\t    }\n\n\t    function resetFormControl(formControl, isMultiNgModel) {\n\t      if (!isMultiNgModel) {\n\t        formControl.$setViewValue(parseGet($scope.options.key, $scope.model));\n\t      }\n\n\t      formControl.$render();\n\t      formControl.$setUntouched && formControl.$setUntouched();\n\t      formControl.$setPristine();\n\n\t      // To prevent breaking change requiring a digest to reset $viewModel\n\t      if (!$scope.$root.$$phase) {\n\t        $scope.$digest();\n\t      }\n\t    }\n\n\t    function updateInitialValue() {\n\t      $scope.options.initialValue = parseGet($scope.options.key, $scope.model);\n\t    }\n\n\t    function addValidationMessages(options) {\n\t      options.validation.messages = options.validation.messages || {};\n\t      _angularFix2['default'].forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n\t        if (!options.validation.messages[name]) {\n\t          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n\t            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t          };\n\t        }\n\t      });\n\t    }\n\n\t    function invokeControllers(scope) {\n\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t      var type = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n\t      _angularFix2['default'].forEach([type.controller, options.controller], function (controller) {\n\t        if (controller) {\n\t          $controller(controller, { $scope: scope });\n\t        }\n\t      });\n\t    }\n\n\t    function setupFieldGroup() {\n\t      $scope.options.options = $scope.options.options || {};\n\t      $scope.options.options.formState = $scope.formState;\n\t      $scope.to = $scope.options.templateOptions;\n\t    }\n\t  }\n\n\t  // link function\n\t  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n\t    if (scope.options.fieldGroup) {\n\t      setFieldGroupTemplate();\n\t      return;\n\t    }\n\n\t    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n\t    if (!formlyFormCtrl && scope.options.model) {\n\t      scope.$watch('options.model', function () {\n\t        return scope.options.runExpressions();\n\t      }, true);\n\t    }\n\n\t    addAttributes();\n\t    addClasses();\n\n\t    var type = getFieldType(scope.options);\n\t    var args = arguments;\n\t    var thusly = this;\n\t    var fieldCount = 0;\n\t    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n\t    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)['catch'](function (error) {\n\t      formlyWarn('there-was-a-problem-setting-the-template-for-this-field', 'There was a problem setting the template for this field ', scope.options, error);\n\t    });\n\n\t    function setFieldGroupTemplate() {\n\t      checkFieldGroupApi(scope.options);\n\t      el.addClass('formly-field-group');\n\t      var extraAttributes = '';\n\t      if (scope.options.elementAttributes) {\n\t        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n\t          return key + '=\"' + scope.options.elementAttributes[key] + '\"';\n\t        }).join(' ');\n\t      }\n\t      var modelValue = 'model';\n\t      scope.options.form = scope.form;\n\t      if (scope.options.key) {\n\t        modelValue = 'model[\\'' + scope.options.key + '\\']';\n\t      }\n\t      getTemplate('\\n          <formly-form model=\"' + modelValue + '\"\\n                       fields=\"options.fieldGroup\"\\n                       options=\"options.options\"\\n                       form=\"options.form\"\\n                       class=\"' + scope.options.className + '\"\\n                       ' + extraAttributes + '\\n                       is-field-group>\\n          </formly-form>\\n        ').then(transcludeInWrappers(scope.options, scope.formOptions)).then(setElementTemplate);\n\t    }\n\n\t    function addAttributes() {\n\t      if (scope.options.elementAttributes) {\n\t        el.attr(scope.options.elementAttributes);\n\t      }\n\t    }\n\n\t    function addClasses() {\n\t      if (scope.options.className) {\n\t        el.addClass(scope.options.className);\n\t      }\n\t      if (scope.options.type) {\n\t        el.addClass('formly-field-' + scope.options.type);\n\t      }\n\t    }\n\n\t    function setElementTemplate(templateString) {\n\t      el.html(asHtml(templateString));\n\t      $compile(el.contents())(scope);\n\t      return templateString;\n\t    }\n\n\t    function watchFormControl(templateString) {\n\t      var stopWatchingShowError = _angularFix2['default'].noop;\n\t      if (scope.options.noFormControl) {\n\t        return;\n\t      }\n\t      var templateEl = _angularFix2['default'].element('<div>' + templateString + '</div>');\n\t      var ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\n\t      if (ngModelNodes.length) {\n\t        _angularFix2['default'].forEach(ngModelNodes, function (ngModelNode) {\n\t          fieldCount++;\n\t          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n\t        });\n\t      }\n\n\t      function watchFieldNameOrExistence(name) {\n\t        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n\t        var nameExpression = nameExpressionRegex.exec(name);\n\t        if (nameExpression) {\n\t          name = $interpolate(name)(scope);\n\t        }\n\t        watchFieldExistence(name);\n\t      }\n\n\t      function watchFieldExistence(name) {\n\t        scope.$watch('form[\"' + name + '\"]', function formControlChange(formControl) {\n\t          if (formControl) {\n\t            if (fieldCount > 1) {\n\t              if (!scope.options.formControl) {\n\t                scope.options.formControl = [];\n\t              }\n\t              scope.options.formControl.push(formControl);\n\t            } else {\n\t              scope.options.formControl = formControl;\n\t            }\n\t            scope.fc = scope.options.formControl; // shortcut for template authors\n\t            stopWatchingShowError();\n\t            addShowMessagesWatcher();\n\t            addParsers();\n\t            addFormatters();\n\t          }\n\t        });\n\t      }\n\n\t      function addShowMessagesWatcher() {\n\t        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n\t          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n\t          var options = scope.options;\n\t          var formControls = arrayify(scope.fc);\n\t          if (!formControls.some(function (fc) {\n\t            return fc.$invalid;\n\t          })) {\n\t            return false;\n\t          } else if (typeof options.validation.show === 'boolean') {\n\t            return options.validation.show;\n\t          } else if (customExpression) {\n\t            return formControls.some(function (fc) {\n\t              return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n\t            });\n\t          } else {\n\t            return formControls.some(function (fc) {\n\t              var noTouchedButDirty = _angularFix2['default'].isUndefined(fc.$touched) && fc.$dirty;\n\t              return fc.$touched || noTouchedButDirty;\n\t            });\n\t          }\n\t        }, function onShowValidationChange(show) {\n\t          scope.options.validation.errorExistsAndShouldBeVisible = show;\n\t          scope.showError = show; // shortcut for template authors\n\t        });\n\t      }\n\n\t      function addParsers() {\n\t        setParsersOrFormatters('parsers');\n\t      }\n\n\t      function addFormatters() {\n\t        setParsersOrFormatters('formatters');\n\t        var ctrl = scope.fc;\n\t        var formWasPristine = scope.form.$pristine;\n\t        if (scope.options.formatters) {\n\t          (function () {\n\t            var value = ctrl.$modelValue;\n\t            ctrl.$formatters.forEach(function (formatter) {\n\t              value = formatter(value);\n\t            });\n\n\t            ctrl.$setViewValue(value);\n\t            ctrl.$render();\n\t            ctrl.$setPristine();\n\t            if (formWasPristine) {\n\t              scope.form.$setPristine();\n\t            }\n\t          })();\n\t        }\n\t      }\n\n\t      function setParsersOrFormatters(which) {\n\t        var originalThingProp = 'originalParser';\n\t        if (which === 'formatters') {\n\t          originalThingProp = 'originalFormatter';\n\t        }\n\n\t        // init with type's parsers\n\t        var things = getThingsFromType(type);\n\n\t        // get optionsTypes things\n\t        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes));\n\n\t        // get field's things\n\t        things = formlyUtil.extendArray(things, scope.options[which]);\n\n\t        // convert things into formlyExpression things\n\t        _angularFix2['default'].forEach(things, function (thing, index) {\n\t          things[index] = getFormlyExpressionThing(thing);\n\t        });\n\n\t        var ngModelCtrls = scope.fc;\n\t        if (!_angularFix2['default'].isArray(ngModelCtrls)) {\n\t          ngModelCtrls = [ngModelCtrls];\n\t        }\n\n\t        _angularFix2['default'].forEach(ngModelCtrls, function (ngModelCtrl) {\n\t          var _ngModelCtrl;\n\n\t          ngModelCtrl['$' + which] = (_ngModelCtrl = ngModelCtrl['$' + which]).concat.apply(_ngModelCtrl, _toConsumableArray(things));\n\t        });\n\n\t        function getThingsFromType(theType) {\n\t          if (!theType) {\n\t            return [];\n\t          }\n\t          if (_angularFix2['default'].isString(theType)) {\n\t            theType = formlyConfig.getType(theType, true, scope.options);\n\t          }\n\t          var typeThings = [];\n\n\t          // get things from parent\n\t          if (theType['extends']) {\n\t            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType['extends']));\n\t          }\n\n\t          // get own type's things\n\t          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []));\n\n\t          // get things from optionsTypes\n\t          typeThings = formlyUtil.extendArray(typeThings, getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType)));\n\n\t          return typeThings;\n\t        }\n\n\t        function getThingsFromOptionsTypes() {\n\t          var optionsTypes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n\t          var optionsTypesThings = [];\n\t          _angularFix2['default'].forEach(_angularFix2['default'].copy(arrayify(optionsTypes)).reverse(), function (optionsTypeName) {\n\t            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName));\n\t          });\n\t          return optionsTypesThings;\n\t        }\n\n\t        function getFormlyExpressionThing(thing) {\n\t          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing;\n\t          return formlyExpressionParserOrFormatterFunction;\n\n\t          function formlyExpressionParserOrFormatterFunction($viewValue) {\n\t            var $modelValue = scope.options.value();\n\t            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue);\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    function callLinkFunctions() {\n\t      if (type && type.link) {\n\t        type.link.apply(thusly, args);\n\t      }\n\t      if (scope.options.link) {\n\t        scope.options.link.apply(thusly, args);\n\t      }\n\t    }\n\n\t    function runManipulators(manipulators) {\n\t      return function runManipulatorsOnTemplate(templateToManipulate) {\n\t        var chain = $q.when(templateToManipulate);\n\t        _angularFix2['default'].forEach(manipulators, function (manipulator) {\n\t          chain = chain.then(function (template) {\n\t            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t              return _angularFix2['default'].isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t            });\n\t          });\n\t        });\n\t        return chain;\n\t      };\n\t    }\n\t  }\n\n\t  // sort-of stateless util functions\n\t  function asHtml(el) {\n\t    var wrapper = _angularFix2['default'].element('<a></a>');\n\t    return wrapper.append(el).html();\n\t  }\n\n\t  function getFieldType(options) {\n\t    return options.type && formlyConfig.getType(options.type);\n\t  }\n\n\t  function getManipulators(options, formOptions) {\n\t    var preWrapper = [];\n\t    var postWrapper = [];\n\t    addManipulators(options.templateManipulators);\n\t    addManipulators(formOptions.templateManipulators);\n\t    addManipulators(formlyConfig.templateManipulators);\n\t    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\n\t    function addManipulators(manipulators) {\n\t      /* eslint-disable */ // it doesn't understand this :-(\n\n\t      var _ref = manipulators || {};\n\n\t      var _ref$preWrapper = _ref.preWrapper;\n\t      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n\t      var _ref$postWrapper = _ref.postWrapper;\n\t      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\n\t      preWrapper = preWrapper.concat(pre);\n\t      postWrapper = postWrapper.concat(post);\n\t      /* eslint-enable */\n\t    }\n\t  }\n\n\t  function getFieldTemplate(options) {\n\t    function fromOptionsOrType(key, fieldType) {\n\t      if (_angularFix2['default'].isDefined(options[key])) {\n\t        return options[key];\n\t      } else if (fieldType && _angularFix2['default'].isDefined(fieldType[key])) {\n\t        return fieldType[key];\n\t      }\n\t    }\n\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    var template = fromOptionsOrType('template', type);\n\t    var templateUrl = fromOptionsOrType('templateUrl', type);\n\t    if (_angularFix2['default'].isUndefined(template) && !templateUrl) {\n\t      throw formlyUsability.getFieldError('type-type-has-no-template', 'Type \\'' + options.type + '\\' has no template. On element:', options);\n\t    }\n\n\t    return getTemplate(templateUrl || template, _angularFix2['default'].isUndefined(template), options);\n\t  }\n\n\t  function getTemplate(template, isUrl, options) {\n\t    var templatePromise = undefined;\n\t    if (_angularFix2['default'].isFunction(template)) {\n\t      templatePromise = $q.when(template(options));\n\t    } else {\n\t      templatePromise = $q.when(template);\n\t    }\n\n\t    if (!isUrl) {\n\t      return templatePromise;\n\t    } else {\n\t      var _ret2 = (function () {\n\t        var httpOptions = { cache: $templateCache };\n\t        return {\n\t          v: templatePromise.then(function (url) {\n\t            return $http.get(url, httpOptions);\n\t          }).then(function (response) {\n\t            return response.data;\n\t          })['catch'](function handleErrorGettingATemplate(error) {\n\t            formlyWarn('problem-loading-template-for-templateurl', 'Problem loading template for ' + template, error);\n\t          })\n\t        };\n\t      })();\n\n\t      if (typeof _ret2 === 'object') return _ret2.v;\n\t    }\n\t  }\n\n\t  function transcludeInWrappers(options, formOptions) {\n\t    var wrapper = getWrapperOption(options, formOptions);\n\n\t    return function transcludeTemplate(template) {\n\t      if (!wrapper.length) {\n\t        return $q.when(template);\n\t      }\n\n\t      wrapper.forEach(function (aWrapper) {\n\t        formlyUsability.checkWrapper(aWrapper, options);\n\t        runApiCheck(aWrapper, options);\n\t      });\n\t      var promises = wrapper.map(function (w) {\n\t        return getTemplate(w.template || w.templateUrl, !w.template);\n\t      });\n\t      return $q.all(promises).then(function (wrappersTemplates) {\n\t        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t        });\n\t        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t        var totalWrapper = wrappersTemplates.shift();\n\t        wrappersTemplates.forEach(function (wrapperTemplate) {\n\t          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t        });\n\t        return doTransclusion(totalWrapper, template);\n\t      });\n\t    };\n\t  }\n\n\t  function doTransclusion(wrapper, template) {\n\t    var superWrapper = _angularFix2['default'].element('<a></a>'); // this allows people not have to have a single root in wrappers\n\t    superWrapper.append(wrapper);\n\t    var transcludeEl = superWrapper.find('formly-transclude');\n\t    if (!transcludeEl.length) {\n\t      // try it using our custom find function\n\t      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n\t    }\n\t    transcludeEl.replaceWith(template);\n\t    return superWrapper.html();\n\t  }\n\n\t  function getWrapperOption(options, formOptions) {\n\t    /* eslint complexity:[2, 6] */\n\t    var wrapper = options.wrapper;\n\t    // explicit null means no wrapper\n\t    if (wrapper === null) {\n\t      return [];\n\t    }\n\n\t    // nothing specified means use the default wrapper for the type\n\t    if (!wrapper) {\n\t      // get all wrappers that specify they apply to this type\n\t      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t    } else {\n\t      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t    }\n\n\t    // get all wrappers for that the type specified that it uses.\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    if (type && type.wrapper) {\n\t      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(typeWrappers);\n\t    }\n\n\t    // add form wrappers\n\t    if (formOptions.wrapper) {\n\t      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(formWrappers);\n\t    }\n\n\t    // add the default wrapper last\n\t    var defaultWrapper = formlyConfig.getWrapper();\n\t    if (defaultWrapper) {\n\t      wrapper.push(defaultWrapper);\n\t    }\n\t    return wrapper;\n\t  }\n\n\t  function checkApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyFieldOptions, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t    // validate with the type\n\t    var type = options.type && formlyConfig.getType(options.type);\n\t    if (type) {\n\t      runApiCheck(type, options, true);\n\t    }\n\t    if (options.expressionProperties && options.expressionProperties.hide) {\n\t      formlyWarn('dont-use-expressionproperties.hide-use-hideexpression-instead', 'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead', options);\n\t    }\n\t  }\n\n\t  function checkFieldGroupApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.fieldGroup, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t  }\n\n\t  function runApiCheck(_ref2, options, forType) {\n\t    var apiCheck = _ref2.apiCheck;\n\t    var apiCheckInstance = _ref2.apiCheckInstance;\n\t    var apiCheckFunction = _ref2.apiCheckFunction;\n\t    var apiCheckOptions = _ref2.apiCheckOptions;\n\n\t    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options);\n\t    if (forType && options.type) {\n\t      _angularFix2['default'].forEach(formlyConfig.getTypeHeritage(options.type), function (type) {\n\t        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options);\n\t      });\n\t    }\n\t  }\n\n\t  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n\t    /* eslint complexity:[2, 9] */\n\t    if (!apiCheck) {\n\t      return;\n\t    }\n\t    var instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck;\n\t    if (instance.config.disabled || _apiCheck2['default'].globalConfig.disabled) {\n\t      return;\n\t    }\n\t    var fn = apiCheckFunction || 'warn';\n\t    // this is the new API\n\t    var checkerObjects = apiCheck(instance);\n\t    _angularFix2['default'].forEach(checkerObjects, function (shape, name) {\n\t      var checker = instance.shape(shape);\n\t      var checkOptions = _angularFix2['default'].extend({\n\t        prefix: 'formly-field type ' + options.type + ' for property ' + name,\n\t        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n\t      }, apiCheckOptions);\n\t      instance[fn](checker, options[name], checkOptions);\n\t    });\n\t  }\n\t}\n\tformlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"$interpolate\", \"formlyConfig\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\n\t// Stateless util functions\n\tfunction getDefaultOptionsOptionsTypes(type) {\n\t  return getDefaultOptionsProperty(type, 'optionsTypes', []);\n\t}\n\n\tfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n\t  return type.defaultOptions && type.defaultOptions[prop] || defaultValue;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports['default'] = formlyFocus;\n\n\t// @ngInject\n\tfunction formlyFocus($timeout, $document) {\n\t  return {\n\t    restrict: 'A',\n\t    link: function formlyFocusLink(scope, element, attrs) {\n\t      var previousEl = null;\n\t      var el = element[0];\n\t      var doc = $document[0];\n\t      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n\t        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n\t        if (value === 'true') {\n\t          $timeout(function setElementFocus() {\n\t            previousEl = doc.activeElement;\n\t            el.focus();\n\t          }, ~ ~attrs.focusWait);\n\t        } else if (value === 'false') {\n\t          if (doc.activeElement === el) {\n\t            el.blur();\n\t            if (attrs.hasOwnProperty('refocus') && previousEl) {\n\t              previousEl.focus();\n\t            }\n\t          }\n\t        }\n\t      });\n\t    }\n\t  };\n\t}\n\tformlyFocus.$inject = [\"$timeout\", \"$document\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar _slice = Array.prototype.slice;\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\texports['default'] = formlyForm;\n\n\t/**\n\t * @ngdoc directive\n\t * @name formlyForm\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n\t  var currentFormId = 1;\n\t  FormlyFormController.$inject = [\"$scope\", \"formlyApiCheck\", \"formlyUtil\"];\n\t  return {\n\t    restrict: 'AE',\n\t    template: formlyFormGetTemplate,\n\t    replace: true,\n\t    transclude: true,\n\t    scope: {\n\t      fields: '=',\n\t      model: '=',\n\t      form: '=?',\n\t      options: '=?'\n\t    },\n\t    controller: FormlyFormController,\n\t    link: formlyFormLink\n\t  };\n\n\t  function formlyFormGetTemplate(el, attrs) {\n\t    var rootEl = getRootEl();\n\t    var fieldRootEl = getFieldRootEl();\n\t    var formId = 'formly_' + currentFormId++;\n\t    var parentFormAttributes = '';\n\t    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n\t      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n\t    }\n\t    return '\\n        <' + rootEl + ' class=\"formly\"\\n                 name=\"' + getFormName() + '\"\\n                 role=\"form\" ' + parentFormAttributes + '>\\n          <' + fieldRootEl + ' formly-field\\n               ng-repeat=\"field in fields ' + getTrackBy() + '\"\\n               ' + getHideDirective() + '=\"!field.hide\"\\n               class=\"formly-field\"\\n               options=\"field\"\\n               model=\"field.model || model\"\\n               original-model=\"model\"\\n               fields=\"fields\"\\n               form=\"theFormlyForm\"\\n               form-id=\"' + getFormName() + '\"\\n               form-state=\"options.formState\"\\n               form-options=\"options\"\\n               index=\"$index\">\\n          </' + fieldRootEl + '>\\n          <div ng-transclude class=\"' + getTranscludeClass() + '\"></div>\\n        </' + rootEl + '>\\n      ';\n\n\t    function getRootEl() {\n\t      return attrs.rootEl || 'ng-form';\n\t    }\n\n\t    function getFieldRootEl() {\n\t      return attrs.fieldRootEl || 'div';\n\t    }\n\n\t    function getHideDirective() {\n\t      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n\t    }\n\n\t    function getTrackBy() {\n\t      if (!attrs.trackBy) {\n\t        return '';\n\t      } else {\n\t        return 'track by ' + attrs.trackBy;\n\t      }\n\t    }\n\n\t    function getFormName() {\n\t      var formName = formId;\n\t      var bindName = attrs.bindName;\n\t      if (bindName) {\n\t        if (_angularFix2['default'].version.minor < 3) {\n\t          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n\t        }\n\t        // we can do a one-time binding here because we know we're in 1.3.x territory\n\t        formName = $interpolate.startSymbol() + '::\\'formly_\\' + ' + bindName + $interpolate.endSymbol();\n\t      }\n\t      return formName;\n\t    }\n\n\t    function getTranscludeClass() {\n\t      return attrs.transcludeClass || '';\n\t    }\n\n\t    function copyAttributes(attributes) {\n\t      var excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class', 'data-model', 'data-form', 'data-fields', 'data-options', 'data-name'];\n\t      var arrayAttrs = [];\n\t      _angularFix2['default'].forEach(attributes, function (_ref) {\n\t        var nodeName = _ref.nodeName;\n\t        var value = _ref.value;\n\n\t        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n\t          arrayAttrs.push(toKebabCase(nodeName) + '=\"' + value + '\"');\n\t        }\n\t      });\n\t      return arrayAttrs.join(' ');\n\t    }\n\t  }\n\n\t  // @ngInject\n\t  function FormlyFormController($scope, formlyApiCheck, formlyUtil) {\n\t    setupOptions();\n\t    $scope.model = $scope.model || {};\n\t    setupFields();\n\n\t    // watch the model and evaluate watch expressions that depend on it.\n\t    $scope.$watch('model', onModelOrFormStateChange, true);\n\t    if ($scope.options.formState) {\n\t      $scope.$watch('options.formState', onModelOrFormStateChange, true);\n\t    }\n\n\t    function onModelOrFormStateChange() {\n\t      _angularFix2['default'].forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n\t        var model = field.model || $scope.model;\n\t        var promise = field.runExpressions && field.runExpressions();\n\t        if (field.hideExpression) {\n\t          // can't use hide with expressionProperties reliably\n\t          var val = model[field.key];\n\t          field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n\t        }\n\t        if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n\t          var validate = field.formControl.$validate;\n\t          if (promise) {\n\t            promise.then(validate);\n\t          } else {\n\t            validate();\n\t          }\n\t        }\n\t      });\n\t    }\n\n\t    function setupFields() {\n\t      $scope.fields = $scope.fields || [];\n\n\t      checkDeprecatedOptions($scope.options);\n\n\t      var fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\n\t      if (!_angularFix2['default'].isArray(fieldTransforms)) {\n\t        fieldTransforms = [fieldTransforms];\n\t      }\n\n\t      _angularFix2['default'].forEach(fieldTransforms, function transformFields(fieldTransform) {\n\t        if (fieldTransform) {\n\t          $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n\t          if (!$scope.fields) {\n\t            throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n\t          }\n\t        }\n\t      });\n\n\t      setupModels();\n\n\t      _angularFix2['default'].forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t      _angularFix2['default'].forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t    }\n\n\t    function checkDeprecatedOptions(options) {\n\t      if (formlyConfig.extras.fieldTransform && _angularFix2['default'].isFunction(formlyConfig.extras.fieldTransform)) {\n\t        formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for formlyConfig.extras: ' + formlyConfig.extras.fieldTransform.name, formlyConfig.extras);\n\t      } else if (options.fieldTransform && _angularFix2['default'].isFunction(options.fieldTransform)) {\n\t        formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for form', options);\n\t      }\n\t    }\n\n\t    function setupOptions() {\n\t      formlyApiCheck['throw']([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: 'formly-form options check' });\n\t      $scope.options = $scope.options || {};\n\t      $scope.options.formState = $scope.options.formState || {};\n\n\t      _angularFix2['default'].extend($scope.options, {\n\t        updateInitialValue: updateInitialValue,\n\t        resetModel: resetModel\n\t      });\n\t    }\n\n\t    function updateInitialValue() {\n\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t        if (isFieldGroup(field) && field.options) {\n\t          field.options.updateInitialValue();\n\t        } else {\n\t          field.updateInitialValue();\n\t        }\n\t      });\n\t    }\n\n\t    function resetModel() {\n\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t        if (isFieldGroup(field) && field.options) {\n\t          field.options.resetModel();\n\t        } else if (field.resetModel) {\n\t          field.resetModel();\n\t        }\n\t      });\n\t    }\n\n\t    function setupModels() {\n\t      // a set of field models that are already watched (the $scope.model will have its own watcher)\n\t      var watchedModels = [$scope.model];\n\n\t      if ($scope.options.formState) {\n\t        // $scope.options.formState will have its own watcher\n\t        watchedModels.push($scope.options.formState);\n\t      }\n\n\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t        var isNewModel = initModel(field);\n\n\t        if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1) {\n\t          $scope.$watch(function () {\n\t            return field.model;\n\t          }, onModelOrFormStateChange, true);\n\t          watchedModels.push(field.model);\n\t        }\n\t      });\n\t    }\n\n\t    function initModel(field) {\n\t      var isNewModel = true;\n\n\t      if (_angularFix2['default'].isString(field.model)) {\n\t        var expression = field.model;\n\t        var index = $scope.fields.indexOf(field);\n\n\t        isNewModel = !refrencesCurrentlyWatchedModel(expression);\n\n\t        field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n\t        if (!field.model) {\n\t          throw formlyUsability.getFieldError('field-model-must-be-initialized', 'Field model must be initialized. When specifying a model as a string for a field, the result of the' + ' expression must have been initialized ahead of time.', field);\n\t        }\n\t      }\n\t      return isNewModel;\n\t    }\n\n\t    function refrencesCurrentlyWatchedModel(expression) {\n\t      return ['model', 'formState'].some(function (item) {\n\t        return formlyUtil.startsWith(expression, item + '.') || formlyUtil.startsWith(expression, item + '[');\n\t      });\n\t    }\n\n\t    function attachKey(field, index) {\n\t      if (!isFieldGroup(field)) {\n\t        field.key = field.key || index || 0;\n\t      }\n\t    }\n\n\t    function setupWatchers(field, index) {\n\t      if (isFieldGroup(field) || !_angularFix2['default'].isDefined(field.watcher)) {\n\t        return;\n\t      }\n\t      var watchers = field.watcher;\n\t      if (!_angularFix2['default'].isArray(watchers)) {\n\t        watchers = [watchers];\n\t      }\n\t      _angularFix2['default'].forEach(watchers, function setupWatcher(watcher) {\n\t        if (!_angularFix2['default'].isDefined(watcher.listener)) {\n\t          throw formlyUsability.getFieldError('all-field-watchers-must-have-a-listener', 'All field watchers must have a listener', field);\n\t        }\n\t        var watchExpression = getWatchExpression(watcher, field, index);\n\t        var watchListener = getWatchListener(watcher, field, index);\n\n\t        var type = watcher.type || '$watch';\n\t        watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t      });\n\t    }\n\n\t    function getWatchExpression(watcher, field, index) {\n\t      var watchExpression = watcher.expression || 'model[\\'' + field.key + '\\']';\n\t      if (_angularFix2['default'].isFunction(watchExpression)) {\n\t        (function () {\n\t          // wrap the field's watch expression so we can call it with the field as the first arg\n\t          // and the stop function as the last arg as a helper\n\t          var originalExpression = watchExpression;\n\t          watchExpression = function formlyWatchExpression() {\n\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t            return originalExpression.apply(undefined, _toConsumableArray(args));\n\t          };\n\t          watchExpression.displayName = 'Formly Watch Expression for field for ' + field.key;\n\t        })();\n\t      }\n\t      return watchExpression;\n\t    }\n\n\t    function getWatchListener(watcher, field, index) {\n\t      var watchListener = watcher.listener;\n\t      if (_angularFix2['default'].isFunction(watchListener)) {\n\t        (function () {\n\t          // wrap the field's watch listener so we can call it with the field as the first arg\n\t          // and the stop function as the last arg as a helper\n\t          var originalListener = watchListener;\n\t          watchListener = function formlyWatchListener() {\n\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t            return originalListener.apply(undefined, _toConsumableArray(args));\n\t          };\n\t          watchListener.displayName = 'Formly Watch Listener for field for ' + field.key;\n\t        })();\n\t      }\n\t      return watchListener;\n\t    }\n\n\t    function modifyArgs(watcher, index) {\n\t      for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t        originalArgs[_key - 2] = arguments[_key];\n\t      }\n\n\t      return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t    }\n\n\t    function evalCloseToFormlyExpression(expression, val, field, index) {\n\t      var extraLocals = getFormlyFieldLikeLocals(field, index);\n\t      return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n\t    }\n\n\t    function getFormlyFieldLikeLocals(field, index) {\n\t      // this makes it closer to what a regular formlyExpression would be\n\t      return {\n\t        options: field,\n\t        index: index,\n\t        formState: $scope.options.formState,\n\t        formId: $scope.formId\n\t      };\n\t    }\n\t  }\n\n\t  function formlyFormLink(scope, el, attrs) {\n\t    setFormController();\n\t    fixChromeAutocomplete();\n\n\t    function setFormController() {\n\t      var formId = attrs.name;\n\t      scope.formId = formId;\n\t      scope.theFormlyForm = scope[formId];\n\t      if (attrs.form) {\n\t        var getter = $parse(attrs.form);\n\t        var setter = getter.assign;\n\t        var parentForm = getter(scope.$parent);\n\t        if (parentForm) {\n\t          scope.theFormlyForm = parentForm;\n\t          if (scope[formId]) {\n\t            scope.theFormlyForm.$removeControl(scope[formId]);\n\t          }\n\n\t          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n\t          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n\t          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n\t          // this is necessary because it's confusing to have a step between the form you pass in\n\t          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n\t          // to children forms :-( This line was added to solve this issue:\n\t          // https://github.com/formly-js/angular-formly/issues/287\n\t          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n\t          // so I expect it will remain this way for the life of angular 1.x\n\t          el.removeData('$formController');\n\t        } else {\n\t          setter(scope.$parent, scope[formId]);\n\t        }\n\t      }\n\t      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n\t        /* eslint no-console:0 */\n\t        formlyWarn('formly-form-has-no-formcontroller', 'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work', el, scope);\n\t      }\n\t    }\n\n\t    /*\n\t     * chrome autocomplete lameness\n\t     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t     */\n\t    function fixChromeAutocomplete() {\n\t      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t      if (global && !offInstance || onInstance) {\n\t        var input = document.createElement('input');\n\t        input.setAttribute('autocomplete', 'address-level4');\n\t        input.setAttribute('hidden', 'true');\n\t        el[0].appendChild(input);\n\t      }\n\t    }\n\t  }\n\n\t  // stateless util functions\n\t  function toKebabCase(string) {\n\t    if (string) {\n\t      return string.replace(/([A-Z])/g, function ($1) {\n\t        return '-' + $1.toLowerCase();\n\t      });\n\t    } else {\n\t      return '';\n\t    }\n\t  }\n\n\t  function isFieldGroup(field) {\n\t    return field && !!field.fieldGroup;\n\t  }\n\t}\n\tformlyForm.$inject = [\"formlyUsability\", \"formlyWarn\", \"$parse\", \"formlyConfig\", \"$interpolate\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\tvar _otherUtils = __webpack_require__(9);\n\n\texports['default'] = addFormlyNgModelAttrsManipulator;\n\n\t// @ngInject\n\tfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n\t  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t    return;\n\t  }\n\t  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    var node = document.createElement('div');\n\t    var skip = options.extras && options.extras.skipNgModelAttrsManipulator;\n\t    if (skip === true) {\n\t      return template;\n\t    }\n\t    node.innerHTML = template;\n\n\t    var modelNodes = getNgModelNodes(node, skip);\n\t    if (!modelNodes || !modelNodes.length) {\n\t      return template;\n\t    }\n\n\t    addIfNotPresent(modelNodes, 'id', scope.id);\n\t    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\n\t    addValidation();\n\t    alterNgModelAttr();\n\t    addModelOptions();\n\t    addTemplateOptionsAttrs();\n\t    addNgModelElAttrs();\n\n\t    return node.innerHTML;\n\n\t    function addValidation() {\n\t      if (_angularFix2['default'].isDefined(options.validators) || _angularFix2['default'].isDefined(options.validation.messages)) {\n\t        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n\t      }\n\t    }\n\n\t    function alterNgModelAttr() {\n\t      if (isPropertyAccessor(options.key)) {\n\t        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key);\n\t      }\n\t    }\n\n\t    function addModelOptions() {\n\t      if (_angularFix2['default'].isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n\t        if (options.modelOptions.getterSetter) {\n\t          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value');\n\t        }\n\t      }\n\t    }\n\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\n\t      var ngModelAttributes = getBuiltInAttributes();\n\n\t      // extend with the user's specifications winning\n\t      _angularFix2['default'].extend(ngModelAttributes, options.ngModelAttrs);\n\n\t      // Feel free to make this more simple :-)\n\t      _angularFix2['default'].forEach(ngModelAttributes, function (val, name) {\n\t        /* eslint complexity:[2, 14] */\n\t        var attrVal = undefined,\n\t            attrName = undefined;\n\t        var ref = 'options.templateOptions[\\'' + name + '\\']';\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\n\t        var inTo = _angularFix2['default'].isDefined(toVal);\n\t        var inEp = _angularFix2['default'].isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.statement && inTo) {\n\t          attrName = val.statement;\n\t          if (_angularFix2['default'].isString(to[name])) {\n\t            attrVal = '$eval(' + ref + ')';\n\t          } else if (_angularFix2['default'].isFunction(to[name])) {\n\t            attrVal = ref + '(model[options.key], options, this, $event)';\n\t          } else {\n\t            throw new Error('options.templateOptions.' + name + ' must be a string or function: ' + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if ((val.attribute || val.boolean) && inEp) {\n\t          attrName = val.attribute || val.boolean;\n\t          attrVal = '' + $interpolate.startSymbol() + ref + $interpolate.endSymbol();\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        } else if (val.boolean) {\n\t          if (inTo && !inEp && toVal) {\n\t            attrName = val.boolean;\n\t            attrVal = true;\n\t          } else {\n\t            /* eslint no-empty:0 */\n\t            // empty to illustrate that a boolean will not be added via val.bound\n\t            // if you want it added via val.bound, then put it in expressionProperties\n\t          }\n\t        } else if (val.bound && inTo) {\n\t            attrName = val.bound;\n\t            attrVal = ref;\n\t          }\n\n\t        if (_angularFix2['default'].isDefined(attrName) && _angularFix2['default'].isDefined(attrVal)) {\n\t          addIfNotPresent(modelNodes, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\n\t    function addNgModelElAttrs() {\n\t      _angularFix2['default'].forEach(options.ngModelElAttrs, function (val, name) {\n\t        addRegardlessOfPresence(modelNodes, name, val);\n\t      });\n\t    }\n\t  }\n\n\t  // Utility functions\n\t  function getNgModelNodes(node, skip) {\n\t    var selectorNot = _angularFix2['default'].isString(skip) ? ':not(' + skip + ')' : '';\n\t    var skipNot = ':not([formly-skip-ng-model-attrs-manipulator])';\n\t    var query = '[ng-model]' + selectorNot + skipNot + ', [data-ng-model]' + selectorNot + skipNot;\n\t    try {\n\t      return node.querySelectorAll(query);\n\t    } catch (e) {\n\t      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n\t      //it should be removed when IE8 support is dropped\n\t      return getNgModelNodesFallback(node, skip);\n\t    }\n\t  }\n\n\t  function getNgModelNodesFallback(node, skip) {\n\t    var allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]');\n\t    var matchingNgModelNodes = [];\n\n\t    //make sure this array is compatible with NodeList type by adding an 'item' function\n\t    matchingNgModelNodes.item = function (i) {\n\t      return this[i];\n\t    };\n\n\t    for (var i = 0; i < allNgModelNodes.length; i++) {\n\t      var ngModelNode = allNgModelNodes[i];\n\t      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') && !(_angularFix2['default'].isString(skip) && nodeMatches(ngModelNode, skip))) {\n\t        matchingNgModelNodes.push(ngModelNode);\n\t      }\n\t    }\n\n\t    return matchingNgModelNodes;\n\t  }\n\n\t  function nodeMatches(node, selector) {\n\t    var div = document.createElement('div');\n\t    div.innerHTML = node.outerHTML;\n\t    return div.querySelector(selector);\n\t  }\n\n\t  function getBuiltInAttributes() {\n\t    var ngModelAttributes = {\n\t      focus: {\n\t        attribute: 'formly-focus'\n\t      }\n\t    };\n\t    var boundOnly = [];\n\t    var bothBooleanAndBound = ['required', 'disabled'];\n\t    var bothAttributeAndBound = ['pattern', 'minlength'];\n\t    var statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\t    var attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n\t    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t      bothAttributeAndBound.push('maxlength');\n\t    } else {\n\t      boundOnly.push('maxlength');\n\t    }\n\n\t    _angularFix2['default'].forEach(boundOnly, function (item) {\n\t      ngModelAttributes[item] = { bound: 'ng-' + item };\n\t    });\n\n\t    _angularFix2['default'].forEach(bothBooleanAndBound, function (item) {\n\t      ngModelAttributes[item] = { boolean: item, bound: 'ng-' + item };\n\t    });\n\n\t    _angularFix2['default'].forEach(bothAttributeAndBound, function (item) {\n\t      ngModelAttributes[item] = { attribute: item, bound: 'ng-' + item };\n\t    });\n\n\t    _angularFix2['default'].forEach(statementOnly, function (item) {\n\t      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t      ngModelAttributes[propName] = { statement: 'ng-' + item };\n\t    });\n\n\t    _angularFix2['default'].forEach(attributeOnly, function (item) {\n\t      ngModelAttributes[item] = { attribute: item };\n\t    });\n\t    return ngModelAttributes;\n\t  }\n\n\t  function getEpValue(ep, name) {\n\t    return ep['templateOptions.' + name] || ep['templateOptions[\\'' + name + '\\']'] || ep['templateOptions[\"' + name + '\"]'];\n\t  }\n\n\t  function addIfNotPresent(nodes, attr, val) {\n\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t      if (!node.getAttribute(attr)) {\n\t        node.setAttribute(attr, val);\n\t      }\n\t    });\n\t  }\n\n\t  function addRegardlessOfPresence(nodes, attr, val) {\n\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t      node.setAttribute(attr, val);\n\t    });\n\t  }\n\n\t  function isPropertyAccessor(key) {\n\t    return (0, _otherUtils.contains)(key, '.') || (0, _otherUtils.contains)(key, '[') && (0, _otherUtils.contains)(key, ']');\n\t  }\n\t}\n\taddFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\", \"$interpolate\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _angularFix = __webpack_require__(2);\n\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\n\texports['default'] = addCustomTags;\n\n\t// @ngInject\n\tfunction addCustomTags($document) {\n\t  // IE8 check ->\n\t  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n\t  if ($document && $document.documentMode < 9) {\n\t    (function () {\n\t      var document = $document.get(0);\n\t      // add the custom elements that we need for formly\n\t      var customElements = ['formly-field', 'formly-form'];\n\t      _angularFix2['default'].forEach(customElements, function (el) {\n\t        document.createElement(el);\n\t      });\n\t    })();\n\t  }\n\t}\n\taddCustomTags.$inject = [\"$document\"];\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-formly/dist/formly.js\n ** module id = 10\n ** module chunks = 0\n **/","//! api-check version 7.5.5 built with ♥ by Kent C. Dodds <kent@doddsfamily.us> (http://kent.doddsfamily.us) (ó ì_í)=óò=(ì_í ò)\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"apiCheck\"] = factory();\n\telse\n\t\troot[\"apiCheck\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n\tvar _apiCheck = __webpack_require__(1);\n\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\n\texports['default'] = _apiCheck2['default'];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar stringify = __webpack_require__(2);\n\tvar apiCheckUtil = __webpack_require__(3);\n\tvar each = apiCheckUtil.each;\n\tvar isError = apiCheckUtil.isError;\n\tvar t = apiCheckUtil.t;\n\tvar arrayify = apiCheckUtil.arrayify;\n\tvar getCheckerDisplay = apiCheckUtil.getCheckerDisplay;\n\tvar typeOf = apiCheckUtil.typeOf;\n\tvar getError = apiCheckUtil.getError;\n\n\tvar checkers = __webpack_require__(4);\n\tvar apiCheckApis = getApiCheckApis();\n\n\tmodule.exports = getApiCheckInstance;\n\tmodule.exports.VERSION = (\"7.5.5\");\n\tmodule.exports.utils = apiCheckUtil;\n\tmodule.exports.globalConfig = {\n\t  verbose: false,\n\t  disabled: false\n\t};\n\n\tvar apiCheckApiCheck = getApiCheckInstance({\n\t  output: { prefix: 'apiCheck' }\n\t});\n\tmodule.exports.internalChecker = apiCheckApiCheck;\n\n\teach(checkers, function (checker, name) {\n\t  return module.exports[name] = checker;\n\t});\n\n\tfunction getApiCheckInstance() {\n\t  var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t  var extraCheckers = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t  /* eslint complexity:[2, 6] */\n\t  if (apiCheckApiCheck && arguments.length) {\n\t    apiCheckApiCheck['throw'](apiCheckApis.getApiCheckInstanceCheckers, arguments, {\n\t      prefix: 'creating an apiCheck instance'\n\t    });\n\t  }\n\n\t  var additionalProperties = {\n\t    'throw': getApiCheck(true),\n\t    warn: getApiCheck(false),\n\t    getErrorMessage: getErrorMessage,\n\t    handleErrorMessage: handleErrorMessage,\n\t    config: {\n\t      output: config.output || {\n\t        prefix: '',\n\t        suffix: '',\n\t        docsBaseUrl: ''\n\t      },\n\t      verbose: config.verbose || false,\n\t      disabled: config.disabled || false\n\t    },\n\t    utils: apiCheckUtil\n\t  };\n\n\t  each(additionalProperties, function (wrapper, name) {\n\t    return apiCheck[name] = wrapper;\n\t  });\n\n\t  var disabled = apiCheck.disabled || module.exports.globalConfig.disabled;\n\t  each(checkers.getCheckers(disabled), function (checker, name) {\n\t    return apiCheck[name] = checker;\n\t  });\n\t  each(extraCheckers, function (checker, name) {\n\t    return apiCheck[name] = checker;\n\t  });\n\n\t  return apiCheck;\n\n\t  /**\n\t   * This is the instance function. Other things are attached to this see additional properties above.\n\t   * @param {Array} api - the checkers to check with\n\t   * @param {Array} args - the args to check\n\t   * @param {Object} output - output options\n\t   * @returns {Object} - if this has a failed = true property, then it failed\n\t   */\n\t  function apiCheck(api, args, output) {\n\t    /* eslint complexity:[2, 8] */\n\t    if (apiCheck.config.disabled || module.exports.globalConfig.disabled) {\n\t      return {\n\t        apiTypes: {}, argTypes: {},\n\t        passed: true, message: '',\n\t        failed: false\n\t      }; // empty version of what is normally returned\n\t    }\n\t    checkApiCheckApi(arguments);\n\t    if (!Array.isArray(api)) {\n\t      api = [api];\n\t      args = [args];\n\t    } else {\n\t      // turn arguments into an array\n\t      args = Array.prototype.slice.call(args);\n\t    }\n\t    var messages = checkEnoughArgs(api, args);\n\t    if (!messages.length) {\n\t      // this is where we actually go perform the checks.\n\t      messages = checkApiWithArgs(api, args);\n\t    }\n\n\t    var returnObject = getTypes(api, args);\n\t    returnObject.args = args;\n\t    if (messages.length) {\n\t      returnObject.message = apiCheck.getErrorMessage(api, args, messages, output);\n\t      returnObject.failed = true;\n\t      returnObject.passed = false;\n\t    } else {\n\t      returnObject.message = '';\n\t      returnObject.failed = false;\n\t      returnObject.passed = true;\n\t    }\n\t    return returnObject;\n\t  }\n\n\t  /**\n\t   * checkApiCheckApi, should be read like: check apiCheck api. As in, check the api for apiCheck :-)\n\t   * @param {Array} checkApiArgs - args provided to apiCheck function\n\t   */\n\t  function checkApiCheckApi(checkApiArgs) {\n\t    var api = checkApiArgs[0];\n\t    var args = checkApiArgs[1];\n\t    var isArrayOrArgs = Array.isArray(args) || args && typeof args === 'object' && typeof args.length === 'number';\n\n\t    if (Array.isArray(api) && !isArrayOrArgs) {\n\t      throw new Error(getErrorMessage(api, [args], ['If an array is provided for the api, an array must be provided for the args as well.'], { prefix: 'apiCheck' }));\n\t    }\n\t    // dog fooding here\n\t    var errors = checkApiWithArgs(apiCheckApis.checkApiCheckApi, checkApiArgs);\n\t    if (errors.length) {\n\t      var message = apiCheck.getErrorMessage(apiCheckApis.checkApiCheckApi, checkApiArgs, errors, {\n\t        prefix: 'apiCheck'\n\t      });\n\t      apiCheck.handleErrorMessage(message, true);\n\t    }\n\t  }\n\n\t  function getApiCheck(shouldThrow) {\n\t    return function apiCheckWrapper(api, args, output) {\n\t      var result = apiCheck(api, args, output);\n\t      apiCheck.handleErrorMessage(result.message, shouldThrow);\n\t      return result; // wont get here if an error is thrown\n\t    };\n\t  }\n\n\t  function handleErrorMessage(message, shouldThrow) {\n\t    if (shouldThrow && message) {\n\t      throw new Error(message);\n\t    } else if (message) {\n\t      /* eslint no-console:0 */\n\t      console.warn(message);\n\t    }\n\t  }\n\n\t  function getErrorMessage(api, args) {\n\t    var messages = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\t    var output = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n\t    var gOut = apiCheck.config.output || {};\n\t    var prefix = getPrefix();\n\t    var suffix = getSuffix();\n\t    var url = getUrl();\n\t    var message = 'apiCheck failed! ' + messages.join(', ');\n\t    var passedAndShouldHavePassed = '\\n\\n' + buildMessageFromApiAndArgs(api, args);\n\t    return (prefix + ' ' + message + ' ' + suffix + ' ' + (url || '') + passedAndShouldHavePassed).trim();\n\n\t    function getPrefix() {\n\t      var p = output.onlyPrefix;\n\t      if (!p) {\n\t        p = ((gOut.prefix || '') + ' ' + (output.prefix || '')).trim();\n\t      }\n\t      return p;\n\t    }\n\n\t    function getSuffix() {\n\t      var s = output.onlySuffix;\n\t      if (!s) {\n\t        s = ((output.suffix || '') + ' ' + (gOut.suffix || '')).trim();\n\t      }\n\t      return s;\n\t    }\n\n\t    function getUrl() {\n\t      var u = output.url;\n\t      if (!u) {\n\t        u = gOut.docsBaseUrl && output.urlSuffix && ('' + gOut.docsBaseUrl + output.urlSuffix).trim();\n\t      }\n\t      return u;\n\t    }\n\t  }\n\n\t  function buildMessageFromApiAndArgs(api, args) {\n\t    var _getTypes = getTypes(api, args);\n\n\t    var apiTypes = _getTypes.apiTypes;\n\t    var argTypes = _getTypes.argTypes;\n\n\t    var copy = Array.prototype.slice.call(args || []);\n\t    var replacedItems = [];\n\t    replaceFunctionWithName(copy);\n\t    var passedArgs = getObjectString(copy);\n\t    argTypes = getObjectString(argTypes);\n\t    apiTypes = getObjectString(apiTypes);\n\n\t    return generateMessage();\n\n\t    // functions\n\n\t    function replaceFunctionWithName(obj) {\n\t      each(obj, function (val, name) {\n\t        /* eslint complexity:[2, 6] */\n\t        if (replacedItems.indexOf(val) === -1) {\n\t          // avoid recursive problems\n\t          replacedItems.push(val);\n\t          if (typeof val === 'object') {\n\t            replaceFunctionWithName(obj);\n\t          } else if (typeof val === 'function') {\n\t            obj[name] = val.displayName || val.name || 'anonymous function';\n\t          }\n\t        }\n\t      });\n\t    }\n\n\t    function getObjectString(types) {\n\t      if (!types || !types.length) {\n\t        return 'nothing';\n\t      } else if (types && types.length === 1) {\n\t        types = types[0];\n\t      }\n\t      return stringify(types, null, 2);\n\t    }\n\n\t    function generateMessage() {\n\t      var n = '\\n';\n\t      var useS = true;\n\t      if (args && args.length === 1) {\n\t        if (typeof args[0] === 'object' && args[0] !== null) {\n\t          useS = !!Object.keys(args[0]).length;\n\t        } else {\n\t          useS = false;\n\t        }\n\t      }\n\t      var types = 'type' + (useS ? 's' : '');\n\t      var newLine = n + n;\n\t      return 'You passed:' + n + passedArgs + newLine + ('With the ' + types + ':' + n + argTypes + newLine) + ('The API calls for:' + n + apiTypes);\n\t    }\n\t  }\n\n\t  function getTypes(api, args) {\n\t    api = arrayify(api);\n\t    args = arrayify(args);\n\t    var apiTypes = api.map(function (checker, index) {\n\t      var specified = module.exports.globalConfig.hasOwnProperty('verbose');\n\t      return getCheckerDisplay(checker, {\n\t        terse: specified ? !module.exports.globalConfig.verbose : !apiCheck.config.verbose,\n\t        obj: args[index],\n\t        addHelpers: true\n\t      });\n\t    });\n\t    var argTypes = args.map(function (arg) {\n\t      return getArgDisplay(arg, []);\n\t    });\n\t    return { argTypes: argTypes, apiTypes: apiTypes };\n\t  }\n\t}\n\n\t// STATELESS FUNCTIONS\n\n\t/**\n\t * This is where the magic happens for actually checking the arguments with the api.\n\t * @param {Array} api - checkers\n\t * @param  {Array} args - and arguments object\n\t * @returns {Array} - the error messages\n\t */\n\tfunction checkApiWithArgs(api, args) {\n\t  /* eslint complexity:[2, 7] */\n\t  var messages = [];\n\t  var failed = false;\n\t  var checkerIndex = 0;\n\t  var argIndex = 0;\n\t  var arg = undefined,\n\t      checker = undefined,\n\t      res = undefined,\n\t      lastChecker = undefined,\n\t      argName = undefined,\n\t      argFailed = undefined,\n\t      skipPreviousChecker = undefined;\n\t  /* jshint -W084 */\n\t  while ((checker = api[checkerIndex++]) && argIndex < args.length) {\n\t    arg = args[argIndex++];\n\t    argName = 'Argument ' + argIndex + (checker.isOptional ? ' (optional)' : '');\n\t    res = checker(arg, 'value', argName);\n\t    argFailed = isError(res);\n\t    lastChecker = checkerIndex >= api.length;\n\t    skipPreviousChecker = checkerIndex > 1 && api[checkerIndex - 1].isOptional;\n\t    if (argFailed && lastChecker || argFailed && !lastChecker && !checker.isOptional && !skipPreviousChecker) {\n\t      failed = true;\n\t      messages.push(getCheckerErrorMessage(res, checker, arg));\n\t    } else if (argFailed && checker.isOptional) {\n\t      argIndex--;\n\t    } else {\n\t      messages.push(t(argName) + ' passed');\n\t    }\n\t  }\n\t  return failed ? messages : [];\n\t}\n\n\tcheckerTypeType.type = 'function with __apiCheckData property and `${function.type}` property';\n\tfunction checkerTypeType(checkerType, name, location) {\n\t  var apiCheckDataChecker = checkers.shape({\n\t    type: checkers.string,\n\t    optional: checkers.bool\n\t  });\n\t  var asFunc = checkers.func.withProperties({ __apiCheckData: apiCheckDataChecker });\n\t  var asShape = checkers.shape({ __apiCheckData: apiCheckDataChecker });\n\t  var wrongShape = checkers.oneOfType([asFunc, asShape])(checkerType, name, location);\n\t  if (isError(wrongShape)) {\n\t    return wrongShape;\n\t  }\n\t  if (typeof checkerType !== 'function' && !checkerType.hasOwnProperty(checkerType.__apiCheckData.type)) {\n\t    return getError(name, location, checkerTypeType.type);\n\t  }\n\t}\n\n\tfunction getCheckerErrorMessage(res, checker, val) {\n\t  var checkerHelp = getCheckerHelp(checker, val);\n\t  checkerHelp = checkerHelp ? ' - ' + checkerHelp : '';\n\t  return res.message + checkerHelp;\n\t}\n\n\tfunction getCheckerHelp(_ref, val) {\n\t  var help = _ref.help;\n\n\t  if (!help) {\n\t    return '';\n\t  }\n\t  if (typeof help === 'function') {\n\t    help = help(val);\n\t  }\n\t  return help;\n\t}\n\n\tfunction checkEnoughArgs(api, args) {\n\t  var requiredArgs = api.filter(function (a) {\n\t    return !a.isOptional;\n\t  });\n\t  if (args.length < requiredArgs.length) {\n\t    return ['Not enough arguments specified. Requires `' + requiredArgs.length + '`, you passed `' + args.length + '`'];\n\t  } else {\n\t    return [];\n\t  }\n\t}\n\n\tfunction getArgDisplay(arg, gottenArgs) {\n\t  /* eslint complexity:[2, 7] */\n\t  var cName = arg && arg.constructor && arg.constructor.name;\n\t  var type = typeOf(arg);\n\t  if (type === 'function') {\n\t    if (hasKeys()) {\n\t      var properties = stringify(getDisplayIfNotGotten());\n\t      return cName + ' (with properties: ' + properties + ')';\n\t    }\n\t    return cName;\n\t  }\n\n\t  if (arg === null) {\n\t    return 'null';\n\t  }\n\n\t  if (type !== 'array' && type !== 'object') {\n\t    return type;\n\t  }\n\n\t  if (hasKeys()) {\n\t    return getDisplayIfNotGotten();\n\t  }\n\n\t  return cName;\n\n\t  // utility functions\n\t  function hasKeys() {\n\t    return arg && Object.keys(arg).length;\n\t  }\n\n\t  function getDisplayIfNotGotten() {\n\t    if (gottenArgs.indexOf(arg) !== -1) {\n\t      return '[Circular]';\n\t    }\n\t    gottenArgs.push(arg);\n\t    return getDisplay(arg, gottenArgs);\n\t  }\n\t}\n\n\tfunction getDisplay(obj, gottenArgs) {\n\t  var argDisplay = {};\n\t  each(obj, function (v, k) {\n\t    return argDisplay[k] = getArgDisplay(v, gottenArgs);\n\t  });\n\t  return argDisplay;\n\t}\n\n\tfunction getApiCheckApis() {\n\t  var os = checkers.string.optional;\n\n\t  var checkerFnChecker = checkers.func.withProperties({\n\t    type: checkers.oneOfType([checkers.string, checkerTypeType]).optional,\n\t    displayName: checkers.string.optional,\n\t    shortType: checkers.string.optional,\n\t    notOptional: checkers.bool.optional,\n\t    notRequired: checkers.bool.optional\n\t  });\n\n\t  var getApiCheckInstanceCheckers = [checkers.shape({\n\t    output: checkers.shape({\n\t      prefix: checkers.string.optional,\n\t      suffix: checkers.string.optional,\n\t      docsBaseUrl: checkers.string.optional\n\t    }).strict.optional,\n\t    verbose: checkers.bool.optional,\n\t    disabled: checkers.bool.optional\n\t  }).strict.optional, checkers.objectOf(checkerFnChecker).optional];\n\n\t  var checkApiCheckApi = [checkers.typeOrArrayOf(checkerFnChecker), checkers.any.optional, checkers.shape({\n\t    prefix: os, suffix: os, urlSuffix: os, // appended case\n\t    onlyPrefix: os, onlySuffix: os, url: os // override case\n\t  }).strict.optional];\n\n\t  return {\n\t    checkerFnChecker: checkerFnChecker,\n\t    getApiCheckInstanceCheckers: getApiCheckInstanceCheckers,\n\t    checkApiCheckApi: checkApiCheckApi\n\t  };\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = stringify;\n\n\tfunction getSerialize (fn, decycle) {\n\t  var seen = [], keys = [];\n\t  decycle = decycle || function(key, value) {\n\t    return '[Circular ' + getPath(value, seen, keys) + ']'\n\t  };\n\t  return function(key, value) {\n\t    var ret = value;\n\t    if (typeof value === 'object' && value) {\n\t      if (seen.indexOf(value) !== -1)\n\t        ret = decycle(key, value);\n\t      else {\n\t        seen.push(value);\n\t        keys.push(key);\n\t      }\n\t    }\n\t    if (fn) ret = fn(key, ret);\n\t    return ret;\n\t  }\n\t}\n\n\tfunction getPath (value, seen, keys) {\n\t  var index = seen.indexOf(value);\n\t  var path = [ keys[index] ];\n\t  for (index--; index >= 0; index--) {\n\t    if (seen[index][ path[0] ] === value) {\n\t      value = seen[index];\n\t      path.unshift(keys[index]);\n\t    }\n\t  }\n\t  return '~' + path.join('.');\n\t}\n\n\tfunction stringify(obj, fn, spaces, decycle) {\n\t  return JSON.stringify(obj, getSerialize(fn, decycle), spaces);\n\t}\n\n\tstringify.getSerialize = getSerialize;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\tvar stringify = __webpack_require__(2);\n\tvar checkerHelpers = {\n\t  addOptional: addOptional, getRequiredVersion: getRequiredVersion, setupChecker: setupChecker, addNullable: addNullable\n\t};\n\n\tmodule.exports = {\n\t  each: each, copy: copy, typeOf: typeOf, arrayify: arrayify, getCheckerDisplay: getCheckerDisplay,\n\t  isError: isError, list: list, getError: getError, nAtL: nAtL, t: t, undef: undef, checkerHelpers: checkerHelpers,\n\t  noop: noop\n\t};\n\n\tfunction copy(obj) {\n\t  var type = typeOf(obj);\n\t  var daCopy = undefined;\n\t  if (type === 'array') {\n\t    daCopy = [];\n\t  } else if (type === 'object') {\n\t    daCopy = {};\n\t  } else {\n\t    return obj;\n\t  }\n\t  each(obj, function (val, key) {\n\t    daCopy[key] = val; // cannot single-line this because we don't want to abort the each\n\t  });\n\t  return daCopy;\n\t}\n\n\tfunction typeOf(obj) {\n\t  if (Array.isArray(obj)) {\n\t    return 'array';\n\t  } else if (obj instanceof RegExp) {\n\t    return 'object';\n\t  } else {\n\t    return typeof obj;\n\t  }\n\t}\n\n\tfunction getCheckerDisplay(checker, options) {\n\t  /* eslint complexity:[2, 7] */\n\t  var display = undefined;\n\t  var short = options && options.short;\n\t  if (short && checker.shortType) {\n\t    display = checker.shortType;\n\t  } else if (!short && typeof checker.type === 'object' || checker.type === 'function') {\n\t    display = getCheckerType(checker, options);\n\t  } else {\n\t    display = getCheckerType(checker, options) || checker.displayName || checker.name;\n\t  }\n\t  return display;\n\t}\n\n\tfunction getCheckerType(_ref, options) {\n\t  var type = _ref.type;\n\n\t  if (typeof type === 'function') {\n\t    var __apiCheckData = type.__apiCheckData;\n\t    var typeTypes = type(options);\n\t    type = _defineProperty({\n\t      __apiCheckData: __apiCheckData\n\t    }, __apiCheckData.type, typeTypes);\n\t  }\n\t  return type;\n\t}\n\n\tfunction arrayify(obj) {\n\t  if (!obj) {\n\t    return [];\n\t  } else if (Array.isArray(obj)) {\n\t    return obj;\n\t  } else {\n\t    return [obj];\n\t  }\n\t}\n\n\tfunction each(obj, iterator, context) {\n\t  if (Array.isArray(obj)) {\n\t    return eachArry(obj, iterator, context);\n\t  } else {\n\t    return eachObj(obj, iterator, context);\n\t  }\n\t}\n\n\tfunction eachObj(obj, iterator, context) {\n\t  var ret = undefined;\n\t  var hasOwn = Object.prototype.hasOwnProperty;\n\t  /* eslint prefer-const:0 */ // some weird eslint bug?\n\t  for (var key in obj) {\n\t    if (hasOwn.call(obj, key)) {\n\t      ret = iterator.call(context, obj[key], key, obj);\n\t      if (ret === false) {\n\t        return ret;\n\t      }\n\t    }\n\t  }\n\t  return true;\n\t}\n\n\tfunction eachArry(obj, iterator, context) {\n\t  var ret = undefined;\n\t  var length = obj.length;\n\t  for (var i = 0; i < length; i++) {\n\t    ret = iterator.call(context, obj[i], i, obj);\n\t    if (ret === false) {\n\t      return ret;\n\t    }\n\t  }\n\t  return true;\n\t}\n\n\tfunction isError(obj) {\n\t  return obj instanceof Error;\n\t}\n\n\tfunction list(arry, join, finalJoin) {\n\t  arry = arrayify(arry);\n\t  var copy = arry.slice();\n\t  var last = copy.pop();\n\t  if (copy.length === 1) {\n\t    join = ' ';\n\t  }\n\t  return copy.join(join) + ('' + (copy.length ? join + finalJoin : '') + last);\n\t}\n\n\tfunction getError(name, location, checkerType) {\n\t  if (typeof checkerType === 'function') {\n\t    checkerType = checkerType({ short: true });\n\t  }\n\t  var stringType = typeof checkerType !== 'object' ? checkerType : stringify(checkerType);\n\t  return new Error(nAtL(name, location) + ' must be ' + t(stringType));\n\t}\n\n\tfunction nAtL(name, location) {\n\t  var tName = t(name || 'value');\n\t  var tLocation = !location ? '' : ' at ' + t(location);\n\t  return '' + tName + tLocation;\n\t}\n\n\tfunction t(thing) {\n\t  return '`' + thing + '`';\n\t}\n\n\tfunction undef(thing) {\n\t  return typeof thing === 'undefined';\n\t}\n\n\t/**\n\t * This will set up the checker with all of the defaults that most checkers want like required by default and an\n\t * optional version\n\t *\n\t * @param {Function} checker - the checker to setup with properties\n\t * @param {Object} properties - properties to add to the checker\n\t * @param {boolean} disabled - when set to true, this will set the checker to a no-op function\n\t * @returns {Function} checker - the setup checker\n\t */\n\tfunction setupChecker(checker, properties, disabled) {\n\t  /* eslint complexity:[2, 9] */\n\t  if (disabled) {\n\t    // swap out the checker for its own copy of noop\n\t    checker = getNoop();\n\t    checker.isNoop = true;\n\t  }\n\n\t  if (typeof checker.type === 'string') {\n\t    checker.shortType = checker.type;\n\t  }\n\n\t  // assign all properties given\n\t  each(properties, function (prop, name) {\n\t    return checker[name] = prop;\n\t  });\n\n\t  if (!checker.displayName) {\n\t    checker.displayName = 'apiCheck ' + t(checker.shortType || checker.type || checker.name) + ' type checker';\n\t  }\n\n\t  if (!checker.notRequired) {\n\t    checker = getRequiredVersion(checker, disabled);\n\t  }\n\n\t  if (!checker.notNullable) {\n\t    addNullable(checker, disabled);\n\t  }\n\n\t  if (!checker.notOptional) {\n\t    addOptional(checker, disabled);\n\t  }\n\n\t  return checker;\n\t}\n\n\tfunction getRequiredVersion(checker, disabled) {\n\t  var requiredChecker = disabled ? getNoop() : function requiredChecker(val, name, location, obj) {\n\t    if (undef(val) && !checker.isOptional) {\n\t      var tLocation = location ? ' in ' + t(location) : '';\n\t      var type = getCheckerDisplay(checker, { short: true });\n\t      var stringType = typeof type !== 'object' ? type : stringify(type);\n\t      return new Error('Required ' + t(name) + ' not specified' + tLocation + '. Must be ' + t(stringType));\n\t    } else {\n\t      return checker(val, name, location, obj);\n\t    }\n\t  };\n\t  copyProps(checker, requiredChecker);\n\t  requiredChecker.originalChecker = checker;\n\t  return requiredChecker;\n\t}\n\n\tfunction addOptional(checker, disabled) {\n\t  var optionalCheck = disabled ? getNoop() : function optionalCheck(val, name, location, obj) {\n\t    if (!undef(val)) {\n\t      return checker(val, name, location, obj);\n\t    }\n\t  };\n\t  // inherit all properties on the original checker\n\t  copyProps(checker, optionalCheck);\n\n\t  optionalCheck.isOptional = true;\n\t  optionalCheck.displayName = checker.displayName + ' (optional)';\n\t  optionalCheck.originalChecker = checker;\n\n\t  // the magic line that allows you to add .optional to the end of the checkers\n\t  checker.optional = optionalCheck;\n\n\t  fixType(checker, checker.optional);\n\t}\n\n\tfunction addNullable(checker, disabled) {\n\t  var nullableCheck = disabled ? getNoop() : function nullableCheck(val, name, location, obj) {\n\t    if (val !== null) {\n\t      return checker(val, name, location, obj);\n\t    }\n\t  };\n\t  // inherit all properties on the original checker\n\t  copyProps(checker, nullableCheck);\n\n\t  nullableCheck.isNullable = true;\n\t  nullableCheck.displayName = checker.displayName + ' (nullable)';\n\t  nullableCheck.originalChecker = checker;\n\n\t  // the magic line that allows you to add .nullable to the end of the checkers\n\t  checker.nullable = nullableCheck;\n\n\t  fixType(checker, checker.nullable);\n\t  if (!checker.notOptional) {\n\t    addOptional(checker.nullable, disabled);\n\t  }\n\t}\n\n\tfunction fixType(checker, checkerCopy) {\n\t  // fix type, because it's not a straight copy...\n\t  // the reason is we need to specify type.__apiCheckData.optional as true for the terse/verbose option.\n\t  // we also want to add \"(optional)\" to the types with a string\n\t  if (typeof checkerCopy.type === 'object') {\n\t    checkerCopy.type = copy(checkerCopy.type); // make our own copy of this\n\t  } else if (typeof checkerCopy.type === 'function') {\n\t      checkerCopy.type = function () {\n\t        return checker.type.apply(checker, arguments);\n\t      };\n\t    } else {\n\t      checkerCopy.type += ' (optional)';\n\t      return;\n\t    }\n\t  checkerCopy.type.__apiCheckData = copy(checker.type.__apiCheckData) || {}; // and this\n\t  checkerCopy.type.__apiCheckData.optional = true;\n\t}\n\n\t// UTILS\n\n\tfunction copyProps(src, dest) {\n\t  each(Object.keys(src), function (key) {\n\t    return dest[key] = src[key];\n\t  });\n\t}\n\n\tfunction noop() {}\n\n\tfunction getNoop() {\n\t  /* eslint no-shadow:0 */\n\t  /* istanbul ignore next */\n\t  return function noop() {};\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar stringify = __webpack_require__(2);\n\n\tvar _require = __webpack_require__(3);\n\n\tvar typeOf = _require.typeOf;\n\tvar each = _require.each;\n\tvar copy = _require.copy;\n\tvar getCheckerDisplay = _require.getCheckerDisplay;\n\tvar isError = _require.isError;\n\tvar arrayify = _require.arrayify;\n\tvar list = _require.list;\n\tvar getError = _require.getError;\n\tvar nAtL = _require.nAtL;\n\tvar t = _require.t;\n\tvar checkerHelpers = _require.checkerHelpers;\n\tvar undef = _require.undef;\n\tvar setupChecker = checkerHelpers.setupChecker;\n\n\tvar checkers = module.exports = getCheckers();\n\tmodule.exports.getCheckers = getCheckers;\n\n\tfunction getCheckers(disabled) {\n\t  return {\n\t    array: typeOfCheckGetter('Array'),\n\t    bool: typeOfCheckGetter('Boolean'),\n\t    number: typeOfCheckGetter('Number'),\n\t    string: typeOfCheckGetter('String'),\n\t    func: funcCheckGetter(),\n\t    object: objectCheckGetter(),\n\n\t    emptyObject: emptyObjectCheckGetter(),\n\n\t    instanceOf: instanceCheckGetter,\n\t    oneOf: oneOfCheckGetter,\n\t    oneOfType: oneOfTypeCheckGetter,\n\n\t    arrayOf: arrayOfCheckGetter,\n\t    objectOf: objectOfCheckGetter,\n\t    typeOrArrayOf: typeOrArrayOfCheckGetter,\n\n\t    range: rangeCheckGetter,\n\t    lessThan: lessThanCheckGetter,\n\t    greaterThan: greaterThanCheckGetter,\n\n\t    shape: getShapeCheckGetter(),\n\t    args: argumentsCheckerGetter(),\n\n\t    any: anyCheckGetter(),\n\t    'null': nullCheckGetter()\n\n\t  };\n\n\t  function typeOfCheckGetter(type) {\n\t    var lType = type.toLowerCase();\n\t    return setupChecker(function typeOfCheckerDefinition(val, name, location) {\n\t      if (typeOf(val) !== lType) {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\t  }\n\n\t  function funcCheckGetter() {\n\t    var type = 'Function';\n\t    var functionChecker = setupChecker(function functionCheckerDefinition(val, name, location) {\n\t      if (typeOf(val) !== 'function') {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\n\t    functionChecker.withProperties = function getWithPropertiesChecker(properties) {\n\t      var apiError = checkers.objectOf(checkers.func)(properties, 'properties', 'apiCheck.func.withProperties');\n\t      if (isError(apiError)) {\n\t        throw apiError;\n\t      }\n\t      var shapeChecker = checkers.shape(properties, true);\n\t      shapeChecker.type.__apiCheckData.type = 'func.withProperties';\n\n\t      return setupChecker(function functionWithPropertiesChecker(val, name, location) {\n\t        var notFunction = checkers.func(val, name, location);\n\t        if (isError(notFunction)) {\n\t          return notFunction;\n\t        }\n\t        return shapeChecker(val, name, location);\n\t      }, { type: shapeChecker.type, shortType: 'func.withProperties' }, disabled);\n\t    };\n\t    return functionChecker;\n\t  }\n\n\t  function objectCheckGetter() {\n\t    var type = 'Object';\n\t    var nullType = 'Object (null ok)';\n\t    var objectNullOkChecker = setupChecker(function objectNullOkCheckerDefinition(val, name, location) {\n\t      if (typeOf(val) !== 'object') {\n\t        return getError(name, location, nullType);\n\t      }\n\t    }, { type: nullType }, disabled);\n\n\t    var objectChecker = setupChecker(function objectCheckerDefinition(val, name, location) {\n\t      if (val === null || isError(objectNullOkChecker(val, name, location))) {\n\t        return getError(name, location, objectChecker.type);\n\t      }\n\t    }, { type: type, nullOk: objectNullOkChecker }, disabled);\n\n\t    return objectChecker;\n\t  }\n\n\t  function instanceCheckGetter(classToCheck) {\n\t    return setupChecker(function instanceCheckerDefinition(val, name, location) {\n\t      if (!(val instanceof classToCheck)) {\n\t        return getError(name, location, classToCheck.name);\n\t      }\n\t    }, { type: classToCheck.name }, disabled);\n\t  }\n\n\t  function oneOfCheckGetter(enums) {\n\t    var type = {\n\t      __apiCheckData: { optional: false, type: 'enum' },\n\t      'enum': enums\n\t    };\n\t    var shortType = 'oneOf[' + enums.map(function (enm) {\n\t      return stringify(enm);\n\t    }).join(', ') + ']';\n\t    return setupChecker(function oneOfCheckerDefinition(val, name, location) {\n\t      if (!enums.some(function (enm) {\n\t        return enm === val;\n\t      })) {\n\t        return getError(name, location, shortType);\n\t      }\n\t    }, { type: type, shortType: shortType }, disabled);\n\t  }\n\n\t  function oneOfTypeCheckGetter(typeCheckers) {\n\t    var checkersDisplay = typeCheckers.map(function (checker) {\n\t      return getCheckerDisplay(checker, { short: true });\n\t    });\n\t    var shortType = 'oneOfType[' + checkersDisplay.join(', ') + ']';\n\t    function type(options) {\n\t      if (options && options.short) {\n\t        return shortType;\n\t      }\n\t      return typeCheckers.map(function (checker) {\n\t        return getCheckerDisplay(checker, options);\n\t      });\n\t    }\n\t    type.__apiCheckData = { optional: false, type: 'oneOfType' };\n\t    return setupChecker(function oneOfTypeCheckerDefinition(val, name, location) {\n\t      if (!typeCheckers.some(function (checker) {\n\t        return !isError(checker(val, name, location));\n\t      })) {\n\t        return getError(name, location, shortType);\n\t      }\n\t    }, { type: type, shortType: shortType }, disabled);\n\t  }\n\n\t  function arrayOfCheckGetter(checker) {\n\t    var shortCheckerDisplay = getCheckerDisplay(checker, { short: true });\n\t    var shortType = 'arrayOf[' + shortCheckerDisplay + ']';\n\n\t    function type(options) {\n\t      if (options && options.short) {\n\t        return shortType;\n\t      }\n\t      return getCheckerDisplay(checker, options);\n\t    }\n\t    type.__apiCheckData = { optional: false, type: 'arrayOf' };\n\n\t    return setupChecker(function arrayOfCheckerDefinition(val, name, location) {\n\t      if (isError(checkers.array(val)) || !val.every(function (item) {\n\t        return !isError(checker(item));\n\t      })) {\n\t        return getError(name, location, shortType);\n\t      }\n\t    }, { type: type, shortType: shortType }, disabled);\n\t  }\n\n\t  function objectOfCheckGetter(checker) {\n\t    var checkerDisplay = getCheckerDisplay(checker, { short: true });\n\t    var shortType = 'objectOf[' + checkerDisplay + ']';\n\n\t    function type(options) {\n\t      if (options && options.short) {\n\t        return shortType;\n\t      }\n\t      return getCheckerDisplay(checker, options);\n\t    }\n\t    type.__apiCheckData = { optional: false, type: 'objectOf' };\n\n\t    return setupChecker(function objectOfCheckerDefinition(val, name, location) {\n\t      var notObject = checkers.object(val, name, location);\n\t      if (isError(notObject)) {\n\t        return notObject;\n\t      }\n\t      var allTypesSuccess = each(val, function (item, key) {\n\t        if (isError(checker(item, key, name))) {\n\t          return false;\n\t        }\n\t      });\n\t      if (!allTypesSuccess) {\n\t        return getError(name, location, shortType);\n\t      }\n\t    }, { type: type, shortType: shortType }, disabled);\n\t  }\n\n\t  function typeOrArrayOfCheckGetter(checker) {\n\t    var checkerDisplay = getCheckerDisplay(checker, { short: true });\n\t    var shortType = 'typeOrArrayOf[' + checkerDisplay + ']';\n\n\t    function type(options) {\n\t      if (options && options.short) {\n\t        return shortType;\n\t      }\n\t      return getCheckerDisplay(checker, options);\n\t    }\n\n\t    type.__apiCheckData = { optional: false, type: 'typeOrArrayOf' };\n\t    return setupChecker(function typeOrArrayOfDefinition(val, name, location, obj) {\n\t      if (isError(checkers.oneOfType([checker, checkers.arrayOf(checker)])(val, name, location, obj))) {\n\t        return getError(name, location, shortType);\n\t      }\n\t    }, { type: type, shortType: shortType }, disabled);\n\t  }\n\n\t  function getShapeCheckGetter() {\n\t    function shapeCheckGetter(shape, nonObject) {\n\t      var shapeTypes = {};\n\t      each(shape, function (checker, prop) {\n\t        shapeTypes[prop] = getCheckerDisplay(checker);\n\t      });\n\t      function type() {\n\t        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t        var ret = {};\n\t        var terse = options.terse;\n\t        var obj = options.obj;\n\t        var addHelpers = options.addHelpers;\n\n\t        var parentRequired = options.required;\n\t        each(shape, function (checker, prop) {\n\t          /* eslint complexity:[2, 6] */\n\t          var specified = obj && obj.hasOwnProperty(prop);\n\t          var required = undef(parentRequired) ? !checker.isOptional : parentRequired;\n\t          if (!terse || (specified || !checker.isOptional)) {\n\t            ret[prop] = getCheckerDisplay(checker, { terse: terse, obj: obj && obj[prop], required: required, addHelpers: addHelpers });\n\t          }\n\t          if (addHelpers) {\n\t            modifyTypeDisplayToHelpOut(ret, prop, specified, checker, required);\n\t          }\n\t        });\n\t        return ret;\n\n\t        function modifyTypeDisplayToHelpOut(theRet, prop, specified, checker, required) {\n\t          if (!specified && required && !checker.isOptional) {\n\t            var item = 'ITEM';\n\t            if (checker.type && checker.type.__apiCheckData) {\n\t              item = checker.type.__apiCheckData.type.toUpperCase();\n\t            }\n\t            addHelper('missing', 'MISSING THIS ' + item, ' <-- YOU ARE MISSING THIS');\n\t          } else if (specified) {\n\t            var error = checker(obj[prop], prop, null, obj);\n\t            if (isError(error)) {\n\t              addHelper('error', 'THIS IS THE PROBLEM: ' + error.message, ' <-- THIS IS THE PROBLEM: ' + error.message);\n\t            }\n\t          }\n\n\t          function addHelper(property, objectMessage, stringMessage) {\n\t            if (typeof theRet[prop] === 'string') {\n\t              theRet[prop] += stringMessage;\n\t            } else {\n\t              theRet[prop].__apiCheckData[property] = objectMessage;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      type.__apiCheckData = { strict: false, optional: false, type: 'shape' };\n\t      var shapeChecker = setupChecker(function shapeCheckerDefinition(val, name, location) {\n\t        /* eslint complexity:[2, 6] */\n\t        var isObject = !nonObject && checkers.object(val, name, location);\n\t        if (isError(isObject)) {\n\t          return isObject;\n\t        }\n\t        var shapePropError = undefined;\n\t        location = location ? location + (name ? '/' : '') : '';\n\t        name = name || '';\n\t        each(shape, function (checker, prop) {\n\t          if (val.hasOwnProperty(prop) || !checker.isOptional) {\n\t            shapePropError = checker(val[prop], prop, '' + location + name, val);\n\t            return !isError(shapePropError);\n\t          }\n\t        });\n\t        if (isError(shapePropError)) {\n\t          return shapePropError;\n\t        }\n\t      }, { type: type, shortType: 'shape' }, disabled);\n\n\t      function strictType() {\n\t        return type.apply(undefined, arguments);\n\t      }\n\n\t      strictType.__apiCheckData = copy(shapeChecker.type.__apiCheckData);\n\t      strictType.__apiCheckData.strict = true;\n\t      shapeChecker.strict = setupChecker(function strictShapeCheckerDefinition(val, name, location) {\n\t        var shapeError = shapeChecker(val, name, location);\n\t        if (isError(shapeError)) {\n\t          return shapeError;\n\t        }\n\t        var allowedProperties = Object.keys(shape);\n\t        var extraProps = Object.keys(val).filter(function (prop) {\n\t          return allowedProperties.indexOf(prop) === -1;\n\t        });\n\t        if (extraProps.length) {\n\t          return new Error(nAtL(name, location) + ' cannot have extra properties: ' + t(extraProps.join('`, `')) + '.' + ('It is limited to ' + t(allowedProperties.join('`, `'))));\n\t        }\n\t      }, { type: strictType, shortType: 'strict shape' }, disabled);\n\n\t      return shapeChecker;\n\t    }\n\n\t    shapeCheckGetter.ifNot = function ifNot(otherProps, propChecker) {\n\t      if (!Array.isArray(otherProps)) {\n\t        otherProps = [otherProps];\n\t      }\n\t      var description = undefined;\n\t      if (otherProps.length === 1) {\n\t        description = 'specified only if ' + otherProps[0] + ' is not specified';\n\t      } else {\n\t        description = 'specified only if none of the following are specified: [' + list(otherProps, ', ', 'and ') + ']';\n\t      }\n\t      var shortType = 'ifNot[' + otherProps.join(', ') + ']';\n\t      var type = getTypeForShapeChild(propChecker, description, shortType);\n\t      return setupChecker(function ifNotChecker(prop, propName, location, obj) {\n\t        var propExists = obj && obj.hasOwnProperty(propName);\n\t        var otherPropsExist = otherProps.some(function (otherProp) {\n\t          return obj && obj.hasOwnProperty(otherProp);\n\t        });\n\t        if (propExists === otherPropsExist) {\n\t          return getError(propName, location, type);\n\t        } else if (propExists) {\n\t          return propChecker(prop, propName, location, obj);\n\t        }\n\t      }, { notRequired: true, type: type, shortType: shortType }, disabled);\n\t    };\n\n\t    shapeCheckGetter.onlyIf = function onlyIf(otherProps, propChecker) {\n\t      otherProps = arrayify(otherProps);\n\t      var description = undefined;\n\t      if (otherProps.length === 1) {\n\t        description = 'specified only if ' + otherProps[0] + ' is also specified';\n\t      } else {\n\t        description = 'specified only if all of the following are specified: [' + list(otherProps, ', ', 'and ') + ']';\n\t      }\n\t      var shortType = 'onlyIf[' + otherProps.join(', ') + ']';\n\t      var type = getTypeForShapeChild(propChecker, description, shortType);\n\t      return setupChecker(function onlyIfCheckerDefinition(prop, propName, location, obj) {\n\t        var othersPresent = otherProps.every(function (property) {\n\t          return obj.hasOwnProperty(property);\n\t        });\n\t        if (!othersPresent) {\n\t          return getError(propName, location, type);\n\t        } else {\n\t          return propChecker(prop, propName, location, obj);\n\t        }\n\t      }, { type: type, shortType: shortType }, disabled);\n\t    };\n\n\t    shapeCheckGetter.requiredIfNot = function shapeRequiredIfNot(otherProps, propChecker) {\n\t      if (!Array.isArray(otherProps)) {\n\t        otherProps = [otherProps];\n\t      }\n\t      return getRequiredIfNotChecker(false, otherProps, propChecker);\n\t    };\n\n\t    shapeCheckGetter.requiredIfNot.all = function shapeRequiredIfNotAll(otherProps, propChecker) {\n\t      if (!Array.isArray(otherProps)) {\n\t        throw new Error('requiredIfNot.all must be passed an array');\n\t      }\n\t      return getRequiredIfNotChecker(true, otherProps, propChecker);\n\t    };\n\n\t    function getRequiredIfNotChecker(all, otherProps, propChecker) {\n\t      var props = t(otherProps.join(', '));\n\t      var ifProps = 'if ' + (all ? 'all of' : 'at least one of');\n\t      var description = 'specified ' + ifProps + ' these are not specified: ' + props + ' (otherwise it\\'s optional)';\n\t      var shortType = 'requiredIfNot' + (all ? '.all' : '') + '[' + otherProps.join(', ') + '}]';\n\t      var type = getTypeForShapeChild(propChecker, description, shortType);\n\t      return setupChecker(function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t        var propExists = obj && obj.hasOwnProperty(propName);\n\t        var iteration = all ? 'every' : 'some';\n\t        var otherPropsExist = otherProps[iteration](function (otherProp) {\n\t          return obj && obj.hasOwnProperty(otherProp);\n\t        });\n\t        if (!otherPropsExist && !propExists) {\n\t          return getError(propName, location, type);\n\t        } else if (propExists) {\n\t          return propChecker(prop, propName, location, obj);\n\t        }\n\t      }, { type: type, notRequired: true }, disabled);\n\t    }\n\n\t    return shapeCheckGetter;\n\n\t    function getTypeForShapeChild(propChecker, description, shortType) {\n\t      function type(options) {\n\t        if (options && options.short) {\n\t          return shortType;\n\t        }\n\t        return getCheckerDisplay(propChecker);\n\t      }\n\t      type.__apiCheckData = { optional: false, type: 'ifNot', description: description };\n\t      return type;\n\t    }\n\t  }\n\n\t  function argumentsCheckerGetter() {\n\t    var type = 'function arguments';\n\t    return setupChecker(function argsCheckerDefinition(val, name, location) {\n\t      if (Array.isArray(val) || isError(checkers.object(val)) || isError(checkers.number(val.length))) {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\t  }\n\n\t  function anyCheckGetter() {\n\t    return setupChecker(function anyCheckerDefinition() {\n\t      // don't do anything\n\t    }, { type: 'any' }, disabled);\n\t  }\n\n\t  function nullCheckGetter() {\n\t    var type = 'null';\n\t    return setupChecker(function nullChecker(val, name, location) {\n\t      if (val !== null) {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\t  }\n\n\t  function rangeCheckGetter(min, max) {\n\t    var type = 'Range (' + min + ' - ' + max + ')';\n\t    return setupChecker(function rangeChecker(val, name, location) {\n\t      if (typeof val !== 'number' || val < min || val > max) {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\t  }\n\n\t  function lessThanCheckGetter(min) {\n\t    var type = 'lessThan[' + min + ']';\n\t    return setupChecker(function lessThanChecker(val, name, location) {\n\t      if (typeof val !== 'number' || val > min) {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\t  }\n\n\t  function greaterThanCheckGetter(max) {\n\t    var type = 'greaterThan[' + max + ']';\n\t    return setupChecker(function greaterThanChecker(val, name, location) {\n\t      if (typeof val !== 'number' || val < max) {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\t  }\n\n\t  function emptyObjectCheckGetter() {\n\t    var type = 'empty object';\n\t    return setupChecker(function emptyObjectChecker(val, name, location) {\n\t      if (typeOf(val) !== 'object' || val === null || Object.keys(val).length) {\n\t        return getError(name, location, type);\n\t      }\n\t    }, { type: type }, disabled);\n\t  }\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/api-check/dist/api-check.js\n ** module id = 11\n ** module chunks = 0\n **/","import mdThemeManipulator from './md-theme-manipulator';\r\n\r\nexport default [mdThemeManipulator];\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/runs/index.js\n **/","export default (formlyConfigProvider) => {\r\n\r\n    function addIfNotPresent(nodes, attr, val) {\r\n        angular.forEach(nodes, (node) => {\r\n            if (!node.getAttribute(attr)) {\r\n                node.setAttribute(attr, val)\r\n            }\r\n        });\r\n    }\r\n\r\n    function getNgModelNodes(node) {\r\n        const query = \"[ng-model], [data-ng-model]\";\r\n\r\n        return node.querySelectorAll(query)\r\n    }\r\n\r\n    formlyConfigProvider.templateManipulators.preWrapper.push((template, options) => {\r\n        if (angular.isDefined(options.templateOptions.theme)) {\r\n            const node = document.createElement('div');\r\n            const skip = options.extras && options.extras.skipNgModelAttrsManipulator;\r\n\r\n            if (skip === true) {\r\n                return template\r\n            }\r\n            node.innerHTML = template;\r\n            const modelNodes = getNgModelNodes(node);\r\n\r\n            if (!modelNodes || !modelNodes.length) {\r\n                return template;\r\n            }\r\n\r\n            addIfNotPresent(modelNodes, 'md-theme', options.templateOptions.theme);\r\n\r\n            return node.innerHTML;\r\n\r\n        }\r\n        return template;\r\n    });\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/runs/md-theme-manipulator.js\n **/","import inputContainerWrapper from './input-container/input-container';\r\nimport labelWrapper from './label/label';\r\nimport messagesWrapper from './messages/messages';\r\n\r\nexport default [\r\n    inputContainerWrapper,\r\n    labelWrapper,\r\n    messagesWrapper\r\n];\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/index.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setWrapper({\r\n        name: 'inputContainer',\r\n        template: `\r\n        <md-input-container>\r\n            <formly-transclude></formly-transclude>\r\n        </md-input-container>\r\n        `\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/input-container/input-container.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setWrapper({\r\n        name: 'label',\r\n        template: `\r\n        <label for=\"{{id}}\">{{to.label}}{{to.required ? '*' : ''}}</label>\r\n        <formly-transclude></formly-transclude>`,\r\n        apiCheck: (check) => ({\r\n            templateOptions: {\r\n                label: check.string\r\n            }\r\n        })\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/label/label.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setWrapper({\r\n        name: 'messages',\r\n        template: `\r\n        <formly-transclude></formly-transclude>\r\n            <div ng-messages=\"fc.$error\">\r\n                <div ng-repeat=\"(name, message) in ::options.validation.messages\" ng-message-exp=\"name\">\r\n                {{message(fc.$viewValue, fc.$modelValue, this)}}\r\n                </div>\r\n            </div>\r\n        `\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/wrappers/messages/messages.js\n **/","import checkboxType from './checkbox/checkbox';\r\nimport chipsType from './chips/chips';\r\nimport datepickerType from './datepicker/datepicker';\r\nimport inputType from './input/input';\r\nimport radioType from './radio/radio';\r\nimport selectType from './select/select';\r\nimport sliderType from './slider/slider';\r\nimport switchType from './switch/switch';\r\nimport textareaType from './textarea/textarea';\r\n\r\nexport default [\r\n    checkboxType,\r\n    chipsType,\r\n    datepickerType,\r\n    inputType,\r\n    radioType,\r\n    selectType,\r\n    sliderType,\r\n    switchType,\r\n    textareaType\r\n];\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/index.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'checkbox',\r\n        template: `\r\n            <div>\r\n                <md-checkbox ng-model=\"model[options.key]\">\r\n                    {{to.label}}\r\n                </md-checkbox>\r\n            </div>`\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/checkbox/checkbox.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'chips',\r\n        template: `<md-chips ng-model=\"model[options.key]\"></md-chips>`,\r\n        defaultOptions: {\r\n            defaultValue: [],\r\n            ngModelAttrs: {\r\n                placeholder: {attribute: 'placeholder'},\r\n                secondaryPlaceholder: {attribute: 'secondary-placeholder'},\r\n                deleteButtonLabel: {attribute: 'delete-button-label'},\r\n                deleteHint: {attribute: 'delete-hint'}\r\n            }\r\n        },\r\n        apiCheck: (check) => ({\r\n            templateOptions: {\r\n                placeholder: check.string.optional,\r\n                secondaryPlaceholder: check.string.optional,\r\n                deleteButtonLabel: check.string.optional,\r\n                deleteHint: check.string.optional\r\n            }\r\n        })\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/chips/chips.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'datepicker',\r\n        template: `\r\n        <div>\r\n            <md-datepicker ng-model=\"model[options.key]\"></md-datepicker>\r\n        </div>`,\r\n        wrapper: ['messages'],\r\n        defaultOptions: {\r\n            ngModelAttrs: {\r\n                placeholder: {attribute: 'md-placeholder'}\r\n            }\r\n        },\r\n        apiCheck: (check) => ({\r\n            templateOptions: {\r\n                placeholder: check.string.optional,\r\n                minDate: check.instanceOf(Date).optional,\r\n                maxDate: check.instanceOf(Date).optional,\r\n                filterDate: check.func.optional\r\n            }\r\n        })\r\n    });\r\n\r\n    formlyConfigProvider.templateManipulators.preWrapper.push((template, options) => {\r\n        if (angular.isDefined(options.templateOptions.minDate)\r\n            || angular.isDefined(options.templateOptions.maxDate)\r\n            || angular.isDefined(options.templateOptions.filterDate)) {\r\n\r\n            const dateConfig = {\r\n                min: options.templateOptions.minDate || undefined,\r\n                max: options.templateOptions.maxDate || undefined,\r\n                filter: options.templateOptions.filterDate || undefined\r\n            };\r\n            const node = document.createElement('div');\r\n\r\n            node.innerHTML = template;\r\n            const datepickerNode = node.querySelector('md-datepicker');\r\n\r\n            if (datepickerNode) {\r\n                if (dateConfig.min) {\r\n                    datepickerNode.setAttribute('md-min-date', 'to.minDate');\r\n                }\r\n                if (dateConfig.max) {\r\n                    datepickerNode.setAttribute('md-max-date', 'to.maxDate');\r\n                }\r\n                if (dateConfig.filter) {\r\n                    datepickerNode.setAttribute('md-date-filter', 'to.filterDate');\r\n                }\r\n            }\r\n            return node.innerHTML;\r\n        }\r\n\r\n\r\n        return template;\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/datepicker/datepicker.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'input',\r\n        template: `<input ng-model=\"model[options.key]\">`,\r\n        wrapper: ['label', 'messages', 'inputContainer'],\r\n        defaultOptions: {\r\n            ngModelAttrs: {\r\n                mdMaxlength: {\r\n                    bound: 'md-maxlength'\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/input/input.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'radio',\r\n        template: `\r\n        <md-radio-group ng-model=\"model[options.key]\">\r\n            <md-radio-button\r\n                ng-repeat=\"option in to.options\"\r\n                ng-value=\"option[to.valueProp || 'value']\">\r\n                {{option[to.labelProp || 'name']}}\r\n            </md-radio-button>\r\n        </md-radio-group>\r\n        `,\r\n        apiCheck: (check) => ({\r\n            templateOptions: {\r\n                options: check.arrayOf(check.object),\r\n                labelProp: check.string.optional,\r\n                valueProp: check.string.optional\r\n            }\r\n        })\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/radio/radio.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'select',\r\n        template: `\r\n        <md-select ng-model=\"model[options.key]\">\r\n    <md-option ng-repeat=\"option in to.options\" ng-value=\"option[to.valueProp || 'value']\">\r\n        {{ option[to.labelProp || 'name'] }}\r\n    </md-option>\r\n</md-select>\r\n        `,\r\n        wrapper: ['label', 'messages', 'inputContainer'],\r\n        defaultOptions: {\r\n            ngModelAttrs: {\r\n                multiple: {bound: 'multiple'}\r\n            }\r\n        },\r\n        apiCheck: (check) => ({\r\n            templateOptions: {\r\n                options: check.arrayOf(check.object),\r\n                multiple: check.bool.optional,\r\n                labelProp: check.string.optional,\r\n                valueProp: check.string.optional\r\n            }\r\n        })\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/select/select.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'slider',\r\n        template: `<md-slider ng-model=\"model[options.key]\"></md-slider>`,\r\n        defaultOptions: {\r\n            ngModelAttrs: {\r\n                min: {\r\n                    bound: 'min',\r\n                    attribute: 'min'\r\n                },\r\n                max: {\r\n                    bound: 'max',\r\n                    attribute: 'max'\r\n                },\r\n                step: {\r\n                    bound: 'step',\r\n                    attribute: 'step'\r\n                },\r\n                discrete: {\r\n                    bound: 'md-discrete'\r\n                }\r\n            }\r\n        },\r\n        apiCheck: (check) => ({\r\n            templateOptions: {\r\n                min: check.number.optional,\r\n                max: check.number.optional,\r\n                step: check.number.optional,\r\n                discrete: check.bool.optional\r\n            }\r\n        })\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/slider/slider.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'switch',\r\n        template: `<md-switch ng-model=\"model[options.key]\">{{to.label}}</md-switch>`\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/switch/switch.js\n **/","export default (formlyConfigProvider) => {\r\n    formlyConfigProvider.setType({\r\n        name: 'textarea',\r\n        template: `<textarea ng-model=\"model[options.key]\"></textarea>`,\r\n        wrapper: ['label', 'messages', 'inputContainer'],\r\n        defaultOptions: {\r\n            ngModelAttrs: {\r\n                rows: {attribute: 'rows'},\r\n                cols: {attribute: 'cols'}\r\n            }\r\n        },\r\n        apiCheck: (check) => ({\r\n            templateOptions: {\r\n                rows: check.number.optional,\r\n                cols: check.number.optional\r\n            }\r\n        })\r\n    });\r\n}\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Moje/angular-formly-packages/packages/wieldo_angular-formly-templates-material/src/types/textarea/textarea.js\n **/"],"sourceRoot":""}